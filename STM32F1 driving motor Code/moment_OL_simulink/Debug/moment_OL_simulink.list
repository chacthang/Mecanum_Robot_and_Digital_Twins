
moment_OL_simulink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080068e8  080068e8  000078e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d2c  08006d2c  000081d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006d2c  08006d2c  000081d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d2c  08006d2c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d30  08006d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006d34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  200001d4  08006f08  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08006f08  00008474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c222  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db8  00000000  00000000  0001441f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000161d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f2  00000000  00000000  00016e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d0  00000000  00000000  00017882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e490  00000000  00000000  0002ff52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c060  00000000  00000000  0003e3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  000ca488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ceb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080068d0 	.word	0x080068d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080068d0 	.word	0x080068d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_f2iz>:
 8000adc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ae0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ae4:	d30f      	bcc.n	8000b06 <__aeabi_f2iz+0x2a>
 8000ae6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_f2iz+0x30>
 8000af0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000af4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afc:	fa23 f002 	lsr.w	r0, r3, r2
 8000b00:	bf18      	it	ne
 8000b02:	4240      	negne	r0, r0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b10:	d101      	bne.n	8000b16 <__aeabi_f2iz+0x3a>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d105      	bne.n	8000b22 <__aeabi_f2iz+0x46>
 8000b16:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b1a:	bf08      	it	eq
 8000b1c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2lz>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	4604      	mov	r4, r0
 8000b30:	460d      	mov	r5, r1
 8000b32:	f7ff ff3b 	bl	80009ac <__aeabi_dcmplt>
 8000b36:	b928      	cbnz	r0, 8000b44 <__aeabi_d2lz+0x1c>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	4629      	mov	r1, r5
 8000b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b40:	f000 b80a 	b.w	8000b58 <__aeabi_d2ulz>
 8000b44:	4620      	mov	r0, r4
 8000b46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b4a:	f000 f805 	bl	8000b58 <__aeabi_d2ulz>
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2ulz>:
 8000b58:	b5d0      	push	{r4, r6, r7, lr}
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <__aeabi_d2ulz+0x34>)
 8000b5e:	4606      	mov	r6, r0
 8000b60:	460f      	mov	r7, r1
 8000b62:	f7ff fcb1 	bl	80004c8 <__aeabi_dmul>
 8000b66:	f7ff ff49 	bl	80009fc <__aeabi_d2uiz>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	f7ff fc32 	bl	80003d4 <__aeabi_ui2d>
 8000b70:	2200      	movs	r2, #0
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <__aeabi_d2ulz+0x38>)
 8000b74:	f7ff fca8 	bl	80004c8 <__aeabi_dmul>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	4639      	mov	r1, r7
 8000b80:	f7ff faea 	bl	8000158 <__aeabi_dsub>
 8000b84:	f7ff ff3a 	bl	80009fc <__aeabi_d2uiz>
 8000b88:	4621      	mov	r1, r4
 8000b8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b8c:	3df00000 	.word	0x3df00000
 8000b90:	41f00000 	.word	0x41f00000

08000b94 <PWM_3>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_3(int a, int b)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	if (a>0)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd08      	ble.n	8000bb6 <PWM_3+0x22>
	{
	    __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <PWM_3+0x74>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,a);
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <PWM_3+0x74>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bb4:	e00b      	b.n	8000bce <PWM_3+0x3a>
	}
	else
	{
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,abs(a));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bbc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <PWM_3+0x74>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_2,0);
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <PWM_3+0x74>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if (b>0)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dd08      	ble.n	8000be6 <PWM_3+0x52>
	{
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,0);
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <PWM_3+0x74>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,b);
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <PWM_3+0x74>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	641a      	str	r2, [r3, #64]	@ 0x40
	else
	{
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,abs(b));
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,0);
	}
}
 8000be4:	e00b      	b.n	8000bfe <PWM_3+0x6a>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,abs(b));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <PWM_3+0x74>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_4,0);
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <PWM_3+0x74>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000248 	.word	0x20000248

08000c0c <PWM_4>:
void PWM_4(int c, int d)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	if (c>0)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd08      	ble.n	8000c2e <PWM_4+0x22>
	{
	    __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,c);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <PWM_4+0x74>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,0);
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <PWM_4+0x74>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c2c:	e00b      	b.n	8000c46 <PWM_4+0x3a>
	}
	else
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,0);
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <PWM_4+0x74>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,abs(c));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c3c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <PWM_4+0x74>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	if (d>0)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dd08      	ble.n	8000c5e <PWM_4+0x52>
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,d);
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <PWM_4+0x74>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <PWM_4+0x74>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40
	else
	{
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0);
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,abs(d));
	}
}
 8000c5c:	e00b      	b.n	8000c76 <PWM_4+0x6a>
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0);
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <PWM_4+0x74>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,abs(d));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c6c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <PWM_4+0x74>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000290 	.word	0x20000290
 8000c84:	00000000 	.word	0x00000000

08000c88 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == huart2.Instance)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4bb6      	ldr	r3, [pc, #728]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 81c8 	bne.w	800102e <HAL_UART_RxCpltCallback+0x3a6>
	{
	    if (rx_data_1[0] == '\n')
 8000c9e:	4bb5      	ldr	r3, [pc, #724]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b0a      	cmp	r3, #10
 8000ca4:	f040 80c5 	bne.w	8000e32 <HAL_UART_RxCpltCallback+0x1aa>
	    {
	        char *token;
	        int wheel_index = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
	        token = strtok((char *)rx_buffer, ";");
 8000cac:	49b2      	ldr	r1, [pc, #712]	@ (8000f78 <HAL_UART_RxCpltCallback+0x2f0>)
 8000cae:	48b3      	ldr	r0, [pc, #716]	@ (8000f7c <HAL_UART_RxCpltCallback+0x2f4>)
 8000cb0:	f003 feee 	bl	8004a90 <strtok>
 8000cb4:	60f8      	str	r0, [r7, #12]
	        while (token != NULL && wheel_index < 4)
 8000cb6:	e014      	b.n	8000ce2 <HAL_UART_RxCpltCallback+0x5a>
	        {
	            wheel_speed[wheel_index++] = atof(token);
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f002 ffbf 	bl	8003c3c <atof>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	68bc      	ldr	r4, [r7, #8]
 8000cc4:	1c61      	adds	r1, r4, #1
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f7ff feb6 	bl	8000a3c <__aeabi_d2f>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4aab      	ldr	r2, [pc, #684]	@ (8000f80 <HAL_UART_RxCpltCallback+0x2f8>)
 8000cd4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	            token = strtok(NULL, ";");
 8000cd8:	49a7      	ldr	r1, [pc, #668]	@ (8000f78 <HAL_UART_RxCpltCallback+0x2f0>)
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f003 fed8 	bl	8004a90 <strtok>
 8000ce0:	60f8      	str	r0, [r7, #12]
	        while (token != NULL && wheel_index < 4)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_UART_RxCpltCallback+0x66>
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	dde4      	ble.n	8000cb8 <HAL_UART_RxCpltCallback+0x30>
	        }
	        command = rx_buffer[0];
 8000cee:	4ba3      	ldr	r3, [pc, #652]	@ (8000f7c <HAL_UART_RxCpltCallback+0x2f4>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	4ba4      	ldr	r3, [pc, #656]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000cf4:	701a      	strb	r2, [r3, #0]
	            {
	                wheel_speed[i] = -3.1416;
	            }
	        }*/

	        pwm[0] = (wheel_speed[0]/11.5192)*999;
 8000cf6:	4ba2      	ldr	r3, [pc, #648]	@ (8000f80 <HAL_UART_RxCpltCallback+0x2f8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fb8c 	bl	8000418 <__aeabi_f2d>
 8000d00:	a397      	add	r3, pc, #604	@ (adr r3, 8000f60 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fd09 	bl	800071c <__aeabi_ddiv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	a395      	add	r3, pc, #596	@ (adr r3, 8000f68 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d18:	f7ff fbd6 	bl	80004c8 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fe8a 	bl	8000a3c <__aeabi_d2f>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a97      	ldr	r2, [pc, #604]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000d2c:	6013      	str	r3, [r2, #0]
	        pwm[1] = (wheel_speed[1]/11.5192)*999;
 8000d2e:	4b94      	ldr	r3, [pc, #592]	@ (8000f80 <HAL_UART_RxCpltCallback+0x2f8>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fb70 	bl	8000418 <__aeabi_f2d>
 8000d38:	a389      	add	r3, pc, #548	@ (adr r3, 8000f60 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3e:	f7ff fced 	bl	800071c <__aeabi_ddiv>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	a387      	add	r3, pc, #540	@ (adr r3, 8000f68 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fbba 	bl	80004c8 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fe6e 	bl	8000a3c <__aeabi_d2f>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a89      	ldr	r2, [pc, #548]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000d64:	6053      	str	r3, [r2, #4]
	        pwm[2] = (wheel_speed[2]/11.5192)*999;
 8000d66:	4b86      	ldr	r3, [pc, #536]	@ (8000f80 <HAL_UART_RxCpltCallback+0x2f8>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fb54 	bl	8000418 <__aeabi_f2d>
 8000d70:	a37b      	add	r3, pc, #492	@ (adr r3, 8000f60 <HAL_UART_RxCpltCallback+0x2d8>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fcd1 	bl	800071c <__aeabi_ddiv>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	a379      	add	r3, pc, #484	@ (adr r3, 8000f68 <HAL_UART_RxCpltCallback+0x2e0>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fb9e 	bl	80004c8 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fe52 	bl	8000a3c <__aeabi_d2f>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a7b      	ldr	r2, [pc, #492]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000d9c:	6093      	str	r3, [r2, #8]
	        pwm[3] = (wheel_speed[3]/11.5192)*999;
 8000d9e:	4b78      	ldr	r3, [pc, #480]	@ (8000f80 <HAL_UART_RxCpltCallback+0x2f8>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fb38 	bl	8000418 <__aeabi_f2d>
 8000da8:	a36d      	add	r3, pc, #436	@ (adr r3, 8000f60 <HAL_UART_RxCpltCallback+0x2d8>)
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	f7ff fcb5 	bl	800071c <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	a36b      	add	r3, pc, #428	@ (adr r3, 8000f68 <HAL_UART_RxCpltCallback+0x2e0>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fb82 	bl	80004c8 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f7ff fe36 	bl	8000a3c <__aeabi_d2f>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a6d      	ldr	r2, [pc, #436]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000dd4:	60d3      	str	r3, [r2, #12]
	        PWM_3((int)pwm[0],(int)pwm[3]);
 8000dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe7e 	bl	8000adc <__aeabi_f2iz>
 8000de0:	4604      	mov	r4, r0
 8000de2:	4b69      	ldr	r3, [pc, #420]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fe78 	bl	8000adc <__aeabi_f2iz>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff fecf 	bl	8000b94 <PWM_3>
	        PWM_4((int)pwm[1],(int)pwm[2]);
 8000df6:	4b64      	ldr	r3, [pc, #400]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe6e 	bl	8000adc <__aeabi_f2iz>
 8000e00:	4604      	mov	r4, r0
 8000e02:	4b61      	ldr	r3, [pc, #388]	@ (8000f88 <HAL_UART_RxCpltCallback+0x300>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fe68 	bl	8000adc <__aeabi_f2iz>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff fefb 	bl	8000c0c <PWM_4>
	        //HAL_UART_Transmit(&huart2, (uint8_t *)wheel_speed, sizeof(wheel_speed), HAL_MAX_DELAY);
	        memset(rx_buffer, 0, 50);
 8000e16:	2232      	movs	r2, #50	@ 0x32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4858      	ldr	r0, [pc, #352]	@ (8000f7c <HAL_UART_RxCpltCallback+0x2f4>)
 8000e1c:	f003 fe1d 	bl	8004a5a <memset>
	        rx_index = 0;
 8000e20:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <HAL_UART_RxCpltCallback+0x304>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	4952      	ldr	r1, [pc, #328]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e2a:	4851      	ldr	r0, [pc, #324]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000e2c:	f002 f9ce 	bl	80031cc <HAL_UART_Receive_IT>
 8000e30:	e00f      	b.n	8000e52 <HAL_UART_RxCpltCallback+0x1ca>
	    }
	    else
	    {
	        rx_buffer[rx_index++] = rx_data_1[0];
 8000e32:	4b56      	ldr	r3, [pc, #344]	@ (8000f8c <HAL_UART_RxCpltCallback+0x304>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	b2d1      	uxtb	r1, r2
 8000e3a:	4a54      	ldr	r2, [pc, #336]	@ (8000f8c <HAL_UART_RxCpltCallback+0x304>)
 8000e3c:	7011      	strb	r1, [r2, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b4c      	ldr	r3, [pc, #304]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e42:	7819      	ldrb	r1, [r3, #0]
 8000e44:	4b4d      	ldr	r3, [pc, #308]	@ (8000f7c <HAL_UART_RxCpltCallback+0x2f4>)
 8000e46:	5499      	strb	r1, [r3, r2]
	        HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	494a      	ldr	r1, [pc, #296]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e4c:	4848      	ldr	r0, [pc, #288]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000e4e:	f002 f9bd 	bl	80031cc <HAL_UART_Receive_IT>
	    }

	    if (command == 'f')
 8000e52:	4b4c      	ldr	r3, [pc, #304]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b66      	cmp	r3, #102	@ 0x66
 8000e58:	d10d      	bne.n	8000e76 <HAL_UART_RxCpltCallback+0x1ee>
	    {
	    	PWM_3(200,200);
 8000e5a:	21c8      	movs	r1, #200	@ 0xc8
 8000e5c:	20c8      	movs	r0, #200	@ 0xc8
 8000e5e:	f7ff fe99 	bl	8000b94 <PWM_3>
	    	PWM_4(200,200);
 8000e62:	21c8      	movs	r1, #200	@ 0xc8
 8000e64:	20c8      	movs	r0, #200	@ 0xc8
 8000e66:	f7ff fed1 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4941      	ldr	r1, [pc, #260]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e6e:	4840      	ldr	r0, [pc, #256]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000e70:	f002 f9ac 	bl	80031cc <HAL_UART_Receive_IT>
                break;
        }
        HAL_UART_Receive_IT(&huart2, &rx_data_1, 1);*/
	}

}
 8000e74:	e0db      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'b')
 8000e76:	4b43      	ldr	r3, [pc, #268]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b62      	cmp	r3, #98	@ 0x62
 8000e7c:	d111      	bne.n	8000ea2 <HAL_UART_RxCpltCallback+0x21a>
	    	PWM_3(-200,-200);
 8000e7e:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000e82:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000e86:	f7ff fe85 	bl	8000b94 <PWM_3>
	    	PWM_4(-200,-200);
 8000e8a:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000e8e:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000e92:	f7ff febb 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	4936      	ldr	r1, [pc, #216]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000e9a:	4835      	ldr	r0, [pc, #212]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000e9c:	f002 f996 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000ea0:	e0c5      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'l')
 8000ea2:	4b38      	ldr	r3, [pc, #224]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b6c      	cmp	r3, #108	@ 0x6c
 8000ea8:	d10f      	bne.n	8000eca <HAL_UART_RxCpltCallback+0x242>
	    	PWM_3(-200,200);
 8000eaa:	21c8      	movs	r1, #200	@ 0xc8
 8000eac:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000eb0:	f7ff fe70 	bl	8000b94 <PWM_3>
	    	PWM_4(200,-200);
 8000eb4:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000eb8:	20c8      	movs	r0, #200	@ 0xc8
 8000eba:	f7ff fea7 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	492c      	ldr	r1, [pc, #176]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000ec2:	482b      	ldr	r0, [pc, #172]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000ec4:	f002 f982 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000ec8:	e0b1      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'r')
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b72      	cmp	r3, #114	@ 0x72
 8000ed0:	d10f      	bne.n	8000ef2 <HAL_UART_RxCpltCallback+0x26a>
	    	PWM_3(200,-200);
 8000ed2:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000ed6:	20c8      	movs	r0, #200	@ 0xc8
 8000ed8:	f7ff fe5c 	bl	8000b94 <PWM_3>
	    	PWM_4(-200,200);
 8000edc:	21c8      	movs	r1, #200	@ 0xc8
 8000ede:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000ee2:	f7ff fe93 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4922      	ldr	r1, [pc, #136]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000eea:	4821      	ldr	r0, [pc, #132]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000eec:	f002 f96e 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000ef0:	e09d      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 's')
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b73      	cmp	r3, #115	@ 0x73
 8000ef8:	d10d      	bne.n	8000f16 <HAL_UART_RxCpltCallback+0x28e>
	    	PWM_3(0,0);
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fe49 	bl	8000b94 <PWM_3>
	    	PWM_4(0,0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fe81 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4919      	ldr	r1, [pc, #100]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f0e:	4818      	ldr	r0, [pc, #96]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000f10:	f002 f95c 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000f14:	e08b      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'a')
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b61      	cmp	r3, #97	@ 0x61
 8000f1c:	d10d      	bne.n	8000f3a <HAL_UART_RxCpltCallback+0x2b2>
	    	PWM_3(0,200);
 8000f1e:	21c8      	movs	r1, #200	@ 0xc8
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fe37 	bl	8000b94 <PWM_3>
	    	PWM_4(200,0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	20c8      	movs	r0, #200	@ 0xc8
 8000f2a:	f7ff fe6f 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4910      	ldr	r1, [pc, #64]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f32:	480f      	ldr	r0, [pc, #60]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000f34:	f002 f94a 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000f38:	e079      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'c')
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b63      	cmp	r3, #99	@ 0x63
 8000f40:	d126      	bne.n	8000f90 <HAL_UART_RxCpltCallback+0x308>
	    	PWM_3(200,0);
 8000f42:	2100      	movs	r1, #0
 8000f44:	20c8      	movs	r0, #200	@ 0xc8
 8000f46:	f7ff fe25 	bl	8000b94 <PWM_3>
	    	PWM_4(0,200);
 8000f4a:	21c8      	movs	r1, #200	@ 0xc8
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fe5d 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f56:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <HAL_UART_RxCpltCallback+0x2e8>)
 8000f58:	f002 f938 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000f5c:	e067      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
 8000f5e:	bf00      	nop
 8000f60:	95182a99 	.word	0x95182a99
 8000f64:	402709d4 	.word	0x402709d4
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	408f3800 	.word	0x408f3800
 8000f70:	200002d8 	.word	0x200002d8
 8000f74:	200001f0 	.word	0x200001f0
 8000f78:	080068e8 	.word	0x080068e8
 8000f7c:	20000204 	.word	0x20000204
 8000f80:	200001f4 	.word	0x200001f4
 8000f84:	20000237 	.word	0x20000237
 8000f88:	20000238 	.word	0x20000238
 8000f8c:	20000236 	.word	0x20000236
	    else if (command == 'd')
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <HAL_UART_RxCpltCallback+0x3b0>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b64      	cmp	r3, #100	@ 0x64
 8000f96:	d10f      	bne.n	8000fb8 <HAL_UART_RxCpltCallback+0x330>
	    	PWM_3(-200,0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000f9e:	f7ff fdf9 	bl	8000b94 <PWM_3>
	    	PWM_4(0,-200);
 8000fa2:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fe30 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	4923      	ldr	r1, [pc, #140]	@ (800103c <HAL_UART_RxCpltCallback+0x3b4>)
 8000fb0:	4823      	ldr	r0, [pc, #140]	@ (8001040 <HAL_UART_RxCpltCallback+0x3b8>)
 8000fb2:	f002 f90b 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000fb6:	e03a      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'e')
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <HAL_UART_RxCpltCallback+0x3b0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b65      	cmp	r3, #101	@ 0x65
 8000fbe:	d10f      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x358>
	    	PWM_3(0,-200);
 8000fc0:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fde5 	bl	8000b94 <PWM_3>
	    	PWM_4(-200,0);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000fd0:	f7ff fe1c 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4919      	ldr	r1, [pc, #100]	@ (800103c <HAL_UART_RxCpltCallback+0x3b4>)
 8000fd8:	4819      	ldr	r0, [pc, #100]	@ (8001040 <HAL_UART_RxCpltCallback+0x3b8>)
 8000fda:	f002 f8f7 	bl	80031cc <HAL_UART_Receive_IT>
}
 8000fde:	e026      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'g')
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_UART_RxCpltCallback+0x3b0>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b67      	cmp	r3, #103	@ 0x67
 8000fe6:	d10f      	bne.n	8001008 <HAL_UART_RxCpltCallback+0x380>
	    	PWM_3(-200,-200);
 8000fe8:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 8000fec:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8000ff0:	f7ff fdd0 	bl	8000b94 <PWM_3>
	    	PWM_4(200,200);
 8000ff4:	21c8      	movs	r1, #200	@ 0xc8
 8000ff6:	20c8      	movs	r0, #200	@ 0xc8
 8000ff8:	f7ff fe08 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	490f      	ldr	r1, [pc, #60]	@ (800103c <HAL_UART_RxCpltCallback+0x3b4>)
 8001000:	480f      	ldr	r0, [pc, #60]	@ (8001040 <HAL_UART_RxCpltCallback+0x3b8>)
 8001002:	f002 f8e3 	bl	80031cc <HAL_UART_Receive_IT>
}
 8001006:	e012      	b.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    else if (command == 'h')
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_UART_RxCpltCallback+0x3b0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b68      	cmp	r3, #104	@ 0x68
 800100e:	d10e      	bne.n	800102e <HAL_UART_RxCpltCallback+0x3a6>
	    	PWM_3(200,200);
 8001010:	21c8      	movs	r1, #200	@ 0xc8
 8001012:	20c8      	movs	r0, #200	@ 0xc8
 8001014:	f7ff fdbe 	bl	8000b94 <PWM_3>
	    	PWM_4(-200,-200);
 8001018:	f06f 01c7 	mvn.w	r1, #199	@ 0xc7
 800101c:	f06f 00c7 	mvn.w	r0, #199	@ 0xc7
 8001020:	f7ff fdf4 	bl	8000c0c <PWM_4>
	    	HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	4905      	ldr	r1, [pc, #20]	@ (800103c <HAL_UART_RxCpltCallback+0x3b4>)
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_UART_RxCpltCallback+0x3b8>)
 800102a:	f002 f8cf 	bl	80031cc <HAL_UART_Receive_IT>
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	20000237 	.word	0x20000237
 800103c:	200001f0 	.word	0x200001f0
 8001040:	200002d8 	.word	0x200002d8

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f000 fc82 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f86c 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 f9ce 	bl	80013f0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001054:	f000 f8ae 	bl	80011b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001058:	f000 f926 	bl	80012a8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800105c:	f000 f99e 	bl	800139c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001060:	2100      	movs	r1, #0
 8001062:	482b      	ldr	r0, [pc, #172]	@ (8001110 <main+0xcc>)
 8001064:	f001 fc92 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001068:	2104      	movs	r1, #4
 800106a:	4829      	ldr	r0, [pc, #164]	@ (8001110 <main+0xcc>)
 800106c:	f001 fc8e 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001070:	2108      	movs	r1, #8
 8001072:	4827      	ldr	r0, [pc, #156]	@ (8001110 <main+0xcc>)
 8001074:	f001 fc8a 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8001078:	210c      	movs	r1, #12
 800107a:	4825      	ldr	r0, [pc, #148]	@ (8001110 <main+0xcc>)
 800107c:	f001 fc86 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001080:	2100      	movs	r1, #0
 8001082:	4824      	ldr	r0, [pc, #144]	@ (8001114 <main+0xd0>)
 8001084:	f001 fc82 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001088:	2104      	movs	r1, #4
 800108a:	4822      	ldr	r0, [pc, #136]	@ (8001114 <main+0xd0>)
 800108c:	f001 fc7e 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001090:	2108      	movs	r1, #8
 8001092:	4820      	ldr	r0, [pc, #128]	@ (8001114 <main+0xd0>)
 8001094:	f001 fc7a 	bl	800298c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001098:	210c      	movs	r1, #12
 800109a:	481e      	ldr	r0, [pc, #120]	@ (8001114 <main+0xd0>)
 800109c:	f001 fc76 	bl	800298c <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <main+0xd4>)
 80010a8:	f000 fff8 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b2:	4819      	ldr	r0, [pc, #100]	@ (8001118 <main+0xd4>)
 80010b4:	f000 fff2 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010be:	4816      	ldr	r0, [pc, #88]	@ (8001118 <main+0xd4>)
 80010c0:	f000 ffec 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ca:	4813      	ldr	r0, [pc, #76]	@ (8001118 <main+0xd4>)
 80010cc:	f000 ffe6 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d6:	4810      	ldr	r0, [pc, #64]	@ (8001118 <main+0xd4>)
 80010d8:	f000 ffe0 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e2:	480d      	ldr	r0, [pc, #52]	@ (8001118 <main+0xd4>)
 80010e4:	f000 ffda 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ee:	480b      	ldr	r0, [pc, #44]	@ (800111c <main+0xd8>)
 80010f0:	f000 ffd4 	bl	800209c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fa:	4808      	ldr	r0, [pc, #32]	@ (800111c <main+0xd8>)
 80010fc:	f000 ffce 	bl	800209c <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	4907      	ldr	r1, [pc, #28]	@ (8001120 <main+0xdc>)
 8001104:	4807      	ldr	r0, [pc, #28]	@ (8001124 <main+0xe0>)
 8001106:	f002 f861 	bl	80031cc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110a:	bf00      	nop
 800110c:	e7fd      	b.n	800110a <main+0xc6>
 800110e:	bf00      	nop
 8001110:	20000248 	.word	0x20000248
 8001114:	20000290 	.word	0x20000290
 8001118:	40010c00 	.word	0x40010c00
 800111c:	40010800 	.word	0x40010800
 8001120:	200001f0 	.word	0x200001f0
 8001124:	200002d8 	.word	0x200002d8

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	@ 0x40
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2228      	movs	r2, #40	@ 0x28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fc8f 	bl	8004a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001152:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001160:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001164:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001166:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4618      	mov	r0, r3
 8001172:	f000 ffab 	bl	80020cc <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800117c:	f000 f99a 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001190:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2102      	movs	r1, #2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fa18 	bl	80025d0 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011a6:	f000 f985 	bl	80014b4 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3740      	adds	r7, #64	@ 0x40
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d6:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011d8:	4a32      	ldr	r2, [pc, #200]	@ (80012a4 <MX_TIM3_Init+0xf0>)
 80011da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80011dc:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011de:	2247      	movs	r2, #71	@ 0x47
 80011e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011fc:	4828      	ldr	r0, [pc, #160]	@ (80012a0 <MX_TIM3_Init+0xec>)
 80011fe:	f001 fb75 	bl	80028ec <HAL_TIM_PWM_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001208:	f000 f954 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4619      	mov	r1, r3
 800121a:	4821      	ldr	r0, [pc, #132]	@ (80012a0 <MX_TIM3_Init+0xec>)
 800121c:	f001 ff28 	bl	8003070 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001226:	f000 f945 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122a:	2360      	movs	r3, #96	@ 0x60
 800122c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	4817      	ldr	r0, [pc, #92]	@ (80012a0 <MX_TIM3_Init+0xec>)
 8001242:	f001 fc45 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800124c:	f000 f932 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2204      	movs	r2, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <MX_TIM3_Init+0xec>)
 8001258:	f001 fc3a 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001262:	f000 f927 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2208      	movs	r2, #8
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <MX_TIM3_Init+0xec>)
 800126e:	f001 fc2f 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001278:	f000 f91c 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	220c      	movs	r2, #12
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <MX_TIM3_Init+0xec>)
 8001284:	f001 fc24 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800128e:	f000 f911 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001292:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <MX_TIM3_Init+0xec>)
 8001294:	f000 f978 	bl	8001588 <HAL_TIM_MspPostInit>

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	@ 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000248 	.word	0x20000248
 80012a4:	40000400 	.word	0x40000400

080012a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ca:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012cc:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <MX_TIM4_Init+0xf0>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012d2:	2247      	movs	r2, #71	@ 0x47
 80012d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012f0:	4828      	ldr	r0, [pc, #160]	@ (8001394 <MX_TIM4_Init+0xec>)
 80012f2:	f001 fafb 	bl	80028ec <HAL_TIM_PWM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012fc:	f000 f8da 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4619      	mov	r1, r3
 800130e:	4821      	ldr	r0, [pc, #132]	@ (8001394 <MX_TIM4_Init+0xec>)
 8001310:	f001 feae 	bl	8003070 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800131a:	f000 f8cb 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131e:	2360      	movs	r3, #96	@ 0x60
 8001320:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	4817      	ldr	r0, [pc, #92]	@ (8001394 <MX_TIM4_Init+0xec>)
 8001336:	f001 fbcb 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001340:	f000 f8b8 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2204      	movs	r2, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4812      	ldr	r0, [pc, #72]	@ (8001394 <MX_TIM4_Init+0xec>)
 800134c:	f001 fbc0 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001356:	f000 f8ad 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2208      	movs	r2, #8
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <MX_TIM4_Init+0xec>)
 8001362:	f001 fbb5 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800136c:	f000 f8a2 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	220c      	movs	r2, #12
 8001374:	4619      	mov	r1, r3
 8001376:	4807      	ldr	r0, [pc, #28]	@ (8001394 <MX_TIM4_Init+0xec>)
 8001378:	f001 fbaa 	bl	8002ad0 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001382:	f000 f897 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001386:	4803      	ldr	r0, [pc, #12]	@ (8001394 <MX_TIM4_Init+0xec>)
 8001388:	f000 f8fe 	bl	8001588 <HAL_TIM_MspPostInit>

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000290 	.word	0x20000290
 8001398:	40000800 	.word	0x40000800

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f001 feaa 	bl	800312c <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f869 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200002d8 	.word	0x200002d8
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a27      	ldr	r2, [pc, #156]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b25      	ldr	r3, [pc, #148]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_GPIO_Init+0xb8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 8001452:	4816      	ldr	r0, [pc, #88]	@ (80014ac <MX_GPIO_Init+0xbc>)
 8001454:	f000 fe22 	bl	800209c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800145e:	4814      	ldr	r0, [pc, #80]	@ (80014b0 <MX_GPIO_Init+0xc0>)
 8001460:	f000 fe1c 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001464:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001468:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <MX_GPIO_Init+0xbc>)
 800147e:	f000 fc89 	bl	8001d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2302      	movs	r3, #2
 8001492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_GPIO_Init+0xc0>)
 800149c:	f000 fc7a 	bl	8001d94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	40010800 	.word	0x40010800

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a14      	ldr	r2, [pc, #80]	@ (800151c <HAL_MspInit+0x5c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_MspInit+0x5c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_MspInit+0x5c>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <HAL_MspInit+0x5c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_MspInit+0x60>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <HAL_MspInit+0x60>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000

08001524 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <HAL_TIM_PWM_MspInit+0x58>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10c      	bne.n	8001550 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_TIM_PWM_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <HAL_TIM_PWM_MspInit+0x5c>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_TIM_PWM_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800154e:	e010      	b.n	8001572 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <HAL_TIM_PWM_MspInit+0x60>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10b      	bne.n	8001572 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_TIM_PWM_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_TIM_PWM_MspInit+0x5c>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_TIM_PWM_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40000400 	.word	0x40000400
 8001580:	40021000 	.word	0x40021000
 8001584:	40000800 	.word	0x40000800

08001588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001650 <HAL_TIM_MspPostInit+0xc8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d130      	bne.n	800160a <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a23      	ldr	r2, [pc, #140]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d8:	23c0      	movs	r3, #192	@ 0xc0
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2302      	movs	r3, #2
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	4619      	mov	r1, r3
 80015ea:	481b      	ldr	r0, [pc, #108]	@ (8001658 <HAL_TIM_MspPostInit+0xd0>)
 80015ec:	f000 fbd2 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f0:	2303      	movs	r3, #3
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2302      	movs	r3, #2
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4619      	mov	r1, r3
 8001602:	4816      	ldr	r0, [pc, #88]	@ (800165c <HAL_TIM_MspPostInit+0xd4>)
 8001604:	f000 fbc6 	bl	8001d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001608:	e01d      	b.n	8001646 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <HAL_TIM_MspPostInit+0xd8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d118      	bne.n	8001646 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_TIM_MspPostInit+0xcc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800162c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	4619      	mov	r1, r3
 8001640:	4806      	ldr	r0, [pc, #24]	@ (800165c <HAL_TIM_MspPostInit+0xd4>)
 8001642:	f000 fba7 	bl	8001d94 <HAL_GPIO_Init>
}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	@ 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40000400 	.word	0x40000400
 8001654:	40021000 	.word	0x40021000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00
 8001660:	40000800 	.word	0x40000800

08001664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1f      	ldr	r2, [pc, #124]	@ (80016fc <HAL_UART_MspInit+0x98>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d137      	bne.n	80016f4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	4a1d      	ldr	r2, [pc, #116]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 800168a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168e:	61d3      	str	r3, [r2, #28]
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_UART_MspInit+0x9c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b4:	2304      	movs	r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	480f      	ldr	r0, [pc, #60]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 80016c8:	f000 fb64 	bl	8001d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016cc:	2308      	movs	r3, #8
 80016ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	4619      	mov	r1, r3
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <HAL_UART_MspInit+0xa0>)
 80016e0:	f000 fb58 	bl	8001d94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2026      	movs	r0, #38	@ 0x26
 80016ea:	f000 fa6a 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ee:	2026      	movs	r0, #38	@ 0x26
 80016f0:	f000 fa83 	bl	8001bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40004400 	.word	0x40004400
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <NMI_Handler+0x4>

08001710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <UsageFault_Handler+0x4>

08001730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f940 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <USART2_IRQHandler+0x10>)
 8001766:	f001 fd57 	bl	8003218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200002d8 	.word	0x200002d8

08001774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <_kill>:

int _kill(int pid, int sig)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178c:	f003 fa22 	bl	8004bd4 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	2216      	movs	r2, #22
 8001794:	601a      	str	r2, [r3, #0]
  return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_exit>:

void _exit (int status)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017aa:	f04f 31ff 	mov.w	r1, #4294967295
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffe7 	bl	8001782 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <_exit+0x12>

080017b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
  }

  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e009      	b.n	8001818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf1      	blt.n	8001804 <_write+0x12>
  }
  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_close>:

int _close(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001850:	605a      	str	r2, [r3, #4]
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f003 f98a 	bl	8004bd4 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20005000 	.word	0x20005000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	20000320 	.word	0x20000320
 80018f4:	20000478 	.word	0x20000478

080018f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001904:	f7ff fff8 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480b      	ldr	r0, [pc, #44]	@ (8001938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800190a:	490c      	ldr	r1, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800190c:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001920:	4c09      	ldr	r4, [pc, #36]	@ (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f003 f957 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7ff fb87 	bl	8001044 <main>
  bx lr
 8001936:	4770      	bx	lr
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001940:	08006d34 	.word	0x08006d34
  ldr r2, =_sbss
 8001944:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001948:	20000474 	.word	0x20000474

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_Init+0x28>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_Init+0x28>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 f923 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fda8 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f93b 	bl	8001c16 <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f903 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000324 	.word	0x20000324

08001a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000324 	.word	0x20000324

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4906      	ldr	r1, [pc, #24]	@ (8001aac <__NVIC_EnableIRQ+0x34>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff90 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff2d 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff42 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff90 	bl	8001b04 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5f 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff35 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d008      	beq.n	8001c58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e020      	b.n	8001c9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 020e 	bic.w	r2, r2, #14
 8001c66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d005      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e051      	b.n	8001d6c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 020e 	bic.w	r2, r2, #14
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a22      	ldr	r2, [pc, #136]	@ (8001d78 <HAL_DMA_Abort_IT+0xd4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d029      	beq.n	8001d46 <HAL_DMA_Abort_IT+0xa2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a21      	ldr	r2, [pc, #132]	@ (8001d7c <HAL_DMA_Abort_IT+0xd8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d022      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x9e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1f      	ldr	r2, [pc, #124]	@ (8001d80 <HAL_DMA_Abort_IT+0xdc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01a      	beq.n	8001d3c <HAL_DMA_Abort_IT+0x98>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d84 <HAL_DMA_Abort_IT+0xe0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d012      	beq.n	8001d36 <HAL_DMA_Abort_IT+0x92>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <HAL_DMA_Abort_IT+0xe4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00a      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x8c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_DMA_Abort_IT+0xe8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d102      	bne.n	8001d2a <HAL_DMA_Abort_IT+0x86>
 8001d24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d28:	e00e      	b.n	8001d48 <HAL_DMA_Abort_IT+0xa4>
 8001d2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d2e:	e00b      	b.n	8001d48 <HAL_DMA_Abort_IT+0xa4>
 8001d30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d34:	e008      	b.n	8001d48 <HAL_DMA_Abort_IT+0xa4>
 8001d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3a:	e005      	b.n	8001d48 <HAL_DMA_Abort_IT+0xa4>
 8001d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d40:	e002      	b.n	8001d48 <HAL_DMA_Abort_IT+0xa4>
 8001d42:	2310      	movs	r3, #16
 8001d44:	e000      	b.n	8001d48 <HAL_DMA_Abort_IT+0xa4>
 8001d46:	2301      	movs	r3, #1
 8001d48:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <HAL_DMA_Abort_IT+0xec>)
 8001d4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
    } 
  }
  return status;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020008 	.word	0x40020008
 8001d7c:	4002001c 	.word	0x4002001c
 8001d80:	40020030 	.word	0x40020030
 8001d84:	40020044 	.word	0x40020044
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	4002006c 	.word	0x4002006c
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b08b      	sub	sp, #44	@ 0x2c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e169      	b.n	800207c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da8:	2201      	movs	r2, #1
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 8158 	bne.w	8002076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a9a      	ldr	r2, [pc, #616]	@ (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d05e      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a98      	ldr	r2, [pc, #608]	@ (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d875      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a98      	ldr	r2, [pc, #608]	@ (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d058      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001ddc:	4a96      	ldr	r2, [pc, #600]	@ (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d86f      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001de2:	4a96      	ldr	r2, [pc, #600]	@ (800203c <HAL_GPIO_Init+0x2a8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d052      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001de8:	4a94      	ldr	r2, [pc, #592]	@ (800203c <HAL_GPIO_Init+0x2a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d869      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dee:	4a94      	ldr	r2, [pc, #592]	@ (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04c      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001df4:	4a92      	ldr	r2, [pc, #584]	@ (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d863      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dfa:	4a92      	ldr	r2, [pc, #584]	@ (8002044 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d046      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001e00:	4a90      	ldr	r2, [pc, #576]	@ (8002044 <HAL_GPIO_Init+0x2b0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d85d      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d82a      	bhi.n	8001e60 <HAL_GPIO_Init+0xcc>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d859      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <HAL_GPIO_Init+0x80>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	08001e7b 	.word	0x08001e7b
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001ec3 	.word	0x08001ec3
 8001e28:	08001ec3 	.word	0x08001ec3
 8001e2c:	08001ec3 	.word	0x08001ec3
 8001e30:	08001ec3 	.word	0x08001ec3
 8001e34:	08001ec3 	.word	0x08001ec3
 8001e38:	08001ec3 	.word	0x08001ec3
 8001e3c:	08001ec3 	.word	0x08001ec3
 8001e40:	08001ec3 	.word	0x08001ec3
 8001e44:	08001ec3 	.word	0x08001ec3
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001ec3 	.word	0x08001ec3
 8001e50:	08001ec3 	.word	0x08001ec3
 8001e54:	08001ec3 	.word	0x08001ec3
 8001e58:	08001e71 	.word	0x08001e71
 8001e5c:	08001e85 	.word	0x08001e85
 8001e60:	4a79      	ldr	r2, [pc, #484]	@ (8002048 <HAL_GPIO_Init+0x2b4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e66:	e02c      	b.n	8001ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e029      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e024      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e01f      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e01a      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e96:	2304      	movs	r3, #4
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e013      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	611a      	str	r2, [r3, #16]
          break;
 8001eae:	e009      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	615a      	str	r2, [r3, #20]
          break;
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          break;
 8001ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	@ 0xff
 8001ec8:	d801      	bhi.n	8001ece <HAL_GPIO_Init+0x13a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_Init+0x13e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	@ 0xff
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_GPIO_Init+0x14c>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x152>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	3b08      	subs	r3, #8
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	210f      	movs	r1, #15
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80b1 	beq.w	8002076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f14:	4b4d      	ldr	r3, [pc, #308]	@ (800204c <HAL_GPIO_Init+0x2b8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	@ (800204c <HAL_GPIO_Init+0x2b8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_GPIO_Init+0x2b8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f2c:	4a48      	ldr	r2, [pc, #288]	@ (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a40      	ldr	r2, [pc, #256]	@ (8002054 <HAL_GPIO_Init+0x2c0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x1ec>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002058 <HAL_GPIO_Init+0x2c4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1e8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3e      	ldr	r2, [pc, #248]	@ (800205c <HAL_GPIO_Init+0x2c8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1e4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002060 <HAL_GPIO_Init+0x2cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1e0>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f80:	2300      	movs	r3, #0
 8001f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f92:	492f      	ldr	r1, [pc, #188]	@ (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fac:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	492c      	ldr	r1, [pc, #176]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fba:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4928      	ldr	r1, [pc, #160]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	68da      	ldr	r2, [r3, #12]
 8001fd8:	4922      	ldr	r1, [pc, #136]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	491e      	ldr	r1, [pc, #120]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4918      	ldr	r1, [pc, #96]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4914      	ldr	r1, [pc, #80]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d021      	beq.n	8002068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	490e      	ldr	r1, [pc, #56]	@ (8002064 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e021      	b.n	8002076 <HAL_GPIO_Init+0x2e2>
 8002032:	bf00      	nop
 8002034:	10320000 	.word	0x10320000
 8002038:	10310000 	.word	0x10310000
 800203c:	10220000 	.word	0x10220000
 8002040:	10210000 	.word	0x10210000
 8002044:	10120000 	.word	0x10120000
 8002048:	10110000 	.word	0x10110000
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002068:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_GPIO_Init+0x304>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	43db      	mvns	r3, r3
 8002070:	4909      	ldr	r1, [pc, #36]	@ (8002098 <HAL_GPIO_Init+0x304>)
 8002072:	4013      	ands	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002078:	3301      	adds	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	f47f ae8e 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	372c      	adds	r7, #44	@ 0x2c
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e272      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8087 	beq.w	80021fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b92      	ldr	r3, [pc, #584]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d00c      	beq.n	8002112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d112      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
 8002104:	4b8c      	ldr	r3, [pc, #560]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d10b      	bne.n	800212a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	4b89      	ldr	r3, [pc, #548]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d06c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x12c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d168      	bne.n	80021f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e24c      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x76>
 8002134:	4b80      	ldr	r3, [pc, #512]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7f      	ldr	r2, [pc, #508]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e02e      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x98>
 800214a:	4b7b      	ldr	r3, [pc, #492]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7a      	ldr	r2, [pc, #488]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b78      	ldr	r3, [pc, #480]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a77      	ldr	r2, [pc, #476]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xbc>
 800216e:	4b72      	ldr	r3, [pc, #456]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a71      	ldr	r2, [pc, #452]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b6f      	ldr	r3, [pc, #444]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xd4>
 8002188:	4b6b      	ldr	r3, [pc, #428]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6a      	ldr	r2, [pc, #424]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b68      	ldr	r3, [pc, #416]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a67      	ldr	r2, [pc, #412]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800219e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fc2a 	bl	8001a00 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fc26 	bl	8001a00 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	@ 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e200      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xe4>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fc16 	bl	8001a00 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fc12 	bl	8001a00 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1ec      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x10c>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002206:	4b4c      	ldr	r3, [pc, #304]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002212:	4b49      	ldr	r3, [pc, #292]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b08      	cmp	r3, #8
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
 800221e:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	4b43      	ldr	r3, [pc, #268]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e1c0      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4939      	ldr	r1, [pc, #228]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002260:	4b36      	ldr	r3, [pc, #216]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff fbcb 	bl	8001a00 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff fbc7 	bl	8001a00 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e1a1      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4927      	ldr	r1, [pc, #156]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <HAL_RCC_OscConfig+0x270>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fbaa 	bl	8001a00 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff fba6 	bl	8001a00 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e180      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d03a      	beq.n	8002350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d019      	beq.n	8002316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <HAL_RCC_OscConfig+0x274>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7ff fb8a 	bl	8001a00 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff fb86 	bl	8001a00 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e160      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_RCC_OscConfig+0x26c>)
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 face 	bl	80028b0 <RCC_Delay>
 8002314:	e01c      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_RCC_OscConfig+0x274>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff fb70 	bl	8001a00 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002322:	e00f      	b.n	8002344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fb6c 	bl	8001a00 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d908      	bls.n	8002344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e146      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	42420000 	.word	0x42420000
 8002340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b92      	ldr	r3, [pc, #584]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e9      	bne.n	8002324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a6 	beq.w	80024aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b8b      	ldr	r3, [pc, #556]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a87      	ldr	r2, [pc, #540]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b85      	ldr	r3, [pc, #532]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b82      	ldr	r3, [pc, #520]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b7f      	ldr	r3, [pc, #508]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7e      	ldr	r2, [pc, #504]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fb2d 	bl	8001a00 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff fb29 	bl	8001a00 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b64      	cmp	r3, #100	@ 0x64
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e103      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	4b75      	ldr	r3, [pc, #468]	@ (8002594 <HAL_RCC_OscConfig+0x4c8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x312>
 80023d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e02d      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x334>
 80023e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a69      	ldr	r2, [pc, #420]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b67      	ldr	r3, [pc, #412]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a66      	ldr	r2, [pc, #408]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	f023 0304 	bic.w	r3, r3, #4
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e01c      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x356>
 8002408:	4b61      	ldr	r3, [pc, #388]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	4b5e      	ldr	r3, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a5d      	ldr	r2, [pc, #372]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x36e>
 8002422:	4b5b      	ldr	r3, [pc, #364]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a5a      	ldr	r2, [pc, #360]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	4b58      	ldr	r3, [pc, #352]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a57      	ldr	r2, [pc, #348]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d015      	beq.n	800246e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fadd 	bl	8001a00 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7ff fad9 	bl	8001a00 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0b1      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCC_OscConfig+0x37e>
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff fac7 	bl	8001a00 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff fac3 	bl	8001a00 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e09b      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249e:	4b3c      	ldr	r3, [pc, #240]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b4:	4b36      	ldr	r3, [pc, #216]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d061      	beq.n	8002584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d146      	bne.n	8002556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <HAL_RCC_OscConfig+0x4cc>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff fa97 	bl	8001a00 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff fa93 	bl	8001a00 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e06d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024fe:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4921      	ldr	r1, [pc, #132]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b1f      	ldr	r3, [pc, #124]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a19      	ldr	r1, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	430b      	orrs	r3, r1
 8002522:	491b      	ldr	r1, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff fa67 	bl	8001a00 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff fa63 	bl	8001a00 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x46a>
 8002554:	e035      	b.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_RCC_OscConfig+0x4cc>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fa50 	bl	8001a00 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7ff fa4c 	bl	8001a00 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e026      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x498>
 8002582:	e01e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e019      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_OscConfig+0x500>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d0      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b67      	ldr	r3, [pc, #412]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4965      	ldr	r1, [pc, #404]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800264e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d040      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e073      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4936      	ldr	r1, [pc, #216]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff f99e 	bl	8001a00 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7ff f99a 	bl	8001a00 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e053      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d210      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4922      	ldr	r1, [pc, #136]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	@ (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <HAL_RCC_ClockConfig+0x1cc>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_RCC_ClockConfig+0x1d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f8fc 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	080068ec 	.word	0x080068ec
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x36>
 80027d2:	e027      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	e027      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f2:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0c5b      	lsrs	r3, r3, #17
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	4a11      	ldr	r2, [pc, #68]	@ (8002844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	fb03 f202 	mul.w	r2, r3, r2
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e004      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0c      	ldr	r2, [pc, #48]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	613b      	str	r3, [r7, #16]
      break;
 8002822:	e002      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002826:	613b      	str	r3, [r7, #16]
      break;
 8002828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282a:	693b      	ldr	r3, [r7, #16]
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	007a1200 	.word	0x007a1200
 8002840:	08006904 	.word	0x08006904
 8002844:	08006914 	.word	0x08006914
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	@ (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	080068fc 	.word	0x080068fc

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffde 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0adb      	lsrs	r3, r3, #11
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	080068fc 	.word	0x080068fc

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fe06 	bl	8001524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 f992 	bl	8002c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e022      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d109      	bne.n	80029ca <HAL_TIM_PWM_Start+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e015      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d109      	bne.n	80029e4 <HAL_TIM_PWM_Start+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e008      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e05e      	b.n	8002abc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x82>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x92>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 faf2 	bl	8003028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac4 <HAL_TIM_PWM_Start+0x138>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	@ (8002ac4 <HAL_TIM_PWM_Start+0x138>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a14      	ldr	r2, [pc, #80]	@ (8002ac8 <HAL_TIM_PWM_Start+0x13c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_PWM_Start+0xfa>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <HAL_TIM_PWM_Start+0x140>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d010      	beq.n	8002aba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	e007      	b.n	8002aba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0ae      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	f200 809f 	bhi.w	8002c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002afe:	a201      	add	r2, pc, #4	@ (adr r2, 8002b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b39 	.word	0x08002b39
 8002b08:	08002c3d 	.word	0x08002c3d
 8002b0c:	08002c3d 	.word	0x08002c3d
 8002b10:	08002c3d 	.word	0x08002c3d
 8002b14:	08002b79 	.word	0x08002b79
 8002b18:	08002c3d 	.word	0x08002c3d
 8002b1c:	08002c3d 	.word	0x08002c3d
 8002b20:	08002c3d 	.word	0x08002c3d
 8002b24:	08002bbb 	.word	0x08002bbb
 8002b28:	08002c3d 	.word	0x08002c3d
 8002b2c:	08002c3d 	.word	0x08002c3d
 8002b30:	08002c3d 	.word	0x08002c3d
 8002b34:	08002bfb 	.word	0x08002bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f8ea 	bl	8002d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0208 	orr.w	r2, r2, #8
 8002b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6999      	ldr	r1, [r3, #24]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	619a      	str	r2, [r3, #24]
      break;
 8002b76:	e064      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f930 	bl	8002de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6999      	ldr	r1, [r3, #24]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	021a      	lsls	r2, r3, #8
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	619a      	str	r2, [r3, #24]
      break;
 8002bb8:	e043      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f979 	bl	8002eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0208 	orr.w	r2, r2, #8
 8002bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0204 	bic.w	r2, r2, #4
 8002be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	61da      	str	r2, [r3, #28]
      break;
 8002bf8:	e023      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f9c3 	bl	8002f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69d9      	ldr	r1, [r3, #28]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	61da      	str	r2, [r3, #28]
      break;
 8002c3a:	e002      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a26      	ldr	r2, [pc, #152]	@ (8002d10 <TIM_Base_SetConfig+0xbc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a25      	ldr	r2, [pc, #148]	@ (8002d14 <TIM_Base_SetConfig+0xc0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	@ (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <TIM_Base_SetConfig+0xbc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	@ (8002d14 <TIM_Base_SetConfig+0xc0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	615a      	str	r2, [r3, #20]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800

08002d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f023 0201 	bic.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0302 	bic.w	r3, r3, #2
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8002de0 <TIM_OC1_SetConfig+0xc8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10c      	bne.n	8002d8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0308 	bic.w	r3, r3, #8
 8002d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a13      	ldr	r2, [pc, #76]	@ (8002de0 <TIM_OC1_SetConfig+0xc8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d111      	bne.n	8002dba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	621a      	str	r2, [r3, #32]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00

08002de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 0210 	bic.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0320 	bic.w	r3, r3, #32
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb4 <TIM_OC2_SetConfig+0xd0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10d      	bne.n	8002e60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a14      	ldr	r2, [pc, #80]	@ (8002eb4 <TIM_OC2_SetConfig+0xd0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d113      	bne.n	8002e90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00

08002eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <TIM_OC3_SetConfig+0xd0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10d      	bne.n	8002f32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a14      	ldr	r2, [pc, #80]	@ (8002f88 <TIM_OC3_SetConfig+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d113      	bne.n	8002f62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40012c00 	.word	0x40012c00

08002f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	031b      	lsls	r3, r3, #12
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8003024 <TIM_OC4_SetConfig+0x98>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d109      	bne.n	8003000 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	40012c00 	.word	0x40012c00

08003028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2201      	movs	r2, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a1a      	ldr	r2, [r3, #32]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003084:	2302      	movs	r3, #2
 8003086:	e046      	b.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a16      	ldr	r2, [pc, #88]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d4:	d009      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a10      	ldr	r2, [pc, #64]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10c      	bne.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e042      	b.n	80031c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe fa86 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fcd5 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d112      	bne.n	800320c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_Receive_IT+0x26>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00b      	b.n	800320e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	461a      	mov	r2, r3
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fab7 	bl	8003776 <UART_Start_Receive_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	e000      	b.n	800320e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0ba      	sub	sp, #232	@ 0xe8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_UART_IRQHandler+0x66>
 800326a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fb93 	bl	80039a2 <UART_Receive_IT>
      return;
 800327c:	e25b      	b.n	8003736 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800327e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80de 	beq.w	8003444 <HAL_UART_IRQHandler+0x22c>
 8003288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003298:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80d1 	beq.w	8003444 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_UART_IRQHandler+0xae>
 80032ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_UART_IRQHandler+0xd2>
 80032d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_UART_IRQHandler+0xf6>
 80032f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d011      	beq.n	800333e <HAL_UART_IRQHandler+0x126>
 800331a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f043 0208 	orr.w	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 81f2 	beq.w	800372c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_UART_IRQHandler+0x14e>
 8003354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fb1e 	bl	80039a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_UART_IRQHandler+0x17a>
 800338a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d04f      	beq.n	8003432 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa28 	bl	80037e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d041      	beq.n	800342a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3314      	adds	r3, #20
 80033ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1d9      	bne.n	80033a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d013      	beq.n	8003422 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fe:	4a7e      	ldr	r2, [pc, #504]	@ (80035f8 <HAL_UART_IRQHandler+0x3e0>)
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fc4c 	bl	8001ca4 <HAL_DMA_Abort_IT>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800341c:	4610      	mov	r0, r2
 800341e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	e00e      	b.n	8003440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f993 	bl	800374e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	e00a      	b.n	8003440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f98f 	bl	800374e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	e006      	b.n	8003440 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f98b 	bl	800374e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800343e:	e175      	b.n	800372c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	bf00      	nop
    return;
 8003442:	e173      	b.n	800372c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	2b01      	cmp	r3, #1
 800344a:	f040 814f 	bne.w	80036ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8148 	beq.w	80036ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8141 	beq.w	80036ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80b6 	beq.w	80035fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800349c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8145 	beq.w	8003730 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034ae:	429a      	cmp	r2, r3
 80034b0:	f080 813e 	bcs.w	8003730 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	f000 8088 	beq.w	80035d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003500:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800350c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1d9      	bne.n	80034c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003524:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003538:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800353c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003540:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800354a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e1      	bne.n	8003514 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003574:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003576:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003578:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800357a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e3      	bne.n	8003550 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a8:	f023 0310 	bic.w	r3, r3, #16
 80035ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80035ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80035c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e3      	bne.n	8003596 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fb2b 	bl	8001c2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8b6 	bl	8003760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035f4:	e09c      	b.n	8003730 <HAL_UART_IRQHandler+0x518>
 80035f6:	bf00      	nop
 80035f8:	080038ad 	.word	0x080038ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 808e 	beq.w	8003734 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8089 	beq.w	8003734 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003646:	647a      	str	r2, [r7, #68]	@ 0x44
 8003648:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800364c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e3      	bne.n	8003622 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3314      	adds	r3, #20
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	623b      	str	r3, [r7, #32]
   return(result);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800367e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e3      	bne.n	800365a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0310 	bic.w	r3, r3, #16
 80036b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80036c4:	61fa      	str	r2, [r7, #28]
 80036c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	617b      	str	r3, [r7, #20]
   return(result);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e3      	bne.n	80036a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f83b 	bl	8003760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036ea:	e023      	b.n	8003734 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <HAL_UART_IRQHandler+0x4f4>
 80036f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8e5 	bl	80038d4 <UART_Transmit_IT>
    return;
 800370a:	e014      	b.n	8003736 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <HAL_UART_IRQHandler+0x51e>
 8003718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800371c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f924 	bl	8003972 <UART_EndTransmit_IT>
    return;
 800372a:	e004      	b.n	8003736 <HAL_UART_IRQHandler+0x51e>
    return;
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <HAL_UART_IRQHandler+0x51e>
      return;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_UART_IRQHandler+0x51e>
      return;
 8003734:	bf00      	nop
  }
}
 8003736:	37e8      	adds	r7, #232	@ 0xe8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	4613      	mov	r3, r2
 8003782:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2222      	movs	r2, #34	@ 0x22
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0220 	orr.w	r2, r2, #32
 80037da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b095      	sub	sp, #84	@ 0x54
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003810:	643a      	str	r2, [r7, #64]	@ 0x40
 8003812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	61fb      	str	r3, [r7, #28]
   return(result);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800384a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	2b01      	cmp	r3, #1
 800385e:	d119      	bne.n	8003894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f023 0310 	bic.w	r3, r3, #16
 8003876:	647b      	str	r3, [r7, #68]	@ 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003880:	61ba      	str	r2, [r7, #24]
 8003882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6979      	ldr	r1, [r7, #20]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	613b      	str	r3, [r7, #16]
   return(result);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038a2:	bf00      	nop
 80038a4:	3754      	adds	r7, #84	@ 0x54
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f7ff ff41 	bl	800374e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b21      	cmp	r3, #33	@ 0x21
 80038e6:	d13e      	bne.n	8003966 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f0:	d114      	bne.n	800391c <UART_Transmit_IT+0x48>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d110      	bne.n	800391c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]
 800391a:	e008      	b.n	800392e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	1c59      	adds	r1, r3, #1
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6211      	str	r1, [r2, #32]
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29b      	uxth	r3, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4619      	mov	r1, r3
 800393c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10f      	bne.n	8003962 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003950:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003960:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff fed2 	bl	800373c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b08c      	sub	sp, #48	@ 0x30
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b22      	cmp	r3, #34	@ 0x22
 80039b4:	f040 80ae 	bne.w	8003b14 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d117      	bne.n	80039f2 <UART_Receive_IT+0x50>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d113      	bne.n	80039f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80039f0:	e026      	b.n	8003a40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a04:	d007      	beq.n	8003a16 <UART_Receive_IT+0x74>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <UART_Receive_IT+0x82>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e008      	b.n	8003a36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d15d      	bne.n	8003b10 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0220 	bic.w	r2, r2, #32
 8003a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d135      	bne.n	8003b06 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	623a      	str	r2, [r7, #32]
 8003ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	69f9      	ldr	r1, [r7, #28]
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d10a      	bne.n	8003af8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff fe2e 	bl	8003760 <HAL_UARTEx_RxEventCallback>
 8003b04:	e002      	b.n	8003b0c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd f8be 	bl	8000c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e002      	b.n	8003b16 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
  }
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3730      	adds	r7, #48	@ 0x30
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b5a:	f023 030c 	bic.w	r3, r3, #12
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2c      	ldr	r2, [pc, #176]	@ (8003c34 <UART_SetConfig+0x114>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fe7e 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	e002      	b.n	8003b96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7fe fe66 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003b94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009a      	lsls	r2, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	4a22      	ldr	r2, [pc, #136]	@ (8003c38 <UART_SetConfig+0x118>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	0119      	lsls	r1, r3, #4
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <UART_SetConfig+0x118>)
 8003bce:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2064      	movs	r0, #100	@ 0x64
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	@ 0x32
 8003be0:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bec:	4419      	add	r1, r3
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c04:	4b0c      	ldr	r3, [pc, #48]	@ (8003c38 <UART_SetConfig+0x118>)
 8003c06:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2064      	movs	r0, #100	@ 0x64
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	@ 0x32
 8003c18:	4a07      	ldr	r2, [pc, #28]	@ (8003c38 <UART_SetConfig+0x118>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	440a      	add	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40013800 	.word	0x40013800
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <atof>:
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f000 bdfb 	b.w	8004838 <strtod>

08003c42 <sulp>:
 8003c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c46:	460f      	mov	r7, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	f001 ffdf 	bl	8005c0c <__ulp>
 8003c4e:	4604      	mov	r4, r0
 8003c50:	460d      	mov	r5, r1
 8003c52:	f1b8 0f00 	cmp.w	r8, #0
 8003c56:	d011      	beq.n	8003c7c <sulp+0x3a>
 8003c58:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003c5c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dd0b      	ble.n	8003c7c <sulp+0x3a>
 8003c64:	2400      	movs	r4, #0
 8003c66:	051b      	lsls	r3, r3, #20
 8003c68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003c6c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8003c70:	4622      	mov	r2, r4
 8003c72:	462b      	mov	r3, r5
 8003c74:	f7fc fc28 	bl	80004c8 <__aeabi_dmul>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	460d      	mov	r5, r1
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c84:	0000      	movs	r0, r0
	...

08003c88 <_strtod_l>:
 8003c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8c:	b09f      	sub	sp, #124	@ 0x7c
 8003c8e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8003c90:	2200      	movs	r2, #0
 8003c92:	460c      	mov	r4, r1
 8003c94:	921a      	str	r2, [sp, #104]	@ 0x68
 8003c96:	f04f 0a00 	mov.w	sl, #0
 8003c9a:	f04f 0b00 	mov.w	fp, #0
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	9005      	str	r0, [sp, #20]
 8003ca2:	9219      	str	r2, [sp, #100]	@ 0x64
 8003ca4:	7811      	ldrb	r1, [r2, #0]
 8003ca6:	292b      	cmp	r1, #43	@ 0x2b
 8003ca8:	d048      	beq.n	8003d3c <_strtod_l+0xb4>
 8003caa:	d836      	bhi.n	8003d1a <_strtod_l+0x92>
 8003cac:	290d      	cmp	r1, #13
 8003cae:	d830      	bhi.n	8003d12 <_strtod_l+0x8a>
 8003cb0:	2908      	cmp	r1, #8
 8003cb2:	d830      	bhi.n	8003d16 <_strtod_l+0x8e>
 8003cb4:	2900      	cmp	r1, #0
 8003cb6:	d039      	beq.n	8003d2c <_strtod_l+0xa4>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003cbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8003cbe:	782a      	ldrb	r2, [r5, #0]
 8003cc0:	2a30      	cmp	r2, #48	@ 0x30
 8003cc2:	f040 80b1 	bne.w	8003e28 <_strtod_l+0x1a0>
 8003cc6:	786a      	ldrb	r2, [r5, #1]
 8003cc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003ccc:	2a58      	cmp	r2, #88	@ 0x58
 8003cce:	d16c      	bne.n	8003daa <_strtod_l+0x122>
 8003cd0:	9302      	str	r3, [sp, #8]
 8003cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8003f10 <_strtod_l+0x288>)
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	ab1a      	add	r3, sp, #104	@ 0x68
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	9805      	ldr	r0, [sp, #20]
 8003cde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003ce0:	a919      	add	r1, sp, #100	@ 0x64
 8003ce2:	f001 f887 	bl	8004df4 <__gethex>
 8003ce6:	f010 060f 	ands.w	r6, r0, #15
 8003cea:	4604      	mov	r4, r0
 8003cec:	d005      	beq.n	8003cfa <_strtod_l+0x72>
 8003cee:	2e06      	cmp	r6, #6
 8003cf0:	d126      	bne.n	8003d40 <_strtod_l+0xb8>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	3501      	adds	r5, #1
 8003cf6:	9519      	str	r5, [sp, #100]	@ 0x64
 8003cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 8584 	bne.w	800480a <_strtod_l+0xb82>
 8003d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d04:	b1bb      	cbz	r3, 8003d36 <_strtod_l+0xae>
 8003d06:	4650      	mov	r0, sl
 8003d08:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8003d0c:	b01f      	add	sp, #124	@ 0x7c
 8003d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d12:	2920      	cmp	r1, #32
 8003d14:	d1d0      	bne.n	8003cb8 <_strtod_l+0x30>
 8003d16:	3201      	adds	r2, #1
 8003d18:	e7c3      	b.n	8003ca2 <_strtod_l+0x1a>
 8003d1a:	292d      	cmp	r1, #45	@ 0x2d
 8003d1c:	d1cc      	bne.n	8003cb8 <_strtod_l+0x30>
 8003d1e:	2101      	movs	r1, #1
 8003d20:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003d22:	1c51      	adds	r1, r2, #1
 8003d24:	9119      	str	r1, [sp, #100]	@ 0x64
 8003d26:	7852      	ldrb	r2, [r2, #1]
 8003d28:	2a00      	cmp	r2, #0
 8003d2a:	d1c7      	bne.n	8003cbc <_strtod_l+0x34>
 8003d2c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003d2e:	9419      	str	r4, [sp, #100]	@ 0x64
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 8568 	bne.w	8004806 <_strtod_l+0xb7e>
 8003d36:	4650      	mov	r0, sl
 8003d38:	4659      	mov	r1, fp
 8003d3a:	e7e7      	b.n	8003d0c <_strtod_l+0x84>
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	e7ef      	b.n	8003d20 <_strtod_l+0x98>
 8003d40:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003d42:	b13a      	cbz	r2, 8003d54 <_strtod_l+0xcc>
 8003d44:	2135      	movs	r1, #53	@ 0x35
 8003d46:	a81c      	add	r0, sp, #112	@ 0x70
 8003d48:	f002 f850 	bl	8005dec <__copybits>
 8003d4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003d4e:	9805      	ldr	r0, [sp, #20]
 8003d50:	f001 fc2a 	bl	80055a8 <_Bfree>
 8003d54:	3e01      	subs	r6, #1
 8003d56:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003d58:	2e04      	cmp	r6, #4
 8003d5a:	d806      	bhi.n	8003d6a <_strtod_l+0xe2>
 8003d5c:	e8df f006 	tbb	[pc, r6]
 8003d60:	201d0314 	.word	0x201d0314
 8003d64:	14          	.byte	0x14
 8003d65:	00          	.byte	0x00
 8003d66:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8003d6a:	05e1      	lsls	r1, r4, #23
 8003d6c:	bf48      	it	mi
 8003d6e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8003d72:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003d76:	0d1b      	lsrs	r3, r3, #20
 8003d78:	051b      	lsls	r3, r3, #20
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1bd      	bne.n	8003cfa <_strtod_l+0x72>
 8003d7e:	f000 ff29 	bl	8004bd4 <__errno>
 8003d82:	2322      	movs	r3, #34	@ 0x22
 8003d84:	6003      	str	r3, [r0, #0]
 8003d86:	e7b8      	b.n	8003cfa <_strtod_l+0x72>
 8003d88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8003d8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8003d90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d94:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003d98:	e7e7      	b.n	8003d6a <_strtod_l+0xe2>
 8003d9a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8003f14 <_strtod_l+0x28c>
 8003d9e:	e7e4      	b.n	8003d6a <_strtod_l+0xe2>
 8003da0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8003da4:	f04f 3aff 	mov.w	sl, #4294967295
 8003da8:	e7df      	b.n	8003d6a <_strtod_l+0xe2>
 8003daa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	9219      	str	r2, [sp, #100]	@ 0x64
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	2b30      	cmp	r3, #48	@ 0x30
 8003db4:	d0f9      	beq.n	8003daa <_strtod_l+0x122>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d09f      	beq.n	8003cfa <_strtod_l+0x72>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003dc0:	220a      	movs	r2, #10
 8003dc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	9308      	str	r3, [sp, #32]
 8003dca:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dcc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8003dce:	7805      	ldrb	r5, [r0, #0]
 8003dd0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8003dd4:	b2d9      	uxtb	r1, r3
 8003dd6:	2909      	cmp	r1, #9
 8003dd8:	d928      	bls.n	8003e2c <_strtod_l+0x1a4>
 8003dda:	2201      	movs	r2, #1
 8003ddc:	494e      	ldr	r1, [pc, #312]	@ (8003f18 <_strtod_l+0x290>)
 8003dde:	f000 fe44 	bl	8004a6a <strncmp>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d032      	beq.n	8003e4c <_strtod_l+0x1c4>
 8003de6:	2000      	movs	r0, #0
 8003de8:	462a      	mov	r2, r5
 8003dea:	4681      	mov	r9, r0
 8003dec:	463d      	mov	r5, r7
 8003dee:	4603      	mov	r3, r0
 8003df0:	2a65      	cmp	r2, #101	@ 0x65
 8003df2:	d001      	beq.n	8003df8 <_strtod_l+0x170>
 8003df4:	2a45      	cmp	r2, #69	@ 0x45
 8003df6:	d114      	bne.n	8003e22 <_strtod_l+0x19a>
 8003df8:	b91d      	cbnz	r5, 8003e02 <_strtod_l+0x17a>
 8003dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dfc:	4302      	orrs	r2, r0
 8003dfe:	d095      	beq.n	8003d2c <_strtod_l+0xa4>
 8003e00:	2500      	movs	r5, #0
 8003e02:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003e04:	1c62      	adds	r2, r4, #1
 8003e06:	9219      	str	r2, [sp, #100]	@ 0x64
 8003e08:	7862      	ldrb	r2, [r4, #1]
 8003e0a:	2a2b      	cmp	r2, #43	@ 0x2b
 8003e0c:	d077      	beq.n	8003efe <_strtod_l+0x276>
 8003e0e:	2a2d      	cmp	r2, #45	@ 0x2d
 8003e10:	d07b      	beq.n	8003f0a <_strtod_l+0x282>
 8003e12:	f04f 0c00 	mov.w	ip, #0
 8003e16:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8003e1a:	2909      	cmp	r1, #9
 8003e1c:	f240 8082 	bls.w	8003f24 <_strtod_l+0x29c>
 8003e20:	9419      	str	r4, [sp, #100]	@ 0x64
 8003e22:	f04f 0800 	mov.w	r8, #0
 8003e26:	e0a2      	b.n	8003f6e <_strtod_l+0x2e6>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e7c7      	b.n	8003dbc <_strtod_l+0x134>
 8003e2c:	2f08      	cmp	r7, #8
 8003e2e:	bfd5      	itete	le
 8003e30:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8003e32:	9908      	ldrgt	r1, [sp, #32]
 8003e34:	fb02 3301 	mlale	r3, r2, r1, r3
 8003e38:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003e3c:	f100 0001 	add.w	r0, r0, #1
 8003e40:	bfd4      	ite	le
 8003e42:	930a      	strle	r3, [sp, #40]	@ 0x28
 8003e44:	9308      	strgt	r3, [sp, #32]
 8003e46:	3701      	adds	r7, #1
 8003e48:	9019      	str	r0, [sp, #100]	@ 0x64
 8003e4a:	e7bf      	b.n	8003dcc <_strtod_l+0x144>
 8003e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	9219      	str	r2, [sp, #100]	@ 0x64
 8003e52:	785a      	ldrb	r2, [r3, #1]
 8003e54:	b37f      	cbz	r7, 8003eb6 <_strtod_l+0x22e>
 8003e56:	4681      	mov	r9, r0
 8003e58:	463d      	mov	r5, r7
 8003e5a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	d912      	bls.n	8003e88 <_strtod_l+0x200>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e7c4      	b.n	8003df0 <_strtod_l+0x168>
 8003e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003e68:	3001      	adds	r0, #1
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8003e6e:	785a      	ldrb	r2, [r3, #1]
 8003e70:	2a30      	cmp	r2, #48	@ 0x30
 8003e72:	d0f8      	beq.n	8003e66 <_strtod_l+0x1de>
 8003e74:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	f200 84cb 	bhi.w	8004814 <_strtod_l+0xb8c>
 8003e7e:	4681      	mov	r9, r0
 8003e80:	2000      	movs	r0, #0
 8003e82:	4605      	mov	r5, r0
 8003e84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003e86:	930c      	str	r3, [sp, #48]	@ 0x30
 8003e88:	3a30      	subs	r2, #48	@ 0x30
 8003e8a:	f100 0301 	add.w	r3, r0, #1
 8003e8e:	d02a      	beq.n	8003ee6 <_strtod_l+0x25e>
 8003e90:	4499      	add	r9, r3
 8003e92:	210a      	movs	r1, #10
 8003e94:	462b      	mov	r3, r5
 8003e96:	eb00 0c05 	add.w	ip, r0, r5
 8003e9a:	4563      	cmp	r3, ip
 8003e9c:	d10d      	bne.n	8003eba <_strtod_l+0x232>
 8003e9e:	1c69      	adds	r1, r5, #1
 8003ea0:	4401      	add	r1, r0
 8003ea2:	4428      	add	r0, r5
 8003ea4:	2808      	cmp	r0, #8
 8003ea6:	dc16      	bgt.n	8003ed6 <_strtod_l+0x24e>
 8003ea8:	230a      	movs	r3, #10
 8003eaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003eac:	fb03 2300 	mla	r3, r3, r0, r2
 8003eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e018      	b.n	8003ee8 <_strtod_l+0x260>
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	e7da      	b.n	8003e70 <_strtod_l+0x1e8>
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	f103 0301 	add.w	r3, r3, #1
 8003ec0:	dc03      	bgt.n	8003eca <_strtod_l+0x242>
 8003ec2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8003ec4:	434e      	muls	r6, r1
 8003ec6:	960a      	str	r6, [sp, #40]	@ 0x28
 8003ec8:	e7e7      	b.n	8003e9a <_strtod_l+0x212>
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	bfde      	ittt	le
 8003ece:	9e08      	ldrle	r6, [sp, #32]
 8003ed0:	434e      	mulle	r6, r1
 8003ed2:	9608      	strle	r6, [sp, #32]
 8003ed4:	e7e1      	b.n	8003e9a <_strtod_l+0x212>
 8003ed6:	280f      	cmp	r0, #15
 8003ed8:	dceb      	bgt.n	8003eb2 <_strtod_l+0x22a>
 8003eda:	230a      	movs	r3, #10
 8003edc:	9808      	ldr	r0, [sp, #32]
 8003ede:	fb03 2300 	mla	r3, r3, r0, r2
 8003ee2:	9308      	str	r3, [sp, #32]
 8003ee4:	e7e5      	b.n	8003eb2 <_strtod_l+0x22a>
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003eea:	460d      	mov	r5, r1
 8003eec:	1c50      	adds	r0, r2, #1
 8003eee:	9019      	str	r0, [sp, #100]	@ 0x64
 8003ef0:	7852      	ldrb	r2, [r2, #1]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	e7b1      	b.n	8003e5a <_strtod_l+0x1d2>
 8003ef6:	f04f 0900 	mov.w	r9, #0
 8003efa:	2301      	movs	r3, #1
 8003efc:	e77d      	b.n	8003dfa <_strtod_l+0x172>
 8003efe:	f04f 0c00 	mov.w	ip, #0
 8003f02:	1ca2      	adds	r2, r4, #2
 8003f04:	9219      	str	r2, [sp, #100]	@ 0x64
 8003f06:	78a2      	ldrb	r2, [r4, #2]
 8003f08:	e785      	b.n	8003e16 <_strtod_l+0x18e>
 8003f0a:	f04f 0c01 	mov.w	ip, #1
 8003f0e:	e7f8      	b.n	8003f02 <_strtod_l+0x27a>
 8003f10:	08006938 	.word	0x08006938
 8003f14:	7ff00000 	.word	0x7ff00000
 8003f18:	08006916 	.word	0x08006916
 8003f1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003f1e:	1c51      	adds	r1, r2, #1
 8003f20:	9119      	str	r1, [sp, #100]	@ 0x64
 8003f22:	7852      	ldrb	r2, [r2, #1]
 8003f24:	2a30      	cmp	r2, #48	@ 0x30
 8003f26:	d0f9      	beq.n	8003f1c <_strtod_l+0x294>
 8003f28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8003f2c:	2908      	cmp	r1, #8
 8003f2e:	f63f af78 	bhi.w	8003e22 <_strtod_l+0x19a>
 8003f32:	f04f 080a 	mov.w	r8, #10
 8003f36:	3a30      	subs	r2, #48	@ 0x30
 8003f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003f3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8003f3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003f40:	1c56      	adds	r6, r2, #1
 8003f42:	9619      	str	r6, [sp, #100]	@ 0x64
 8003f44:	7852      	ldrb	r2, [r2, #1]
 8003f46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8003f4a:	f1be 0f09 	cmp.w	lr, #9
 8003f4e:	d939      	bls.n	8003fc4 <_strtod_l+0x33c>
 8003f50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003f52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8003f56:	1a76      	subs	r6, r6, r1
 8003f58:	2e08      	cmp	r6, #8
 8003f5a:	dc03      	bgt.n	8003f64 <_strtod_l+0x2dc>
 8003f5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003f5e:	4588      	cmp	r8, r1
 8003f60:	bfa8      	it	ge
 8003f62:	4688      	movge	r8, r1
 8003f64:	f1bc 0f00 	cmp.w	ip, #0
 8003f68:	d001      	beq.n	8003f6e <_strtod_l+0x2e6>
 8003f6a:	f1c8 0800 	rsb	r8, r8, #0
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	d14e      	bne.n	8004010 <_strtod_l+0x388>
 8003f72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003f74:	4308      	orrs	r0, r1
 8003f76:	f47f aec0 	bne.w	8003cfa <_strtod_l+0x72>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f47f aed6 	bne.w	8003d2c <_strtod_l+0xa4>
 8003f80:	2a69      	cmp	r2, #105	@ 0x69
 8003f82:	d028      	beq.n	8003fd6 <_strtod_l+0x34e>
 8003f84:	dc25      	bgt.n	8003fd2 <_strtod_l+0x34a>
 8003f86:	2a49      	cmp	r2, #73	@ 0x49
 8003f88:	d025      	beq.n	8003fd6 <_strtod_l+0x34e>
 8003f8a:	2a4e      	cmp	r2, #78	@ 0x4e
 8003f8c:	f47f aece 	bne.w	8003d2c <_strtod_l+0xa4>
 8003f90:	499a      	ldr	r1, [pc, #616]	@ (80041fc <_strtod_l+0x574>)
 8003f92:	a819      	add	r0, sp, #100	@ 0x64
 8003f94:	f001 f950 	bl	8005238 <__match>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f43f aec7 	beq.w	8003d2c <_strtod_l+0xa4>
 8003f9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b28      	cmp	r3, #40	@ 0x28
 8003fa4:	d12e      	bne.n	8004004 <_strtod_l+0x37c>
 8003fa6:	4996      	ldr	r1, [pc, #600]	@ (8004200 <_strtod_l+0x578>)
 8003fa8:	aa1c      	add	r2, sp, #112	@ 0x70
 8003faa:	a819      	add	r0, sp, #100	@ 0x64
 8003fac:	f001 f958 	bl	8005260 <__hexnan>
 8003fb0:	2805      	cmp	r0, #5
 8003fb2:	d127      	bne.n	8004004 <_strtod_l+0x37c>
 8003fb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8003fb6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8003fba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8003fbe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8003fc2:	e69a      	b.n	8003cfa <_strtod_l+0x72>
 8003fc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003fc6:	fb08 2101 	mla	r1, r8, r1, r2
 8003fca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8003fce:	920e      	str	r2, [sp, #56]	@ 0x38
 8003fd0:	e7b5      	b.n	8003f3e <_strtod_l+0x2b6>
 8003fd2:	2a6e      	cmp	r2, #110	@ 0x6e
 8003fd4:	e7da      	b.n	8003f8c <_strtod_l+0x304>
 8003fd6:	498b      	ldr	r1, [pc, #556]	@ (8004204 <_strtod_l+0x57c>)
 8003fd8:	a819      	add	r0, sp, #100	@ 0x64
 8003fda:	f001 f92d 	bl	8005238 <__match>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	f43f aea4 	beq.w	8003d2c <_strtod_l+0xa4>
 8003fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003fe6:	4988      	ldr	r1, [pc, #544]	@ (8004208 <_strtod_l+0x580>)
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	a819      	add	r0, sp, #100	@ 0x64
 8003fec:	9319      	str	r3, [sp, #100]	@ 0x64
 8003fee:	f001 f923 	bl	8005238 <__match>
 8003ff2:	b910      	cbnz	r0, 8003ffa <_strtod_l+0x372>
 8003ff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	9319      	str	r3, [sp, #100]	@ 0x64
 8003ffa:	f04f 0a00 	mov.w	sl, #0
 8003ffe:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800420c <_strtod_l+0x584>
 8004002:	e67a      	b.n	8003cfa <_strtod_l+0x72>
 8004004:	4882      	ldr	r0, [pc, #520]	@ (8004210 <_strtod_l+0x588>)
 8004006:	f000 fe21 	bl	8004c4c <nan>
 800400a:	4682      	mov	sl, r0
 800400c:	468b      	mov	fp, r1
 800400e:	e674      	b.n	8003cfa <_strtod_l+0x72>
 8004010:	eba8 0309 	sub.w	r3, r8, r9
 8004014:	2f00      	cmp	r7, #0
 8004016:	bf08      	it	eq
 8004018:	462f      	moveq	r7, r5
 800401a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800401c:	2d10      	cmp	r5, #16
 800401e:	462c      	mov	r4, r5
 8004020:	9309      	str	r3, [sp, #36]	@ 0x24
 8004022:	bfa8      	it	ge
 8004024:	2410      	movge	r4, #16
 8004026:	f7fc f9d5 	bl	80003d4 <__aeabi_ui2d>
 800402a:	2d09      	cmp	r5, #9
 800402c:	4682      	mov	sl, r0
 800402e:	468b      	mov	fp, r1
 8004030:	dc11      	bgt.n	8004056 <_strtod_l+0x3ce>
 8004032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	f43f ae60 	beq.w	8003cfa <_strtod_l+0x72>
 800403a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800403c:	dd76      	ble.n	800412c <_strtod_l+0x4a4>
 800403e:	2b16      	cmp	r3, #22
 8004040:	dc5d      	bgt.n	80040fe <_strtod_l+0x476>
 8004042:	4974      	ldr	r1, [pc, #464]	@ (8004214 <_strtod_l+0x58c>)
 8004044:	4652      	mov	r2, sl
 8004046:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800404a:	465b      	mov	r3, fp
 800404c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004050:	f7fc fa3a 	bl	80004c8 <__aeabi_dmul>
 8004054:	e7d9      	b.n	800400a <_strtod_l+0x382>
 8004056:	4b6f      	ldr	r3, [pc, #444]	@ (8004214 <_strtod_l+0x58c>)
 8004058:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800405c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004060:	f7fc fa32 	bl	80004c8 <__aeabi_dmul>
 8004064:	4682      	mov	sl, r0
 8004066:	9808      	ldr	r0, [sp, #32]
 8004068:	468b      	mov	fp, r1
 800406a:	f7fc f9b3 	bl	80003d4 <__aeabi_ui2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4650      	mov	r0, sl
 8004074:	4659      	mov	r1, fp
 8004076:	f7fc f871 	bl	800015c <__adddf3>
 800407a:	2d0f      	cmp	r5, #15
 800407c:	4682      	mov	sl, r0
 800407e:	468b      	mov	fp, r1
 8004080:	ddd7      	ble.n	8004032 <_strtod_l+0x3aa>
 8004082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004084:	1b2c      	subs	r4, r5, r4
 8004086:	441c      	add	r4, r3
 8004088:	2c00      	cmp	r4, #0
 800408a:	f340 8096 	ble.w	80041ba <_strtod_l+0x532>
 800408e:	f014 030f 	ands.w	r3, r4, #15
 8004092:	d00a      	beq.n	80040aa <_strtod_l+0x422>
 8004094:	495f      	ldr	r1, [pc, #380]	@ (8004214 <_strtod_l+0x58c>)
 8004096:	4652      	mov	r2, sl
 8004098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800409c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040a0:	465b      	mov	r3, fp
 80040a2:	f7fc fa11 	bl	80004c8 <__aeabi_dmul>
 80040a6:	4682      	mov	sl, r0
 80040a8:	468b      	mov	fp, r1
 80040aa:	f034 040f 	bics.w	r4, r4, #15
 80040ae:	d073      	beq.n	8004198 <_strtod_l+0x510>
 80040b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80040b4:	dd48      	ble.n	8004148 <_strtod_l+0x4c0>
 80040b6:	2400      	movs	r4, #0
 80040b8:	46a0      	mov	r8, r4
 80040ba:	46a1      	mov	r9, r4
 80040bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80040be:	2322      	movs	r3, #34	@ 0x22
 80040c0:	f04f 0a00 	mov.w	sl, #0
 80040c4:	9a05      	ldr	r2, [sp, #20]
 80040c6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800420c <_strtod_l+0x584>
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f43f ae13 	beq.w	8003cfa <_strtod_l+0x72>
 80040d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80040d6:	9805      	ldr	r0, [sp, #20]
 80040d8:	f001 fa66 	bl	80055a8 <_Bfree>
 80040dc:	4649      	mov	r1, r9
 80040de:	9805      	ldr	r0, [sp, #20]
 80040e0:	f001 fa62 	bl	80055a8 <_Bfree>
 80040e4:	4641      	mov	r1, r8
 80040e6:	9805      	ldr	r0, [sp, #20]
 80040e8:	f001 fa5e 	bl	80055a8 <_Bfree>
 80040ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040ee:	9805      	ldr	r0, [sp, #20]
 80040f0:	f001 fa5a 	bl	80055a8 <_Bfree>
 80040f4:	4621      	mov	r1, r4
 80040f6:	9805      	ldr	r0, [sp, #20]
 80040f8:	f001 fa56 	bl	80055a8 <_Bfree>
 80040fc:	e5fd      	b.n	8003cfa <_strtod_l+0x72>
 80040fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004100:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004104:	4293      	cmp	r3, r2
 8004106:	dbbc      	blt.n	8004082 <_strtod_l+0x3fa>
 8004108:	4c42      	ldr	r4, [pc, #264]	@ (8004214 <_strtod_l+0x58c>)
 800410a:	f1c5 050f 	rsb	r5, r5, #15
 800410e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004112:	4652      	mov	r2, sl
 8004114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004118:	465b      	mov	r3, fp
 800411a:	f7fc f9d5 	bl	80004c8 <__aeabi_dmul>
 800411e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004120:	1b5d      	subs	r5, r3, r5
 8004122:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004126:	e9d4 2300 	ldrd	r2, r3, [r4]
 800412a:	e791      	b.n	8004050 <_strtod_l+0x3c8>
 800412c:	3316      	adds	r3, #22
 800412e:	dba8      	blt.n	8004082 <_strtod_l+0x3fa>
 8004130:	4b38      	ldr	r3, [pc, #224]	@ (8004214 <_strtod_l+0x58c>)
 8004132:	eba9 0808 	sub.w	r8, r9, r8
 8004136:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800413a:	4650      	mov	r0, sl
 800413c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004140:	4659      	mov	r1, fp
 8004142:	f7fc faeb 	bl	800071c <__aeabi_ddiv>
 8004146:	e760      	b.n	800400a <_strtod_l+0x382>
 8004148:	4b33      	ldr	r3, [pc, #204]	@ (8004218 <_strtod_l+0x590>)
 800414a:	4650      	mov	r0, sl
 800414c:	9308      	str	r3, [sp, #32]
 800414e:	2300      	movs	r3, #0
 8004150:	4659      	mov	r1, fp
 8004152:	461e      	mov	r6, r3
 8004154:	1124      	asrs	r4, r4, #4
 8004156:	2c01      	cmp	r4, #1
 8004158:	dc21      	bgt.n	800419e <_strtod_l+0x516>
 800415a:	b10b      	cbz	r3, 8004160 <_strtod_l+0x4d8>
 800415c:	4682      	mov	sl, r0
 800415e:	468b      	mov	fp, r1
 8004160:	492d      	ldr	r1, [pc, #180]	@ (8004218 <_strtod_l+0x590>)
 8004162:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004166:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800416a:	4652      	mov	r2, sl
 800416c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004170:	465b      	mov	r3, fp
 8004172:	f7fc f9a9 	bl	80004c8 <__aeabi_dmul>
 8004176:	4b25      	ldr	r3, [pc, #148]	@ (800420c <_strtod_l+0x584>)
 8004178:	460a      	mov	r2, r1
 800417a:	400b      	ands	r3, r1
 800417c:	4927      	ldr	r1, [pc, #156]	@ (800421c <_strtod_l+0x594>)
 800417e:	4682      	mov	sl, r0
 8004180:	428b      	cmp	r3, r1
 8004182:	d898      	bhi.n	80040b6 <_strtod_l+0x42e>
 8004184:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004188:	428b      	cmp	r3, r1
 800418a:	bf86      	itte	hi
 800418c:	f04f 3aff 	movhi.w	sl, #4294967295
 8004190:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8004220 <_strtod_l+0x598>
 8004194:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004198:	2300      	movs	r3, #0
 800419a:	9308      	str	r3, [sp, #32]
 800419c:	e07a      	b.n	8004294 <_strtod_l+0x60c>
 800419e:	07e2      	lsls	r2, r4, #31
 80041a0:	d505      	bpl.n	80041ae <_strtod_l+0x526>
 80041a2:	9b08      	ldr	r3, [sp, #32]
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fc f98e 	bl	80004c8 <__aeabi_dmul>
 80041ac:	2301      	movs	r3, #1
 80041ae:	9a08      	ldr	r2, [sp, #32]
 80041b0:	3601      	adds	r6, #1
 80041b2:	3208      	adds	r2, #8
 80041b4:	1064      	asrs	r4, r4, #1
 80041b6:	9208      	str	r2, [sp, #32]
 80041b8:	e7cd      	b.n	8004156 <_strtod_l+0x4ce>
 80041ba:	d0ed      	beq.n	8004198 <_strtod_l+0x510>
 80041bc:	4264      	negs	r4, r4
 80041be:	f014 020f 	ands.w	r2, r4, #15
 80041c2:	d00a      	beq.n	80041da <_strtod_l+0x552>
 80041c4:	4b13      	ldr	r3, [pc, #76]	@ (8004214 <_strtod_l+0x58c>)
 80041c6:	4650      	mov	r0, sl
 80041c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041cc:	4659      	mov	r1, fp
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc faa3 	bl	800071c <__aeabi_ddiv>
 80041d6:	4682      	mov	sl, r0
 80041d8:	468b      	mov	fp, r1
 80041da:	1124      	asrs	r4, r4, #4
 80041dc:	d0dc      	beq.n	8004198 <_strtod_l+0x510>
 80041de:	2c1f      	cmp	r4, #31
 80041e0:	dd20      	ble.n	8004224 <_strtod_l+0x59c>
 80041e2:	2400      	movs	r4, #0
 80041e4:	46a0      	mov	r8, r4
 80041e6:	46a1      	mov	r9, r4
 80041e8:	940a      	str	r4, [sp, #40]	@ 0x28
 80041ea:	2322      	movs	r3, #34	@ 0x22
 80041ec:	9a05      	ldr	r2, [sp, #20]
 80041ee:	f04f 0a00 	mov.w	sl, #0
 80041f2:	f04f 0b00 	mov.w	fp, #0
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e768      	b.n	80040cc <_strtod_l+0x444>
 80041fa:	bf00      	nop
 80041fc:	08006921 	.word	0x08006921
 8004200:	08006924 	.word	0x08006924
 8004204:	08006918 	.word	0x08006918
 8004208:	0800691b 	.word	0x0800691b
 800420c:	7ff00000 	.word	0x7ff00000
 8004210:	08006a2c 	.word	0x08006a2c
 8004214:	08006b30 	.word	0x08006b30
 8004218:	08006b08 	.word	0x08006b08
 800421c:	7ca00000 	.word	0x7ca00000
 8004220:	7fefffff 	.word	0x7fefffff
 8004224:	f014 0310 	ands.w	r3, r4, #16
 8004228:	bf18      	it	ne
 800422a:	236a      	movne	r3, #106	@ 0x6a
 800422c:	4650      	mov	r0, sl
 800422e:	9308      	str	r3, [sp, #32]
 8004230:	4659      	mov	r1, fp
 8004232:	2300      	movs	r3, #0
 8004234:	4ea9      	ldr	r6, [pc, #676]	@ (80044dc <_strtod_l+0x854>)
 8004236:	07e2      	lsls	r2, r4, #31
 8004238:	d504      	bpl.n	8004244 <_strtod_l+0x5bc>
 800423a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800423e:	f7fc f943 	bl	80004c8 <__aeabi_dmul>
 8004242:	2301      	movs	r3, #1
 8004244:	1064      	asrs	r4, r4, #1
 8004246:	f106 0608 	add.w	r6, r6, #8
 800424a:	d1f4      	bne.n	8004236 <_strtod_l+0x5ae>
 800424c:	b10b      	cbz	r3, 8004252 <_strtod_l+0x5ca>
 800424e:	4682      	mov	sl, r0
 8004250:	468b      	mov	fp, r1
 8004252:	9b08      	ldr	r3, [sp, #32]
 8004254:	b1b3      	cbz	r3, 8004284 <_strtod_l+0x5fc>
 8004256:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800425a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800425e:	2b00      	cmp	r3, #0
 8004260:	4659      	mov	r1, fp
 8004262:	dd0f      	ble.n	8004284 <_strtod_l+0x5fc>
 8004264:	2b1f      	cmp	r3, #31
 8004266:	dd57      	ble.n	8004318 <_strtod_l+0x690>
 8004268:	2b34      	cmp	r3, #52	@ 0x34
 800426a:	bfd8      	it	le
 800426c:	f04f 33ff 	movle.w	r3, #4294967295
 8004270:	f04f 0a00 	mov.w	sl, #0
 8004274:	bfcf      	iteee	gt
 8004276:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800427a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800427e:	4093      	lslle	r3, r2
 8004280:	ea03 0b01 	andle.w	fp, r3, r1
 8004284:	2200      	movs	r2, #0
 8004286:	2300      	movs	r3, #0
 8004288:	4650      	mov	r0, sl
 800428a:	4659      	mov	r1, fp
 800428c:	f7fc fb84 	bl	8000998 <__aeabi_dcmpeq>
 8004290:	2800      	cmp	r0, #0
 8004292:	d1a6      	bne.n	80041e2 <_strtod_l+0x55a>
 8004294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004296:	463a      	mov	r2, r7
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800429c:	462b      	mov	r3, r5
 800429e:	9805      	ldr	r0, [sp, #20]
 80042a0:	f001 f9ea 	bl	8005678 <__s2b>
 80042a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80042a6:	2800      	cmp	r0, #0
 80042a8:	f43f af05 	beq.w	80040b6 <_strtod_l+0x42e>
 80042ac:	2400      	movs	r4, #0
 80042ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042b0:	eba9 0308 	sub.w	r3, r9, r8
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	bfa8      	it	ge
 80042b8:	2300      	movge	r3, #0
 80042ba:	46a0      	mov	r8, r4
 80042bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80042be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80042c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80042c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042c6:	9805      	ldr	r0, [sp, #20]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	f001 f92d 	bl	8005528 <_Balloc>
 80042ce:	4681      	mov	r9, r0
 80042d0:	2800      	cmp	r0, #0
 80042d2:	f43f aef4 	beq.w	80040be <_strtod_l+0x436>
 80042d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042d8:	300c      	adds	r0, #12
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	f103 010c 	add.w	r1, r3, #12
 80042e0:	3202      	adds	r2, #2
 80042e2:	0092      	lsls	r2, r2, #2
 80042e4:	f000 fca3 	bl	8004c2e <memcpy>
 80042e8:	ab1c      	add	r3, sp, #112	@ 0x70
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	ab1b      	add	r3, sp, #108	@ 0x6c
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	4652      	mov	r2, sl
 80042f2:	465b      	mov	r3, fp
 80042f4:	9805      	ldr	r0, [sp, #20]
 80042f6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80042fa:	f001 fcef 	bl	8005cdc <__d2b>
 80042fe:	901a      	str	r0, [sp, #104]	@ 0x68
 8004300:	2800      	cmp	r0, #0
 8004302:	f43f aedc 	beq.w	80040be <_strtod_l+0x436>
 8004306:	2101      	movs	r1, #1
 8004308:	9805      	ldr	r0, [sp, #20]
 800430a:	f001 fa4b 	bl	80057a4 <__i2b>
 800430e:	4680      	mov	r8, r0
 8004310:	b948      	cbnz	r0, 8004326 <_strtod_l+0x69e>
 8004312:	f04f 0800 	mov.w	r8, #0
 8004316:	e6d2      	b.n	80040be <_strtod_l+0x436>
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	ea03 0a0a 	and.w	sl, r3, sl
 8004324:	e7ae      	b.n	8004284 <_strtod_l+0x5fc>
 8004326:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004328:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800432a:	2d00      	cmp	r5, #0
 800432c:	bfab      	itete	ge
 800432e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004330:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004332:	18ef      	addge	r7, r5, r3
 8004334:	1b5e      	sublt	r6, r3, r5
 8004336:	9b08      	ldr	r3, [sp, #32]
 8004338:	bfa8      	it	ge
 800433a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800433c:	eba5 0503 	sub.w	r5, r5, r3
 8004340:	4415      	add	r5, r2
 8004342:	4b67      	ldr	r3, [pc, #412]	@ (80044e0 <_strtod_l+0x858>)
 8004344:	f105 35ff 	add.w	r5, r5, #4294967295
 8004348:	bfb8      	it	lt
 800434a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800434c:	429d      	cmp	r5, r3
 800434e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004352:	da50      	bge.n	80043f6 <_strtod_l+0x76e>
 8004354:	1b5b      	subs	r3, r3, r5
 8004356:	2b1f      	cmp	r3, #31
 8004358:	f04f 0101 	mov.w	r1, #1
 800435c:	eba2 0203 	sub.w	r2, r2, r3
 8004360:	dc3d      	bgt.n	80043de <_strtod_l+0x756>
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004368:	2300      	movs	r3, #0
 800436a:	9310      	str	r3, [sp, #64]	@ 0x40
 800436c:	18bd      	adds	r5, r7, r2
 800436e:	9b08      	ldr	r3, [sp, #32]
 8004370:	42af      	cmp	r7, r5
 8004372:	4416      	add	r6, r2
 8004374:	441e      	add	r6, r3
 8004376:	463b      	mov	r3, r7
 8004378:	bfa8      	it	ge
 800437a:	462b      	movge	r3, r5
 800437c:	42b3      	cmp	r3, r6
 800437e:	bfa8      	it	ge
 8004380:	4633      	movge	r3, r6
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfc2      	ittt	gt
 8004386:	1aed      	subgt	r5, r5, r3
 8004388:	1af6      	subgt	r6, r6, r3
 800438a:	1aff      	subgt	r7, r7, r3
 800438c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800438e:	2b00      	cmp	r3, #0
 8004390:	dd16      	ble.n	80043c0 <_strtod_l+0x738>
 8004392:	4641      	mov	r1, r8
 8004394:	461a      	mov	r2, r3
 8004396:	9805      	ldr	r0, [sp, #20]
 8004398:	f001 fac2 	bl	8005920 <__pow5mult>
 800439c:	4680      	mov	r8, r0
 800439e:	2800      	cmp	r0, #0
 80043a0:	d0b7      	beq.n	8004312 <_strtod_l+0x68a>
 80043a2:	4601      	mov	r1, r0
 80043a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80043a6:	9805      	ldr	r0, [sp, #20]
 80043a8:	f001 fa12 	bl	80057d0 <__multiply>
 80043ac:	900e      	str	r0, [sp, #56]	@ 0x38
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f43f ae85 	beq.w	80040be <_strtod_l+0x436>
 80043b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80043b6:	9805      	ldr	r0, [sp, #20]
 80043b8:	f001 f8f6 	bl	80055a8 <_Bfree>
 80043bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043be:	931a      	str	r3, [sp, #104]	@ 0x68
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	dc1d      	bgt.n	8004400 <_strtod_l+0x778>
 80043c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dd23      	ble.n	8004412 <_strtod_l+0x78a>
 80043ca:	4649      	mov	r1, r9
 80043cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80043ce:	9805      	ldr	r0, [sp, #20]
 80043d0:	f001 faa6 	bl	8005920 <__pow5mult>
 80043d4:	4681      	mov	r9, r0
 80043d6:	b9e0      	cbnz	r0, 8004412 <_strtod_l+0x78a>
 80043d8:	f04f 0900 	mov.w	r9, #0
 80043dc:	e66f      	b.n	80040be <_strtod_l+0x436>
 80043de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80043e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80043e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80043ea:	35e2      	adds	r5, #226	@ 0xe2
 80043ec:	fa01 f305 	lsl.w	r3, r1, r5
 80043f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80043f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80043f4:	e7ba      	b.n	800436c <_strtod_l+0x6e4>
 80043f6:	2300      	movs	r3, #0
 80043f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80043fa:	2301      	movs	r3, #1
 80043fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80043fe:	e7b5      	b.n	800436c <_strtod_l+0x6e4>
 8004400:	462a      	mov	r2, r5
 8004402:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004404:	9805      	ldr	r0, [sp, #20]
 8004406:	f001 fae5 	bl	80059d4 <__lshift>
 800440a:	901a      	str	r0, [sp, #104]	@ 0x68
 800440c:	2800      	cmp	r0, #0
 800440e:	d1d9      	bne.n	80043c4 <_strtod_l+0x73c>
 8004410:	e655      	b.n	80040be <_strtod_l+0x436>
 8004412:	2e00      	cmp	r6, #0
 8004414:	dd07      	ble.n	8004426 <_strtod_l+0x79e>
 8004416:	4649      	mov	r1, r9
 8004418:	4632      	mov	r2, r6
 800441a:	9805      	ldr	r0, [sp, #20]
 800441c:	f001 fada 	bl	80059d4 <__lshift>
 8004420:	4681      	mov	r9, r0
 8004422:	2800      	cmp	r0, #0
 8004424:	d0d8      	beq.n	80043d8 <_strtod_l+0x750>
 8004426:	2f00      	cmp	r7, #0
 8004428:	dd08      	ble.n	800443c <_strtod_l+0x7b4>
 800442a:	4641      	mov	r1, r8
 800442c:	463a      	mov	r2, r7
 800442e:	9805      	ldr	r0, [sp, #20]
 8004430:	f001 fad0 	bl	80059d4 <__lshift>
 8004434:	4680      	mov	r8, r0
 8004436:	2800      	cmp	r0, #0
 8004438:	f43f ae41 	beq.w	80040be <_strtod_l+0x436>
 800443c:	464a      	mov	r2, r9
 800443e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004440:	9805      	ldr	r0, [sp, #20]
 8004442:	f001 fb4f 	bl	8005ae4 <__mdiff>
 8004446:	4604      	mov	r4, r0
 8004448:	2800      	cmp	r0, #0
 800444a:	f43f ae38 	beq.w	80040be <_strtod_l+0x436>
 800444e:	68c3      	ldr	r3, [r0, #12]
 8004450:	4641      	mov	r1, r8
 8004452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004454:	2300      	movs	r3, #0
 8004456:	60c3      	str	r3, [r0, #12]
 8004458:	f001 fb28 	bl	8005aac <__mcmp>
 800445c:	2800      	cmp	r0, #0
 800445e:	da45      	bge.n	80044ec <_strtod_l+0x864>
 8004460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004462:	ea53 030a 	orrs.w	r3, r3, sl
 8004466:	d16b      	bne.n	8004540 <_strtod_l+0x8b8>
 8004468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800446c:	2b00      	cmp	r3, #0
 800446e:	d167      	bne.n	8004540 <_strtod_l+0x8b8>
 8004470:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004474:	0d1b      	lsrs	r3, r3, #20
 8004476:	051b      	lsls	r3, r3, #20
 8004478:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800447c:	d960      	bls.n	8004540 <_strtod_l+0x8b8>
 800447e:	6963      	ldr	r3, [r4, #20]
 8004480:	b913      	cbnz	r3, 8004488 <_strtod_l+0x800>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	2b01      	cmp	r3, #1
 8004486:	dd5b      	ble.n	8004540 <_strtod_l+0x8b8>
 8004488:	4621      	mov	r1, r4
 800448a:	2201      	movs	r2, #1
 800448c:	9805      	ldr	r0, [sp, #20]
 800448e:	f001 faa1 	bl	80059d4 <__lshift>
 8004492:	4641      	mov	r1, r8
 8004494:	4604      	mov	r4, r0
 8004496:	f001 fb09 	bl	8005aac <__mcmp>
 800449a:	2800      	cmp	r0, #0
 800449c:	dd50      	ble.n	8004540 <_strtod_l+0x8b8>
 800449e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80044a2:	9a08      	ldr	r2, [sp, #32]
 80044a4:	0d1b      	lsrs	r3, r3, #20
 80044a6:	051b      	lsls	r3, r3, #20
 80044a8:	2a00      	cmp	r2, #0
 80044aa:	d06a      	beq.n	8004582 <_strtod_l+0x8fa>
 80044ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80044b0:	d867      	bhi.n	8004582 <_strtod_l+0x8fa>
 80044b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80044b6:	f67f ae98 	bls.w	80041ea <_strtod_l+0x562>
 80044ba:	4650      	mov	r0, sl
 80044bc:	4659      	mov	r1, fp
 80044be:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <_strtod_l+0x85c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	f7fc f801 	bl	80004c8 <__aeabi_dmul>
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <_strtod_l+0x860>)
 80044c8:	4682      	mov	sl, r0
 80044ca:	400b      	ands	r3, r1
 80044cc:	468b      	mov	fp, r1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f47f ae00 	bne.w	80040d4 <_strtod_l+0x44c>
 80044d4:	2322      	movs	r3, #34	@ 0x22
 80044d6:	9a05      	ldr	r2, [sp, #20]
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e5fb      	b.n	80040d4 <_strtod_l+0x44c>
 80044dc:	08006950 	.word	0x08006950
 80044e0:	fffffc02 	.word	0xfffffc02
 80044e4:	39500000 	.word	0x39500000
 80044e8:	7ff00000 	.word	0x7ff00000
 80044ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80044f0:	d165      	bne.n	80045be <_strtod_l+0x936>
 80044f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80044f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044f8:	b35a      	cbz	r2, 8004552 <_strtod_l+0x8ca>
 80044fa:	4a99      	ldr	r2, [pc, #612]	@ (8004760 <_strtod_l+0xad8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d12b      	bne.n	8004558 <_strtod_l+0x8d0>
 8004500:	9b08      	ldr	r3, [sp, #32]
 8004502:	4651      	mov	r1, sl
 8004504:	b303      	cbz	r3, 8004548 <_strtod_l+0x8c0>
 8004506:	465a      	mov	r2, fp
 8004508:	4b96      	ldr	r3, [pc, #600]	@ (8004764 <_strtod_l+0xadc>)
 800450a:	4013      	ands	r3, r2
 800450c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004510:	f04f 32ff 	mov.w	r2, #4294967295
 8004514:	d81b      	bhi.n	800454e <_strtod_l+0x8c6>
 8004516:	0d1b      	lsrs	r3, r3, #20
 8004518:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	4299      	cmp	r1, r3
 8004522:	d119      	bne.n	8004558 <_strtod_l+0x8d0>
 8004524:	4b90      	ldr	r3, [pc, #576]	@ (8004768 <_strtod_l+0xae0>)
 8004526:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004528:	429a      	cmp	r2, r3
 800452a:	d102      	bne.n	8004532 <_strtod_l+0x8aa>
 800452c:	3101      	adds	r1, #1
 800452e:	f43f adc6 	beq.w	80040be <_strtod_l+0x436>
 8004532:	f04f 0a00 	mov.w	sl, #0
 8004536:	4b8b      	ldr	r3, [pc, #556]	@ (8004764 <_strtod_l+0xadc>)
 8004538:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800453a:	401a      	ands	r2, r3
 800453c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004540:	9b08      	ldr	r3, [sp, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1b9      	bne.n	80044ba <_strtod_l+0x832>
 8004546:	e5c5      	b.n	80040d4 <_strtod_l+0x44c>
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e7e8      	b.n	8004520 <_strtod_l+0x898>
 800454e:	4613      	mov	r3, r2
 8004550:	e7e6      	b.n	8004520 <_strtod_l+0x898>
 8004552:	ea53 030a 	orrs.w	r3, r3, sl
 8004556:	d0a2      	beq.n	800449e <_strtod_l+0x816>
 8004558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800455a:	b1db      	cbz	r3, 8004594 <_strtod_l+0x90c>
 800455c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800455e:	4213      	tst	r3, r2
 8004560:	d0ee      	beq.n	8004540 <_strtod_l+0x8b8>
 8004562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004564:	4650      	mov	r0, sl
 8004566:	4659      	mov	r1, fp
 8004568:	9a08      	ldr	r2, [sp, #32]
 800456a:	b1bb      	cbz	r3, 800459c <_strtod_l+0x914>
 800456c:	f7ff fb69 	bl	8003c42 <sulp>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004578:	f7fb fdf0 	bl	800015c <__adddf3>
 800457c:	4682      	mov	sl, r0
 800457e:	468b      	mov	fp, r1
 8004580:	e7de      	b.n	8004540 <_strtod_l+0x8b8>
 8004582:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004586:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800458a:	f04f 3aff 	mov.w	sl, #4294967295
 800458e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004592:	e7d5      	b.n	8004540 <_strtod_l+0x8b8>
 8004594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004596:	ea13 0f0a 	tst.w	r3, sl
 800459a:	e7e1      	b.n	8004560 <_strtod_l+0x8d8>
 800459c:	f7ff fb51 	bl	8003c42 <sulp>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045a8:	f7fb fdd6 	bl	8000158 <__aeabi_dsub>
 80045ac:	2200      	movs	r2, #0
 80045ae:	2300      	movs	r3, #0
 80045b0:	4682      	mov	sl, r0
 80045b2:	468b      	mov	fp, r1
 80045b4:	f7fc f9f0 	bl	8000998 <__aeabi_dcmpeq>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d0c1      	beq.n	8004540 <_strtod_l+0x8b8>
 80045bc:	e615      	b.n	80041ea <_strtod_l+0x562>
 80045be:	4641      	mov	r1, r8
 80045c0:	4620      	mov	r0, r4
 80045c2:	f001 fbe3 	bl	8005d8c <__ratio>
 80045c6:	2200      	movs	r2, #0
 80045c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80045cc:	4606      	mov	r6, r0
 80045ce:	460f      	mov	r7, r1
 80045d0:	f7fc f9f6 	bl	80009c0 <__aeabi_dcmple>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d06d      	beq.n	80046b4 <_strtod_l+0xa2c>
 80045d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d178      	bne.n	80046d0 <_strtod_l+0xa48>
 80045de:	f1ba 0f00 	cmp.w	sl, #0
 80045e2:	d156      	bne.n	8004692 <_strtod_l+0xa0a>
 80045e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d158      	bne.n	80046a0 <_strtod_l+0xa18>
 80045ee:	2200      	movs	r2, #0
 80045f0:	4630      	mov	r0, r6
 80045f2:	4639      	mov	r1, r7
 80045f4:	4b5d      	ldr	r3, [pc, #372]	@ (800476c <_strtod_l+0xae4>)
 80045f6:	f7fc f9d9 	bl	80009ac <__aeabi_dcmplt>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d157      	bne.n	80046ae <_strtod_l+0xa26>
 80045fe:	4630      	mov	r0, r6
 8004600:	4639      	mov	r1, r7
 8004602:	2200      	movs	r2, #0
 8004604:	4b5a      	ldr	r3, [pc, #360]	@ (8004770 <_strtod_l+0xae8>)
 8004606:	f7fb ff5f 	bl	80004c8 <__aeabi_dmul>
 800460a:	4606      	mov	r6, r0
 800460c:	460f      	mov	r7, r1
 800460e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004612:	9606      	str	r6, [sp, #24]
 8004614:	9307      	str	r3, [sp, #28]
 8004616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800461a:	4d52      	ldr	r5, [pc, #328]	@ (8004764 <_strtod_l+0xadc>)
 800461c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004622:	401d      	ands	r5, r3
 8004624:	4b53      	ldr	r3, [pc, #332]	@ (8004774 <_strtod_l+0xaec>)
 8004626:	429d      	cmp	r5, r3
 8004628:	f040 80aa 	bne.w	8004780 <_strtod_l+0xaf8>
 800462c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800462e:	4650      	mov	r0, sl
 8004630:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004634:	4659      	mov	r1, fp
 8004636:	f001 fae9 	bl	8005c0c <__ulp>
 800463a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800463e:	f7fb ff43 	bl	80004c8 <__aeabi_dmul>
 8004642:	4652      	mov	r2, sl
 8004644:	465b      	mov	r3, fp
 8004646:	f7fb fd89 	bl	800015c <__adddf3>
 800464a:	460b      	mov	r3, r1
 800464c:	4945      	ldr	r1, [pc, #276]	@ (8004764 <_strtod_l+0xadc>)
 800464e:	4a4a      	ldr	r2, [pc, #296]	@ (8004778 <_strtod_l+0xaf0>)
 8004650:	4019      	ands	r1, r3
 8004652:	4291      	cmp	r1, r2
 8004654:	4682      	mov	sl, r0
 8004656:	d942      	bls.n	80046de <_strtod_l+0xa56>
 8004658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800465a:	4b43      	ldr	r3, [pc, #268]	@ (8004768 <_strtod_l+0xae0>)
 800465c:	429a      	cmp	r2, r3
 800465e:	d103      	bne.n	8004668 <_strtod_l+0x9e0>
 8004660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004662:	3301      	adds	r3, #1
 8004664:	f43f ad2b 	beq.w	80040be <_strtod_l+0x436>
 8004668:	f04f 3aff 	mov.w	sl, #4294967295
 800466c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8004768 <_strtod_l+0xae0>
 8004670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004672:	9805      	ldr	r0, [sp, #20]
 8004674:	f000 ff98 	bl	80055a8 <_Bfree>
 8004678:	4649      	mov	r1, r9
 800467a:	9805      	ldr	r0, [sp, #20]
 800467c:	f000 ff94 	bl	80055a8 <_Bfree>
 8004680:	4641      	mov	r1, r8
 8004682:	9805      	ldr	r0, [sp, #20]
 8004684:	f000 ff90 	bl	80055a8 <_Bfree>
 8004688:	4621      	mov	r1, r4
 800468a:	9805      	ldr	r0, [sp, #20]
 800468c:	f000 ff8c 	bl	80055a8 <_Bfree>
 8004690:	e618      	b.n	80042c4 <_strtod_l+0x63c>
 8004692:	f1ba 0f01 	cmp.w	sl, #1
 8004696:	d103      	bne.n	80046a0 <_strtod_l+0xa18>
 8004698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800469a:	2b00      	cmp	r3, #0
 800469c:	f43f ada5 	beq.w	80041ea <_strtod_l+0x562>
 80046a0:	2200      	movs	r2, #0
 80046a2:	4b36      	ldr	r3, [pc, #216]	@ (800477c <_strtod_l+0xaf4>)
 80046a4:	2600      	movs	r6, #0
 80046a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046aa:	4f30      	ldr	r7, [pc, #192]	@ (800476c <_strtod_l+0xae4>)
 80046ac:	e7b3      	b.n	8004616 <_strtod_l+0x98e>
 80046ae:	2600      	movs	r6, #0
 80046b0:	4f2f      	ldr	r7, [pc, #188]	@ (8004770 <_strtod_l+0xae8>)
 80046b2:	e7ac      	b.n	800460e <_strtod_l+0x986>
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <_strtod_l+0xae8>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	f7fb ff04 	bl	80004c8 <__aeabi_dmul>
 80046c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046c2:	4606      	mov	r6, r0
 80046c4:	460f      	mov	r7, r1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0a1      	beq.n	800460e <_strtod_l+0x986>
 80046ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80046ce:	e7a2      	b.n	8004616 <_strtod_l+0x98e>
 80046d0:	2200      	movs	r2, #0
 80046d2:	4b26      	ldr	r3, [pc, #152]	@ (800476c <_strtod_l+0xae4>)
 80046d4:	4616      	mov	r6, r2
 80046d6:	461f      	mov	r7, r3
 80046d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046dc:	e79b      	b.n	8004616 <_strtod_l+0x98e>
 80046de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80046e2:	9b08      	ldr	r3, [sp, #32]
 80046e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1c1      	bne.n	8004670 <_strtod_l+0x9e8>
 80046ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80046f0:	0d1b      	lsrs	r3, r3, #20
 80046f2:	051b      	lsls	r3, r3, #20
 80046f4:	429d      	cmp	r5, r3
 80046f6:	d1bb      	bne.n	8004670 <_strtod_l+0x9e8>
 80046f8:	4630      	mov	r0, r6
 80046fa:	4639      	mov	r1, r7
 80046fc:	f7fc fa14 	bl	8000b28 <__aeabi_d2lz>
 8004700:	f7fb feb4 	bl	800046c <__aeabi_l2d>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4630      	mov	r0, r6
 800470a:	4639      	mov	r1, r7
 800470c:	f7fb fd24 	bl	8000158 <__aeabi_dsub>
 8004710:	460b      	mov	r3, r1
 8004712:	4602      	mov	r2, r0
 8004714:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004718:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800471c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800471e:	ea46 060a 	orr.w	r6, r6, sl
 8004722:	431e      	orrs	r6, r3
 8004724:	d069      	beq.n	80047fa <_strtod_l+0xb72>
 8004726:	a30a      	add	r3, pc, #40	@ (adr r3, 8004750 <_strtod_l+0xac8>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fc f93e 	bl	80009ac <__aeabi_dcmplt>
 8004730:	2800      	cmp	r0, #0
 8004732:	f47f accf 	bne.w	80040d4 <_strtod_l+0x44c>
 8004736:	a308      	add	r3, pc, #32	@ (adr r3, 8004758 <_strtod_l+0xad0>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004740:	f7fc f952 	bl	80009e8 <__aeabi_dcmpgt>
 8004744:	2800      	cmp	r0, #0
 8004746:	d093      	beq.n	8004670 <_strtod_l+0x9e8>
 8004748:	e4c4      	b.n	80040d4 <_strtod_l+0x44c>
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w
 8004750:	94a03595 	.word	0x94a03595
 8004754:	3fdfffff 	.word	0x3fdfffff
 8004758:	35afe535 	.word	0x35afe535
 800475c:	3fe00000 	.word	0x3fe00000
 8004760:	000fffff 	.word	0x000fffff
 8004764:	7ff00000 	.word	0x7ff00000
 8004768:	7fefffff 	.word	0x7fefffff
 800476c:	3ff00000 	.word	0x3ff00000
 8004770:	3fe00000 	.word	0x3fe00000
 8004774:	7fe00000 	.word	0x7fe00000
 8004778:	7c9fffff 	.word	0x7c9fffff
 800477c:	bff00000 	.word	0xbff00000
 8004780:	9b08      	ldr	r3, [sp, #32]
 8004782:	b323      	cbz	r3, 80047ce <_strtod_l+0xb46>
 8004784:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8004788:	d821      	bhi.n	80047ce <_strtod_l+0xb46>
 800478a:	a327      	add	r3, pc, #156	@ (adr r3, 8004828 <_strtod_l+0xba0>)
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	4630      	mov	r0, r6
 8004792:	4639      	mov	r1, r7
 8004794:	f7fc f914 	bl	80009c0 <__aeabi_dcmple>
 8004798:	b1a0      	cbz	r0, 80047c4 <_strtod_l+0xb3c>
 800479a:	4639      	mov	r1, r7
 800479c:	4630      	mov	r0, r6
 800479e:	f7fc f92d 	bl	80009fc <__aeabi_d2uiz>
 80047a2:	2801      	cmp	r0, #1
 80047a4:	bf38      	it	cc
 80047a6:	2001      	movcc	r0, #1
 80047a8:	f7fb fe14 	bl	80003d4 <__aeabi_ui2d>
 80047ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80047ae:	4606      	mov	r6, r0
 80047b0:	460f      	mov	r7, r1
 80047b2:	b9fb      	cbnz	r3, 80047f4 <_strtod_l+0xb6c>
 80047b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047b8:	9014      	str	r0, [sp, #80]	@ 0x50
 80047ba:	9315      	str	r3, [sp, #84]	@ 0x54
 80047bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80047c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80047c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80047c6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80047ca:	1b5b      	subs	r3, r3, r5
 80047cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80047ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047d2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80047d6:	f001 fa19 	bl	8005c0c <__ulp>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4650      	mov	r0, sl
 80047e0:	4659      	mov	r1, fp
 80047e2:	f7fb fe71 	bl	80004c8 <__aeabi_dmul>
 80047e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80047ea:	f7fb fcb7 	bl	800015c <__adddf3>
 80047ee:	4682      	mov	sl, r0
 80047f0:	468b      	mov	fp, r1
 80047f2:	e776      	b.n	80046e2 <_strtod_l+0xa5a>
 80047f4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80047f8:	e7e0      	b.n	80047bc <_strtod_l+0xb34>
 80047fa:	a30d      	add	r3, pc, #52	@ (adr r3, 8004830 <_strtod_l+0xba8>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fc f8d4 	bl	80009ac <__aeabi_dcmplt>
 8004804:	e79e      	b.n	8004744 <_strtod_l+0xabc>
 8004806:	2300      	movs	r3, #0
 8004808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800480a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800480c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f7ff ba77 	b.w	8003d02 <_strtod_l+0x7a>
 8004814:	2a65      	cmp	r2, #101	@ 0x65
 8004816:	f43f ab6e 	beq.w	8003ef6 <_strtod_l+0x26e>
 800481a:	2a45      	cmp	r2, #69	@ 0x45
 800481c:	f43f ab6b 	beq.w	8003ef6 <_strtod_l+0x26e>
 8004820:	2301      	movs	r3, #1
 8004822:	f7ff bba6 	b.w	8003f72 <_strtod_l+0x2ea>
 8004826:	bf00      	nop
 8004828:	ffc00000 	.word	0xffc00000
 800482c:	41dfffff 	.word	0x41dfffff
 8004830:	94a03595 	.word	0x94a03595
 8004834:	3fcfffff 	.word	0x3fcfffff

08004838 <strtod>:
 8004838:	460a      	mov	r2, r1
 800483a:	4601      	mov	r1, r0
 800483c:	4802      	ldr	r0, [pc, #8]	@ (8004848 <strtod+0x10>)
 800483e:	4b03      	ldr	r3, [pc, #12]	@ (800484c <strtod+0x14>)
 8004840:	6800      	ldr	r0, [r0, #0]
 8004842:	f7ff ba21 	b.w	8003c88 <_strtod_l>
 8004846:	bf00      	nop
 8004848:	20000184 	.word	0x20000184
 800484c:	20000018 	.word	0x20000018

08004850 <std>:
 8004850:	2300      	movs	r3, #0
 8004852:	b510      	push	{r4, lr}
 8004854:	4604      	mov	r4, r0
 8004856:	e9c0 3300 	strd	r3, r3, [r0]
 800485a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800485e:	6083      	str	r3, [r0, #8]
 8004860:	8181      	strh	r1, [r0, #12]
 8004862:	6643      	str	r3, [r0, #100]	@ 0x64
 8004864:	81c2      	strh	r2, [r0, #14]
 8004866:	6183      	str	r3, [r0, #24]
 8004868:	4619      	mov	r1, r3
 800486a:	2208      	movs	r2, #8
 800486c:	305c      	adds	r0, #92	@ 0x5c
 800486e:	f000 f8f4 	bl	8004a5a <memset>
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <std+0x58>)
 8004874:	6224      	str	r4, [r4, #32]
 8004876:	6263      	str	r3, [r4, #36]	@ 0x24
 8004878:	4b0c      	ldr	r3, [pc, #48]	@ (80048ac <std+0x5c>)
 800487a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <std+0x60>)
 800487e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <std+0x64>)
 8004882:	6323      	str	r3, [r4, #48]	@ 0x30
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <std+0x68>)
 8004886:	429c      	cmp	r4, r3
 8004888:	d006      	beq.n	8004898 <std+0x48>
 800488a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800488e:	4294      	cmp	r4, r2
 8004890:	d002      	beq.n	8004898 <std+0x48>
 8004892:	33d0      	adds	r3, #208	@ 0xd0
 8004894:	429c      	cmp	r4, r3
 8004896:	d105      	bne.n	80048a4 <std+0x54>
 8004898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a0:	f000 b9c2 	b.w	8004c28 <__retarget_lock_init_recursive>
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	bf00      	nop
 80048a8:	080049d5 	.word	0x080049d5
 80048ac:	080049f7 	.word	0x080049f7
 80048b0:	08004a2f 	.word	0x08004a2f
 80048b4:	08004a53 	.word	0x08004a53
 80048b8:	20000328 	.word	0x20000328

080048bc <stdio_exit_handler>:
 80048bc:	4a02      	ldr	r2, [pc, #8]	@ (80048c8 <stdio_exit_handler+0xc>)
 80048be:	4903      	ldr	r1, [pc, #12]	@ (80048cc <stdio_exit_handler+0x10>)
 80048c0:	4803      	ldr	r0, [pc, #12]	@ (80048d0 <stdio_exit_handler+0x14>)
 80048c2:	f000 b869 	b.w	8004998 <_fwalk_sglue>
 80048c6:	bf00      	nop
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	08005f91 	.word	0x08005f91
 80048d0:	20000188 	.word	0x20000188

080048d4 <cleanup_stdio>:
 80048d4:	6841      	ldr	r1, [r0, #4]
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <cleanup_stdio+0x34>)
 80048d8:	b510      	push	{r4, lr}
 80048da:	4299      	cmp	r1, r3
 80048dc:	4604      	mov	r4, r0
 80048de:	d001      	beq.n	80048e4 <cleanup_stdio+0x10>
 80048e0:	f001 fb56 	bl	8005f90 <_fflush_r>
 80048e4:	68a1      	ldr	r1, [r4, #8]
 80048e6:	4b09      	ldr	r3, [pc, #36]	@ (800490c <cleanup_stdio+0x38>)
 80048e8:	4299      	cmp	r1, r3
 80048ea:	d002      	beq.n	80048f2 <cleanup_stdio+0x1e>
 80048ec:	4620      	mov	r0, r4
 80048ee:	f001 fb4f 	bl	8005f90 <_fflush_r>
 80048f2:	68e1      	ldr	r1, [r4, #12]
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <cleanup_stdio+0x3c>)
 80048f6:	4299      	cmp	r1, r3
 80048f8:	d004      	beq.n	8004904 <cleanup_stdio+0x30>
 80048fa:	4620      	mov	r0, r4
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f001 bb46 	b.w	8005f90 <_fflush_r>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	20000328 	.word	0x20000328
 800490c:	20000390 	.word	0x20000390
 8004910:	200003f8 	.word	0x200003f8

08004914 <global_stdio_init.part.0>:
 8004914:	b510      	push	{r4, lr}
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <global_stdio_init.part.0+0x30>)
 8004918:	4c0b      	ldr	r4, [pc, #44]	@ (8004948 <global_stdio_init.part.0+0x34>)
 800491a:	4a0c      	ldr	r2, [pc, #48]	@ (800494c <global_stdio_init.part.0+0x38>)
 800491c:	4620      	mov	r0, r4
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	2104      	movs	r1, #4
 8004922:	2200      	movs	r2, #0
 8004924:	f7ff ff94 	bl	8004850 <std>
 8004928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800492c:	2201      	movs	r2, #1
 800492e:	2109      	movs	r1, #9
 8004930:	f7ff ff8e 	bl	8004850 <std>
 8004934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004938:	2202      	movs	r2, #2
 800493a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493e:	2112      	movs	r1, #18
 8004940:	f7ff bf86 	b.w	8004850 <std>
 8004944:	20000460 	.word	0x20000460
 8004948:	20000328 	.word	0x20000328
 800494c:	080048bd 	.word	0x080048bd

08004950 <__sfp_lock_acquire>:
 8004950:	4801      	ldr	r0, [pc, #4]	@ (8004958 <__sfp_lock_acquire+0x8>)
 8004952:	f000 b96a 	b.w	8004c2a <__retarget_lock_acquire_recursive>
 8004956:	bf00      	nop
 8004958:	20000469 	.word	0x20000469

0800495c <__sfp_lock_release>:
 800495c:	4801      	ldr	r0, [pc, #4]	@ (8004964 <__sfp_lock_release+0x8>)
 800495e:	f000 b965 	b.w	8004c2c <__retarget_lock_release_recursive>
 8004962:	bf00      	nop
 8004964:	20000469 	.word	0x20000469

08004968 <__sinit>:
 8004968:	b510      	push	{r4, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	f7ff fff0 	bl	8004950 <__sfp_lock_acquire>
 8004970:	6a23      	ldr	r3, [r4, #32]
 8004972:	b11b      	cbz	r3, 800497c <__sinit+0x14>
 8004974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004978:	f7ff bff0 	b.w	800495c <__sfp_lock_release>
 800497c:	4b04      	ldr	r3, [pc, #16]	@ (8004990 <__sinit+0x28>)
 800497e:	6223      	str	r3, [r4, #32]
 8004980:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <__sinit+0x2c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f5      	bne.n	8004974 <__sinit+0xc>
 8004988:	f7ff ffc4 	bl	8004914 <global_stdio_init.part.0>
 800498c:	e7f2      	b.n	8004974 <__sinit+0xc>
 800498e:	bf00      	nop
 8004990:	080048d5 	.word	0x080048d5
 8004994:	20000460 	.word	0x20000460

08004998 <_fwalk_sglue>:
 8004998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800499c:	4607      	mov	r7, r0
 800499e:	4688      	mov	r8, r1
 80049a0:	4614      	mov	r4, r2
 80049a2:	2600      	movs	r6, #0
 80049a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049a8:	f1b9 0901 	subs.w	r9, r9, #1
 80049ac:	d505      	bpl.n	80049ba <_fwalk_sglue+0x22>
 80049ae:	6824      	ldr	r4, [r4, #0]
 80049b0:	2c00      	cmp	r4, #0
 80049b2:	d1f7      	bne.n	80049a4 <_fwalk_sglue+0xc>
 80049b4:	4630      	mov	r0, r6
 80049b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ba:	89ab      	ldrh	r3, [r5, #12]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d907      	bls.n	80049d0 <_fwalk_sglue+0x38>
 80049c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049c4:	3301      	adds	r3, #1
 80049c6:	d003      	beq.n	80049d0 <_fwalk_sglue+0x38>
 80049c8:	4629      	mov	r1, r5
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	4306      	orrs	r6, r0
 80049d0:	3568      	adds	r5, #104	@ 0x68
 80049d2:	e7e9      	b.n	80049a8 <_fwalk_sglue+0x10>

080049d4 <__sread>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	460c      	mov	r4, r1
 80049d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049dc:	f000 f8d6 	bl	8004b8c <_read_r>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	bfab      	itete	ge
 80049e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049e6:	89a3      	ldrhlt	r3, [r4, #12]
 80049e8:	181b      	addge	r3, r3, r0
 80049ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049ee:	bfac      	ite	ge
 80049f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049f2:	81a3      	strhlt	r3, [r4, #12]
 80049f4:	bd10      	pop	{r4, pc}

080049f6 <__swrite>:
 80049f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049fa:	461f      	mov	r7, r3
 80049fc:	898b      	ldrh	r3, [r1, #12]
 80049fe:	4605      	mov	r5, r0
 8004a00:	05db      	lsls	r3, r3, #23
 8004a02:	460c      	mov	r4, r1
 8004a04:	4616      	mov	r6, r2
 8004a06:	d505      	bpl.n	8004a14 <__swrite+0x1e>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a10:	f000 f8aa 	bl	8004b68 <_lseek_r>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	4632      	mov	r2, r6
 8004a18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	4628      	mov	r0, r5
 8004a20:	463b      	mov	r3, r7
 8004a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	f000 b8c1 	b.w	8004bb0 <_write_r>

08004a2e <__sseek>:
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	460c      	mov	r4, r1
 8004a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a36:	f000 f897 	bl	8004b68 <_lseek_r>
 8004a3a:	1c43      	adds	r3, r0, #1
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	bf15      	itete	ne
 8004a40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a4a:	81a3      	strheq	r3, [r4, #12]
 8004a4c:	bf18      	it	ne
 8004a4e:	81a3      	strhne	r3, [r4, #12]
 8004a50:	bd10      	pop	{r4, pc}

08004a52 <__sclose>:
 8004a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a56:	f000 b877 	b.w	8004b48 <_close_r>

08004a5a <memset>:
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d100      	bne.n	8004a64 <memset+0xa>
 8004a62:	4770      	bx	lr
 8004a64:	f803 1b01 	strb.w	r1, [r3], #1
 8004a68:	e7f9      	b.n	8004a5e <memset+0x4>

08004a6a <strncmp>:
 8004a6a:	b510      	push	{r4, lr}
 8004a6c:	b16a      	cbz	r2, 8004a8a <strncmp+0x20>
 8004a6e:	3901      	subs	r1, #1
 8004a70:	1884      	adds	r4, r0, r2
 8004a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d103      	bne.n	8004a86 <strncmp+0x1c>
 8004a7e:	42a0      	cmp	r0, r4
 8004a80:	d001      	beq.n	8004a86 <strncmp+0x1c>
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d1f5      	bne.n	8004a72 <strncmp+0x8>
 8004a86:	1ad0      	subs	r0, r2, r3
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	e7fc      	b.n	8004a88 <strncmp+0x1e>
	...

08004a90 <strtok>:
 8004a90:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <strtok+0x5c>)
 8004a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	681f      	ldr	r7, [r3, #0]
 8004a98:	4605      	mov	r5, r0
 8004a9a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004a9c:	460e      	mov	r6, r1
 8004a9e:	b9ec      	cbnz	r4, 8004adc <strtok+0x4c>
 8004aa0:	2050      	movs	r0, #80	@ 0x50
 8004aa2:	f000 fc79 	bl	8005398 <malloc>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6478      	str	r0, [r7, #68]	@ 0x44
 8004aaa:	b920      	cbnz	r0, 8004ab6 <strtok+0x26>
 8004aac:	215b      	movs	r1, #91	@ 0x5b
 8004aae:	4b10      	ldr	r3, [pc, #64]	@ (8004af0 <strtok+0x60>)
 8004ab0:	4810      	ldr	r0, [pc, #64]	@ (8004af4 <strtok+0x64>)
 8004ab2:	f000 f8d1 	bl	8004c58 <__assert_func>
 8004ab6:	e9c0 4400 	strd	r4, r4, [r0]
 8004aba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004abe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004ac2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004ac6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004aca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004ace:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004ad2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004ad6:	6184      	str	r4, [r0, #24]
 8004ad8:	7704      	strb	r4, [r0, #28]
 8004ada:	6244      	str	r4, [r0, #36]	@ 0x24
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae8:	f000 b806 	b.w	8004af8 <__strtok_r>
 8004aec:	20000184 	.word	0x20000184
 8004af0:	08006978 	.word	0x08006978
 8004af4:	0800698f 	.word	0x0800698f

08004af8 <__strtok_r>:
 8004af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	b908      	cbnz	r0, 8004b02 <__strtok_r+0xa>
 8004afe:	6814      	ldr	r4, [r2, #0]
 8004b00:	b144      	cbz	r4, 8004b14 <__strtok_r+0x1c>
 8004b02:	460f      	mov	r7, r1
 8004b04:	4620      	mov	r0, r4
 8004b06:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004b0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004b0e:	b91e      	cbnz	r6, 8004b18 <__strtok_r+0x20>
 8004b10:	b965      	cbnz	r5, 8004b2c <__strtok_r+0x34>
 8004b12:	6015      	str	r5, [r2, #0]
 8004b14:	2000      	movs	r0, #0
 8004b16:	e005      	b.n	8004b24 <__strtok_r+0x2c>
 8004b18:	42b5      	cmp	r5, r6
 8004b1a:	d1f6      	bne.n	8004b0a <__strtok_r+0x12>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f0      	bne.n	8004b02 <__strtok_r+0xa>
 8004b20:	6014      	str	r4, [r2, #0]
 8004b22:	7003      	strb	r3, [r0, #0]
 8004b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b26:	461c      	mov	r4, r3
 8004b28:	e00c      	b.n	8004b44 <__strtok_r+0x4c>
 8004b2a:	b915      	cbnz	r5, 8004b32 <__strtok_r+0x3a>
 8004b2c:	460e      	mov	r6, r1
 8004b2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004b36:	42ab      	cmp	r3, r5
 8004b38:	d1f7      	bne.n	8004b2a <__strtok_r+0x32>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f3      	beq.n	8004b26 <__strtok_r+0x2e>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004b44:	6014      	str	r4, [r2, #0]
 8004b46:	e7ed      	b.n	8004b24 <__strtok_r+0x2c>

08004b48 <_close_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4d05      	ldr	r5, [pc, #20]	@ (8004b64 <_close_r+0x1c>)
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fc fe69 	bl	800182a <_close>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_close_r+0x1a>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_close_r+0x1a>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	20000464 	.word	0x20000464

08004b68 <_lseek_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	2200      	movs	r2, #0
 8004b72:	4d05      	ldr	r5, [pc, #20]	@ (8004b88 <_lseek_r+0x20>)
 8004b74:	602a      	str	r2, [r5, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fc fe7b 	bl	8001872 <_lseek>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_lseek_r+0x1e>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_lseek_r+0x1e>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	20000464 	.word	0x20000464

08004b8c <_read_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	2200      	movs	r2, #0
 8004b96:	4d05      	ldr	r5, [pc, #20]	@ (8004bac <_read_r+0x20>)
 8004b98:	602a      	str	r2, [r5, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f7fc fe0c 	bl	80017b8 <_read>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_read_r+0x1e>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_read_r+0x1e>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	20000464 	.word	0x20000464

08004bb0 <_write_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4d05      	ldr	r5, [pc, #20]	@ (8004bd0 <_write_r+0x20>)
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fc fe17 	bl	80017f2 <_write>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_write_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_write_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000464 	.word	0x20000464

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	@ (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000184 	.word	0x20000184

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2600      	movs	r6, #0
 8004be4:	4d0c      	ldr	r5, [pc, #48]	@ (8004c18 <__libc_init_array+0x38>)
 8004be6:	4c0d      	ldr	r4, [pc, #52]	@ (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1b64      	subs	r4, r4, r5
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a6      	cmp	r6, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	f001 fe6e 	bl	80068d0 <_init>
 8004bf4:	2600      	movs	r6, #0
 8004bf6:	4d0a      	ldr	r5, [pc, #40]	@ (8004c20 <__libc_init_array+0x40>)
 8004bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8004c24 <__libc_init_array+0x44>)
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a6      	cmp	r6, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c08:	4798      	blx	r3
 8004c0a:	3601      	adds	r6, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c12:	4798      	blx	r3
 8004c14:	3601      	adds	r6, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08006d2c 	.word	0x08006d2c
 8004c1c:	08006d2c 	.word	0x08006d2c
 8004c20:	08006d2c 	.word	0x08006d2c
 8004c24:	08006d30 	.word	0x08006d30

08004c28 <__retarget_lock_init_recursive>:
 8004c28:	4770      	bx	lr

08004c2a <__retarget_lock_acquire_recursive>:
 8004c2a:	4770      	bx	lr

08004c2c <__retarget_lock_release_recursive>:
 8004c2c:	4770      	bx	lr

08004c2e <memcpy>:
 8004c2e:	440a      	add	r2, r1
 8004c30:	4291      	cmp	r1, r2
 8004c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c36:	d100      	bne.n	8004c3a <memcpy+0xc>
 8004c38:	4770      	bx	lr
 8004c3a:	b510      	push	{r4, lr}
 8004c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c40:	4291      	cmp	r1, r2
 8004c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c46:	d1f9      	bne.n	8004c3c <memcpy+0xe>
 8004c48:	bd10      	pop	{r4, pc}
	...

08004c4c <nan>:
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4901      	ldr	r1, [pc, #4]	@ (8004c54 <nan+0x8>)
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	7ff80000 	.word	0x7ff80000

08004c58 <__assert_func>:
 8004c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c5a:	4614      	mov	r4, r2
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <__assert_func+0x2c>)
 8004c60:	4605      	mov	r5, r0
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68d8      	ldr	r0, [r3, #12]
 8004c66:	b954      	cbnz	r4, 8004c7e <__assert_func+0x26>
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <__assert_func+0x30>)
 8004c6a:	461c      	mov	r4, r3
 8004c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c70:	9100      	str	r1, [sp, #0]
 8004c72:	462b      	mov	r3, r5
 8004c74:	4905      	ldr	r1, [pc, #20]	@ (8004c8c <__assert_func+0x34>)
 8004c76:	f001 f9b3 	bl	8005fe0 <fiprintf>
 8004c7a:	f001 f9d3 	bl	8006024 <abort>
 8004c7e:	4b04      	ldr	r3, [pc, #16]	@ (8004c90 <__assert_func+0x38>)
 8004c80:	e7f4      	b.n	8004c6c <__assert_func+0x14>
 8004c82:	bf00      	nop
 8004c84:	20000184 	.word	0x20000184
 8004c88:	08006a2c 	.word	0x08006a2c
 8004c8c:	080069fe 	.word	0x080069fe
 8004c90:	080069f1 	.word	0x080069f1

08004c94 <_free_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4605      	mov	r5, r0
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	d040      	beq.n	8004d1e <_free_r+0x8a>
 8004c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ca0:	1f0c      	subs	r4, r1, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bfb8      	it	lt
 8004ca6:	18e4      	addlt	r4, r4, r3
 8004ca8:	f000 fc32 	bl	8005510 <__malloc_lock>
 8004cac:	4a1c      	ldr	r2, [pc, #112]	@ (8004d20 <_free_r+0x8c>)
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	b933      	cbnz	r3, 8004cc0 <_free_r+0x2c>
 8004cb2:	6063      	str	r3, [r4, #4]
 8004cb4:	6014      	str	r4, [r2, #0]
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cbc:	f000 bc2e 	b.w	800551c <__malloc_unlock>
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	d908      	bls.n	8004cd6 <_free_r+0x42>
 8004cc4:	6820      	ldr	r0, [r4, #0]
 8004cc6:	1821      	adds	r1, r4, r0
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	bf01      	itttt	eq
 8004ccc:	6819      	ldreq	r1, [r3, #0]
 8004cce:	685b      	ldreq	r3, [r3, #4]
 8004cd0:	1809      	addeq	r1, r1, r0
 8004cd2:	6021      	streq	r1, [r4, #0]
 8004cd4:	e7ed      	b.n	8004cb2 <_free_r+0x1e>
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	b10b      	cbz	r3, 8004ce0 <_free_r+0x4c>
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	d9fa      	bls.n	8004cd6 <_free_r+0x42>
 8004ce0:	6811      	ldr	r1, [r2, #0]
 8004ce2:	1850      	adds	r0, r2, r1
 8004ce4:	42a0      	cmp	r0, r4
 8004ce6:	d10b      	bne.n	8004d00 <_free_r+0x6c>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	4401      	add	r1, r0
 8004cec:	1850      	adds	r0, r2, r1
 8004cee:	4283      	cmp	r3, r0
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	d1e0      	bne.n	8004cb6 <_free_r+0x22>
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4408      	add	r0, r1
 8004cfa:	6010      	str	r0, [r2, #0]
 8004cfc:	6053      	str	r3, [r2, #4]
 8004cfe:	e7da      	b.n	8004cb6 <_free_r+0x22>
 8004d00:	d902      	bls.n	8004d08 <_free_r+0x74>
 8004d02:	230c      	movs	r3, #12
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	e7d6      	b.n	8004cb6 <_free_r+0x22>
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	1821      	adds	r1, r4, r0
 8004d0c:	428b      	cmp	r3, r1
 8004d0e:	bf01      	itttt	eq
 8004d10:	6819      	ldreq	r1, [r3, #0]
 8004d12:	685b      	ldreq	r3, [r3, #4]
 8004d14:	1809      	addeq	r1, r1, r0
 8004d16:	6021      	streq	r1, [r4, #0]
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6054      	str	r4, [r2, #4]
 8004d1c:	e7cb      	b.n	8004cb6 <_free_r+0x22>
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000470 	.word	0x20000470

08004d24 <rshift>:
 8004d24:	6903      	ldr	r3, [r0, #16]
 8004d26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d2a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004d2e:	f100 0414 	add.w	r4, r0, #20
 8004d32:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004d36:	dd46      	ble.n	8004dc6 <rshift+0xa2>
 8004d38:	f011 011f 	ands.w	r1, r1, #31
 8004d3c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004d40:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004d44:	d10c      	bne.n	8004d60 <rshift+0x3c>
 8004d46:	4629      	mov	r1, r5
 8004d48:	f100 0710 	add.w	r7, r0, #16
 8004d4c:	42b1      	cmp	r1, r6
 8004d4e:	d335      	bcc.n	8004dbc <rshift+0x98>
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	1eea      	subs	r2, r5, #3
 8004d56:	4296      	cmp	r6, r2
 8004d58:	bf38      	it	cc
 8004d5a:	2300      	movcc	r3, #0
 8004d5c:	4423      	add	r3, r4
 8004d5e:	e015      	b.n	8004d8c <rshift+0x68>
 8004d60:	46a1      	mov	r9, r4
 8004d62:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004d66:	f1c1 0820 	rsb	r8, r1, #32
 8004d6a:	40cf      	lsrs	r7, r1
 8004d6c:	f105 0e04 	add.w	lr, r5, #4
 8004d70:	4576      	cmp	r6, lr
 8004d72:	46f4      	mov	ip, lr
 8004d74:	d816      	bhi.n	8004da4 <rshift+0x80>
 8004d76:	1a9a      	subs	r2, r3, r2
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	3a04      	subs	r2, #4
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	42ae      	cmp	r6, r5
 8004d80:	bf38      	it	cc
 8004d82:	2200      	movcc	r2, #0
 8004d84:	18a3      	adds	r3, r4, r2
 8004d86:	50a7      	str	r7, [r4, r2]
 8004d88:	b107      	cbz	r7, 8004d8c <rshift+0x68>
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	eba3 0204 	sub.w	r2, r3, r4
 8004d92:	bf08      	it	eq
 8004d94:	2300      	moveq	r3, #0
 8004d96:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004d9a:	6102      	str	r2, [r0, #16]
 8004d9c:	bf08      	it	eq
 8004d9e:	6143      	streq	r3, [r0, #20]
 8004da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004da4:	f8dc c000 	ldr.w	ip, [ip]
 8004da8:	fa0c fc08 	lsl.w	ip, ip, r8
 8004dac:	ea4c 0707 	orr.w	r7, ip, r7
 8004db0:	f849 7b04 	str.w	r7, [r9], #4
 8004db4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004db8:	40cf      	lsrs	r7, r1
 8004dba:	e7d9      	b.n	8004d70 <rshift+0x4c>
 8004dbc:	f851 cb04 	ldr.w	ip, [r1], #4
 8004dc0:	f847 cf04 	str.w	ip, [r7, #4]!
 8004dc4:	e7c2      	b.n	8004d4c <rshift+0x28>
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	e7e0      	b.n	8004d8c <rshift+0x68>

08004dca <__hexdig_fun>:
 8004dca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	d802      	bhi.n	8004dd8 <__hexdig_fun+0xe>
 8004dd2:	3820      	subs	r0, #32
 8004dd4:	b2c0      	uxtb	r0, r0
 8004dd6:	4770      	bx	lr
 8004dd8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d801      	bhi.n	8004de4 <__hexdig_fun+0x1a>
 8004de0:	3847      	subs	r0, #71	@ 0x47
 8004de2:	e7f7      	b.n	8004dd4 <__hexdig_fun+0xa>
 8004de4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004de8:	2b05      	cmp	r3, #5
 8004dea:	d801      	bhi.n	8004df0 <__hexdig_fun+0x26>
 8004dec:	3827      	subs	r0, #39	@ 0x27
 8004dee:	e7f1      	b.n	8004dd4 <__hexdig_fun+0xa>
 8004df0:	2000      	movs	r0, #0
 8004df2:	4770      	bx	lr

08004df4 <__gethex>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	468a      	mov	sl, r1
 8004dfa:	4690      	mov	r8, r2
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	680b      	ldr	r3, [r1, #0]
 8004e02:	9001      	str	r0, [sp, #4]
 8004e04:	1c9c      	adds	r4, r3, #2
 8004e06:	46a1      	mov	r9, r4
 8004e08:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004e0c:	2830      	cmp	r0, #48	@ 0x30
 8004e0e:	d0fa      	beq.n	8004e06 <__gethex+0x12>
 8004e10:	eba9 0303 	sub.w	r3, r9, r3
 8004e14:	f1a3 0b02 	sub.w	fp, r3, #2
 8004e18:	f7ff ffd7 	bl	8004dca <__hexdig_fun>
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d168      	bne.n	8004ef4 <__gethex+0x100>
 8004e22:	2201      	movs	r2, #1
 8004e24:	4648      	mov	r0, r9
 8004e26:	499f      	ldr	r1, [pc, #636]	@ (80050a4 <__gethex+0x2b0>)
 8004e28:	f7ff fe1f 	bl	8004a6a <strncmp>
 8004e2c:	4607      	mov	r7, r0
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d167      	bne.n	8004f02 <__gethex+0x10e>
 8004e32:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004e36:	4626      	mov	r6, r4
 8004e38:	f7ff ffc7 	bl	8004dca <__hexdig_fun>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d062      	beq.n	8004f06 <__gethex+0x112>
 8004e40:	4623      	mov	r3, r4
 8004e42:	7818      	ldrb	r0, [r3, #0]
 8004e44:	4699      	mov	r9, r3
 8004e46:	2830      	cmp	r0, #48	@ 0x30
 8004e48:	f103 0301 	add.w	r3, r3, #1
 8004e4c:	d0f9      	beq.n	8004e42 <__gethex+0x4e>
 8004e4e:	f7ff ffbc 	bl	8004dca <__hexdig_fun>
 8004e52:	fab0 f580 	clz	r5, r0
 8004e56:	f04f 0b01 	mov.w	fp, #1
 8004e5a:	096d      	lsrs	r5, r5, #5
 8004e5c:	464a      	mov	r2, r9
 8004e5e:	4616      	mov	r6, r2
 8004e60:	7830      	ldrb	r0, [r6, #0]
 8004e62:	3201      	adds	r2, #1
 8004e64:	f7ff ffb1 	bl	8004dca <__hexdig_fun>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d1f8      	bne.n	8004e5e <__gethex+0x6a>
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4630      	mov	r0, r6
 8004e70:	498c      	ldr	r1, [pc, #560]	@ (80050a4 <__gethex+0x2b0>)
 8004e72:	f7ff fdfa 	bl	8004a6a <strncmp>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d13f      	bne.n	8004efa <__gethex+0x106>
 8004e7a:	b944      	cbnz	r4, 8004e8e <__gethex+0x9a>
 8004e7c:	1c74      	adds	r4, r6, #1
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4616      	mov	r6, r2
 8004e82:	7830      	ldrb	r0, [r6, #0]
 8004e84:	3201      	adds	r2, #1
 8004e86:	f7ff ffa0 	bl	8004dca <__hexdig_fun>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d1f8      	bne.n	8004e80 <__gethex+0x8c>
 8004e8e:	1ba4      	subs	r4, r4, r6
 8004e90:	00a7      	lsls	r7, r4, #2
 8004e92:	7833      	ldrb	r3, [r6, #0]
 8004e94:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8004e98:	2b50      	cmp	r3, #80	@ 0x50
 8004e9a:	d13e      	bne.n	8004f1a <__gethex+0x126>
 8004e9c:	7873      	ldrb	r3, [r6, #1]
 8004e9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004ea0:	d033      	beq.n	8004f0a <__gethex+0x116>
 8004ea2:	2b2d      	cmp	r3, #45	@ 0x2d
 8004ea4:	d034      	beq.n	8004f10 <__gethex+0x11c>
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	1c71      	adds	r1, r6, #1
 8004eaa:	7808      	ldrb	r0, [r1, #0]
 8004eac:	f7ff ff8d 	bl	8004dca <__hexdig_fun>
 8004eb0:	1e43      	subs	r3, r0, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b18      	cmp	r3, #24
 8004eb6:	d830      	bhi.n	8004f1a <__gethex+0x126>
 8004eb8:	f1a0 0210 	sub.w	r2, r0, #16
 8004ebc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004ec0:	f7ff ff83 	bl	8004dca <__hexdig_fun>
 8004ec4:	f100 3cff 	add.w	ip, r0, #4294967295
 8004ec8:	fa5f fc8c 	uxtb.w	ip, ip
 8004ecc:	f1bc 0f18 	cmp.w	ip, #24
 8004ed0:	f04f 030a 	mov.w	r3, #10
 8004ed4:	d91e      	bls.n	8004f14 <__gethex+0x120>
 8004ed6:	b104      	cbz	r4, 8004eda <__gethex+0xe6>
 8004ed8:	4252      	negs	r2, r2
 8004eda:	4417      	add	r7, r2
 8004edc:	f8ca 1000 	str.w	r1, [sl]
 8004ee0:	b1ed      	cbz	r5, 8004f1e <__gethex+0x12a>
 8004ee2:	f1bb 0f00 	cmp.w	fp, #0
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2506      	moveq	r5, #6
 8004eea:	2500      	movne	r5, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	b005      	add	sp, #20
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	2500      	movs	r5, #0
 8004ef6:	462c      	mov	r4, r5
 8004ef8:	e7b0      	b.n	8004e5c <__gethex+0x68>
 8004efa:	2c00      	cmp	r4, #0
 8004efc:	d1c7      	bne.n	8004e8e <__gethex+0x9a>
 8004efe:	4627      	mov	r7, r4
 8004f00:	e7c7      	b.n	8004e92 <__gethex+0x9e>
 8004f02:	464e      	mov	r6, r9
 8004f04:	462f      	mov	r7, r5
 8004f06:	2501      	movs	r5, #1
 8004f08:	e7c3      	b.n	8004e92 <__gethex+0x9e>
 8004f0a:	2400      	movs	r4, #0
 8004f0c:	1cb1      	adds	r1, r6, #2
 8004f0e:	e7cc      	b.n	8004eaa <__gethex+0xb6>
 8004f10:	2401      	movs	r4, #1
 8004f12:	e7fb      	b.n	8004f0c <__gethex+0x118>
 8004f14:	fb03 0002 	mla	r0, r3, r2, r0
 8004f18:	e7ce      	b.n	8004eb8 <__gethex+0xc4>
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	e7de      	b.n	8004edc <__gethex+0xe8>
 8004f1e:	4629      	mov	r1, r5
 8004f20:	eba6 0309 	sub.w	r3, r6, r9
 8004f24:	3b01      	subs	r3, #1
 8004f26:	2b07      	cmp	r3, #7
 8004f28:	dc0a      	bgt.n	8004f40 <__gethex+0x14c>
 8004f2a:	9801      	ldr	r0, [sp, #4]
 8004f2c:	f000 fafc 	bl	8005528 <_Balloc>
 8004f30:	4604      	mov	r4, r0
 8004f32:	b940      	cbnz	r0, 8004f46 <__gethex+0x152>
 8004f34:	4602      	mov	r2, r0
 8004f36:	21e4      	movs	r1, #228	@ 0xe4
 8004f38:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <__gethex+0x2b4>)
 8004f3a:	485c      	ldr	r0, [pc, #368]	@ (80050ac <__gethex+0x2b8>)
 8004f3c:	f7ff fe8c 	bl	8004c58 <__assert_func>
 8004f40:	3101      	adds	r1, #1
 8004f42:	105b      	asrs	r3, r3, #1
 8004f44:	e7ef      	b.n	8004f26 <__gethex+0x132>
 8004f46:	2300      	movs	r3, #0
 8004f48:	f100 0a14 	add.w	sl, r0, #20
 8004f4c:	4655      	mov	r5, sl
 8004f4e:	469b      	mov	fp, r3
 8004f50:	45b1      	cmp	r9, r6
 8004f52:	d337      	bcc.n	8004fc4 <__gethex+0x1d0>
 8004f54:	f845 bb04 	str.w	fp, [r5], #4
 8004f58:	eba5 050a 	sub.w	r5, r5, sl
 8004f5c:	10ad      	asrs	r5, r5, #2
 8004f5e:	6125      	str	r5, [r4, #16]
 8004f60:	4658      	mov	r0, fp
 8004f62:	f000 fbd3 	bl	800570c <__hi0bits>
 8004f66:	016d      	lsls	r5, r5, #5
 8004f68:	f8d8 6000 	ldr.w	r6, [r8]
 8004f6c:	1a2d      	subs	r5, r5, r0
 8004f6e:	42b5      	cmp	r5, r6
 8004f70:	dd54      	ble.n	800501c <__gethex+0x228>
 8004f72:	1bad      	subs	r5, r5, r6
 8004f74:	4629      	mov	r1, r5
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 ff5b 	bl	8005e32 <__any_on>
 8004f7c:	4681      	mov	r9, r0
 8004f7e:	b178      	cbz	r0, 8004fa0 <__gethex+0x1ac>
 8004f80:	f04f 0901 	mov.w	r9, #1
 8004f84:	1e6b      	subs	r3, r5, #1
 8004f86:	1159      	asrs	r1, r3, #5
 8004f88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8004f8c:	f003 021f 	and.w	r2, r3, #31
 8004f90:	fa09 f202 	lsl.w	r2, r9, r2
 8004f94:	420a      	tst	r2, r1
 8004f96:	d003      	beq.n	8004fa0 <__gethex+0x1ac>
 8004f98:	454b      	cmp	r3, r9
 8004f9a:	dc36      	bgt.n	800500a <__gethex+0x216>
 8004f9c:	f04f 0902 	mov.w	r9, #2
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f7ff febe 	bl	8004d24 <rshift>
 8004fa8:	442f      	add	r7, r5
 8004faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fae:	42bb      	cmp	r3, r7
 8004fb0:	da42      	bge.n	8005038 <__gethex+0x244>
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	9801      	ldr	r0, [sp, #4]
 8004fb6:	f000 faf7 	bl	80055a8 <_Bfree>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fbe:	25a3      	movs	r5, #163	@ 0xa3
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e793      	b.n	8004eec <__gethex+0xf8>
 8004fc4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8004fc8:	2a2e      	cmp	r2, #46	@ 0x2e
 8004fca:	d012      	beq.n	8004ff2 <__gethex+0x1fe>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d104      	bne.n	8004fda <__gethex+0x1e6>
 8004fd0:	f845 bb04 	str.w	fp, [r5], #4
 8004fd4:	f04f 0b00 	mov.w	fp, #0
 8004fd8:	465b      	mov	r3, fp
 8004fda:	7830      	ldrb	r0, [r6, #0]
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	f7ff fef4 	bl	8004dca <__hexdig_fun>
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	f000 000f 	and.w	r0, r0, #15
 8004fe8:	4098      	lsls	r0, r3
 8004fea:	ea4b 0b00 	orr.w	fp, fp, r0
 8004fee:	3304      	adds	r3, #4
 8004ff0:	e7ae      	b.n	8004f50 <__gethex+0x15c>
 8004ff2:	45b1      	cmp	r9, r6
 8004ff4:	d8ea      	bhi.n	8004fcc <__gethex+0x1d8>
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	492a      	ldr	r1, [pc, #168]	@ (80050a4 <__gethex+0x2b0>)
 8004ffc:	9303      	str	r3, [sp, #12]
 8004ffe:	f7ff fd34 	bl	8004a6a <strncmp>
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	2800      	cmp	r0, #0
 8005006:	d1e1      	bne.n	8004fcc <__gethex+0x1d8>
 8005008:	e7a2      	b.n	8004f50 <__gethex+0x15c>
 800500a:	4620      	mov	r0, r4
 800500c:	1ea9      	subs	r1, r5, #2
 800500e:	f000 ff10 	bl	8005e32 <__any_on>
 8005012:	2800      	cmp	r0, #0
 8005014:	d0c2      	beq.n	8004f9c <__gethex+0x1a8>
 8005016:	f04f 0903 	mov.w	r9, #3
 800501a:	e7c1      	b.n	8004fa0 <__gethex+0x1ac>
 800501c:	da09      	bge.n	8005032 <__gethex+0x23e>
 800501e:	1b75      	subs	r5, r6, r5
 8005020:	4621      	mov	r1, r4
 8005022:	462a      	mov	r2, r5
 8005024:	9801      	ldr	r0, [sp, #4]
 8005026:	f000 fcd5 	bl	80059d4 <__lshift>
 800502a:	4604      	mov	r4, r0
 800502c:	1b7f      	subs	r7, r7, r5
 800502e:	f100 0a14 	add.w	sl, r0, #20
 8005032:	f04f 0900 	mov.w	r9, #0
 8005036:	e7b8      	b.n	8004faa <__gethex+0x1b6>
 8005038:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800503c:	42bd      	cmp	r5, r7
 800503e:	dd6f      	ble.n	8005120 <__gethex+0x32c>
 8005040:	1bed      	subs	r5, r5, r7
 8005042:	42ae      	cmp	r6, r5
 8005044:	dc34      	bgt.n	80050b0 <__gethex+0x2bc>
 8005046:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d022      	beq.n	8005094 <__gethex+0x2a0>
 800504e:	2b03      	cmp	r3, #3
 8005050:	d024      	beq.n	800509c <__gethex+0x2a8>
 8005052:	2b01      	cmp	r3, #1
 8005054:	d115      	bne.n	8005082 <__gethex+0x28e>
 8005056:	42ae      	cmp	r6, r5
 8005058:	d113      	bne.n	8005082 <__gethex+0x28e>
 800505a:	2e01      	cmp	r6, #1
 800505c:	d10b      	bne.n	8005076 <__gethex+0x282>
 800505e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005062:	9a02      	ldr	r2, [sp, #8]
 8005064:	2562      	movs	r5, #98	@ 0x62
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	2301      	movs	r3, #1
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	f8ca 3000 	str.w	r3, [sl]
 8005070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005072:	601c      	str	r4, [r3, #0]
 8005074:	e73a      	b.n	8004eec <__gethex+0xf8>
 8005076:	4620      	mov	r0, r4
 8005078:	1e71      	subs	r1, r6, #1
 800507a:	f000 feda 	bl	8005e32 <__any_on>
 800507e:	2800      	cmp	r0, #0
 8005080:	d1ed      	bne.n	800505e <__gethex+0x26a>
 8005082:	4621      	mov	r1, r4
 8005084:	9801      	ldr	r0, [sp, #4]
 8005086:	f000 fa8f 	bl	80055a8 <_Bfree>
 800508a:	2300      	movs	r3, #0
 800508c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800508e:	2550      	movs	r5, #80	@ 0x50
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e72b      	b.n	8004eec <__gethex+0xf8>
 8005094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f3      	bne.n	8005082 <__gethex+0x28e>
 800509a:	e7e0      	b.n	800505e <__gethex+0x26a>
 800509c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1dd      	bne.n	800505e <__gethex+0x26a>
 80050a2:	e7ee      	b.n	8005082 <__gethex+0x28e>
 80050a4:	08006916 	.word	0x08006916
 80050a8:	08006a2d 	.word	0x08006a2d
 80050ac:	08006a3e 	.word	0x08006a3e
 80050b0:	1e6f      	subs	r7, r5, #1
 80050b2:	f1b9 0f00 	cmp.w	r9, #0
 80050b6:	d130      	bne.n	800511a <__gethex+0x326>
 80050b8:	b127      	cbz	r7, 80050c4 <__gethex+0x2d0>
 80050ba:	4639      	mov	r1, r7
 80050bc:	4620      	mov	r0, r4
 80050be:	f000 feb8 	bl	8005e32 <__any_on>
 80050c2:	4681      	mov	r9, r0
 80050c4:	2301      	movs	r3, #1
 80050c6:	4629      	mov	r1, r5
 80050c8:	1b76      	subs	r6, r6, r5
 80050ca:	2502      	movs	r5, #2
 80050cc:	117a      	asrs	r2, r7, #5
 80050ce:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80050d2:	f007 071f 	and.w	r7, r7, #31
 80050d6:	40bb      	lsls	r3, r7
 80050d8:	4213      	tst	r3, r2
 80050da:	4620      	mov	r0, r4
 80050dc:	bf18      	it	ne
 80050de:	f049 0902 	orrne.w	r9, r9, #2
 80050e2:	f7ff fe1f 	bl	8004d24 <rshift>
 80050e6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80050ea:	f1b9 0f00 	cmp.w	r9, #0
 80050ee:	d047      	beq.n	8005180 <__gethex+0x38c>
 80050f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d015      	beq.n	8005124 <__gethex+0x330>
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d017      	beq.n	800512c <__gethex+0x338>
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d109      	bne.n	8005114 <__gethex+0x320>
 8005100:	f019 0f02 	tst.w	r9, #2
 8005104:	d006      	beq.n	8005114 <__gethex+0x320>
 8005106:	f8da 3000 	ldr.w	r3, [sl]
 800510a:	ea49 0903 	orr.w	r9, r9, r3
 800510e:	f019 0f01 	tst.w	r9, #1
 8005112:	d10e      	bne.n	8005132 <__gethex+0x33e>
 8005114:	f045 0510 	orr.w	r5, r5, #16
 8005118:	e032      	b.n	8005180 <__gethex+0x38c>
 800511a:	f04f 0901 	mov.w	r9, #1
 800511e:	e7d1      	b.n	80050c4 <__gethex+0x2d0>
 8005120:	2501      	movs	r5, #1
 8005122:	e7e2      	b.n	80050ea <__gethex+0x2f6>
 8005124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005126:	f1c3 0301 	rsb	r3, r3, #1
 800512a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800512c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <__gethex+0x320>
 8005132:	f04f 0c00 	mov.w	ip, #0
 8005136:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800513a:	f104 0314 	add.w	r3, r4, #20
 800513e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005142:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005146:	4618      	mov	r0, r3
 8005148:	f853 2b04 	ldr.w	r2, [r3], #4
 800514c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005150:	d01b      	beq.n	800518a <__gethex+0x396>
 8005152:	3201      	adds	r2, #1
 8005154:	6002      	str	r2, [r0, #0]
 8005156:	2d02      	cmp	r5, #2
 8005158:	f104 0314 	add.w	r3, r4, #20
 800515c:	d13c      	bne.n	80051d8 <__gethex+0x3e4>
 800515e:	f8d8 2000 	ldr.w	r2, [r8]
 8005162:	3a01      	subs	r2, #1
 8005164:	42b2      	cmp	r2, r6
 8005166:	d109      	bne.n	800517c <__gethex+0x388>
 8005168:	2201      	movs	r2, #1
 800516a:	1171      	asrs	r1, r6, #5
 800516c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005170:	f006 061f 	and.w	r6, r6, #31
 8005174:	fa02 f606 	lsl.w	r6, r2, r6
 8005178:	421e      	tst	r6, r3
 800517a:	d13a      	bne.n	80051f2 <__gethex+0x3fe>
 800517c:	f045 0520 	orr.w	r5, r5, #32
 8005180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005182:	601c      	str	r4, [r3, #0]
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	601f      	str	r7, [r3, #0]
 8005188:	e6b0      	b.n	8004eec <__gethex+0xf8>
 800518a:	4299      	cmp	r1, r3
 800518c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005190:	d8d9      	bhi.n	8005146 <__gethex+0x352>
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	459b      	cmp	fp, r3
 8005196:	db17      	blt.n	80051c8 <__gethex+0x3d4>
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	9801      	ldr	r0, [sp, #4]
 800519c:	3101      	adds	r1, #1
 800519e:	f000 f9c3 	bl	8005528 <_Balloc>
 80051a2:	4681      	mov	r9, r0
 80051a4:	b918      	cbnz	r0, 80051ae <__gethex+0x3ba>
 80051a6:	4602      	mov	r2, r0
 80051a8:	2184      	movs	r1, #132	@ 0x84
 80051aa:	4b19      	ldr	r3, [pc, #100]	@ (8005210 <__gethex+0x41c>)
 80051ac:	e6c5      	b.n	8004f3a <__gethex+0x146>
 80051ae:	6922      	ldr	r2, [r4, #16]
 80051b0:	f104 010c 	add.w	r1, r4, #12
 80051b4:	3202      	adds	r2, #2
 80051b6:	0092      	lsls	r2, r2, #2
 80051b8:	300c      	adds	r0, #12
 80051ba:	f7ff fd38 	bl	8004c2e <memcpy>
 80051be:	4621      	mov	r1, r4
 80051c0:	9801      	ldr	r0, [sp, #4]
 80051c2:	f000 f9f1 	bl	80055a8 <_Bfree>
 80051c6:	464c      	mov	r4, r9
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	6122      	str	r2, [r4, #16]
 80051ce:	2201      	movs	r2, #1
 80051d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051d4:	615a      	str	r2, [r3, #20]
 80051d6:	e7be      	b.n	8005156 <__gethex+0x362>
 80051d8:	6922      	ldr	r2, [r4, #16]
 80051da:	455a      	cmp	r2, fp
 80051dc:	dd0b      	ble.n	80051f6 <__gethex+0x402>
 80051de:	2101      	movs	r1, #1
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff fd9f 	bl	8004d24 <rshift>
 80051e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80051ea:	3701      	adds	r7, #1
 80051ec:	42bb      	cmp	r3, r7
 80051ee:	f6ff aee0 	blt.w	8004fb2 <__gethex+0x1be>
 80051f2:	2501      	movs	r5, #1
 80051f4:	e7c2      	b.n	800517c <__gethex+0x388>
 80051f6:	f016 061f 	ands.w	r6, r6, #31
 80051fa:	d0fa      	beq.n	80051f2 <__gethex+0x3fe>
 80051fc:	4453      	add	r3, sl
 80051fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005202:	f000 fa83 	bl	800570c <__hi0bits>
 8005206:	f1c6 0620 	rsb	r6, r6, #32
 800520a:	42b0      	cmp	r0, r6
 800520c:	dbe7      	blt.n	80051de <__gethex+0x3ea>
 800520e:	e7f0      	b.n	80051f2 <__gethex+0x3fe>
 8005210:	08006a2d 	.word	0x08006a2d

08005214 <L_shift>:
 8005214:	f1c2 0208 	rsb	r2, r2, #8
 8005218:	0092      	lsls	r2, r2, #2
 800521a:	b570      	push	{r4, r5, r6, lr}
 800521c:	f1c2 0620 	rsb	r6, r2, #32
 8005220:	6843      	ldr	r3, [r0, #4]
 8005222:	6804      	ldr	r4, [r0, #0]
 8005224:	fa03 f506 	lsl.w	r5, r3, r6
 8005228:	432c      	orrs	r4, r5
 800522a:	40d3      	lsrs	r3, r2
 800522c:	6004      	str	r4, [r0, #0]
 800522e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005232:	4288      	cmp	r0, r1
 8005234:	d3f4      	bcc.n	8005220 <L_shift+0xc>
 8005236:	bd70      	pop	{r4, r5, r6, pc}

08005238 <__match>:
 8005238:	b530      	push	{r4, r5, lr}
 800523a:	6803      	ldr	r3, [r0, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005242:	b914      	cbnz	r4, 800524a <__match+0x12>
 8005244:	6003      	str	r3, [r0, #0]
 8005246:	2001      	movs	r0, #1
 8005248:	bd30      	pop	{r4, r5, pc}
 800524a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005252:	2d19      	cmp	r5, #25
 8005254:	bf98      	it	ls
 8005256:	3220      	addls	r2, #32
 8005258:	42a2      	cmp	r2, r4
 800525a:	d0f0      	beq.n	800523e <__match+0x6>
 800525c:	2000      	movs	r0, #0
 800525e:	e7f3      	b.n	8005248 <__match+0x10>

08005260 <__hexnan>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	2500      	movs	r5, #0
 8005266:	680b      	ldr	r3, [r1, #0]
 8005268:	4682      	mov	sl, r0
 800526a:	115e      	asrs	r6, r3, #5
 800526c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005270:	f013 031f 	ands.w	r3, r3, #31
 8005274:	bf18      	it	ne
 8005276:	3604      	addne	r6, #4
 8005278:	1f37      	subs	r7, r6, #4
 800527a:	4690      	mov	r8, r2
 800527c:	46b9      	mov	r9, r7
 800527e:	463c      	mov	r4, r7
 8005280:	46ab      	mov	fp, r5
 8005282:	b087      	sub	sp, #28
 8005284:	6801      	ldr	r1, [r0, #0]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	f846 5c04 	str.w	r5, [r6, #-4]
 800528c:	9502      	str	r5, [sp, #8]
 800528e:	784a      	ldrb	r2, [r1, #1]
 8005290:	1c4b      	adds	r3, r1, #1
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	b342      	cbz	r2, 80052e8 <__hexnan+0x88>
 8005296:	4610      	mov	r0, r2
 8005298:	9105      	str	r1, [sp, #20]
 800529a:	9204      	str	r2, [sp, #16]
 800529c:	f7ff fd95 	bl	8004dca <__hexdig_fun>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d151      	bne.n	8005348 <__hexnan+0xe8>
 80052a4:	9a04      	ldr	r2, [sp, #16]
 80052a6:	9905      	ldr	r1, [sp, #20]
 80052a8:	2a20      	cmp	r2, #32
 80052aa:	d818      	bhi.n	80052de <__hexnan+0x7e>
 80052ac:	9b02      	ldr	r3, [sp, #8]
 80052ae:	459b      	cmp	fp, r3
 80052b0:	dd13      	ble.n	80052da <__hexnan+0x7a>
 80052b2:	454c      	cmp	r4, r9
 80052b4:	d206      	bcs.n	80052c4 <__hexnan+0x64>
 80052b6:	2d07      	cmp	r5, #7
 80052b8:	dc04      	bgt.n	80052c4 <__hexnan+0x64>
 80052ba:	462a      	mov	r2, r5
 80052bc:	4649      	mov	r1, r9
 80052be:	4620      	mov	r0, r4
 80052c0:	f7ff ffa8 	bl	8005214 <L_shift>
 80052c4:	4544      	cmp	r4, r8
 80052c6:	d952      	bls.n	800536e <__hexnan+0x10e>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f1a4 0904 	sub.w	r9, r4, #4
 80052ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80052d2:	461d      	mov	r5, r3
 80052d4:	464c      	mov	r4, r9
 80052d6:	f8cd b008 	str.w	fp, [sp, #8]
 80052da:	9903      	ldr	r1, [sp, #12]
 80052dc:	e7d7      	b.n	800528e <__hexnan+0x2e>
 80052de:	2a29      	cmp	r2, #41	@ 0x29
 80052e0:	d157      	bne.n	8005392 <__hexnan+0x132>
 80052e2:	3102      	adds	r1, #2
 80052e4:	f8ca 1000 	str.w	r1, [sl]
 80052e8:	f1bb 0f00 	cmp.w	fp, #0
 80052ec:	d051      	beq.n	8005392 <__hexnan+0x132>
 80052ee:	454c      	cmp	r4, r9
 80052f0:	d206      	bcs.n	8005300 <__hexnan+0xa0>
 80052f2:	2d07      	cmp	r5, #7
 80052f4:	dc04      	bgt.n	8005300 <__hexnan+0xa0>
 80052f6:	462a      	mov	r2, r5
 80052f8:	4649      	mov	r1, r9
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7ff ff8a 	bl	8005214 <L_shift>
 8005300:	4544      	cmp	r4, r8
 8005302:	d936      	bls.n	8005372 <__hexnan+0x112>
 8005304:	4623      	mov	r3, r4
 8005306:	f1a8 0204 	sub.w	r2, r8, #4
 800530a:	f853 1b04 	ldr.w	r1, [r3], #4
 800530e:	429f      	cmp	r7, r3
 8005310:	f842 1f04 	str.w	r1, [r2, #4]!
 8005314:	d2f9      	bcs.n	800530a <__hexnan+0xaa>
 8005316:	1b3b      	subs	r3, r7, r4
 8005318:	f023 0303 	bic.w	r3, r3, #3
 800531c:	3304      	adds	r3, #4
 800531e:	3401      	adds	r4, #1
 8005320:	3e03      	subs	r6, #3
 8005322:	42b4      	cmp	r4, r6
 8005324:	bf88      	it	hi
 8005326:	2304      	movhi	r3, #4
 8005328:	2200      	movs	r2, #0
 800532a:	4443      	add	r3, r8
 800532c:	f843 2b04 	str.w	r2, [r3], #4
 8005330:	429f      	cmp	r7, r3
 8005332:	d2fb      	bcs.n	800532c <__hexnan+0xcc>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	b91b      	cbnz	r3, 8005340 <__hexnan+0xe0>
 8005338:	4547      	cmp	r7, r8
 800533a:	d128      	bne.n	800538e <__hexnan+0x12e>
 800533c:	2301      	movs	r3, #1
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	2005      	movs	r0, #5
 8005342:	b007      	add	sp, #28
 8005344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005348:	3501      	adds	r5, #1
 800534a:	2d08      	cmp	r5, #8
 800534c:	f10b 0b01 	add.w	fp, fp, #1
 8005350:	dd06      	ble.n	8005360 <__hexnan+0x100>
 8005352:	4544      	cmp	r4, r8
 8005354:	d9c1      	bls.n	80052da <__hexnan+0x7a>
 8005356:	2300      	movs	r3, #0
 8005358:	2501      	movs	r5, #1
 800535a:	f844 3c04 	str.w	r3, [r4, #-4]
 800535e:	3c04      	subs	r4, #4
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	f000 000f 	and.w	r0, r0, #15
 8005366:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800536a:	6020      	str	r0, [r4, #0]
 800536c:	e7b5      	b.n	80052da <__hexnan+0x7a>
 800536e:	2508      	movs	r5, #8
 8005370:	e7b3      	b.n	80052da <__hexnan+0x7a>
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0dd      	beq.n	8005334 <__hexnan+0xd4>
 8005378:	f04f 32ff 	mov.w	r2, #4294967295
 800537c:	f1c3 0320 	rsb	r3, r3, #32
 8005380:	40da      	lsrs	r2, r3
 8005382:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005386:	4013      	ands	r3, r2
 8005388:	f846 3c04 	str.w	r3, [r6, #-4]
 800538c:	e7d2      	b.n	8005334 <__hexnan+0xd4>
 800538e:	3f04      	subs	r7, #4
 8005390:	e7d0      	b.n	8005334 <__hexnan+0xd4>
 8005392:	2004      	movs	r0, #4
 8005394:	e7d5      	b.n	8005342 <__hexnan+0xe2>
	...

08005398 <malloc>:
 8005398:	4b02      	ldr	r3, [pc, #8]	@ (80053a4 <malloc+0xc>)
 800539a:	4601      	mov	r1, r0
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	f000 b825 	b.w	80053ec <_malloc_r>
 80053a2:	bf00      	nop
 80053a4:	20000184 	.word	0x20000184

080053a8 <sbrk_aligned>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4e0f      	ldr	r6, [pc, #60]	@ (80053e8 <sbrk_aligned+0x40>)
 80053ac:	460c      	mov	r4, r1
 80053ae:	6831      	ldr	r1, [r6, #0]
 80053b0:	4605      	mov	r5, r0
 80053b2:	b911      	cbnz	r1, 80053ba <sbrk_aligned+0x12>
 80053b4:	f000 fe26 	bl	8006004 <_sbrk_r>
 80053b8:	6030      	str	r0, [r6, #0]
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 fe21 	bl	8006004 <_sbrk_r>
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d103      	bne.n	80053ce <sbrk_aligned+0x26>
 80053c6:	f04f 34ff 	mov.w	r4, #4294967295
 80053ca:	4620      	mov	r0, r4
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	1cc4      	adds	r4, r0, #3
 80053d0:	f024 0403 	bic.w	r4, r4, #3
 80053d4:	42a0      	cmp	r0, r4
 80053d6:	d0f8      	beq.n	80053ca <sbrk_aligned+0x22>
 80053d8:	1a21      	subs	r1, r4, r0
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 fe12 	bl	8006004 <_sbrk_r>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d1f2      	bne.n	80053ca <sbrk_aligned+0x22>
 80053e4:	e7ef      	b.n	80053c6 <sbrk_aligned+0x1e>
 80053e6:	bf00      	nop
 80053e8:	2000046c 	.word	0x2000046c

080053ec <_malloc_r>:
 80053ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	1ccd      	adds	r5, r1, #3
 80053f2:	f025 0503 	bic.w	r5, r5, #3
 80053f6:	3508      	adds	r5, #8
 80053f8:	2d0c      	cmp	r5, #12
 80053fa:	bf38      	it	cc
 80053fc:	250c      	movcc	r5, #12
 80053fe:	2d00      	cmp	r5, #0
 8005400:	4606      	mov	r6, r0
 8005402:	db01      	blt.n	8005408 <_malloc_r+0x1c>
 8005404:	42a9      	cmp	r1, r5
 8005406:	d904      	bls.n	8005412 <_malloc_r+0x26>
 8005408:	230c      	movs	r3, #12
 800540a:	6033      	str	r3, [r6, #0]
 800540c:	2000      	movs	r0, #0
 800540e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054e8 <_malloc_r+0xfc>
 8005416:	f000 f87b 	bl	8005510 <__malloc_lock>
 800541a:	f8d8 3000 	ldr.w	r3, [r8]
 800541e:	461c      	mov	r4, r3
 8005420:	bb44      	cbnz	r4, 8005474 <_malloc_r+0x88>
 8005422:	4629      	mov	r1, r5
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff ffbf 	bl	80053a8 <sbrk_aligned>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	4604      	mov	r4, r0
 800542e:	d158      	bne.n	80054e2 <_malloc_r+0xf6>
 8005430:	f8d8 4000 	ldr.w	r4, [r8]
 8005434:	4627      	mov	r7, r4
 8005436:	2f00      	cmp	r7, #0
 8005438:	d143      	bne.n	80054c2 <_malloc_r+0xd6>
 800543a:	2c00      	cmp	r4, #0
 800543c:	d04b      	beq.n	80054d6 <_malloc_r+0xea>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	4639      	mov	r1, r7
 8005442:	4630      	mov	r0, r6
 8005444:	eb04 0903 	add.w	r9, r4, r3
 8005448:	f000 fddc 	bl	8006004 <_sbrk_r>
 800544c:	4581      	cmp	r9, r0
 800544e:	d142      	bne.n	80054d6 <_malloc_r+0xea>
 8005450:	6821      	ldr	r1, [r4, #0]
 8005452:	4630      	mov	r0, r6
 8005454:	1a6d      	subs	r5, r5, r1
 8005456:	4629      	mov	r1, r5
 8005458:	f7ff ffa6 	bl	80053a8 <sbrk_aligned>
 800545c:	3001      	adds	r0, #1
 800545e:	d03a      	beq.n	80054d6 <_malloc_r+0xea>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	442b      	add	r3, r5
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	f8d8 3000 	ldr.w	r3, [r8]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	bb62      	cbnz	r2, 80054c8 <_malloc_r+0xdc>
 800546e:	f8c8 7000 	str.w	r7, [r8]
 8005472:	e00f      	b.n	8005494 <_malloc_r+0xa8>
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	1b52      	subs	r2, r2, r5
 8005478:	d420      	bmi.n	80054bc <_malloc_r+0xd0>
 800547a:	2a0b      	cmp	r2, #11
 800547c:	d917      	bls.n	80054ae <_malloc_r+0xc2>
 800547e:	1961      	adds	r1, r4, r5
 8005480:	42a3      	cmp	r3, r4
 8005482:	6025      	str	r5, [r4, #0]
 8005484:	bf18      	it	ne
 8005486:	6059      	strne	r1, [r3, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	bf08      	it	eq
 800548c:	f8c8 1000 	streq.w	r1, [r8]
 8005490:	5162      	str	r2, [r4, r5]
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f841 	bl	800551c <__malloc_unlock>
 800549a:	f104 000b 	add.w	r0, r4, #11
 800549e:	1d23      	adds	r3, r4, #4
 80054a0:	f020 0007 	bic.w	r0, r0, #7
 80054a4:	1ac2      	subs	r2, r0, r3
 80054a6:	bf1c      	itt	ne
 80054a8:	1a1b      	subne	r3, r3, r0
 80054aa:	50a3      	strne	r3, [r4, r2]
 80054ac:	e7af      	b.n	800540e <_malloc_r+0x22>
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	bf0c      	ite	eq
 80054b4:	f8c8 2000 	streq.w	r2, [r8]
 80054b8:	605a      	strne	r2, [r3, #4]
 80054ba:	e7eb      	b.n	8005494 <_malloc_r+0xa8>
 80054bc:	4623      	mov	r3, r4
 80054be:	6864      	ldr	r4, [r4, #4]
 80054c0:	e7ae      	b.n	8005420 <_malloc_r+0x34>
 80054c2:	463c      	mov	r4, r7
 80054c4:	687f      	ldr	r7, [r7, #4]
 80054c6:	e7b6      	b.n	8005436 <_malloc_r+0x4a>
 80054c8:	461a      	mov	r2, r3
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d1fb      	bne.n	80054c8 <_malloc_r+0xdc>
 80054d0:	2300      	movs	r3, #0
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	e7de      	b.n	8005494 <_malloc_r+0xa8>
 80054d6:	230c      	movs	r3, #12
 80054d8:	4630      	mov	r0, r6
 80054da:	6033      	str	r3, [r6, #0]
 80054dc:	f000 f81e 	bl	800551c <__malloc_unlock>
 80054e0:	e794      	b.n	800540c <_malloc_r+0x20>
 80054e2:	6005      	str	r5, [r0, #0]
 80054e4:	e7d6      	b.n	8005494 <_malloc_r+0xa8>
 80054e6:	bf00      	nop
 80054e8:	20000470 	.word	0x20000470

080054ec <__ascii_mbtowc>:
 80054ec:	b082      	sub	sp, #8
 80054ee:	b901      	cbnz	r1, 80054f2 <__ascii_mbtowc+0x6>
 80054f0:	a901      	add	r1, sp, #4
 80054f2:	b142      	cbz	r2, 8005506 <__ascii_mbtowc+0x1a>
 80054f4:	b14b      	cbz	r3, 800550a <__ascii_mbtowc+0x1e>
 80054f6:	7813      	ldrb	r3, [r2, #0]
 80054f8:	600b      	str	r3, [r1, #0]
 80054fa:	7812      	ldrb	r2, [r2, #0]
 80054fc:	1e10      	subs	r0, r2, #0
 80054fe:	bf18      	it	ne
 8005500:	2001      	movne	r0, #1
 8005502:	b002      	add	sp, #8
 8005504:	4770      	bx	lr
 8005506:	4610      	mov	r0, r2
 8005508:	e7fb      	b.n	8005502 <__ascii_mbtowc+0x16>
 800550a:	f06f 0001 	mvn.w	r0, #1
 800550e:	e7f8      	b.n	8005502 <__ascii_mbtowc+0x16>

08005510 <__malloc_lock>:
 8005510:	4801      	ldr	r0, [pc, #4]	@ (8005518 <__malloc_lock+0x8>)
 8005512:	f7ff bb8a 	b.w	8004c2a <__retarget_lock_acquire_recursive>
 8005516:	bf00      	nop
 8005518:	20000468 	.word	0x20000468

0800551c <__malloc_unlock>:
 800551c:	4801      	ldr	r0, [pc, #4]	@ (8005524 <__malloc_unlock+0x8>)
 800551e:	f7ff bb85 	b.w	8004c2c <__retarget_lock_release_recursive>
 8005522:	bf00      	nop
 8005524:	20000468 	.word	0x20000468

08005528 <_Balloc>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	69c6      	ldr	r6, [r0, #28]
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	b976      	cbnz	r6, 8005550 <_Balloc+0x28>
 8005532:	2010      	movs	r0, #16
 8005534:	f7ff ff30 	bl	8005398 <malloc>
 8005538:	4602      	mov	r2, r0
 800553a:	61e0      	str	r0, [r4, #28]
 800553c:	b920      	cbnz	r0, 8005548 <_Balloc+0x20>
 800553e:	216b      	movs	r1, #107	@ 0x6b
 8005540:	4b17      	ldr	r3, [pc, #92]	@ (80055a0 <_Balloc+0x78>)
 8005542:	4818      	ldr	r0, [pc, #96]	@ (80055a4 <_Balloc+0x7c>)
 8005544:	f7ff fb88 	bl	8004c58 <__assert_func>
 8005548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800554c:	6006      	str	r6, [r0, #0]
 800554e:	60c6      	str	r6, [r0, #12]
 8005550:	69e6      	ldr	r6, [r4, #28]
 8005552:	68f3      	ldr	r3, [r6, #12]
 8005554:	b183      	cbz	r3, 8005578 <_Balloc+0x50>
 8005556:	69e3      	ldr	r3, [r4, #28]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800555e:	b9b8      	cbnz	r0, 8005590 <_Balloc+0x68>
 8005560:	2101      	movs	r1, #1
 8005562:	fa01 f605 	lsl.w	r6, r1, r5
 8005566:	1d72      	adds	r2, r6, #5
 8005568:	4620      	mov	r0, r4
 800556a:	0092      	lsls	r2, r2, #2
 800556c:	f000 fd61 	bl	8006032 <_calloc_r>
 8005570:	b160      	cbz	r0, 800558c <_Balloc+0x64>
 8005572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005576:	e00e      	b.n	8005596 <_Balloc+0x6e>
 8005578:	2221      	movs	r2, #33	@ 0x21
 800557a:	2104      	movs	r1, #4
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fd58 	bl	8006032 <_calloc_r>
 8005582:	69e3      	ldr	r3, [r4, #28]
 8005584:	60f0      	str	r0, [r6, #12]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e4      	bne.n	8005556 <_Balloc+0x2e>
 800558c:	2000      	movs	r0, #0
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	6802      	ldr	r2, [r0, #0]
 8005592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005596:	2300      	movs	r3, #0
 8005598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800559c:	e7f7      	b.n	800558e <_Balloc+0x66>
 800559e:	bf00      	nop
 80055a0:	08006978 	.word	0x08006978
 80055a4:	08006a9e 	.word	0x08006a9e

080055a8 <_Bfree>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	69c6      	ldr	r6, [r0, #28]
 80055ac:	4605      	mov	r5, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	b976      	cbnz	r6, 80055d0 <_Bfree+0x28>
 80055b2:	2010      	movs	r0, #16
 80055b4:	f7ff fef0 	bl	8005398 <malloc>
 80055b8:	4602      	mov	r2, r0
 80055ba:	61e8      	str	r0, [r5, #28]
 80055bc:	b920      	cbnz	r0, 80055c8 <_Bfree+0x20>
 80055be:	218f      	movs	r1, #143	@ 0x8f
 80055c0:	4b08      	ldr	r3, [pc, #32]	@ (80055e4 <_Bfree+0x3c>)
 80055c2:	4809      	ldr	r0, [pc, #36]	@ (80055e8 <_Bfree+0x40>)
 80055c4:	f7ff fb48 	bl	8004c58 <__assert_func>
 80055c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055cc:	6006      	str	r6, [r0, #0]
 80055ce:	60c6      	str	r6, [r0, #12]
 80055d0:	b13c      	cbz	r4, 80055e2 <_Bfree+0x3a>
 80055d2:	69eb      	ldr	r3, [r5, #28]
 80055d4:	6862      	ldr	r2, [r4, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055dc:	6021      	str	r1, [r4, #0]
 80055de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	08006978 	.word	0x08006978
 80055e8:	08006a9e 	.word	0x08006a9e

080055ec <__multadd>:
 80055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f0:	4607      	mov	r7, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	461e      	mov	r6, r3
 80055f6:	2000      	movs	r0, #0
 80055f8:	690d      	ldr	r5, [r1, #16]
 80055fa:	f101 0c14 	add.w	ip, r1, #20
 80055fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005602:	3001      	adds	r0, #1
 8005604:	b299      	uxth	r1, r3
 8005606:	fb02 6101 	mla	r1, r2, r1, r6
 800560a:	0c1e      	lsrs	r6, r3, #16
 800560c:	0c0b      	lsrs	r3, r1, #16
 800560e:	fb02 3306 	mla	r3, r2, r6, r3
 8005612:	b289      	uxth	r1, r1
 8005614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005618:	4285      	cmp	r5, r0
 800561a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800561e:	f84c 1b04 	str.w	r1, [ip], #4
 8005622:	dcec      	bgt.n	80055fe <__multadd+0x12>
 8005624:	b30e      	cbz	r6, 800566a <__multadd+0x7e>
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	42ab      	cmp	r3, r5
 800562a:	dc19      	bgt.n	8005660 <__multadd+0x74>
 800562c:	6861      	ldr	r1, [r4, #4]
 800562e:	4638      	mov	r0, r7
 8005630:	3101      	adds	r1, #1
 8005632:	f7ff ff79 	bl	8005528 <_Balloc>
 8005636:	4680      	mov	r8, r0
 8005638:	b928      	cbnz	r0, 8005646 <__multadd+0x5a>
 800563a:	4602      	mov	r2, r0
 800563c:	21ba      	movs	r1, #186	@ 0xba
 800563e:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <__multadd+0x84>)
 8005640:	480c      	ldr	r0, [pc, #48]	@ (8005674 <__multadd+0x88>)
 8005642:	f7ff fb09 	bl	8004c58 <__assert_func>
 8005646:	6922      	ldr	r2, [r4, #16]
 8005648:	f104 010c 	add.w	r1, r4, #12
 800564c:	3202      	adds	r2, #2
 800564e:	0092      	lsls	r2, r2, #2
 8005650:	300c      	adds	r0, #12
 8005652:	f7ff faec 	bl	8004c2e <memcpy>
 8005656:	4621      	mov	r1, r4
 8005658:	4638      	mov	r0, r7
 800565a:	f7ff ffa5 	bl	80055a8 <_Bfree>
 800565e:	4644      	mov	r4, r8
 8005660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005664:	3501      	adds	r5, #1
 8005666:	615e      	str	r6, [r3, #20]
 8005668:	6125      	str	r5, [r4, #16]
 800566a:	4620      	mov	r0, r4
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	08006a2d 	.word	0x08006a2d
 8005674:	08006a9e 	.word	0x08006a9e

08005678 <__s2b>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	4615      	mov	r5, r2
 800567e:	2209      	movs	r2, #9
 8005680:	461f      	mov	r7, r3
 8005682:	3308      	adds	r3, #8
 8005684:	460c      	mov	r4, r1
 8005686:	fb93 f3f2 	sdiv	r3, r3, r2
 800568a:	4606      	mov	r6, r0
 800568c:	2201      	movs	r2, #1
 800568e:	2100      	movs	r1, #0
 8005690:	429a      	cmp	r2, r3
 8005692:	db09      	blt.n	80056a8 <__s2b+0x30>
 8005694:	4630      	mov	r0, r6
 8005696:	f7ff ff47 	bl	8005528 <_Balloc>
 800569a:	b940      	cbnz	r0, 80056ae <__s2b+0x36>
 800569c:	4602      	mov	r2, r0
 800569e:	21d3      	movs	r1, #211	@ 0xd3
 80056a0:	4b18      	ldr	r3, [pc, #96]	@ (8005704 <__s2b+0x8c>)
 80056a2:	4819      	ldr	r0, [pc, #100]	@ (8005708 <__s2b+0x90>)
 80056a4:	f7ff fad8 	bl	8004c58 <__assert_func>
 80056a8:	0052      	lsls	r2, r2, #1
 80056aa:	3101      	adds	r1, #1
 80056ac:	e7f0      	b.n	8005690 <__s2b+0x18>
 80056ae:	9b08      	ldr	r3, [sp, #32]
 80056b0:	2d09      	cmp	r5, #9
 80056b2:	6143      	str	r3, [r0, #20]
 80056b4:	f04f 0301 	mov.w	r3, #1
 80056b8:	6103      	str	r3, [r0, #16]
 80056ba:	dd16      	ble.n	80056ea <__s2b+0x72>
 80056bc:	f104 0909 	add.w	r9, r4, #9
 80056c0:	46c8      	mov	r8, r9
 80056c2:	442c      	add	r4, r5
 80056c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80056c8:	4601      	mov	r1, r0
 80056ca:	220a      	movs	r2, #10
 80056cc:	4630      	mov	r0, r6
 80056ce:	3b30      	subs	r3, #48	@ 0x30
 80056d0:	f7ff ff8c 	bl	80055ec <__multadd>
 80056d4:	45a0      	cmp	r8, r4
 80056d6:	d1f5      	bne.n	80056c4 <__s2b+0x4c>
 80056d8:	f1a5 0408 	sub.w	r4, r5, #8
 80056dc:	444c      	add	r4, r9
 80056de:	1b2d      	subs	r5, r5, r4
 80056e0:	1963      	adds	r3, r4, r5
 80056e2:	42bb      	cmp	r3, r7
 80056e4:	db04      	blt.n	80056f0 <__s2b+0x78>
 80056e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ea:	2509      	movs	r5, #9
 80056ec:	340a      	adds	r4, #10
 80056ee:	e7f6      	b.n	80056de <__s2b+0x66>
 80056f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80056f4:	4601      	mov	r1, r0
 80056f6:	220a      	movs	r2, #10
 80056f8:	4630      	mov	r0, r6
 80056fa:	3b30      	subs	r3, #48	@ 0x30
 80056fc:	f7ff ff76 	bl	80055ec <__multadd>
 8005700:	e7ee      	b.n	80056e0 <__s2b+0x68>
 8005702:	bf00      	nop
 8005704:	08006a2d 	.word	0x08006a2d
 8005708:	08006a9e 	.word	0x08006a9e

0800570c <__hi0bits>:
 800570c:	4603      	mov	r3, r0
 800570e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005712:	bf3a      	itte	cc
 8005714:	0403      	lslcc	r3, r0, #16
 8005716:	2010      	movcc	r0, #16
 8005718:	2000      	movcs	r0, #0
 800571a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800571e:	bf3c      	itt	cc
 8005720:	021b      	lslcc	r3, r3, #8
 8005722:	3008      	addcc	r0, #8
 8005724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005728:	bf3c      	itt	cc
 800572a:	011b      	lslcc	r3, r3, #4
 800572c:	3004      	addcc	r0, #4
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	bf3c      	itt	cc
 8005734:	009b      	lslcc	r3, r3, #2
 8005736:	3002      	addcc	r0, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	db05      	blt.n	8005748 <__hi0bits+0x3c>
 800573c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005740:	f100 0001 	add.w	r0, r0, #1
 8005744:	bf08      	it	eq
 8005746:	2020      	moveq	r0, #32
 8005748:	4770      	bx	lr

0800574a <__lo0bits>:
 800574a:	6803      	ldr	r3, [r0, #0]
 800574c:	4602      	mov	r2, r0
 800574e:	f013 0007 	ands.w	r0, r3, #7
 8005752:	d00b      	beq.n	800576c <__lo0bits+0x22>
 8005754:	07d9      	lsls	r1, r3, #31
 8005756:	d421      	bmi.n	800579c <__lo0bits+0x52>
 8005758:	0798      	lsls	r0, r3, #30
 800575a:	bf49      	itett	mi
 800575c:	085b      	lsrmi	r3, r3, #1
 800575e:	089b      	lsrpl	r3, r3, #2
 8005760:	2001      	movmi	r0, #1
 8005762:	6013      	strmi	r3, [r2, #0]
 8005764:	bf5c      	itt	pl
 8005766:	2002      	movpl	r0, #2
 8005768:	6013      	strpl	r3, [r2, #0]
 800576a:	4770      	bx	lr
 800576c:	b299      	uxth	r1, r3
 800576e:	b909      	cbnz	r1, 8005774 <__lo0bits+0x2a>
 8005770:	2010      	movs	r0, #16
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2d9      	uxtb	r1, r3
 8005776:	b909      	cbnz	r1, 800577c <__lo0bits+0x32>
 8005778:	3008      	adds	r0, #8
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	0719      	lsls	r1, r3, #28
 800577e:	bf04      	itt	eq
 8005780:	091b      	lsreq	r3, r3, #4
 8005782:	3004      	addeq	r0, #4
 8005784:	0799      	lsls	r1, r3, #30
 8005786:	bf04      	itt	eq
 8005788:	089b      	lsreq	r3, r3, #2
 800578a:	3002      	addeq	r0, #2
 800578c:	07d9      	lsls	r1, r3, #31
 800578e:	d403      	bmi.n	8005798 <__lo0bits+0x4e>
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	f100 0001 	add.w	r0, r0, #1
 8005796:	d003      	beq.n	80057a0 <__lo0bits+0x56>
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	4770      	bx	lr
 800579c:	2000      	movs	r0, #0
 800579e:	4770      	bx	lr
 80057a0:	2020      	movs	r0, #32
 80057a2:	4770      	bx	lr

080057a4 <__i2b>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	460c      	mov	r4, r1
 80057a8:	2101      	movs	r1, #1
 80057aa:	f7ff febd 	bl	8005528 <_Balloc>
 80057ae:	4602      	mov	r2, r0
 80057b0:	b928      	cbnz	r0, 80057be <__i2b+0x1a>
 80057b2:	f240 1145 	movw	r1, #325	@ 0x145
 80057b6:	4b04      	ldr	r3, [pc, #16]	@ (80057c8 <__i2b+0x24>)
 80057b8:	4804      	ldr	r0, [pc, #16]	@ (80057cc <__i2b+0x28>)
 80057ba:	f7ff fa4d 	bl	8004c58 <__assert_func>
 80057be:	2301      	movs	r3, #1
 80057c0:	6144      	str	r4, [r0, #20]
 80057c2:	6103      	str	r3, [r0, #16]
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	bf00      	nop
 80057c8:	08006a2d 	.word	0x08006a2d
 80057cc:	08006a9e 	.word	0x08006a9e

080057d0 <__multiply>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	4614      	mov	r4, r2
 80057d6:	690a      	ldr	r2, [r1, #16]
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	460f      	mov	r7, r1
 80057dc:	429a      	cmp	r2, r3
 80057de:	bfa2      	ittt	ge
 80057e0:	4623      	movge	r3, r4
 80057e2:	460c      	movge	r4, r1
 80057e4:	461f      	movge	r7, r3
 80057e6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	6861      	ldr	r1, [r4, #4]
 80057f2:	eb0a 0609 	add.w	r6, sl, r9
 80057f6:	42b3      	cmp	r3, r6
 80057f8:	b085      	sub	sp, #20
 80057fa:	bfb8      	it	lt
 80057fc:	3101      	addlt	r1, #1
 80057fe:	f7ff fe93 	bl	8005528 <_Balloc>
 8005802:	b930      	cbnz	r0, 8005812 <__multiply+0x42>
 8005804:	4602      	mov	r2, r0
 8005806:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800580a:	4b43      	ldr	r3, [pc, #268]	@ (8005918 <__multiply+0x148>)
 800580c:	4843      	ldr	r0, [pc, #268]	@ (800591c <__multiply+0x14c>)
 800580e:	f7ff fa23 	bl	8004c58 <__assert_func>
 8005812:	f100 0514 	add.w	r5, r0, #20
 8005816:	462b      	mov	r3, r5
 8005818:	2200      	movs	r2, #0
 800581a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800581e:	4543      	cmp	r3, r8
 8005820:	d321      	bcc.n	8005866 <__multiply+0x96>
 8005822:	f107 0114 	add.w	r1, r7, #20
 8005826:	f104 0214 	add.w	r2, r4, #20
 800582a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800582e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	1b13      	subs	r3, r2, r4
 8005836:	3b15      	subs	r3, #21
 8005838:	f023 0303 	bic.w	r3, r3, #3
 800583c:	3304      	adds	r3, #4
 800583e:	f104 0715 	add.w	r7, r4, #21
 8005842:	42ba      	cmp	r2, r7
 8005844:	bf38      	it	cc
 8005846:	2304      	movcc	r3, #4
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	428b      	cmp	r3, r1
 8005850:	d80c      	bhi.n	800586c <__multiply+0x9c>
 8005852:	2e00      	cmp	r6, #0
 8005854:	dd03      	ble.n	800585e <__multiply+0x8e>
 8005856:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800585a:	2b00      	cmp	r3, #0
 800585c:	d05a      	beq.n	8005914 <__multiply+0x144>
 800585e:	6106      	str	r6, [r0, #16]
 8005860:	b005      	add	sp, #20
 8005862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005866:	f843 2b04 	str.w	r2, [r3], #4
 800586a:	e7d8      	b.n	800581e <__multiply+0x4e>
 800586c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005870:	f1ba 0f00 	cmp.w	sl, #0
 8005874:	d023      	beq.n	80058be <__multiply+0xee>
 8005876:	46a9      	mov	r9, r5
 8005878:	f04f 0c00 	mov.w	ip, #0
 800587c:	f104 0e14 	add.w	lr, r4, #20
 8005880:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005884:	f8d9 3000 	ldr.w	r3, [r9]
 8005888:	fa1f fb87 	uxth.w	fp, r7
 800588c:	b29b      	uxth	r3, r3
 800588e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005892:	4463      	add	r3, ip
 8005894:	f8d9 c000 	ldr.w	ip, [r9]
 8005898:	0c3f      	lsrs	r7, r7, #16
 800589a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800589e:	fb0a c707 	mla	r7, sl, r7, ip
 80058a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058ac:	4572      	cmp	r2, lr
 80058ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058b2:	f849 3b04 	str.w	r3, [r9], #4
 80058b6:	d8e3      	bhi.n	8005880 <__multiply+0xb0>
 80058b8:	9b01      	ldr	r3, [sp, #4]
 80058ba:	f845 c003 	str.w	ip, [r5, r3]
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	3104      	adds	r1, #4
 80058c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058c6:	f1b9 0f00 	cmp.w	r9, #0
 80058ca:	d021      	beq.n	8005910 <__multiply+0x140>
 80058cc:	46ae      	mov	lr, r5
 80058ce:	f04f 0a00 	mov.w	sl, #0
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	f104 0c14 	add.w	ip, r4, #20
 80058d8:	f8bc b000 	ldrh.w	fp, [ip]
 80058dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	fb09 770b 	mla	r7, r9, fp, r7
 80058e6:	4457      	add	r7, sl
 80058e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058ec:	f84e 3b04 	str.w	r3, [lr], #4
 80058f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058f8:	f8be 3000 	ldrh.w	r3, [lr]
 80058fc:	4562      	cmp	r2, ip
 80058fe:	fb09 330a 	mla	r3, r9, sl, r3
 8005902:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800590a:	d8e5      	bhi.n	80058d8 <__multiply+0x108>
 800590c:	9f01      	ldr	r7, [sp, #4]
 800590e:	51eb      	str	r3, [r5, r7]
 8005910:	3504      	adds	r5, #4
 8005912:	e79a      	b.n	800584a <__multiply+0x7a>
 8005914:	3e01      	subs	r6, #1
 8005916:	e79c      	b.n	8005852 <__multiply+0x82>
 8005918:	08006a2d 	.word	0x08006a2d
 800591c:	08006a9e 	.word	0x08006a9e

08005920 <__pow5mult>:
 8005920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005924:	4615      	mov	r5, r2
 8005926:	f012 0203 	ands.w	r2, r2, #3
 800592a:	4607      	mov	r7, r0
 800592c:	460e      	mov	r6, r1
 800592e:	d007      	beq.n	8005940 <__pow5mult+0x20>
 8005930:	4c25      	ldr	r4, [pc, #148]	@ (80059c8 <__pow5mult+0xa8>)
 8005932:	3a01      	subs	r2, #1
 8005934:	2300      	movs	r3, #0
 8005936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800593a:	f7ff fe57 	bl	80055ec <__multadd>
 800593e:	4606      	mov	r6, r0
 8005940:	10ad      	asrs	r5, r5, #2
 8005942:	d03d      	beq.n	80059c0 <__pow5mult+0xa0>
 8005944:	69fc      	ldr	r4, [r7, #28]
 8005946:	b97c      	cbnz	r4, 8005968 <__pow5mult+0x48>
 8005948:	2010      	movs	r0, #16
 800594a:	f7ff fd25 	bl	8005398 <malloc>
 800594e:	4602      	mov	r2, r0
 8005950:	61f8      	str	r0, [r7, #28]
 8005952:	b928      	cbnz	r0, 8005960 <__pow5mult+0x40>
 8005954:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005958:	4b1c      	ldr	r3, [pc, #112]	@ (80059cc <__pow5mult+0xac>)
 800595a:	481d      	ldr	r0, [pc, #116]	@ (80059d0 <__pow5mult+0xb0>)
 800595c:	f7ff f97c 	bl	8004c58 <__assert_func>
 8005960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005964:	6004      	str	r4, [r0, #0]
 8005966:	60c4      	str	r4, [r0, #12]
 8005968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800596c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005970:	b94c      	cbnz	r4, 8005986 <__pow5mult+0x66>
 8005972:	f240 2171 	movw	r1, #625	@ 0x271
 8005976:	4638      	mov	r0, r7
 8005978:	f7ff ff14 	bl	80057a4 <__i2b>
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	f8c8 0008 	str.w	r0, [r8, #8]
 8005984:	6003      	str	r3, [r0, #0]
 8005986:	f04f 0900 	mov.w	r9, #0
 800598a:	07eb      	lsls	r3, r5, #31
 800598c:	d50a      	bpl.n	80059a4 <__pow5mult+0x84>
 800598e:	4631      	mov	r1, r6
 8005990:	4622      	mov	r2, r4
 8005992:	4638      	mov	r0, r7
 8005994:	f7ff ff1c 	bl	80057d0 <__multiply>
 8005998:	4680      	mov	r8, r0
 800599a:	4631      	mov	r1, r6
 800599c:	4638      	mov	r0, r7
 800599e:	f7ff fe03 	bl	80055a8 <_Bfree>
 80059a2:	4646      	mov	r6, r8
 80059a4:	106d      	asrs	r5, r5, #1
 80059a6:	d00b      	beq.n	80059c0 <__pow5mult+0xa0>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	b938      	cbnz	r0, 80059bc <__pow5mult+0x9c>
 80059ac:	4622      	mov	r2, r4
 80059ae:	4621      	mov	r1, r4
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff ff0d 	bl	80057d0 <__multiply>
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	f8c0 9000 	str.w	r9, [r0]
 80059bc:	4604      	mov	r4, r0
 80059be:	e7e4      	b.n	800598a <__pow5mult+0x6a>
 80059c0:	4630      	mov	r0, r6
 80059c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c6:	bf00      	nop
 80059c8:	08006af8 	.word	0x08006af8
 80059cc:	08006978 	.word	0x08006978
 80059d0:	08006a9e 	.word	0x08006a9e

080059d4 <__lshift>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	460c      	mov	r4, r1
 80059da:	4607      	mov	r7, r0
 80059dc:	4691      	mov	r9, r2
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	6849      	ldr	r1, [r1, #4]
 80059e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059ec:	f108 0601 	add.w	r6, r8, #1
 80059f0:	42b3      	cmp	r3, r6
 80059f2:	db0b      	blt.n	8005a0c <__lshift+0x38>
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff fd97 	bl	8005528 <_Balloc>
 80059fa:	4605      	mov	r5, r0
 80059fc:	b948      	cbnz	r0, 8005a12 <__lshift+0x3e>
 80059fe:	4602      	mov	r2, r0
 8005a00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a04:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <__lshift+0xd0>)
 8005a06:	4828      	ldr	r0, [pc, #160]	@ (8005aa8 <__lshift+0xd4>)
 8005a08:	f7ff f926 	bl	8004c58 <__assert_func>
 8005a0c:	3101      	adds	r1, #1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	e7ee      	b.n	80059f0 <__lshift+0x1c>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f100 0114 	add.w	r1, r0, #20
 8005a18:	f100 0210 	add.w	r2, r0, #16
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	4553      	cmp	r3, sl
 8005a20:	db33      	blt.n	8005a8a <__lshift+0xb6>
 8005a22:	6920      	ldr	r0, [r4, #16]
 8005a24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a28:	f104 0314 	add.w	r3, r4, #20
 8005a2c:	f019 091f 	ands.w	r9, r9, #31
 8005a30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a38:	d02b      	beq.n	8005a92 <__lshift+0xbe>
 8005a3a:	468a      	mov	sl, r1
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f1c9 0e20 	rsb	lr, r9, #32
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	fa00 f009 	lsl.w	r0, r0, r9
 8005a48:	4310      	orrs	r0, r2
 8005a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8005a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a52:	459c      	cmp	ip, r3
 8005a54:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a58:	d8f3      	bhi.n	8005a42 <__lshift+0x6e>
 8005a5a:	ebac 0304 	sub.w	r3, ip, r4
 8005a5e:	3b15      	subs	r3, #21
 8005a60:	f023 0303 	bic.w	r3, r3, #3
 8005a64:	3304      	adds	r3, #4
 8005a66:	f104 0015 	add.w	r0, r4, #21
 8005a6a:	4584      	cmp	ip, r0
 8005a6c:	bf38      	it	cc
 8005a6e:	2304      	movcc	r3, #4
 8005a70:	50ca      	str	r2, [r1, r3]
 8005a72:	b10a      	cbz	r2, 8005a78 <__lshift+0xa4>
 8005a74:	f108 0602 	add.w	r6, r8, #2
 8005a78:	3e01      	subs	r6, #1
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	612e      	str	r6, [r5, #16]
 8005a80:	f7ff fd92 	bl	80055a8 <_Bfree>
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a8e:	3301      	adds	r3, #1
 8005a90:	e7c5      	b.n	8005a1e <__lshift+0x4a>
 8005a92:	3904      	subs	r1, #4
 8005a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a98:	459c      	cmp	ip, r3
 8005a9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a9e:	d8f9      	bhi.n	8005a94 <__lshift+0xc0>
 8005aa0:	e7ea      	b.n	8005a78 <__lshift+0xa4>
 8005aa2:	bf00      	nop
 8005aa4:	08006a2d 	.word	0x08006a2d
 8005aa8:	08006a9e 	.word	0x08006a9e

08005aac <__mcmp>:
 8005aac:	4603      	mov	r3, r0
 8005aae:	690a      	ldr	r2, [r1, #16]
 8005ab0:	6900      	ldr	r0, [r0, #16]
 8005ab2:	b530      	push	{r4, r5, lr}
 8005ab4:	1a80      	subs	r0, r0, r2
 8005ab6:	d10e      	bne.n	8005ad6 <__mcmp+0x2a>
 8005ab8:	3314      	adds	r3, #20
 8005aba:	3114      	adds	r1, #20
 8005abc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005acc:	4295      	cmp	r5, r2
 8005ace:	d003      	beq.n	8005ad8 <__mcmp+0x2c>
 8005ad0:	d205      	bcs.n	8005ade <__mcmp+0x32>
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	bd30      	pop	{r4, r5, pc}
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	d3f3      	bcc.n	8005ac4 <__mcmp+0x18>
 8005adc:	e7fb      	b.n	8005ad6 <__mcmp+0x2a>
 8005ade:	2001      	movs	r0, #1
 8005ae0:	e7f9      	b.n	8005ad6 <__mcmp+0x2a>
	...

08005ae4 <__mdiff>:
 8005ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	4689      	mov	r9, r1
 8005aea:	4606      	mov	r6, r0
 8005aec:	4611      	mov	r1, r2
 8005aee:	4648      	mov	r0, r9
 8005af0:	4614      	mov	r4, r2
 8005af2:	f7ff ffdb 	bl	8005aac <__mcmp>
 8005af6:	1e05      	subs	r5, r0, #0
 8005af8:	d112      	bne.n	8005b20 <__mdiff+0x3c>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff fd13 	bl	8005528 <_Balloc>
 8005b02:	4602      	mov	r2, r0
 8005b04:	b928      	cbnz	r0, 8005b12 <__mdiff+0x2e>
 8005b06:	f240 2137 	movw	r1, #567	@ 0x237
 8005b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c04 <__mdiff+0x120>)
 8005b0c:	483e      	ldr	r0, [pc, #248]	@ (8005c08 <__mdiff+0x124>)
 8005b0e:	f7ff f8a3 	bl	8004c58 <__assert_func>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b18:	4610      	mov	r0, r2
 8005b1a:	b003      	add	sp, #12
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	bfbc      	itt	lt
 8005b22:	464b      	movlt	r3, r9
 8005b24:	46a1      	movlt	r9, r4
 8005b26:	4630      	mov	r0, r6
 8005b28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b2c:	bfba      	itte	lt
 8005b2e:	461c      	movlt	r4, r3
 8005b30:	2501      	movlt	r5, #1
 8005b32:	2500      	movge	r5, #0
 8005b34:	f7ff fcf8 	bl	8005528 <_Balloc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	b918      	cbnz	r0, 8005b44 <__mdiff+0x60>
 8005b3c:	f240 2145 	movw	r1, #581	@ 0x245
 8005b40:	4b30      	ldr	r3, [pc, #192]	@ (8005c04 <__mdiff+0x120>)
 8005b42:	e7e3      	b.n	8005b0c <__mdiff+0x28>
 8005b44:	f100 0b14 	add.w	fp, r0, #20
 8005b48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b4c:	f109 0310 	add.w	r3, r9, #16
 8005b50:	60c5      	str	r5, [r0, #12]
 8005b52:	f04f 0c00 	mov.w	ip, #0
 8005b56:	f109 0514 	add.w	r5, r9, #20
 8005b5a:	46d9      	mov	r9, fp
 8005b5c:	6926      	ldr	r6, [r4, #16]
 8005b5e:	f104 0e14 	add.w	lr, r4, #20
 8005b62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b76:	b281      	uxth	r1, r0
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	fa1f f38a 	uxth.w	r3, sl
 8005b7e:	1a5b      	subs	r3, r3, r1
 8005b80:	0c00      	lsrs	r0, r0, #16
 8005b82:	4463      	add	r3, ip
 8005b84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b92:	4576      	cmp	r6, lr
 8005b94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b98:	f849 3b04 	str.w	r3, [r9], #4
 8005b9c:	d8e6      	bhi.n	8005b6c <__mdiff+0x88>
 8005b9e:	1b33      	subs	r3, r6, r4
 8005ba0:	3b15      	subs	r3, #21
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	3415      	adds	r4, #21
 8005ba8:	3304      	adds	r3, #4
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	bf38      	it	cc
 8005bae:	2304      	movcc	r3, #4
 8005bb0:	441d      	add	r5, r3
 8005bb2:	445b      	add	r3, fp
 8005bb4:	461e      	mov	r6, r3
 8005bb6:	462c      	mov	r4, r5
 8005bb8:	4544      	cmp	r4, r8
 8005bba:	d30e      	bcc.n	8005bda <__mdiff+0xf6>
 8005bbc:	f108 0103 	add.w	r1, r8, #3
 8005bc0:	1b49      	subs	r1, r1, r5
 8005bc2:	f021 0103 	bic.w	r1, r1, #3
 8005bc6:	3d03      	subs	r5, #3
 8005bc8:	45a8      	cmp	r8, r5
 8005bca:	bf38      	it	cc
 8005bcc:	2100      	movcc	r1, #0
 8005bce:	440b      	add	r3, r1
 8005bd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bd4:	b199      	cbz	r1, 8005bfe <__mdiff+0x11a>
 8005bd6:	6117      	str	r7, [r2, #16]
 8005bd8:	e79e      	b.n	8005b18 <__mdiff+0x34>
 8005bda:	46e6      	mov	lr, ip
 8005bdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8005be0:	fa1f fc81 	uxth.w	ip, r1
 8005be4:	44f4      	add	ip, lr
 8005be6:	0c08      	lsrs	r0, r1, #16
 8005be8:	4471      	add	r1, lr
 8005bea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005bee:	b289      	uxth	r1, r1
 8005bf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005bf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bf8:	f846 1b04 	str.w	r1, [r6], #4
 8005bfc:	e7dc      	b.n	8005bb8 <__mdiff+0xd4>
 8005bfe:	3f01      	subs	r7, #1
 8005c00:	e7e6      	b.n	8005bd0 <__mdiff+0xec>
 8005c02:	bf00      	nop
 8005c04:	08006a2d 	.word	0x08006a2d
 8005c08:	08006a9e 	.word	0x08006a9e

08005c0c <__ulp>:
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <__ulp+0x3c>)
 8005c0e:	400b      	ands	r3, r1
 8005c10:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dc08      	bgt.n	8005c2a <__ulp+0x1e>
 8005c18:	425b      	negs	r3, r3
 8005c1a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005c1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005c22:	da04      	bge.n	8005c2e <__ulp+0x22>
 8005c24:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005c28:	4113      	asrs	r3, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	e008      	b.n	8005c40 <__ulp+0x34>
 8005c2e:	f1a2 0314 	sub.w	r3, r2, #20
 8005c32:	2b1e      	cmp	r3, #30
 8005c34:	bfd6      	itet	le
 8005c36:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005c3a:	2201      	movgt	r2, #1
 8005c3c:	40da      	lsrle	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	7ff00000 	.word	0x7ff00000

08005c4c <__b2d>:
 8005c4c:	6902      	ldr	r2, [r0, #16]
 8005c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c50:	f100 0614 	add.w	r6, r0, #20
 8005c54:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005c58:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005c5c:	4f1e      	ldr	r7, [pc, #120]	@ (8005cd8 <__b2d+0x8c>)
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff fd54 	bl	800570c <__hi0bits>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f1c0 0020 	rsb	r0, r0, #32
 8005c6a:	2b0a      	cmp	r3, #10
 8005c6c:	f1a2 0504 	sub.w	r5, r2, #4
 8005c70:	6008      	str	r0, [r1, #0]
 8005c72:	dc12      	bgt.n	8005c9a <__b2d+0x4e>
 8005c74:	42ae      	cmp	r6, r5
 8005c76:	bf2c      	ite	cs
 8005c78:	2200      	movcs	r2, #0
 8005c7a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005c7e:	f1c3 0c0b 	rsb	ip, r3, #11
 8005c82:	3315      	adds	r3, #21
 8005c84:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005c88:	fa04 f303 	lsl.w	r3, r4, r3
 8005c8c:	fa22 f20c 	lsr.w	r2, r2, ip
 8005c90:	ea4e 0107 	orr.w	r1, lr, r7
 8005c94:	431a      	orrs	r2, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c9a:	42ae      	cmp	r6, r5
 8005c9c:	bf36      	itet	cc
 8005c9e:	f1a2 0508 	subcc.w	r5, r2, #8
 8005ca2:	2200      	movcs	r2, #0
 8005ca4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005ca8:	3b0b      	subs	r3, #11
 8005caa:	d012      	beq.n	8005cd2 <__b2d+0x86>
 8005cac:	f1c3 0720 	rsb	r7, r3, #32
 8005cb0:	fa22 f107 	lsr.w	r1, r2, r7
 8005cb4:	409c      	lsls	r4, r3
 8005cb6:	430c      	orrs	r4, r1
 8005cb8:	42b5      	cmp	r5, r6
 8005cba:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005cbe:	bf94      	ite	ls
 8005cc0:	2400      	movls	r4, #0
 8005cc2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	40fc      	lsrs	r4, r7
 8005cca:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005cce:	4322      	orrs	r2, r4
 8005cd0:	e7e1      	b.n	8005c96 <__b2d+0x4a>
 8005cd2:	ea44 0107 	orr.w	r1, r4, r7
 8005cd6:	e7de      	b.n	8005c96 <__b2d+0x4a>
 8005cd8:	3ff00000 	.word	0x3ff00000

08005cdc <__d2b>:
 8005cdc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4690      	mov	r8, r2
 8005ce4:	4699      	mov	r9, r3
 8005ce6:	9e08      	ldr	r6, [sp, #32]
 8005ce8:	f7ff fc1e 	bl	8005528 <_Balloc>
 8005cec:	4604      	mov	r4, r0
 8005cee:	b930      	cbnz	r0, 8005cfe <__d2b+0x22>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	f240 310f 	movw	r1, #783	@ 0x30f
 8005cf6:	4b23      	ldr	r3, [pc, #140]	@ (8005d84 <__d2b+0xa8>)
 8005cf8:	4823      	ldr	r0, [pc, #140]	@ (8005d88 <__d2b+0xac>)
 8005cfa:	f7fe ffad 	bl	8004c58 <__assert_func>
 8005cfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d06:	b10d      	cbz	r5, 8005d0c <__d2b+0x30>
 8005d08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f1b8 0300 	subs.w	r3, r8, #0
 8005d12:	d024      	beq.n	8005d5e <__d2b+0x82>
 8005d14:	4668      	mov	r0, sp
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	f7ff fd17 	bl	800574a <__lo0bits>
 8005d1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d20:	b1d8      	cbz	r0, 8005d5a <__d2b+0x7e>
 8005d22:	f1c0 0320 	rsb	r3, r0, #32
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	40c2      	lsrs	r2, r0
 8005d2e:	6163      	str	r3, [r4, #20]
 8005d30:	9201      	str	r2, [sp, #4]
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2201      	moveq	r2, #1
 8005d3a:	2202      	movne	r2, #2
 8005d3c:	61a3      	str	r3, [r4, #24]
 8005d3e:	6122      	str	r2, [r4, #16]
 8005d40:	b1ad      	cbz	r5, 8005d6e <__d2b+0x92>
 8005d42:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d46:	4405      	add	r5, r0
 8005d48:	6035      	str	r5, [r6, #0]
 8005d4a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d50:	6018      	str	r0, [r3, #0]
 8005d52:	4620      	mov	r0, r4
 8005d54:	b002      	add	sp, #8
 8005d56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005d5a:	6161      	str	r1, [r4, #20]
 8005d5c:	e7e9      	b.n	8005d32 <__d2b+0x56>
 8005d5e:	a801      	add	r0, sp, #4
 8005d60:	f7ff fcf3 	bl	800574a <__lo0bits>
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	6163      	str	r3, [r4, #20]
 8005d6a:	3020      	adds	r0, #32
 8005d6c:	e7e7      	b.n	8005d3e <__d2b+0x62>
 8005d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005d72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d76:	6030      	str	r0, [r6, #0]
 8005d78:	6918      	ldr	r0, [r3, #16]
 8005d7a:	f7ff fcc7 	bl	800570c <__hi0bits>
 8005d7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d82:	e7e4      	b.n	8005d4e <__d2b+0x72>
 8005d84:	08006a2d 	.word	0x08006a2d
 8005d88:	08006a9e 	.word	0x08006a9e

08005d8c <__ratio>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	b085      	sub	sp, #20
 8005d92:	e9cd 1000 	strd	r1, r0, [sp]
 8005d96:	a902      	add	r1, sp, #8
 8005d98:	f7ff ff58 	bl	8005c4c <__b2d>
 8005d9c:	468b      	mov	fp, r1
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460f      	mov	r7, r1
 8005da2:	9800      	ldr	r0, [sp, #0]
 8005da4:	a903      	add	r1, sp, #12
 8005da6:	f7ff ff51 	bl	8005c4c <__b2d>
 8005daa:	460d      	mov	r5, r1
 8005dac:	9b01      	ldr	r3, [sp, #4]
 8005dae:	4689      	mov	r9, r1
 8005db0:	6919      	ldr	r1, [r3, #16]
 8005db2:	9b00      	ldr	r3, [sp, #0]
 8005db4:	4604      	mov	r4, r0
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4630      	mov	r0, r6
 8005dba:	1ac9      	subs	r1, r1, r3
 8005dbc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfcd      	iteet	gt
 8005dca:	463a      	movgt	r2, r7
 8005dcc:	462a      	movle	r2, r5
 8005dce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005dd2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005dd6:	bfd8      	it	le
 8005dd8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005ddc:	464b      	mov	r3, r9
 8005dde:	4622      	mov	r2, r4
 8005de0:	4659      	mov	r1, fp
 8005de2:	f7fa fc9b 	bl	800071c <__aeabi_ddiv>
 8005de6:	b005      	add	sp, #20
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005dec <__copybits>:
 8005dec:	3901      	subs	r1, #1
 8005dee:	b570      	push	{r4, r5, r6, lr}
 8005df0:	1149      	asrs	r1, r1, #5
 8005df2:	6914      	ldr	r4, [r2, #16]
 8005df4:	3101      	adds	r1, #1
 8005df6:	f102 0314 	add.w	r3, r2, #20
 8005dfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005dfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005e02:	1f05      	subs	r5, r0, #4
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d30c      	bcc.n	8005e22 <__copybits+0x36>
 8005e08:	1aa3      	subs	r3, r4, r2
 8005e0a:	3b11      	subs	r3, #17
 8005e0c:	f023 0303 	bic.w	r3, r3, #3
 8005e10:	3211      	adds	r2, #17
 8005e12:	42a2      	cmp	r2, r4
 8005e14:	bf88      	it	hi
 8005e16:	2300      	movhi	r3, #0
 8005e18:	4418      	add	r0, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4288      	cmp	r0, r1
 8005e1e:	d305      	bcc.n	8005e2c <__copybits+0x40>
 8005e20:	bd70      	pop	{r4, r5, r6, pc}
 8005e22:	f853 6b04 	ldr.w	r6, [r3], #4
 8005e26:	f845 6f04 	str.w	r6, [r5, #4]!
 8005e2a:	e7eb      	b.n	8005e04 <__copybits+0x18>
 8005e2c:	f840 3b04 	str.w	r3, [r0], #4
 8005e30:	e7f4      	b.n	8005e1c <__copybits+0x30>

08005e32 <__any_on>:
 8005e32:	f100 0214 	add.w	r2, r0, #20
 8005e36:	6900      	ldr	r0, [r0, #16]
 8005e38:	114b      	asrs	r3, r1, #5
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	db11      	blt.n	8005e64 <__any_on+0x32>
 8005e40:	dd0a      	ble.n	8005e58 <__any_on+0x26>
 8005e42:	f011 011f 	ands.w	r1, r1, #31
 8005e46:	d007      	beq.n	8005e58 <__any_on+0x26>
 8005e48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005e4c:	fa24 f001 	lsr.w	r0, r4, r1
 8005e50:	fa00 f101 	lsl.w	r1, r0, r1
 8005e54:	428c      	cmp	r4, r1
 8005e56:	d10b      	bne.n	8005e70 <__any_on+0x3e>
 8005e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d803      	bhi.n	8005e68 <__any_on+0x36>
 8005e60:	2000      	movs	r0, #0
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	4603      	mov	r3, r0
 8005e66:	e7f7      	b.n	8005e58 <__any_on+0x26>
 8005e68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d0f5      	beq.n	8005e5c <__any_on+0x2a>
 8005e70:	2001      	movs	r0, #1
 8005e72:	e7f6      	b.n	8005e62 <__any_on+0x30>

08005e74 <__ascii_wctomb>:
 8005e74:	4603      	mov	r3, r0
 8005e76:	4608      	mov	r0, r1
 8005e78:	b141      	cbz	r1, 8005e8c <__ascii_wctomb+0x18>
 8005e7a:	2aff      	cmp	r2, #255	@ 0xff
 8005e7c:	d904      	bls.n	8005e88 <__ascii_wctomb+0x14>
 8005e7e:	228a      	movs	r2, #138	@ 0x8a
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	4770      	bx	lr
 8005e88:	2001      	movs	r0, #1
 8005e8a:	700a      	strb	r2, [r1, #0]
 8005e8c:	4770      	bx	lr
	...

08005e90 <__sflush_r>:
 8005e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	0716      	lsls	r6, r2, #28
 8005e98:	4605      	mov	r5, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	d454      	bmi.n	8005f48 <__sflush_r+0xb8>
 8005e9e:	684b      	ldr	r3, [r1, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dc02      	bgt.n	8005eaa <__sflush_r+0x1a>
 8005ea4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	dd48      	ble.n	8005f3c <__sflush_r+0xac>
 8005eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eac:	2e00      	cmp	r6, #0
 8005eae:	d045      	beq.n	8005f3c <__sflush_r+0xac>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005eb6:	682f      	ldr	r7, [r5, #0]
 8005eb8:	6a21      	ldr	r1, [r4, #32]
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	d030      	beq.n	8005f20 <__sflush_r+0x90>
 8005ebe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	0759      	lsls	r1, r3, #29
 8005ec4:	d505      	bpl.n	8005ed2 <__sflush_r+0x42>
 8005ec6:	6863      	ldr	r3, [r4, #4]
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ecc:	b10b      	cbz	r3, 8005ed2 <__sflush_r+0x42>
 8005ece:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ed8:	6a21      	ldr	r1, [r4, #32]
 8005eda:	47b0      	blx	r6
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	d106      	bne.n	8005ef0 <__sflush_r+0x60>
 8005ee2:	6829      	ldr	r1, [r5, #0]
 8005ee4:	291d      	cmp	r1, #29
 8005ee6:	d82b      	bhi.n	8005f40 <__sflush_r+0xb0>
 8005ee8:	4a28      	ldr	r2, [pc, #160]	@ (8005f8c <__sflush_r+0xfc>)
 8005eea:	410a      	asrs	r2, r1
 8005eec:	07d6      	lsls	r6, r2, #31
 8005eee:	d427      	bmi.n	8005f40 <__sflush_r+0xb0>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	6062      	str	r2, [r4, #4]
 8005ef4:	6922      	ldr	r2, [r4, #16]
 8005ef6:	04d9      	lsls	r1, r3, #19
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	d504      	bpl.n	8005f06 <__sflush_r+0x76>
 8005efc:	1c42      	adds	r2, r0, #1
 8005efe:	d101      	bne.n	8005f04 <__sflush_r+0x74>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b903      	cbnz	r3, 8005f06 <__sflush_r+0x76>
 8005f04:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f08:	602f      	str	r7, [r5, #0]
 8005f0a:	b1b9      	cbz	r1, 8005f3c <__sflush_r+0xac>
 8005f0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f10:	4299      	cmp	r1, r3
 8005f12:	d002      	beq.n	8005f1a <__sflush_r+0x8a>
 8005f14:	4628      	mov	r0, r5
 8005f16:	f7fe febd 	bl	8004c94 <_free_r>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f1e:	e00d      	b.n	8005f3c <__sflush_r+0xac>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4628      	mov	r0, r5
 8005f24:	47b0      	blx	r6
 8005f26:	4602      	mov	r2, r0
 8005f28:	1c50      	adds	r0, r2, #1
 8005f2a:	d1c9      	bne.n	8005ec0 <__sflush_r+0x30>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0c6      	beq.n	8005ec0 <__sflush_r+0x30>
 8005f32:	2b1d      	cmp	r3, #29
 8005f34:	d001      	beq.n	8005f3a <__sflush_r+0xaa>
 8005f36:	2b16      	cmp	r3, #22
 8005f38:	d11d      	bne.n	8005f76 <__sflush_r+0xe6>
 8005f3a:	602f      	str	r7, [r5, #0]
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	e021      	b.n	8005f84 <__sflush_r+0xf4>
 8005f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	e01a      	b.n	8005f7e <__sflush_r+0xee>
 8005f48:	690f      	ldr	r7, [r1, #16]
 8005f4a:	2f00      	cmp	r7, #0
 8005f4c:	d0f6      	beq.n	8005f3c <__sflush_r+0xac>
 8005f4e:	0793      	lsls	r3, r2, #30
 8005f50:	bf18      	it	ne
 8005f52:	2300      	movne	r3, #0
 8005f54:	680e      	ldr	r6, [r1, #0]
 8005f56:	bf08      	it	eq
 8005f58:	694b      	ldreq	r3, [r1, #20]
 8005f5a:	1bf6      	subs	r6, r6, r7
 8005f5c:	600f      	str	r7, [r1, #0]
 8005f5e:	608b      	str	r3, [r1, #8]
 8005f60:	2e00      	cmp	r6, #0
 8005f62:	ddeb      	ble.n	8005f3c <__sflush_r+0xac>
 8005f64:	4633      	mov	r3, r6
 8005f66:	463a      	mov	r2, r7
 8005f68:	4628      	mov	r0, r5
 8005f6a:	6a21      	ldr	r1, [r4, #32]
 8005f6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005f70:	47e0      	blx	ip
 8005f72:	2800      	cmp	r0, #0
 8005f74:	dc07      	bgt.n	8005f86 <__sflush_r+0xf6>
 8005f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f86:	4407      	add	r7, r0
 8005f88:	1a36      	subs	r6, r6, r0
 8005f8a:	e7e9      	b.n	8005f60 <__sflush_r+0xd0>
 8005f8c:	dfbffffe 	.word	0xdfbffffe

08005f90 <_fflush_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	690b      	ldr	r3, [r1, #16]
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	b913      	cbnz	r3, 8005fa0 <_fflush_r+0x10>
 8005f9a:	2500      	movs	r5, #0
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	b118      	cbz	r0, 8005faa <_fflush_r+0x1a>
 8005fa2:	6a03      	ldr	r3, [r0, #32]
 8005fa4:	b90b      	cbnz	r3, 8005faa <_fflush_r+0x1a>
 8005fa6:	f7fe fcdf 	bl	8004968 <__sinit>
 8005faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f3      	beq.n	8005f9a <_fflush_r+0xa>
 8005fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fb4:	07d0      	lsls	r0, r2, #31
 8005fb6:	d404      	bmi.n	8005fc2 <_fflush_r+0x32>
 8005fb8:	0599      	lsls	r1, r3, #22
 8005fba:	d402      	bmi.n	8005fc2 <_fflush_r+0x32>
 8005fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fbe:	f7fe fe34 	bl	8004c2a <__retarget_lock_acquire_recursive>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	f7ff ff63 	bl	8005e90 <__sflush_r>
 8005fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fcc:	4605      	mov	r5, r0
 8005fce:	07da      	lsls	r2, r3, #31
 8005fd0:	d4e4      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	059b      	lsls	r3, r3, #22
 8005fd6:	d4e1      	bmi.n	8005f9c <_fflush_r+0xc>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fda:	f7fe fe27 	bl	8004c2c <__retarget_lock_release_recursive>
 8005fde:	e7dd      	b.n	8005f9c <_fflush_r+0xc>

08005fe0 <fiprintf>:
 8005fe0:	b40e      	push	{r1, r2, r3}
 8005fe2:	b503      	push	{r0, r1, lr}
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	ab03      	add	r3, sp, #12
 8005fe8:	4805      	ldr	r0, [pc, #20]	@ (8006000 <fiprintf+0x20>)
 8005fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fee:	6800      	ldr	r0, [r0, #0]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	f000 f859 	bl	80060a8 <_vfiprintf_r>
 8005ff6:	b002      	add	sp, #8
 8005ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ffc:	b003      	add	sp, #12
 8005ffe:	4770      	bx	lr
 8006000:	20000184 	.word	0x20000184

08006004 <_sbrk_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	2300      	movs	r3, #0
 8006008:	4d05      	ldr	r5, [pc, #20]	@ (8006020 <_sbrk_r+0x1c>)
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	f7fb fc3c 	bl	800188c <_sbrk>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_sbrk_r+0x1a>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_sbrk_r+0x1a>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20000464 	.word	0x20000464

08006024 <abort>:
 8006024:	2006      	movs	r0, #6
 8006026:	b508      	push	{r3, lr}
 8006028:	f000 fba4 	bl	8006774 <raise>
 800602c:	2001      	movs	r0, #1
 800602e:	f7fb fbb8 	bl	80017a2 <_exit>

08006032 <_calloc_r>:
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	fba1 5402 	umull	r5, r4, r1, r2
 8006038:	b93c      	cbnz	r4, 800604a <_calloc_r+0x18>
 800603a:	4629      	mov	r1, r5
 800603c:	f7ff f9d6 	bl	80053ec <_malloc_r>
 8006040:	4606      	mov	r6, r0
 8006042:	b928      	cbnz	r0, 8006050 <_calloc_r+0x1e>
 8006044:	2600      	movs	r6, #0
 8006046:	4630      	mov	r0, r6
 8006048:	bd70      	pop	{r4, r5, r6, pc}
 800604a:	220c      	movs	r2, #12
 800604c:	6002      	str	r2, [r0, #0]
 800604e:	e7f9      	b.n	8006044 <_calloc_r+0x12>
 8006050:	462a      	mov	r2, r5
 8006052:	4621      	mov	r1, r4
 8006054:	f7fe fd01 	bl	8004a5a <memset>
 8006058:	e7f5      	b.n	8006046 <_calloc_r+0x14>

0800605a <__sfputc_r>:
 800605a:	6893      	ldr	r3, [r2, #8]
 800605c:	b410      	push	{r4}
 800605e:	3b01      	subs	r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	6093      	str	r3, [r2, #8]
 8006064:	da07      	bge.n	8006076 <__sfputc_r+0x1c>
 8006066:	6994      	ldr	r4, [r2, #24]
 8006068:	42a3      	cmp	r3, r4
 800606a:	db01      	blt.n	8006070 <__sfputc_r+0x16>
 800606c:	290a      	cmp	r1, #10
 800606e:	d102      	bne.n	8006076 <__sfputc_r+0x1c>
 8006070:	bc10      	pop	{r4}
 8006072:	f000 bac3 	b.w	80065fc <__swbuf_r>
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	1c58      	adds	r0, r3, #1
 800607a:	6010      	str	r0, [r2, #0]
 800607c:	7019      	strb	r1, [r3, #0]
 800607e:	4608      	mov	r0, r1
 8006080:	bc10      	pop	{r4}
 8006082:	4770      	bx	lr

08006084 <__sfputs_r>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	4614      	mov	r4, r2
 800608c:	18d5      	adds	r5, r2, r3
 800608e:	42ac      	cmp	r4, r5
 8006090:	d101      	bne.n	8006096 <__sfputs_r+0x12>
 8006092:	2000      	movs	r0, #0
 8006094:	e007      	b.n	80060a6 <__sfputs_r+0x22>
 8006096:	463a      	mov	r2, r7
 8006098:	4630      	mov	r0, r6
 800609a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609e:	f7ff ffdc 	bl	800605a <__sfputc_r>
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	d1f3      	bne.n	800608e <__sfputs_r+0xa>
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060a8 <_vfiprintf_r>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	460d      	mov	r5, r1
 80060ae:	4614      	mov	r4, r2
 80060b0:	4698      	mov	r8, r3
 80060b2:	4606      	mov	r6, r0
 80060b4:	b09d      	sub	sp, #116	@ 0x74
 80060b6:	b118      	cbz	r0, 80060c0 <_vfiprintf_r+0x18>
 80060b8:	6a03      	ldr	r3, [r0, #32]
 80060ba:	b90b      	cbnz	r3, 80060c0 <_vfiprintf_r+0x18>
 80060bc:	f7fe fc54 	bl	8004968 <__sinit>
 80060c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060c2:	07d9      	lsls	r1, r3, #31
 80060c4:	d405      	bmi.n	80060d2 <_vfiprintf_r+0x2a>
 80060c6:	89ab      	ldrh	r3, [r5, #12]
 80060c8:	059a      	lsls	r2, r3, #22
 80060ca:	d402      	bmi.n	80060d2 <_vfiprintf_r+0x2a>
 80060cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ce:	f7fe fdac 	bl	8004c2a <__retarget_lock_acquire_recursive>
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	071b      	lsls	r3, r3, #28
 80060d6:	d501      	bpl.n	80060dc <_vfiprintf_r+0x34>
 80060d8:	692b      	ldr	r3, [r5, #16]
 80060da:	b99b      	cbnz	r3, 8006104 <_vfiprintf_r+0x5c>
 80060dc:	4629      	mov	r1, r5
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 faca 	bl	8006678 <__swsetup_r>
 80060e4:	b170      	cbz	r0, 8006104 <_vfiprintf_r+0x5c>
 80060e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060e8:	07dc      	lsls	r4, r3, #31
 80060ea:	d504      	bpl.n	80060f6 <_vfiprintf_r+0x4e>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	b01d      	add	sp, #116	@ 0x74
 80060f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	0598      	lsls	r0, r3, #22
 80060fa:	d4f7      	bmi.n	80060ec <_vfiprintf_r+0x44>
 80060fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060fe:	f7fe fd95 	bl	8004c2c <__retarget_lock_release_recursive>
 8006102:	e7f3      	b.n	80060ec <_vfiprintf_r+0x44>
 8006104:	2300      	movs	r3, #0
 8006106:	9309      	str	r3, [sp, #36]	@ 0x24
 8006108:	2320      	movs	r3, #32
 800610a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800610e:	2330      	movs	r3, #48	@ 0x30
 8006110:	f04f 0901 	mov.w	r9, #1
 8006114:	f8cd 800c 	str.w	r8, [sp, #12]
 8006118:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80062c4 <_vfiprintf_r+0x21c>
 800611c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006120:	4623      	mov	r3, r4
 8006122:	469a      	mov	sl, r3
 8006124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006128:	b10a      	cbz	r2, 800612e <_vfiprintf_r+0x86>
 800612a:	2a25      	cmp	r2, #37	@ 0x25
 800612c:	d1f9      	bne.n	8006122 <_vfiprintf_r+0x7a>
 800612e:	ebba 0b04 	subs.w	fp, sl, r4
 8006132:	d00b      	beq.n	800614c <_vfiprintf_r+0xa4>
 8006134:	465b      	mov	r3, fp
 8006136:	4622      	mov	r2, r4
 8006138:	4629      	mov	r1, r5
 800613a:	4630      	mov	r0, r6
 800613c:	f7ff ffa2 	bl	8006084 <__sfputs_r>
 8006140:	3001      	adds	r0, #1
 8006142:	f000 80a7 	beq.w	8006294 <_vfiprintf_r+0x1ec>
 8006146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006148:	445a      	add	r2, fp
 800614a:	9209      	str	r2, [sp, #36]	@ 0x24
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 809f 	beq.w	8006294 <_vfiprintf_r+0x1ec>
 8006156:	2300      	movs	r3, #0
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006160:	f10a 0a01 	add.w	sl, sl, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	9307      	str	r3, [sp, #28]
 8006168:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800616c:	931a      	str	r3, [sp, #104]	@ 0x68
 800616e:	4654      	mov	r4, sl
 8006170:	2205      	movs	r2, #5
 8006172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006176:	4853      	ldr	r0, [pc, #332]	@ (80062c4 <_vfiprintf_r+0x21c>)
 8006178:	f000 fb18 	bl	80067ac <memchr>
 800617c:	9a04      	ldr	r2, [sp, #16]
 800617e:	b9d8      	cbnz	r0, 80061b8 <_vfiprintf_r+0x110>
 8006180:	06d1      	lsls	r1, r2, #27
 8006182:	bf44      	itt	mi
 8006184:	2320      	movmi	r3, #32
 8006186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800618a:	0713      	lsls	r3, r2, #28
 800618c:	bf44      	itt	mi
 800618e:	232b      	movmi	r3, #43	@ 0x2b
 8006190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006194:	f89a 3000 	ldrb.w	r3, [sl]
 8006198:	2b2a      	cmp	r3, #42	@ 0x2a
 800619a:	d015      	beq.n	80061c8 <_vfiprintf_r+0x120>
 800619c:	4654      	mov	r4, sl
 800619e:	2000      	movs	r0, #0
 80061a0:	f04f 0c0a 	mov.w	ip, #10
 80061a4:	9a07      	ldr	r2, [sp, #28]
 80061a6:	4621      	mov	r1, r4
 80061a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ac:	3b30      	subs	r3, #48	@ 0x30
 80061ae:	2b09      	cmp	r3, #9
 80061b0:	d94b      	bls.n	800624a <_vfiprintf_r+0x1a2>
 80061b2:	b1b0      	cbz	r0, 80061e2 <_vfiprintf_r+0x13a>
 80061b4:	9207      	str	r2, [sp, #28]
 80061b6:	e014      	b.n	80061e2 <_vfiprintf_r+0x13a>
 80061b8:	eba0 0308 	sub.w	r3, r0, r8
 80061bc:	fa09 f303 	lsl.w	r3, r9, r3
 80061c0:	4313      	orrs	r3, r2
 80061c2:	46a2      	mov	sl, r4
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	e7d2      	b.n	800616e <_vfiprintf_r+0xc6>
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	1d19      	adds	r1, r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	9103      	str	r1, [sp, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bfbb      	ittet	lt
 80061d4:	425b      	neglt	r3, r3
 80061d6:	f042 0202 	orrlt.w	r2, r2, #2
 80061da:	9307      	strge	r3, [sp, #28]
 80061dc:	9307      	strlt	r3, [sp, #28]
 80061de:	bfb8      	it	lt
 80061e0:	9204      	strlt	r2, [sp, #16]
 80061e2:	7823      	ldrb	r3, [r4, #0]
 80061e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80061e6:	d10a      	bne.n	80061fe <_vfiprintf_r+0x156>
 80061e8:	7863      	ldrb	r3, [r4, #1]
 80061ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ec:	d132      	bne.n	8006254 <_vfiprintf_r+0x1ac>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	3402      	adds	r4, #2
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	9203      	str	r2, [sp, #12]
 80061f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80062c8 <_vfiprintf_r+0x220>
 8006202:	2203      	movs	r2, #3
 8006204:	4650      	mov	r0, sl
 8006206:	7821      	ldrb	r1, [r4, #0]
 8006208:	f000 fad0 	bl	80067ac <memchr>
 800620c:	b138      	cbz	r0, 800621e <_vfiprintf_r+0x176>
 800620e:	2240      	movs	r2, #64	@ 0x40
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	eba0 000a 	sub.w	r0, r0, sl
 8006216:	4082      	lsls	r2, r0
 8006218:	4313      	orrs	r3, r2
 800621a:	3401      	adds	r4, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006222:	2206      	movs	r2, #6
 8006224:	4829      	ldr	r0, [pc, #164]	@ (80062cc <_vfiprintf_r+0x224>)
 8006226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800622a:	f000 fabf 	bl	80067ac <memchr>
 800622e:	2800      	cmp	r0, #0
 8006230:	d03f      	beq.n	80062b2 <_vfiprintf_r+0x20a>
 8006232:	4b27      	ldr	r3, [pc, #156]	@ (80062d0 <_vfiprintf_r+0x228>)
 8006234:	bb1b      	cbnz	r3, 800627e <_vfiprintf_r+0x1d6>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	3307      	adds	r3, #7
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	3308      	adds	r3, #8
 8006240:	9303      	str	r3, [sp, #12]
 8006242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006244:	443b      	add	r3, r7
 8006246:	9309      	str	r3, [sp, #36]	@ 0x24
 8006248:	e76a      	b.n	8006120 <_vfiprintf_r+0x78>
 800624a:	460c      	mov	r4, r1
 800624c:	2001      	movs	r0, #1
 800624e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006252:	e7a8      	b.n	80061a6 <_vfiprintf_r+0xfe>
 8006254:	2300      	movs	r3, #0
 8006256:	f04f 0c0a 	mov.w	ip, #10
 800625a:	4619      	mov	r1, r3
 800625c:	3401      	adds	r4, #1
 800625e:	9305      	str	r3, [sp, #20]
 8006260:	4620      	mov	r0, r4
 8006262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006266:	3a30      	subs	r2, #48	@ 0x30
 8006268:	2a09      	cmp	r2, #9
 800626a:	d903      	bls.n	8006274 <_vfiprintf_r+0x1cc>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0c6      	beq.n	80061fe <_vfiprintf_r+0x156>
 8006270:	9105      	str	r1, [sp, #20]
 8006272:	e7c4      	b.n	80061fe <_vfiprintf_r+0x156>
 8006274:	4604      	mov	r4, r0
 8006276:	2301      	movs	r3, #1
 8006278:	fb0c 2101 	mla	r1, ip, r1, r2
 800627c:	e7f0      	b.n	8006260 <_vfiprintf_r+0x1b8>
 800627e:	ab03      	add	r3, sp, #12
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	462a      	mov	r2, r5
 8006284:	4630      	mov	r0, r6
 8006286:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <_vfiprintf_r+0x22c>)
 8006288:	a904      	add	r1, sp, #16
 800628a:	f3af 8000 	nop.w
 800628e:	4607      	mov	r7, r0
 8006290:	1c78      	adds	r0, r7, #1
 8006292:	d1d6      	bne.n	8006242 <_vfiprintf_r+0x19a>
 8006294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006296:	07d9      	lsls	r1, r3, #31
 8006298:	d405      	bmi.n	80062a6 <_vfiprintf_r+0x1fe>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	059a      	lsls	r2, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_vfiprintf_r+0x1fe>
 80062a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062a2:	f7fe fcc3 	bl	8004c2c <__retarget_lock_release_recursive>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	065b      	lsls	r3, r3, #25
 80062aa:	f53f af1f 	bmi.w	80060ec <_vfiprintf_r+0x44>
 80062ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062b0:	e71e      	b.n	80060f0 <_vfiprintf_r+0x48>
 80062b2:	ab03      	add	r3, sp, #12
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	462a      	mov	r2, r5
 80062b8:	4630      	mov	r0, r6
 80062ba:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <_vfiprintf_r+0x22c>)
 80062bc:	a904      	add	r1, sp, #16
 80062be:	f000 f87d 	bl	80063bc <_printf_i>
 80062c2:	e7e4      	b.n	800628e <_vfiprintf_r+0x1e6>
 80062c4:	08006cf9 	.word	0x08006cf9
 80062c8:	08006cff 	.word	0x08006cff
 80062cc:	08006d03 	.word	0x08006d03
 80062d0:	00000000 	.word	0x00000000
 80062d4:	08006085 	.word	0x08006085

080062d8 <_printf_common>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	4698      	mov	r8, r3
 80062e0:	688a      	ldr	r2, [r1, #8]
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	4607      	mov	r7, r0
 80062e6:	4293      	cmp	r3, r2
 80062e8:	bfb8      	it	lt
 80062ea:	4613      	movlt	r3, r2
 80062ec:	6033      	str	r3, [r6, #0]
 80062ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062f2:	460c      	mov	r4, r1
 80062f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062f8:	b10a      	cbz	r2, 80062fe <_printf_common+0x26>
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	0699      	lsls	r1, r3, #26
 8006302:	bf42      	ittt	mi
 8006304:	6833      	ldrmi	r3, [r6, #0]
 8006306:	3302      	addmi	r3, #2
 8006308:	6033      	strmi	r3, [r6, #0]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d106      	bne.n	8006320 <_printf_common+0x48>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	42ab      	cmp	r3, r5
 800631e:	dc2b      	bgt.n	8006378 <_printf_common+0xa0>
 8006320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	3b00      	subs	r3, #0
 8006328:	bf18      	it	ne
 800632a:	2301      	movne	r3, #1
 800632c:	0692      	lsls	r2, r2, #26
 800632e:	d430      	bmi.n	8006392 <_printf_common+0xba>
 8006330:	4641      	mov	r1, r8
 8006332:	4638      	mov	r0, r7
 8006334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006338:	47c8      	blx	r9
 800633a:	3001      	adds	r0, #1
 800633c:	d023      	beq.n	8006386 <_printf_common+0xae>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	6922      	ldr	r2, [r4, #16]
 8006342:	f003 0306 	and.w	r3, r3, #6
 8006346:	2b04      	cmp	r3, #4
 8006348:	bf14      	ite	ne
 800634a:	2500      	movne	r5, #0
 800634c:	6833      	ldreq	r3, [r6, #0]
 800634e:	f04f 0600 	mov.w	r6, #0
 8006352:	bf08      	it	eq
 8006354:	68e5      	ldreq	r5, [r4, #12]
 8006356:	f104 041a 	add.w	r4, r4, #26
 800635a:	bf08      	it	eq
 800635c:	1aed      	subeq	r5, r5, r3
 800635e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006362:	bf08      	it	eq
 8006364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006368:	4293      	cmp	r3, r2
 800636a:	bfc4      	itt	gt
 800636c:	1a9b      	subgt	r3, r3, r2
 800636e:	18ed      	addgt	r5, r5, r3
 8006370:	42b5      	cmp	r5, r6
 8006372:	d11a      	bne.n	80063aa <_printf_common+0xd2>
 8006374:	2000      	movs	r0, #0
 8006376:	e008      	b.n	800638a <_printf_common+0xb2>
 8006378:	2301      	movs	r3, #1
 800637a:	4652      	mov	r2, sl
 800637c:	4641      	mov	r1, r8
 800637e:	4638      	mov	r0, r7
 8006380:	47c8      	blx	r9
 8006382:	3001      	adds	r0, #1
 8006384:	d103      	bne.n	800638e <_printf_common+0xb6>
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638e:	3501      	adds	r5, #1
 8006390:	e7c1      	b.n	8006316 <_printf_common+0x3e>
 8006392:	2030      	movs	r0, #48	@ 0x30
 8006394:	18e1      	adds	r1, r4, r3
 8006396:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063a0:	4422      	add	r2, r4
 80063a2:	3302      	adds	r3, #2
 80063a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063a8:	e7c2      	b.n	8006330 <_printf_common+0x58>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4622      	mov	r2, r4
 80063ae:	4641      	mov	r1, r8
 80063b0:	4638      	mov	r0, r7
 80063b2:	47c8      	blx	r9
 80063b4:	3001      	adds	r0, #1
 80063b6:	d0e6      	beq.n	8006386 <_printf_common+0xae>
 80063b8:	3601      	adds	r6, #1
 80063ba:	e7d9      	b.n	8006370 <_printf_common+0x98>

080063bc <_printf_i>:
 80063bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	7e0f      	ldrb	r7, [r1, #24]
 80063c2:	4691      	mov	r9, r2
 80063c4:	2f78      	cmp	r7, #120	@ 0x78
 80063c6:	4680      	mov	r8, r0
 80063c8:	460c      	mov	r4, r1
 80063ca:	469a      	mov	sl, r3
 80063cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063d2:	d807      	bhi.n	80063e4 <_printf_i+0x28>
 80063d4:	2f62      	cmp	r7, #98	@ 0x62
 80063d6:	d80a      	bhi.n	80063ee <_printf_i+0x32>
 80063d8:	2f00      	cmp	r7, #0
 80063da:	f000 80d3 	beq.w	8006584 <_printf_i+0x1c8>
 80063de:	2f58      	cmp	r7, #88	@ 0x58
 80063e0:	f000 80ba 	beq.w	8006558 <_printf_i+0x19c>
 80063e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063ec:	e03a      	b.n	8006464 <_printf_i+0xa8>
 80063ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063f2:	2b15      	cmp	r3, #21
 80063f4:	d8f6      	bhi.n	80063e4 <_printf_i+0x28>
 80063f6:	a101      	add	r1, pc, #4	@ (adr r1, 80063fc <_printf_i+0x40>)
 80063f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006469 	.word	0x08006469
 8006404:	080063e5 	.word	0x080063e5
 8006408:	080063e5 	.word	0x080063e5
 800640c:	080063e5 	.word	0x080063e5
 8006410:	080063e5 	.word	0x080063e5
 8006414:	08006469 	.word	0x08006469
 8006418:	080063e5 	.word	0x080063e5
 800641c:	080063e5 	.word	0x080063e5
 8006420:	080063e5 	.word	0x080063e5
 8006424:	080063e5 	.word	0x080063e5
 8006428:	0800656b 	.word	0x0800656b
 800642c:	08006493 	.word	0x08006493
 8006430:	08006525 	.word	0x08006525
 8006434:	080063e5 	.word	0x080063e5
 8006438:	080063e5 	.word	0x080063e5
 800643c:	0800658d 	.word	0x0800658d
 8006440:	080063e5 	.word	0x080063e5
 8006444:	08006493 	.word	0x08006493
 8006448:	080063e5 	.word	0x080063e5
 800644c:	080063e5 	.word	0x080063e5
 8006450:	0800652d 	.word	0x0800652d
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6032      	str	r2, [r6, #0]
 800645c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006460:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006464:	2301      	movs	r3, #1
 8006466:	e09e      	b.n	80065a6 <_printf_i+0x1ea>
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	1d19      	adds	r1, r3, #4
 800646e:	6031      	str	r1, [r6, #0]
 8006470:	0606      	lsls	r6, r0, #24
 8006472:	d501      	bpl.n	8006478 <_printf_i+0xbc>
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	e003      	b.n	8006480 <_printf_i+0xc4>
 8006478:	0645      	lsls	r5, r0, #25
 800647a:	d5fb      	bpl.n	8006474 <_printf_i+0xb8>
 800647c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006480:	2d00      	cmp	r5, #0
 8006482:	da03      	bge.n	800648c <_printf_i+0xd0>
 8006484:	232d      	movs	r3, #45	@ 0x2d
 8006486:	426d      	negs	r5, r5
 8006488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648c:	230a      	movs	r3, #10
 800648e:	4859      	ldr	r0, [pc, #356]	@ (80065f4 <_printf_i+0x238>)
 8006490:	e011      	b.n	80064b6 <_printf_i+0xfa>
 8006492:	6821      	ldr	r1, [r4, #0]
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	0608      	lsls	r0, r1, #24
 8006498:	f853 5b04 	ldr.w	r5, [r3], #4
 800649c:	d402      	bmi.n	80064a4 <_printf_i+0xe8>
 800649e:	0649      	lsls	r1, r1, #25
 80064a0:	bf48      	it	mi
 80064a2:	b2ad      	uxthmi	r5, r5
 80064a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	bf14      	ite	ne
 80064aa:	230a      	movne	r3, #10
 80064ac:	2308      	moveq	r3, #8
 80064ae:	4851      	ldr	r0, [pc, #324]	@ (80065f4 <_printf_i+0x238>)
 80064b0:	2100      	movs	r1, #0
 80064b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064b6:	6866      	ldr	r6, [r4, #4]
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	bfa8      	it	ge
 80064bc:	6821      	ldrge	r1, [r4, #0]
 80064be:	60a6      	str	r6, [r4, #8]
 80064c0:	bfa4      	itt	ge
 80064c2:	f021 0104 	bicge.w	r1, r1, #4
 80064c6:	6021      	strge	r1, [r4, #0]
 80064c8:	b90d      	cbnz	r5, 80064ce <_printf_i+0x112>
 80064ca:	2e00      	cmp	r6, #0
 80064cc:	d04b      	beq.n	8006566 <_printf_i+0x1aa>
 80064ce:	4616      	mov	r6, r2
 80064d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80064d4:	fb03 5711 	mls	r7, r3, r1, r5
 80064d8:	5dc7      	ldrb	r7, [r0, r7]
 80064da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064de:	462f      	mov	r7, r5
 80064e0:	42bb      	cmp	r3, r7
 80064e2:	460d      	mov	r5, r1
 80064e4:	d9f4      	bls.n	80064d0 <_printf_i+0x114>
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d10b      	bne.n	8006502 <_printf_i+0x146>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	07df      	lsls	r7, r3, #31
 80064ee:	d508      	bpl.n	8006502 <_printf_i+0x146>
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	6861      	ldr	r1, [r4, #4]
 80064f4:	4299      	cmp	r1, r3
 80064f6:	bfde      	ittt	le
 80064f8:	2330      	movle	r3, #48	@ 0x30
 80064fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006502:	1b92      	subs	r2, r2, r6
 8006504:	6122      	str	r2, [r4, #16]
 8006506:	464b      	mov	r3, r9
 8006508:	4621      	mov	r1, r4
 800650a:	4640      	mov	r0, r8
 800650c:	f8cd a000 	str.w	sl, [sp]
 8006510:	aa03      	add	r2, sp, #12
 8006512:	f7ff fee1 	bl	80062d8 <_printf_common>
 8006516:	3001      	adds	r0, #1
 8006518:	d14a      	bne.n	80065b0 <_printf_i+0x1f4>
 800651a:	f04f 30ff 	mov.w	r0, #4294967295
 800651e:	b004      	add	sp, #16
 8006520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	f043 0320 	orr.w	r3, r3, #32
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	2778      	movs	r7, #120	@ 0x78
 800652e:	4832      	ldr	r0, [pc, #200]	@ (80065f8 <_printf_i+0x23c>)
 8006530:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	6831      	ldr	r1, [r6, #0]
 8006538:	061f      	lsls	r7, r3, #24
 800653a:	f851 5b04 	ldr.w	r5, [r1], #4
 800653e:	d402      	bmi.n	8006546 <_printf_i+0x18a>
 8006540:	065f      	lsls	r7, r3, #25
 8006542:	bf48      	it	mi
 8006544:	b2ad      	uxthmi	r5, r5
 8006546:	6031      	str	r1, [r6, #0]
 8006548:	07d9      	lsls	r1, r3, #31
 800654a:	bf44      	itt	mi
 800654c:	f043 0320 	orrmi.w	r3, r3, #32
 8006550:	6023      	strmi	r3, [r4, #0]
 8006552:	b11d      	cbz	r5, 800655c <_printf_i+0x1a0>
 8006554:	2310      	movs	r3, #16
 8006556:	e7ab      	b.n	80064b0 <_printf_i+0xf4>
 8006558:	4826      	ldr	r0, [pc, #152]	@ (80065f4 <_printf_i+0x238>)
 800655a:	e7e9      	b.n	8006530 <_printf_i+0x174>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	f023 0320 	bic.w	r3, r3, #32
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	e7f6      	b.n	8006554 <_printf_i+0x198>
 8006566:	4616      	mov	r6, r2
 8006568:	e7bd      	b.n	80064e6 <_printf_i+0x12a>
 800656a:	6833      	ldr	r3, [r6, #0]
 800656c:	6825      	ldr	r5, [r4, #0]
 800656e:	1d18      	adds	r0, r3, #4
 8006570:	6961      	ldr	r1, [r4, #20]
 8006572:	6030      	str	r0, [r6, #0]
 8006574:	062e      	lsls	r6, r5, #24
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	d501      	bpl.n	800657e <_printf_i+0x1c2>
 800657a:	6019      	str	r1, [r3, #0]
 800657c:	e002      	b.n	8006584 <_printf_i+0x1c8>
 800657e:	0668      	lsls	r0, r5, #25
 8006580:	d5fb      	bpl.n	800657a <_printf_i+0x1be>
 8006582:	8019      	strh	r1, [r3, #0]
 8006584:	2300      	movs	r3, #0
 8006586:	4616      	mov	r6, r2
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	e7bc      	b.n	8006506 <_printf_i+0x14a>
 800658c:	6833      	ldr	r3, [r6, #0]
 800658e:	2100      	movs	r1, #0
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	6032      	str	r2, [r6, #0]
 8006594:	681e      	ldr	r6, [r3, #0]
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	4630      	mov	r0, r6
 800659a:	f000 f907 	bl	80067ac <memchr>
 800659e:	b108      	cbz	r0, 80065a4 <_printf_i+0x1e8>
 80065a0:	1b80      	subs	r0, r0, r6
 80065a2:	6060      	str	r0, [r4, #4]
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	2300      	movs	r3, #0
 80065aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ae:	e7aa      	b.n	8006506 <_printf_i+0x14a>
 80065b0:	4632      	mov	r2, r6
 80065b2:	4649      	mov	r1, r9
 80065b4:	4640      	mov	r0, r8
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	47d0      	blx	sl
 80065ba:	3001      	adds	r0, #1
 80065bc:	d0ad      	beq.n	800651a <_printf_i+0x15e>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	079b      	lsls	r3, r3, #30
 80065c2:	d413      	bmi.n	80065ec <_printf_i+0x230>
 80065c4:	68e0      	ldr	r0, [r4, #12]
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	4298      	cmp	r0, r3
 80065ca:	bfb8      	it	lt
 80065cc:	4618      	movlt	r0, r3
 80065ce:	e7a6      	b.n	800651e <_printf_i+0x162>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4632      	mov	r2, r6
 80065d4:	4649      	mov	r1, r9
 80065d6:	4640      	mov	r0, r8
 80065d8:	47d0      	blx	sl
 80065da:	3001      	adds	r0, #1
 80065dc:	d09d      	beq.n	800651a <_printf_i+0x15e>
 80065de:	3501      	adds	r5, #1
 80065e0:	68e3      	ldr	r3, [r4, #12]
 80065e2:	9903      	ldr	r1, [sp, #12]
 80065e4:	1a5b      	subs	r3, r3, r1
 80065e6:	42ab      	cmp	r3, r5
 80065e8:	dcf2      	bgt.n	80065d0 <_printf_i+0x214>
 80065ea:	e7eb      	b.n	80065c4 <_printf_i+0x208>
 80065ec:	2500      	movs	r5, #0
 80065ee:	f104 0619 	add.w	r6, r4, #25
 80065f2:	e7f5      	b.n	80065e0 <_printf_i+0x224>
 80065f4:	08006d0a 	.word	0x08006d0a
 80065f8:	08006d1b 	.word	0x08006d1b

080065fc <__swbuf_r>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	460e      	mov	r6, r1
 8006600:	4614      	mov	r4, r2
 8006602:	4605      	mov	r5, r0
 8006604:	b118      	cbz	r0, 800660e <__swbuf_r+0x12>
 8006606:	6a03      	ldr	r3, [r0, #32]
 8006608:	b90b      	cbnz	r3, 800660e <__swbuf_r+0x12>
 800660a:	f7fe f9ad 	bl	8004968 <__sinit>
 800660e:	69a3      	ldr	r3, [r4, #24]
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	071a      	lsls	r2, r3, #28
 8006616:	d501      	bpl.n	800661c <__swbuf_r+0x20>
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	b943      	cbnz	r3, 800662e <__swbuf_r+0x32>
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 f82a 	bl	8006678 <__swsetup_r>
 8006624:	b118      	cbz	r0, 800662e <__swbuf_r+0x32>
 8006626:	f04f 37ff 	mov.w	r7, #4294967295
 800662a:	4638      	mov	r0, r7
 800662c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	6922      	ldr	r2, [r4, #16]
 8006632:	b2f6      	uxtb	r6, r6
 8006634:	1a98      	subs	r0, r3, r2
 8006636:	6963      	ldr	r3, [r4, #20]
 8006638:	4637      	mov	r7, r6
 800663a:	4283      	cmp	r3, r0
 800663c:	dc05      	bgt.n	800664a <__swbuf_r+0x4e>
 800663e:	4621      	mov	r1, r4
 8006640:	4628      	mov	r0, r5
 8006642:	f7ff fca5 	bl	8005f90 <_fflush_r>
 8006646:	2800      	cmp	r0, #0
 8006648:	d1ed      	bne.n	8006626 <__swbuf_r+0x2a>
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	3b01      	subs	r3, #1
 800664e:	60a3      	str	r3, [r4, #8]
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	6022      	str	r2, [r4, #0]
 8006656:	701e      	strb	r6, [r3, #0]
 8006658:	6962      	ldr	r2, [r4, #20]
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	429a      	cmp	r2, r3
 800665e:	d004      	beq.n	800666a <__swbuf_r+0x6e>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	07db      	lsls	r3, r3, #31
 8006664:	d5e1      	bpl.n	800662a <__swbuf_r+0x2e>
 8006666:	2e0a      	cmp	r6, #10
 8006668:	d1df      	bne.n	800662a <__swbuf_r+0x2e>
 800666a:	4621      	mov	r1, r4
 800666c:	4628      	mov	r0, r5
 800666e:	f7ff fc8f 	bl	8005f90 <_fflush_r>
 8006672:	2800      	cmp	r0, #0
 8006674:	d0d9      	beq.n	800662a <__swbuf_r+0x2e>
 8006676:	e7d6      	b.n	8006626 <__swbuf_r+0x2a>

08006678 <__swsetup_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4b29      	ldr	r3, [pc, #164]	@ (8006720 <__swsetup_r+0xa8>)
 800667c:	4605      	mov	r5, r0
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	460c      	mov	r4, r1
 8006682:	b118      	cbz	r0, 800668c <__swsetup_r+0x14>
 8006684:	6a03      	ldr	r3, [r0, #32]
 8006686:	b90b      	cbnz	r3, 800668c <__swsetup_r+0x14>
 8006688:	f7fe f96e 	bl	8004968 <__sinit>
 800668c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006690:	0719      	lsls	r1, r3, #28
 8006692:	d422      	bmi.n	80066da <__swsetup_r+0x62>
 8006694:	06da      	lsls	r2, r3, #27
 8006696:	d407      	bmi.n	80066a8 <__swsetup_r+0x30>
 8006698:	2209      	movs	r2, #9
 800669a:	602a      	str	r2, [r5, #0]
 800669c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	e033      	b.n	8006710 <__swsetup_r+0x98>
 80066a8:	0758      	lsls	r0, r3, #29
 80066aa:	d512      	bpl.n	80066d2 <__swsetup_r+0x5a>
 80066ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ae:	b141      	cbz	r1, 80066c2 <__swsetup_r+0x4a>
 80066b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066b4:	4299      	cmp	r1, r3
 80066b6:	d002      	beq.n	80066be <__swsetup_r+0x46>
 80066b8:	4628      	mov	r0, r5
 80066ba:	f7fe faeb 	bl	8004c94 <_free_r>
 80066be:	2300      	movs	r3, #0
 80066c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80066c2:	89a3      	ldrh	r3, [r4, #12]
 80066c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	2300      	movs	r3, #0
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	81a3      	strh	r3, [r4, #12]
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	b94b      	cbnz	r3, 80066f2 <__swsetup_r+0x7a>
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e8:	d003      	beq.n	80066f2 <__swsetup_r+0x7a>
 80066ea:	4621      	mov	r1, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	f000 f890 	bl	8006812 <__smakebuf_r>
 80066f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f6:	f013 0201 	ands.w	r2, r3, #1
 80066fa:	d00a      	beq.n	8006712 <__swsetup_r+0x9a>
 80066fc:	2200      	movs	r2, #0
 80066fe:	60a2      	str	r2, [r4, #8]
 8006700:	6962      	ldr	r2, [r4, #20]
 8006702:	4252      	negs	r2, r2
 8006704:	61a2      	str	r2, [r4, #24]
 8006706:	6922      	ldr	r2, [r4, #16]
 8006708:	b942      	cbnz	r2, 800671c <__swsetup_r+0xa4>
 800670a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800670e:	d1c5      	bne.n	800669c <__swsetup_r+0x24>
 8006710:	bd38      	pop	{r3, r4, r5, pc}
 8006712:	0799      	lsls	r1, r3, #30
 8006714:	bf58      	it	pl
 8006716:	6962      	ldrpl	r2, [r4, #20]
 8006718:	60a2      	str	r2, [r4, #8]
 800671a:	e7f4      	b.n	8006706 <__swsetup_r+0x8e>
 800671c:	2000      	movs	r0, #0
 800671e:	e7f7      	b.n	8006710 <__swsetup_r+0x98>
 8006720:	20000184 	.word	0x20000184

08006724 <_raise_r>:
 8006724:	291f      	cmp	r1, #31
 8006726:	b538      	push	{r3, r4, r5, lr}
 8006728:	4605      	mov	r5, r0
 800672a:	460c      	mov	r4, r1
 800672c:	d904      	bls.n	8006738 <_raise_r+0x14>
 800672e:	2316      	movs	r3, #22
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	f04f 30ff 	mov.w	r0, #4294967295
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800673a:	b112      	cbz	r2, 8006742 <_raise_r+0x1e>
 800673c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006740:	b94b      	cbnz	r3, 8006756 <_raise_r+0x32>
 8006742:	4628      	mov	r0, r5
 8006744:	f000 f830 	bl	80067a8 <_getpid_r>
 8006748:	4622      	mov	r2, r4
 800674a:	4601      	mov	r1, r0
 800674c:	4628      	mov	r0, r5
 800674e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006752:	f000 b817 	b.w	8006784 <_kill_r>
 8006756:	2b01      	cmp	r3, #1
 8006758:	d00a      	beq.n	8006770 <_raise_r+0x4c>
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	d103      	bne.n	8006766 <_raise_r+0x42>
 800675e:	2316      	movs	r3, #22
 8006760:	6003      	str	r3, [r0, #0]
 8006762:	2001      	movs	r0, #1
 8006764:	e7e7      	b.n	8006736 <_raise_r+0x12>
 8006766:	2100      	movs	r1, #0
 8006768:	4620      	mov	r0, r4
 800676a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800676e:	4798      	blx	r3
 8006770:	2000      	movs	r0, #0
 8006772:	e7e0      	b.n	8006736 <_raise_r+0x12>

08006774 <raise>:
 8006774:	4b02      	ldr	r3, [pc, #8]	@ (8006780 <raise+0xc>)
 8006776:	4601      	mov	r1, r0
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	f7ff bfd3 	b.w	8006724 <_raise_r>
 800677e:	bf00      	nop
 8006780:	20000184 	.word	0x20000184

08006784 <_kill_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	2300      	movs	r3, #0
 8006788:	4d06      	ldr	r5, [pc, #24]	@ (80067a4 <_kill_r+0x20>)
 800678a:	4604      	mov	r4, r0
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	f7fa fff6 	bl	8001782 <_kill>
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d102      	bne.n	80067a0 <_kill_r+0x1c>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	b103      	cbz	r3, 80067a0 <_kill_r+0x1c>
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	bd38      	pop	{r3, r4, r5, pc}
 80067a2:	bf00      	nop
 80067a4:	20000464 	.word	0x20000464

080067a8 <_getpid_r>:
 80067a8:	f7fa bfe4 	b.w	8001774 <_getpid>

080067ac <memchr>:
 80067ac:	4603      	mov	r3, r0
 80067ae:	b510      	push	{r4, lr}
 80067b0:	b2c9      	uxtb	r1, r1
 80067b2:	4402      	add	r2, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	d101      	bne.n	80067be <memchr+0x12>
 80067ba:	2000      	movs	r0, #0
 80067bc:	e003      	b.n	80067c6 <memchr+0x1a>
 80067be:	7804      	ldrb	r4, [r0, #0]
 80067c0:	3301      	adds	r3, #1
 80067c2:	428c      	cmp	r4, r1
 80067c4:	d1f6      	bne.n	80067b4 <memchr+0x8>
 80067c6:	bd10      	pop	{r4, pc}

080067c8 <__swhatbuf_r>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	460c      	mov	r4, r1
 80067cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d0:	4615      	mov	r5, r2
 80067d2:	2900      	cmp	r1, #0
 80067d4:	461e      	mov	r6, r3
 80067d6:	b096      	sub	sp, #88	@ 0x58
 80067d8:	da0c      	bge.n	80067f4 <__swhatbuf_r+0x2c>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	2100      	movs	r1, #0
 80067de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067e2:	bf14      	ite	ne
 80067e4:	2340      	movne	r3, #64	@ 0x40
 80067e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067ea:	2000      	movs	r0, #0
 80067ec:	6031      	str	r1, [r6, #0]
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	b016      	add	sp, #88	@ 0x58
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	466a      	mov	r2, sp
 80067f6:	f000 f849 	bl	800688c <_fstat_r>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	dbed      	blt.n	80067da <__swhatbuf_r+0x12>
 80067fe:	9901      	ldr	r1, [sp, #4]
 8006800:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006804:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006808:	4259      	negs	r1, r3
 800680a:	4159      	adcs	r1, r3
 800680c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006810:	e7eb      	b.n	80067ea <__swhatbuf_r+0x22>

08006812 <__smakebuf_r>:
 8006812:	898b      	ldrh	r3, [r1, #12]
 8006814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006816:	079d      	lsls	r5, r3, #30
 8006818:	4606      	mov	r6, r0
 800681a:	460c      	mov	r4, r1
 800681c:	d507      	bpl.n	800682e <__smakebuf_r+0x1c>
 800681e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	2301      	movs	r3, #1
 8006828:	6163      	str	r3, [r4, #20]
 800682a:	b003      	add	sp, #12
 800682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800682e:	466a      	mov	r2, sp
 8006830:	ab01      	add	r3, sp, #4
 8006832:	f7ff ffc9 	bl	80067c8 <__swhatbuf_r>
 8006836:	9f00      	ldr	r7, [sp, #0]
 8006838:	4605      	mov	r5, r0
 800683a:	4639      	mov	r1, r7
 800683c:	4630      	mov	r0, r6
 800683e:	f7fe fdd5 	bl	80053ec <_malloc_r>
 8006842:	b948      	cbnz	r0, 8006858 <__smakebuf_r+0x46>
 8006844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006848:	059a      	lsls	r2, r3, #22
 800684a:	d4ee      	bmi.n	800682a <__smakebuf_r+0x18>
 800684c:	f023 0303 	bic.w	r3, r3, #3
 8006850:	f043 0302 	orr.w	r3, r3, #2
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	e7e2      	b.n	800681e <__smakebuf_r+0xc>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800685e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	6020      	str	r0, [r4, #0]
 8006868:	b15b      	cbz	r3, 8006882 <__smakebuf_r+0x70>
 800686a:	4630      	mov	r0, r6
 800686c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006870:	f000 f81e 	bl	80068b0 <_isatty_r>
 8006874:	b128      	cbz	r0, 8006882 <__smakebuf_r+0x70>
 8006876:	89a3      	ldrh	r3, [r4, #12]
 8006878:	f023 0303 	bic.w	r3, r3, #3
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	81a3      	strh	r3, [r4, #12]
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	431d      	orrs	r5, r3
 8006886:	81a5      	strh	r5, [r4, #12]
 8006888:	e7cf      	b.n	800682a <__smakebuf_r+0x18>
	...

0800688c <_fstat_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	2300      	movs	r3, #0
 8006890:	4d06      	ldr	r5, [pc, #24]	@ (80068ac <_fstat_r+0x20>)
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	f7fa ffd1 	bl	8001840 <_fstat>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d102      	bne.n	80068a8 <_fstat_r+0x1c>
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	b103      	cbz	r3, 80068a8 <_fstat_r+0x1c>
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	bf00      	nop
 80068ac:	20000464 	.word	0x20000464

080068b0 <_isatty_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	2300      	movs	r3, #0
 80068b4:	4d05      	ldr	r5, [pc, #20]	@ (80068cc <_isatty_r+0x1c>)
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	f7fa ffcf 	bl	800185e <_isatty>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_isatty_r+0x1a>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_isatty_r+0x1a>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20000464 	.word	0x20000464

080068d0 <_init>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	bf00      	nop
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr

080068dc <_fini>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	bf00      	nop
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr
