
f411_test_imu_uwb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08010740  08010740  00011740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011220  08011220  000131f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011220  08011220  00012220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011228  08011228  000131f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011228  08011228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801122c  0801122c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08011230  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  200001f0  08011420  000131f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  08011420  00013bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130af  00000000  00000000  00013220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f6  00000000  00000000  000262cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00028ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de0  00000000  00000000  00029c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018663  00000000  00000000  0002aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001638f  00000000  00000000  0004309b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096eeb  00000000  00000000  0005942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006404  00000000  00000000  000f0358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f675c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010728 	.word	0x08010728

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08010728 	.word	0x08010728

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <bno055_assignI2C+0x1c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000020c 	.word	0x2000020c

08001014 <bno055_delay>:

void bno055_delay(int time) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fe94 	bl	8002d4c <HAL_Delay>
#endif
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	733b      	strb	r3, [r7, #12]
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001044:	4b5a      	ldr	r3, [pc, #360]	@ (80011b0 <bno055_writeData+0x184>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	230a      	movs	r3, #10
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2302      	movs	r3, #2
 8001052:	2150      	movs	r1, #80	@ 0x50
 8001054:	f002 fe0e 	bl	8003c74 <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80a0 	beq.w	80011a4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d103      	bne.n	8001072 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800106a:	4852      	ldr	r0, [pc, #328]	@ (80011b4 <bno055_writeData+0x188>)
 800106c:	f00b fb38 	bl	800c6e0 <puts>
 8001070:	e012      	b.n	8001098 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d103      	bne.n	8001080 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001078:	484f      	ldr	r0, [pc, #316]	@ (80011b8 <bno055_writeData+0x18c>)
 800107a:	f00b fb31 	bl	800c6e0 <puts>
 800107e:	e00b      	b.n	8001098 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d103      	bne.n	800108e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001086:	484d      	ldr	r0, [pc, #308]	@ (80011bc <bno055_writeData+0x190>)
 8001088:	f00b fb2a 	bl	800c6e0 <puts>
 800108c:	e004      	b.n	8001098 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4619      	mov	r1, r3
 8001092:	484b      	ldr	r0, [pc, #300]	@ (80011c0 <bno055_writeData+0x194>)
 8001094:	f00b fabc 	bl	800c610 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001098:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <bno055_writeData+0x184>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f003 f927 	bl	80042f0 <HAL_I2C_GetError>
 80010a2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d07e      	beq.n	80011a8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d103      	bne.n	80010b8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80010b0:	4844      	ldr	r0, [pc, #272]	@ (80011c4 <bno055_writeData+0x198>)
 80010b2:	f00b fb15 	bl	800c6e0 <puts>
 80010b6:	e021      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d103      	bne.n	80010c6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80010be:	4842      	ldr	r0, [pc, #264]	@ (80011c8 <bno055_writeData+0x19c>)
 80010c0:	f00b fb0e 	bl	800c6e0 <puts>
 80010c4:	e01a      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d103      	bne.n	80010d4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80010cc:	483f      	ldr	r0, [pc, #252]	@ (80011cc <bno055_writeData+0x1a0>)
 80010ce:	f00b fb07 	bl	800c6e0 <puts>
 80010d2:	e013      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d103      	bne.n	80010e2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80010da:	483d      	ldr	r0, [pc, #244]	@ (80011d0 <bno055_writeData+0x1a4>)
 80010dc:	f00b fb00 	bl	800c6e0 <puts>
 80010e0:	e00c      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d103      	bne.n	80010f0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80010e8:	483a      	ldr	r0, [pc, #232]	@ (80011d4 <bno055_writeData+0x1a8>)
 80010ea:	f00b faf9 	bl	800c6e0 <puts>
 80010ee:	e005      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d102      	bne.n	80010fc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80010f6:	4838      	ldr	r0, [pc, #224]	@ (80011d8 <bno055_writeData+0x1ac>)
 80010f8:	f00b faf2 	bl	800c6e0 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <bno055_writeData+0x184>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f003 f8e7 	bl	80042d4 <HAL_I2C_GetState>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001110:	4832      	ldr	r0, [pc, #200]	@ (80011dc <bno055_writeData+0x1b0>)
 8001112:	f00b fae5 	bl	800c6e0 <puts>
 8001116:	e048      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b20      	cmp	r3, #32
 800111c:	d103      	bne.n	8001126 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800111e:	482f      	ldr	r0, [pc, #188]	@ (80011dc <bno055_writeData+0x1b0>)
 8001120:	f00b fade 	bl	800c6e0 <puts>
 8001124:	e041      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b24      	cmp	r3, #36	@ 0x24
 800112a:	d103      	bne.n	8001134 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800112c:	482c      	ldr	r0, [pc, #176]	@ (80011e0 <bno055_writeData+0x1b4>)
 800112e:	f00b fad7 	bl	800c6e0 <puts>
 8001132:	e03a      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b21      	cmp	r3, #33	@ 0x21
 8001138:	d103      	bne.n	8001142 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800113a:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <bno055_writeData+0x1b8>)
 800113c:	f00b fad0 	bl	800c6e0 <puts>
 8001140:	e033      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b22      	cmp	r3, #34	@ 0x22
 8001146:	d103      	bne.n	8001150 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001148:	4827      	ldr	r0, [pc, #156]	@ (80011e8 <bno055_writeData+0x1bc>)
 800114a:	f00b fac9 	bl	800c6e0 <puts>
 800114e:	e02c      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b28      	cmp	r3, #40	@ 0x28
 8001154:	d103      	bne.n	800115e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001156:	4825      	ldr	r0, [pc, #148]	@ (80011ec <bno055_writeData+0x1c0>)
 8001158:	f00b fac2 	bl	800c6e0 <puts>
 800115c:	e025      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b29      	cmp	r3, #41	@ 0x29
 8001162:	d103      	bne.n	800116c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001164:	4822      	ldr	r0, [pc, #136]	@ (80011f0 <bno055_writeData+0x1c4>)
 8001166:	f00b fabb 	bl	800c6e0 <puts>
 800116a:	e01e      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001170:	d103      	bne.n	800117a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001172:	4820      	ldr	r0, [pc, #128]	@ (80011f4 <bno055_writeData+0x1c8>)
 8001174:	f00b fab4 	bl	800c6e0 <puts>
 8001178:	e017      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b60      	cmp	r3, #96	@ 0x60
 800117e:	d103      	bne.n	8001188 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001180:	481d      	ldr	r0, [pc, #116]	@ (80011f8 <bno055_writeData+0x1cc>)
 8001182:	f00b faad 	bl	800c6e0 <puts>
 8001186:	e010      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2ba0      	cmp	r3, #160	@ 0xa0
 800118c:	d103      	bne.n	8001196 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800118e:	481b      	ldr	r0, [pc, #108]	@ (80011fc <bno055_writeData+0x1d0>)
 8001190:	f00b faa6 	bl	800c6e0 <puts>
 8001194:	e009      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2be0      	cmp	r3, #224	@ 0xe0
 800119a:	d106      	bne.n	80011aa <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800119c:	4818      	ldr	r0, [pc, #96]	@ (8001200 <bno055_writeData+0x1d4>)
 800119e:	f00b fa9f 	bl	800c6e0 <puts>
 80011a2:	e002      	b.n	80011aa <bno055_writeData+0x17e>
    return;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <bno055_writeData+0x17e>
    return;
 80011a8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000020c 	.word	0x2000020c
 80011b4:	08010740 	.word	0x08010740
 80011b8:	08010764 	.word	0x08010764
 80011bc:	0801078c 	.word	0x0801078c
 80011c0:	080107b0 	.word	0x080107b0
 80011c4:	080107c8 	.word	0x080107c8
 80011c8:	080107dc 	.word	0x080107dc
 80011cc:	080107f0 	.word	0x080107f0
 80011d0:	08010804 	.word	0x08010804
 80011d4:	08010818 	.word	0x08010818
 80011d8:	0801082c 	.word	0x0801082c
 80011dc:	08010844 	.word	0x08010844
 80011e0:	0801085c 	.word	0x0801085c
 80011e4:	08010870 	.word	0x08010870
 80011e8:	08010888 	.word	0x08010888
 80011ec:	080108a0 	.word	0x080108a0
 80011f0:	080108b8 	.word	0x080108b8
 80011f4:	080108d8 	.word	0x080108d8
 80011f8:	080108f8 	.word	0x080108f8
 80011fc:	08010910 	.word	0x08010910
 8001200:	08010928 	.word	0x08010928

08001204 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <bno055_readData+0x40>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	1dfa      	adds	r2, r7, #7
 800121a:	2364      	movs	r3, #100	@ 0x64
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	2150      	movs	r1, #80	@ 0x50
 8001222:	f002 fd27 	bl	8003c74 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <bno055_readData+0x40>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	b29b      	uxth	r3, r3
 800122e:	2264      	movs	r2, #100	@ 0x64
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	2150      	movs	r1, #80	@ 0x50
 8001236:	f002 fe1b 	bl	8003e70 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000020c 	.word	0x2000020c

08001248 <encoder_cal>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void encoder_cal() {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	 rate2 = ((float)(cnt2 - cnt_pre2)*60)/(4*440*0.1);
	 rate3 = ((float)(cnt3 - cnt_pre3)*60)/(4*440*0.1);
	 rate4 = ((float)(cnt4 - cnt_pre4)*60)/(4*440*0.1);*/

	//HAL_Delay(100);
	cnt_pre4 = __HAL_TIM_GET_COUNTER(&htim1);
 800124c:	4bbe      	ldr	r3, [pc, #760]	@ (8001548 <encoder_cal+0x300>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	b21a      	sxth	r2, r3
 8001254:	4bbd      	ldr	r3, [pc, #756]	@ (800154c <encoder_cal+0x304>)
 8001256:	801a      	strh	r2, [r3, #0]
	cnt_pre1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001258:	4bbd      	ldr	r3, [pc, #756]	@ (8001550 <encoder_cal+0x308>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	b21a      	sxth	r2, r3
 8001260:	4bbc      	ldr	r3, [pc, #752]	@ (8001554 <encoder_cal+0x30c>)
 8001262:	801a      	strh	r2, [r3, #0]
	cnt_pre3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001264:	4bbc      	ldr	r3, [pc, #752]	@ (8001558 <encoder_cal+0x310>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	b21a      	sxth	r2, r3
 800126c:	4bbb      	ldr	r3, [pc, #748]	@ (800155c <encoder_cal+0x314>)
 800126e:	801a      	strh	r2, [r3, #0]
	cnt_pre2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001270:	4bbb      	ldr	r3, [pc, #748]	@ (8001560 <encoder_cal+0x318>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	b21a      	sxth	r2, r3
 8001278:	4bba      	ldr	r3, [pc, #744]	@ (8001564 <encoder_cal+0x31c>)
 800127a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f001 fd65 	bl	8002d4c <HAL_Delay>
	cnt4 = __HAL_TIM_GET_COUNTER(&htim1);
 8001282:	4bb1      	ldr	r3, [pc, #708]	@ (8001548 <encoder_cal+0x300>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	b21a      	sxth	r2, r3
 800128a:	4bb7      	ldr	r3, [pc, #732]	@ (8001568 <encoder_cal+0x320>)
 800128c:	801a      	strh	r2, [r3, #0]
	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 800128e:	4bb0      	ldr	r3, [pc, #704]	@ (8001550 <encoder_cal+0x308>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	b21a      	sxth	r2, r3
 8001296:	4bb5      	ldr	r3, [pc, #724]	@ (800156c <encoder_cal+0x324>)
 8001298:	801a      	strh	r2, [r3, #0]
	cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 800129a:	4baf      	ldr	r3, [pc, #700]	@ (8001558 <encoder_cal+0x310>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4bb3      	ldr	r3, [pc, #716]	@ (8001570 <encoder_cal+0x328>)
 80012a4:	801a      	strh	r2, [r3, #0]
	cnt2 = __HAL_TIM_GET_COUNTER(&htim4);
 80012a6:	4bae      	ldr	r3, [pc, #696]	@ (8001560 <encoder_cal+0x318>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4bb1      	ldr	r3, [pc, #708]	@ (8001574 <encoder_cal+0x32c>)
 80012b0:	801a      	strh	r2, [r3, #0]

	rate1 = (((float) (cnt1 - cnt_pre1)) / (990 * 0.01 * 4)) * 60;
 80012b2:	4bae      	ldr	r3, [pc, #696]	@ (800156c <encoder_cal+0x324>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001554 <encoder_cal+0x30c>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ee17 0a90 	vmov	r0, s15
 80012ce:	f7ff f943 	bl	8000558 <__aeabi_f2d>
 80012d2:	a397      	add	r3, pc, #604	@ (adr r3, 8001530 <encoder_cal+0x2e8>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fac0 	bl	800085c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4ba3      	ldr	r3, [pc, #652]	@ (8001578 <encoder_cal+0x330>)
 80012ea:	f7ff f98d 	bl	8000608 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f7ff fc7f 	bl	8000bf8 <__aeabi_d2f>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a9f      	ldr	r2, [pc, #636]	@ (800157c <encoder_cal+0x334>)
 80012fe:	6013      	str	r3, [r2, #0]
	rate2 = (((float) (cnt2 - cnt_pre2)) / (990 * 0.01 * 4)) * 60;
 8001300:	4b9c      	ldr	r3, [pc, #624]	@ (8001574 <encoder_cal+0x32c>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	b21b      	sxth	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	4b96      	ldr	r3, [pc, #600]	@ (8001564 <encoder_cal+0x31c>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	b21b      	sxth	r3, r3
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	ee17 0a90 	vmov	r0, s15
 800131c:	f7ff f91c 	bl	8000558 <__aeabi_f2d>
 8001320:	a383      	add	r3, pc, #524	@ (adr r3, 8001530 <encoder_cal+0x2e8>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff fa99 	bl	800085c <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b90      	ldr	r3, [pc, #576]	@ (8001578 <encoder_cal+0x330>)
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc58 	bl	8000bf8 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	4a8d      	ldr	r2, [pc, #564]	@ (8001580 <encoder_cal+0x338>)
 800134c:	6013      	str	r3, [r2, #0]
	rate3 = (((float) (cnt3 - cnt_pre3)) / (990 * 0.01 * 4)) * 60;
 800134e:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <encoder_cal+0x328>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b21b      	sxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b81      	ldr	r3, [pc, #516]	@ (800155c <encoder_cal+0x314>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b21b      	sxth	r3, r3
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ee17 0a90 	vmov	r0, s15
 800136a:	f7ff f8f5 	bl	8000558 <__aeabi_f2d>
 800136e:	a370      	add	r3, pc, #448	@ (adr r3, 8001530 <encoder_cal+0x2e8>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff fa72 	bl	800085c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b7c      	ldr	r3, [pc, #496]	@ (8001578 <encoder_cal+0x330>)
 8001386:	f7ff f93f 	bl	8000608 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc31 	bl	8000bf8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	4a7a      	ldr	r2, [pc, #488]	@ (8001584 <encoder_cal+0x33c>)
 800139a:	6013      	str	r3, [r2, #0]
	rate4 = (((float) (cnt4 - cnt_pre4)) / (990 * 0.01 * 4)) * 60;
 800139c:	4b72      	ldr	r3, [pc, #456]	@ (8001568 <encoder_cal+0x320>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b69      	ldr	r3, [pc, #420]	@ (800154c <encoder_cal+0x304>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f7ff f8ce 	bl	8000558 <__aeabi_f2d>
 80013bc:	a35c      	add	r3, pc, #368	@ (adr r3, 8001530 <encoder_cal+0x2e8>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff fa4b 	bl	800085c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b69      	ldr	r3, [pc, #420]	@ (8001578 <encoder_cal+0x330>)
 80013d4:	f7ff f918 	bl	8000608 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fc0a 	bl	8000bf8 <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a68      	ldr	r2, [pc, #416]	@ (8001588 <encoder_cal+0x340>)
 80013e8:	6013      	str	r3, [r2, #0]

	w1 = rate1 * 2 * 3.14 / 60;
 80013ea:	4b64      	ldr	r3, [pc, #400]	@ (800157c <encoder_cal+0x334>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013f4:	ee17 0a90 	vmov	r0, s15
 80013f8:	f7ff f8ae 	bl	8000558 <__aeabi_f2d>
 80013fc:	a34e      	add	r3, pc, #312	@ (adr r3, 8001538 <encoder_cal+0x2f0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f901 	bl	8000608 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <encoder_cal+0x330>)
 8001414:	f7ff fa22 	bl	800085c <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fbea 	bl	8000bf8 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	4a59      	ldr	r2, [pc, #356]	@ (800158c <encoder_cal+0x344>)
 8001428:	6013      	str	r3, [r2, #0]
	w2 = rate2 * 2 * 3.14 / 60;
 800142a:	4b55      	ldr	r3, [pc, #340]	@ (8001580 <encoder_cal+0x338>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001434:	ee17 0a90 	vmov	r0, s15
 8001438:	f7ff f88e 	bl	8000558 <__aeabi_f2d>
 800143c:	a33e      	add	r3, pc, #248	@ (adr r3, 8001538 <encoder_cal+0x2f0>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8e1 	bl	8000608 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b49      	ldr	r3, [pc, #292]	@ (8001578 <encoder_cal+0x330>)
 8001454:	f7ff fa02 	bl	800085c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fbca 	bl	8000bf8 <__aeabi_d2f>
 8001464:	4603      	mov	r3, r0
 8001466:	4a4a      	ldr	r2, [pc, #296]	@ (8001590 <encoder_cal+0x348>)
 8001468:	6013      	str	r3, [r2, #0]
	w3 = rate3 * 2 * 3.14 / 60;
 800146a:	4b46      	ldr	r3, [pc, #280]	@ (8001584 <encoder_cal+0x33c>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001474:	ee17 0a90 	vmov	r0, s15
 8001478:	f7ff f86e 	bl	8000558 <__aeabi_f2d>
 800147c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001538 <encoder_cal+0x2f0>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f8c1 	bl	8000608 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <encoder_cal+0x330>)
 8001494:	f7ff f9e2 	bl	800085c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fbaa 	bl	8000bf8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001594 <encoder_cal+0x34c>)
 80014a8:	6013      	str	r3, [r2, #0]
	w4 = rate4 * 2 * 3.14 / 60;
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <encoder_cal+0x340>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014b4:	ee17 0a90 	vmov	r0, s15
 80014b8:	f7ff f84e 	bl	8000558 <__aeabi_f2d>
 80014bc:	a31e      	add	r3, pc, #120	@ (adr r3, 8001538 <encoder_cal+0x2f0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f8a1 	bl	8000608 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <encoder_cal+0x330>)
 80014d4:	f7ff f9c2 	bl	800085c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb8a 	bl	8000bf8 <__aeabi_d2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001598 <encoder_cal+0x350>)
 80014e8:	6013      	str	r3, [r2, #0]

	vx = (r/4)*(w1 + w2 + w3 + w4);
 80014ea:	4b28      	ldr	r3, [pc, #160]	@ (800158c <encoder_cal+0x344>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <encoder_cal+0x348>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <encoder_cal+0x34c>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <encoder_cal+0x350>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	ee17 0a90 	vmov	r0, s15
 8001512:	f7ff f821 	bl	8000558 <__aeabi_f2d>
 8001516:	a30a      	add	r3, pc, #40	@ (adr r3, 8001540 <encoder_cal+0x2f8>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f874 	bl	8000608 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fb66 	bl	8000bf8 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	e035      	b.n	800159c <encoder_cal+0x354>
 8001530:	cccccccd 	.word	0xcccccccd
 8001534:	4043cccc 	.word	0x4043cccc
 8001538:	51eb851f 	.word	0x51eb851f
 800153c:	40091eb8 	.word	0x40091eb8
 8001540:	bc6a7efa 	.word	0xbc6a7efa
 8001544:	3f889374 	.word	0x3f889374
 8001548:	20000374 	.word	0x20000374
 800154c:	200002ea 	.word	0x200002ea
 8001550:	200003bc 	.word	0x200003bc
 8001554:	200002de 	.word	0x200002de
 8001558:	20000404 	.word	0x20000404
 800155c:	200002e6 	.word	0x200002e6
 8001560:	2000044c 	.word	0x2000044c
 8001564:	200002e2 	.word	0x200002e2
 8001568:	200002e8 	.word	0x200002e8
 800156c:	200002dc 	.word	0x200002dc
 8001570:	200002e4 	.word	0x200002e4
 8001574:	200002e0 	.word	0x200002e0
 8001578:	404e0000 	.word	0x404e0000
 800157c:	200002ec 	.word	0x200002ec
 8001580:	200002f0 	.word	0x200002f0
 8001584:	200002f4 	.word	0x200002f4
 8001588:	200002f8 	.word	0x200002f8
 800158c:	2000022c 	.word	0x2000022c
 8001590:	20000230 	.word	0x20000230
 8001594:	20000234 	.word	0x20000234
 8001598:	20000238 	.word	0x20000238
 800159c:	4a2a      	ldr	r2, [pc, #168]	@ (8001648 <encoder_cal+0x400>)
 800159e:	6013      	str	r3, [r2, #0]
	vy = (r/4)*(-w1 + w2 - w3 + w4);
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <encoder_cal+0x404>)
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <encoder_cal+0x408>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b0:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <encoder_cal+0x40c>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <encoder_cal+0x410>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	ee17 0a90 	vmov	r0, s15
 80015c8:	f7fe ffc6 	bl	8000558 <__aeabi_f2d>
 80015cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001638 <encoder_cal+0x3f0>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f819 	bl	8000608 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb0b 	bl	8000bf8 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <encoder_cal+0x414>)
 80015e6:	6013      	str	r3, [r2, #0]
	vw = (r/(4*L))*(-w1 + w2 + w3 - w4);
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <encoder_cal+0x404>)
 80015ea:	ed93 7a00 	vldr	s14, [r3]
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <encoder_cal+0x408>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f8:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <encoder_cal+0x40c>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <encoder_cal+0x410>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	a30a      	add	r3, pc, #40	@ (adr r3, 8001640 <encoder_cal+0x3f8>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe fff5 	bl	8000608 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fae7 	bl	8000bf8 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <encoder_cal+0x418>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	bc6a7efa 	.word	0xbc6a7efa
 800163c:	3f889374 	.word	0x3f889374
 8001640:	47ae147b 	.word	0x47ae147b
 8001644:	3f947ae1 	.word	0x3f947ae1
 8001648:	2000024c 	.word	0x2000024c
 800164c:	20000230 	.word	0x20000230
 8001650:	2000022c 	.word	0x2000022c
 8001654:	20000234 	.word	0x20000234
 8001658:	20000238 	.word	0x20000238
 800165c:	20000250 	.word	0x20000250
 8001660:	20000254 	.word	0x20000254
 8001664:	00000000 	.word	0x00000000

08001668 <pos_xy>:

void pos_xy(float da, float db) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001672:	edc7 0a00 	vstr	s1, [r7]
	a = db * db - h * h;
 8001676:	edd7 7a00 	vldr	s15, [r7]
 800167a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800167e:	ee17 0a90 	vmov	r0, s15
 8001682:	f7fe ff69 	bl	8000558 <__aeabi_f2d>
 8001686:	a370      	add	r3, pc, #448	@ (adr r3, 8001848 <pos_xy+0x1e0>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fe04 	bl	8000298 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff faae 	bl	8000bf8 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	4a6c      	ldr	r2, [pc, #432]	@ (8001850 <pos_xy+0x1e8>)
 80016a0:	6013      	str	r3, [r2, #0]
	a = sqrt(a);
 80016a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001850 <pos_xy+0x1e8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff56 	bl	8000558 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b10 	vmov	d0, r2, r3
 80016b4:	f00d feaa 	bl	800f40c <sqrt>
 80016b8:	ec53 2b10 	vmov	r2, r3, d0
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa9a 	bl	8000bf8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a62      	ldr	r2, [pc, #392]	@ (8001850 <pos_xy+0x1e8>)
 80016c8:	6013      	str	r3, [r2, #0]
	b = da * da - h * h;
 80016ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016d2:	ee17 0a90 	vmov	r0, s15
 80016d6:	f7fe ff3f 	bl	8000558 <__aeabi_f2d>
 80016da:	a35b      	add	r3, pc, #364	@ (adr r3, 8001848 <pos_xy+0x1e0>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fdda 	bl	8000298 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa84 	bl	8000bf8 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a58      	ldr	r2, [pc, #352]	@ (8001854 <pos_xy+0x1ec>)
 80016f4:	6013      	str	r3, [r2, #0]
	b = sqrt(b);
 80016f6:	4b57      	ldr	r3, [pc, #348]	@ (8001854 <pos_xy+0x1ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff2c 	bl	8000558 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	ec43 2b10 	vmov	d0, r2, r3
 8001708:	f00d fe80 	bl	800f40c <sqrt>
 800170c:	ec53 2b10 	vmov	r2, r3, d0
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa70 	bl	8000bf8 <__aeabi_d2f>
 8001718:	4603      	mov	r3, r0
 800171a:	4a4e      	ldr	r2, [pc, #312]	@ (8001854 <pos_xy+0x1ec>)
 800171c:	6013      	str	r3, [r2, #0]

	cos_a = (b * b + c * c - a * a) / (2 * b * c);
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <pos_xy+0x1ec>)
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	4b4b      	ldr	r3, [pc, #300]	@ (8001854 <pos_xy+0x1ec>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172e:	ee17 0a90 	vmov	r0, s15
 8001732:	f7fe ff11 	bl	8000558 <__aeabi_f2d>
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <pos_xy+0x1f0>)
 800173c:	f7fe fdae 	bl	800029c <__adddf3>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	461d      	mov	r5, r3
 8001748:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <pos_xy+0x1e8>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <pos_xy+0x1e8>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	ee17 0a90 	vmov	r0, s15
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7fe fd96 	bl	8000298 <__aeabi_dsub>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4614      	mov	r4, r2
 8001772:	461d      	mov	r5, r3
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <pos_xy+0x1ec>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800177e:	ee17 0a90 	vmov	r0, s15
 8001782:	f7fe fee9 	bl	8000558 <__aeabi_f2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <pos_xy+0x1f4>)
 800178c:	f7fe ff3c 	bl	8000608 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7ff f860 	bl	800085c <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff fa28 	bl	8000bf8 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <pos_xy+0x1f8>)
 80017ac:	6013      	str	r3, [r2, #0]
	x_p = b * cos_a;
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <pos_xy+0x1ec>)
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <pos_xy+0x1f8>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <pos_xy+0x1fc>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]
	if ((1 - cos_a * cos_a) >= 0) {
 80017c4:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <pos_xy+0x1f8>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <pos_xy+0x1f8>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	da00      	bge.n	80017e8 <pos_xy+0x180>
		y_p = b * sqrt(1 - cos_a * cos_a);
	}
}
 80017e6:	e02b      	b.n	8001840 <pos_xy+0x1d8>
		y_p = b * sqrt(1 - cos_a * cos_a);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001854 <pos_xy+0x1ec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	4604      	mov	r4, r0
 80017f4:	460d      	mov	r5, r1
 80017f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <pos_xy+0x1f8>)
 80017f8:	ed93 7a00 	vldr	s14, [r3]
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <pos_xy+0x1f8>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180e:	ee17 0a90 	vmov	r0, s15
 8001812:	f7fe fea1 	bl	8000558 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	ec43 2b10 	vmov	d0, r2, r3
 800181e:	f00d fdf5 	bl	800f40c <sqrt>
 8001822:	ec53 2b10 	vmov	r2, r3, d0
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe feed 	bl	8000608 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f9df 	bl	8000bf8 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <pos_xy+0x200>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	70a3d70a 	.word	0x70a3d70a
 800184c:	3fb70a3d 	.word	0x3fb70a3d
 8001850:	200002cc 	.word	0x200002cc
 8001854:	200002d0 	.word	0x200002d0
 8001858:	40220000 	.word	0x40220000
 800185c:	40080000 	.word	0x40080000
 8001860:	200002c8 	.word	0x200002c8
 8001864:	200002b8 	.word	0x200002b8
 8001868:	200002bc 	.word	0x200002bc
 800186c:	00000000 	.word	0x00000000

08001870 <get_yaw>:
void get_yaw()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	 v = bno055_getVectorEuler();
 8001874:	f005 fb54 	bl	8006f20 <bno055_getVectorEuler>
 8001878:	eeb0 4a40 	vmov.f32	s8, s0
 800187c:	eef0 4a60 	vmov.f32	s9, s1
 8001880:	eeb0 5a41 	vmov.f32	s10, s2
 8001884:	eef0 5a61 	vmov.f32	s11, s3
 8001888:	eeb0 6a42 	vmov.f32	s12, s4
 800188c:	eef0 6a62 	vmov.f32	s13, s5
 8001890:	eeb0 7a43 	vmov.f32	s14, s6
 8001894:	eef0 7a63 	vmov.f32	s15, s7
 8001898:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <get_yaw+0x108>)
 800189a:	ed83 4b00 	vstr	d4, [r3]
 800189e:	ed83 5b02 	vstr	d5, [r3, #8]
 80018a2:	ed83 6b04 	vstr	d6, [r3, #16]
 80018a6:	ed83 7b06 	vstr	d7, [r3, #24]
	 yaw = v.x;
 80018aa:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <get_yaw+0x108>)
 80018ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f9a0 	bl	8000bf8 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a30      	ldr	r2, [pc, #192]	@ (800197c <get_yaw+0x10c>)
 80018bc:	6013      	str	r3, [r2, #0]
	// yaw = (yaw/360)*2*3.1415;
	 if ((yaw >= 0) && (yaw < 180))
 80018be:	4b2f      	ldr	r3, [pc, #188]	@ (800197c <get_yaw+0x10c>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	db27      	blt.n	800191e <get_yaw+0xae>
 80018ce:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <get_yaw+0x10c>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001980 <get_yaw+0x110>
 80018d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d51d      	bpl.n	800191e <get_yaw+0xae>
		{
		 yaw = -(yaw/360)*2*3.1416;
 80018e2:	4b26      	ldr	r3, [pc, #152]	@ (800197c <get_yaw+0x10c>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001984 <get_yaw+0x114>
 80018ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f0:	eef1 7a67 	vneg.f32	s15, s15
 80018f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	a31b      	add	r3, pc, #108	@ (adr r3, 8001970 <get_yaw+0x100>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe7f 	bl	8000608 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f971 	bl	8000bf8 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a18      	ldr	r2, [pc, #96]	@ (800197c <get_yaw+0x10c>)
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e025      	b.n	800196a <get_yaw+0xfa>
		}
	 else
	 {
		 yaw = 360 - yaw;
 800191e:	4b17      	ldr	r3, [pc, #92]	@ (800197c <get_yaw+0x10c>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001984 <get_yaw+0x114>
 8001928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <get_yaw+0x10c>)
 800192e:	edc3 7a00 	vstr	s15, [r3]
		 yaw = (yaw/360)*2*3.1416;
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <get_yaw+0x10c>)
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001984 <get_yaw+0x114>
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001944:	ee17 0a90 	vmov	r0, s15
 8001948:	f7fe fe06 	bl	8000558 <__aeabi_f2d>
 800194c:	a308      	add	r3, pc, #32	@ (adr r3, 8001970 <get_yaw+0x100>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe59 	bl	8000608 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f94b 	bl	8000bf8 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4a05      	ldr	r2, [pc, #20]	@ (800197c <get_yaw+0x10c>)
 8001966:	6013      	str	r3, [r2, #0]
	 }
	// v2 = bno055_getVectorGyroscope();
	// zq = v2.z;
	}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2e48e8a7 	.word	0x2e48e8a7
 8001974:	400921ff 	.word	0x400921ff
 8001978:	20000300 	.word	0x20000300
 800197c:	200002fc 	.word	0x200002fc
 8001980:	43340000 	.word	0x43340000
 8001984:	43b40000 	.word	0x43b40000

08001988 <get_d>:
void get_d() {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
	int cnt1 = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
	while (cnt1 < 20) {
 8001992:	e0cb      	b.n	8001b2c <get_d+0x1a4>
		HAL_UART_Receive(&huart1, gpsData, 7,10);
 8001994:	230a      	movs	r3, #10
 8001996:	2207      	movs	r2, #7
 8001998:	496d      	ldr	r1, [pc, #436]	@ (8001b50 <get_d+0x1c8>)
 800199a:	486e      	ldr	r0, [pc, #440]	@ (8001b54 <get_d+0x1cc>)
 800199c:	f004 f8f7 	bl	8005b8e <HAL_UART_Receive>

		if (gpsData[0] == 'A') {
 80019a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b50 <get_d+0x1c8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b41      	cmp	r3, #65	@ 0x41
 80019a6:	d14f      	bne.n	8001a48 <get_d+0xc0>
			token1 = strtok((char*) gpsData, "A");
 80019a8:	496b      	ldr	r1, [pc, #428]	@ (8001b58 <get_d+0x1d0>)
 80019aa:	4869      	ldr	r0, [pc, #420]	@ (8001b50 <get_d+0x1c8>)
 80019ac:	f00a ffb2 	bl	800c914 <strtok>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a6a      	ldr	r2, [pc, #424]	@ (8001b5c <get_d+0x1d4>)
 80019b4:	6013      	str	r3, [r2, #0]
			d1_pre = atof(token1);
 80019b6:	4b69      	ldr	r3, [pc, #420]	@ (8001b5c <get_d+0x1d4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f009 f8e2 	bl	800ab84 <atof>
 80019c0:	ec53 2b10 	vmov	r2, r3, d0
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f916 	bl	8000bf8 <__aeabi_d2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a64      	ldr	r2, [pc, #400]	@ (8001b60 <get_d+0x1d8>)
 80019d0:	6013      	str	r3, [r2, #0]
			if (d1_flag == 0)
 80019d2:	4b64      	ldr	r3, [pc, #400]	@ (8001b64 <get_d+0x1dc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <get_d+0x60>
			{
				d1 = d1_pre;
 80019da:	4b61      	ldr	r3, [pc, #388]	@ (8001b60 <get_d+0x1d8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a62      	ldr	r2, [pc, #392]	@ (8001b68 <get_d+0x1e0>)
 80019e0:	6013      	str	r3, [r2, #0]
				d1_flag = 1;
 80019e2:	4b60      	ldr	r3, [pc, #384]	@ (8001b64 <get_d+0x1dc>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
			}
			if ((fabs(d1-d1_pre)<5) && d1_pre != 0)
 80019e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b68 <get_d+0x1e0>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001b60 <get_d+0x1d8>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	eef0 7ae7 	vabs.f32	s15, s15
 80019fc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d51e      	bpl.n	8001a48 <get_d+0xc0>
 8001a0a:	4b55      	ldr	r3, [pc, #340]	@ (8001b60 <get_d+0x1d8>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d016      	beq.n	8001a48 <get_d+0xc0>
			{
				d1 = d1_pre;
 8001a1a:	4b51      	ldr	r3, [pc, #324]	@ (8001b60 <get_d+0x1d8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a52      	ldr	r2, [pc, #328]	@ (8001b68 <get_d+0x1e0>)
 8001a20:	6013      	str	r3, [r2, #0]

				d1_calib = d1 - 0.376;
 8001a22:	4b51      	ldr	r3, [pc, #324]	@ (8001b68 <get_d+0x1e0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	a344      	add	r3, pc, #272	@ (adr r3, 8001b40 <get_d+0x1b8>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fc31 	bl	8000298 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8db 	bl	8000bf8 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a49      	ldr	r2, [pc, #292]	@ (8001b6c <get_d+0x1e4>)
 8001a46:	6013      	str	r3, [r2, #0]
			//	d1_pre = 0;
			//	sprintf(d1_str,"A,%.4f\r\n",d1_pre);
			//	HAL_UART_Transmit(&huart2, d1_str, strlen(d1_str), 100);
			}
		}
		if (gpsData[0] == 'B') {
 8001a48:	4b41      	ldr	r3, [pc, #260]	@ (8001b50 <get_d+0x1c8>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b42      	cmp	r3, #66	@ 0x42
 8001a4e:	d159      	bne.n	8001b04 <get_d+0x17c>
			token2 = strtok((char*) gpsData, "B");
 8001a50:	4947      	ldr	r1, [pc, #284]	@ (8001b70 <get_d+0x1e8>)
 8001a52:	483f      	ldr	r0, [pc, #252]	@ (8001b50 <get_d+0x1c8>)
 8001a54:	f00a ff5e 	bl	800c914 <strtok>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a46      	ldr	r2, [pc, #280]	@ (8001b74 <get_d+0x1ec>)
 8001a5c:	6013      	str	r3, [r2, #0]
			d2_pre = atof(token2);
 8001a5e:	4b45      	ldr	r3, [pc, #276]	@ (8001b74 <get_d+0x1ec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f009 f88e 	bl	800ab84 <atof>
 8001a68:	ec53 2b10 	vmov	r2, r3, d0
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f8c2 	bl	8000bf8 <__aeabi_d2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a40      	ldr	r2, [pc, #256]	@ (8001b78 <get_d+0x1f0>)
 8001a78:	6013      	str	r3, [r2, #0]
			if (d2_flag == 0)
 8001a7a:	4b40      	ldr	r3, [pc, #256]	@ (8001b7c <get_d+0x1f4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d110      	bne.n	8001aa4 <get_d+0x11c>
			{
				d2 = atof(token2);
 8001a82:	4b3c      	ldr	r3, [pc, #240]	@ (8001b74 <get_d+0x1ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f009 f87c 	bl	800ab84 <atof>
 8001a8c:	ec53 2b10 	vmov	r2, r3, d0
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f8b0 	bl	8000bf8 <__aeabi_d2f>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a39      	ldr	r2, [pc, #228]	@ (8001b80 <get_d+0x1f8>)
 8001a9c:	6013      	str	r3, [r2, #0]
				d2_flag = 1;
 8001a9e:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <get_d+0x1f4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
			}
			if((fabs(d2-d2_pre) < 5) && d2_pre != 0)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	@ (8001b80 <get_d+0x1f8>)
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <get_d+0x1f0>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	d51e      	bpl.n	8001b04 <get_d+0x17c>
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b78 <get_d+0x1f0>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d016      	beq.n	8001b04 <get_d+0x17c>
			{
				d2 = d2_pre;
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <get_d+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a29      	ldr	r2, [pc, #164]	@ (8001b80 <get_d+0x1f8>)
 8001adc:	6013      	str	r3, [r2, #0]

				d2_calib = d2 - 0.776  ;
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <get_d+0x1f8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd38 	bl	8000558 <__aeabi_f2d>
 8001ae8:	a317      	add	r3, pc, #92	@ (adr r3, 8001b48 <get_d+0x1c0>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fbd3 	bl	8000298 <__aeabi_dsub>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f87d 	bl	8000bf8 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <get_d+0x1fc>)
 8001b02:	6013      	str	r3, [r2, #0]
			//	HAL_UART_Transmit(&huart2, d2_str, strlen(d2_str), 100);
			}

		}
		//HAL_Delay(10);
		pos_xy(d1_calib, d2_calib);
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <get_d+0x1e4>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <get_d+0x1fc>)
 8001b0c:	ed93 7a00 	vldr	s14, [r3]
 8001b10:	eef0 0a47 	vmov.f32	s1, s14
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	f7ff fda6 	bl	8001668 <pos_xy>
		memset(gpsData, 0, 7);
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	2100      	movs	r1, #0
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <get_d+0x1c8>)
 8001b22:	f00a fedd 	bl	800c8e0 <memset>

		cnt1++;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
	while (cnt1 < 20) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b13      	cmp	r3, #19
 8001b30:	f77f af30 	ble.w	8001994 <get_d+0xc>
	}
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	4dd2f1aa 	.word	0x4dd2f1aa
 8001b44:	3fd81062 	.word	0x3fd81062
 8001b48:	f3b645a2 	.word	0xf3b645a2
 8001b4c:	3fe8d4fd 	.word	0x3fe8d4fd
 8001b50:	2000028c 	.word	0x2000028c
 8001b54:	20000494 	.word	0x20000494
 8001b58:	08010940 	.word	0x08010940
 8001b5c:	200002d4 	.word	0x200002d4
 8001b60:	200002a8 	.word	0x200002a8
 8001b64:	200002b0 	.word	0x200002b0
 8001b68:	200002a0 	.word	0x200002a0
 8001b6c:	200002c0 	.word	0x200002c0
 8001b70:	08010944 	.word	0x08010944
 8001b74:	200002d8 	.word	0x200002d8
 8001b78:	200002ac 	.word	0x200002ac
 8001b7c:	200002b4 	.word	0x200002b4
 8001b80:	200002a4 	.word	0x200002a4
 8001b84:	200002c4 	.word	0x200002c4

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b90:	f001 f86a 	bl	8002c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b94:	f000 f96a 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b98:	f000 fbf0 	bl	800237c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b9c:	f000 fbce 	bl	800233c <MX_DMA_Init>
  MX_TIM1_Init();
 8001ba0:	f000 f9fa 	bl	8001f98 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001ba4:	f000 fb76 	bl	8002294 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ba8:	f000 fa4e 	bl	8002048 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bac:	f000 faa0 	bl	80020f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bb0:	f000 faf2 	bl	8002198 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001bb4:	f000 fb98 	bl	80022e8 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001bb8:	f000 fb42 	bl	8002240 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001bbc:	f000 f9be 	bl	8001f3c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bc6:	488e      	ldr	r0, [pc, #568]	@ (8001e00 <main+0x278>)
 8001bc8:	f001 fef6 	bl	80039b8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd2:	488b      	ldr	r0, [pc, #556]	@ (8001e00 <main+0x278>)
 8001bd4:	f001 fef0 	bl	80039b8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bde:	4888      	ldr	r0, [pc, #544]	@ (8001e00 <main+0x278>)
 8001be0:	f001 feea 	bl	80039b8 <HAL_GPIO_WritePin>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001be4:	2100      	movs	r1, #0
 8001be6:	4887      	ldr	r0, [pc, #540]	@ (8001e04 <main+0x27c>)
 8001be8:	f003 fc12 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8001bec:	2104      	movs	r1, #4
 8001bee:	4885      	ldr	r0, [pc, #532]	@ (8001e04 <main+0x27c>)
 8001bf0:	f003 fc0e 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4884      	ldr	r0, [pc, #528]	@ (8001e08 <main+0x280>)
 8001bf8:	f003 fc0a 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4882      	ldr	r0, [pc, #520]	@ (8001e08 <main+0x280>)
 8001c00:	f003 fc06 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001c04:	2100      	movs	r1, #0
 8001c06:	4881      	ldr	r0, [pc, #516]	@ (8001e0c <main+0x284>)
 8001c08:	f003 fc02 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	487f      	ldr	r0, [pc, #508]	@ (8001e0c <main+0x284>)
 8001c10:	f003 fbfe 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001c14:	2100      	movs	r1, #0
 8001c16:	487e      	ldr	r0, [pc, #504]	@ (8001e10 <main+0x288>)
 8001c18:	f003 fbfa 	bl	8005410 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	487c      	ldr	r0, [pc, #496]	@ (8001e10 <main+0x288>)
 8001c20:	f003 fbf6 	bl	8005410 <HAL_TIM_Encoder_Start>
	check = 0;
 8001c24:	4b7b      	ldr	r3, [pc, #492]	@ (8001e14 <main+0x28c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	497a      	ldr	r1, [pc, #488]	@ (8001e18 <main+0x290>)
 8001c2e:	487b      	ldr	r0, [pc, #492]	@ (8001e1c <main+0x294>)
 8001c30:	f004 f844 	bl	8005cbc <HAL_UART_Receive_IT>

	bno055_assignI2C(&hi2c3);
 8001c34:	487a      	ldr	r0, [pc, #488]	@ (8001e20 <main+0x298>)
 8001c36:	f7ff f9dd 	bl	8000ff4 <bno055_assignI2C>

	bno055_setup();
 8001c3a:	f005 f805 	bl	8006c48 <bno055_setup>
	bno055_setOperationModeNDOF();
 8001c3e:	f004 fff0 	bl	8006c22 <bno055_setOperationModeNDOF>

	//HAL_UART_Receive_IT(&huart2, rxData, 1);
	//HAL_UART_Receive_IT(&huart1, gpsData, 7);
	dynamic_8_g_initialize();
 8001c42:	f008 fea5 	bl	800a990 <dynamic_8_g_initialize>
	get_d();
 8001c46:	f7ff fe9f 	bl	8001988 <get_d>
	get_yaw();
 8001c4a:	f7ff fe11 	bl	8001870 <get_yaw>
	rtU.x0 = x_p;
 8001c4e:	4b75      	ldr	r3, [pc, #468]	@ (8001e24 <main+0x29c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc80 	bl	8000558 <__aeabi_f2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4972      	ldr	r1, [pc, #456]	@ (8001e28 <main+0x2a0>)
 8001c5e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	rtU.y0 = y_p;
 8001c62:	4b72      	ldr	r3, [pc, #456]	@ (8001e2c <main+0x2a4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc76 	bl	8000558 <__aeabi_f2d>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	496d      	ldr	r1, [pc, #436]	@ (8001e28 <main+0x2a0>)
 8001c72:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	rtU.theta0 = yaw;
 8001c76:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <main+0x2a8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc6c 	bl	8000558 <__aeabi_f2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4968      	ldr	r1, [pc, #416]	@ (8001e28 <main+0x2a0>)
 8001c86:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		//sprintf(encoder, "E=%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f\r\n",rate1,rate2,rate3,rate4,x_p,y_p,yaw,zq);
		//HAL_UART_Transmit(&huart2, (uint8_t *)tx_buffer, strlen(tx_buffer), 100);
		//sprintf(wheel, "%.2f,%.2f,%.2f,%.2f\r\n", w1_sim, w2_sim, w3_sim, w4_sim);
		//HAL_UART_Transmit(&huart6, (uint8_t *)wheel, strlen(rx_buffer), 100);

		get_d();
 8001c8a:	f7ff fe7d 	bl	8001988 <get_d>
		get_yaw();
 8001c8e:	f7ff fdef 	bl	8001870 <get_yaw>
		encoder_cal();
 8001c92:	f7ff fad9 	bl	8001248 <encoder_cal>
		rtU.vx = vx ;
 8001c96:	4b67      	ldr	r3, [pc, #412]	@ (8001e34 <main+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc5c 	bl	8000558 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4960      	ldr	r1, [pc, #384]	@ (8001e28 <main+0x2a0>)
 8001ca6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		rtU.vy = vy ;
 8001caa:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <main+0x2b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc52 	bl	8000558 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	495b      	ldr	r1, [pc, #364]	@ (8001e28 <main+0x2a0>)
 8001cba:	e9c1 2308 	strd	r2, r3, [r1, #32]
		rtU.theta_dot = vw;
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <main+0x2b4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc48 	bl	8000558 <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4956      	ldr	r1, [pc, #344]	@ (8001e28 <main+0x2a0>)
 8001cce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		rtU.x = x_p;
 8001cd2:	4b54      	ldr	r3, [pc, #336]	@ (8001e24 <main+0x29c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc3e 	bl	8000558 <__aeabi_f2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4951      	ldr	r1, [pc, #324]	@ (8001e28 <main+0x2a0>)
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
		rtU.y = y_p;
 8001ce6:	4b51      	ldr	r3, [pc, #324]	@ (8001e2c <main+0x2a4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc34 	bl	8000558 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	494c      	ldr	r1, [pc, #304]	@ (8001e28 <main+0x2a0>)
 8001cf6:	e9c1 2302 	strd	r2, r3, [r1, #8]
		rtU.theta = yaw;
 8001cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <main+0x2a8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc2a 	bl	8000558 <__aeabi_f2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4947      	ldr	r1, [pc, #284]	@ (8001e28 <main+0x2a0>)
 8001d0a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		time1 = rtM->Timing.t[0];
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e40 <main+0x2b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	494a      	ldr	r1, [pc, #296]	@ (8001e44 <main+0x2bc>)
 8001d1c:	e9c1 2300 	strd	r2, r3, [r1]
		dynamic_8_g_step();
 8001d20:	f005 fe02 	bl	8007928 <dynamic_8_g_step>
		time2 = rtM->Timing.t[0];
 8001d24:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <main+0x2b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	4945      	ldr	r1, [pc, #276]	@ (8001e48 <main+0x2c0>)
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]
		w1_sim = rtY.w1;
 8001d36:	4b45      	ldr	r3, [pc, #276]	@ (8001e4c <main+0x2c4>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff5a 	bl	8000bf8 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a42      	ldr	r2, [pc, #264]	@ (8001e50 <main+0x2c8>)
 8001d48:	6013      	str	r3, [r2, #0]
		w2_sim = rtY.w2;
 8001d4a:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <main+0x2c4>)
 8001d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe ff50 	bl	8000bf8 <__aeabi_d2f>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e54 <main+0x2cc>)
 8001d5c:	6013      	str	r3, [r2, #0]
		w3_sim = rtY.w3;
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e4c <main+0x2c4>)
 8001d60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff46 	bl	8000bf8 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e58 <main+0x2d0>)
 8001d70:	6013      	str	r3, [r2, #0]
		w4_sim = rtY.w4;
 8001d72:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <main+0x2c4>)
 8001d74:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe ff3c 	bl	8000bf8 <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a36      	ldr	r2, [pc, #216]	@ (8001e5c <main+0x2d4>)
 8001d84:	6013      	str	r3, [r2, #0]

		memset(wheel,0,strlen(wheel));
 8001d86:	4836      	ldr	r0, [pc, #216]	@ (8001e60 <main+0x2d8>)
 8001d88:	f7fe fa7a 	bl	8000280 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2100      	movs	r1, #0
 8001d92:	4833      	ldr	r0, [pc, #204]	@ (8001e60 <main+0x2d8>)
 8001d94:	f00a fda4 	bl	800c8e0 <memset>
		sprintf(wheel, "%.2f;%.2f;%.2f;%.2f\r\n", w1_sim, w2_sim, w3_sim, w4_sim);
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <main+0x2c8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	4682      	mov	sl, r0
 8001da4:	468b      	mov	fp, r1
 8001da6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e54 <main+0x2cc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbd4 	bl	8000558 <__aeabi_f2d>
 8001db0:	4604      	mov	r4, r0
 8001db2:	460d      	mov	r5, r1
 8001db4:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <main+0x2d0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbcd 	bl	8000558 <__aeabi_f2d>
 8001dbe:	4680      	mov	r8, r0
 8001dc0:	4689      	mov	r9, r1
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <main+0x2d4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbc6 	bl	8000558 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dd4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dd8:	e9cd 4500 	strd	r4, r5, [sp]
 8001ddc:	4652      	mov	r2, sl
 8001dde:	465b      	mov	r3, fp
 8001de0:	4920      	ldr	r1, [pc, #128]	@ (8001e64 <main+0x2dc>)
 8001de2:	481f      	ldr	r0, [pc, #124]	@ (8001e60 <main+0x2d8>)
 8001de4:	f00a fc84 	bl	800c6f0 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t *)wheel, strlen(wheel), 100);
 8001de8:	481d      	ldr	r0, [pc, #116]	@ (8001e60 <main+0x2d8>)
 8001dea:	f7fe fa49 	bl	8000280 <strlen>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	2364      	movs	r3, #100	@ 0x64
 8001df4:	491a      	ldr	r1, [pc, #104]	@ (8001e60 <main+0x2d8>)
 8001df6:	481c      	ldr	r0, [pc, #112]	@ (8001e68 <main+0x2e0>)
 8001df8:	f003 fe3e 	bl	8005a78 <HAL_UART_Transmit>
		get_d();
 8001dfc:	bf00      	nop
 8001dfe:	e744      	b.n	8001c8a <main+0x102>
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	20000374 	.word	0x20000374
 8001e08:	200003bc 	.word	0x200003bc
 8001e0c:	20000404 	.word	0x20000404
 8001e10:	2000044c 	.word	0x2000044c
 8001e14:	20000210 	.word	0x20000210
 8001e18:	20000228 	.word	0x20000228
 8001e1c:	200004dc 	.word	0x200004dc
 8001e20:	20000320 	.word	0x20000320
 8001e24:	200002b8 	.word	0x200002b8
 8001e28:	20000740 	.word	0x20000740
 8001e2c:	200002bc 	.word	0x200002bc
 8001e30:	200002fc 	.word	0x200002fc
 8001e34:	2000024c 	.word	0x2000024c
 8001e38:	20000250 	.word	0x20000250
 8001e3c:	20000254 	.word	0x20000254
 8001e40:	080109c4 	.word	0x080109c4
 8001e44:	20000218 	.word	0x20000218
 8001e48:	20000220 	.word	0x20000220
 8001e4c:	20000788 	.word	0x20000788
 8001e50:	2000023c 	.word	0x2000023c
 8001e54:	20000240 	.word	0x20000240
 8001e58:	20000244 	.word	0x20000244
 8001e5c:	20000248 	.word	0x20000248
 8001e60:	20000258 	.word	0x20000258
 8001e64:	08010948 	.word	0x08010948
 8001e68:	20000524 	.word	0x20000524

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	@ 0x50
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2230      	movs	r2, #48	@ 0x30
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00a fd30 	bl	800c8e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <SystemClock_Config+0xc8>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	4a26      	ldr	r2, [pc, #152]	@ (8001f34 <SystemClock_Config+0xc8>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea0:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <SystemClock_Config+0xc8>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <SystemClock_Config+0xcc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a20      	ldr	r2, [pc, #128]	@ (8001f38 <SystemClock_Config+0xcc>)
 8001eb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <SystemClock_Config+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001edc:	2308      	movs	r3, #8
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ee0:	2360      	movs	r3, #96	@ 0x60
 8001ee2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fd8f 	bl	8004a14 <HAL_RCC_OscConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001efc:	f000 fad0 	bl	80024a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f00:	230f      	movs	r3, #15
 8001f02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 fff1 	bl	8004f04 <HAL_RCC_ClockConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f28:	f000 faba 	bl	80024a0 <Error_Handler>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3750      	adds	r7, #80	@ 0x50
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000

08001f3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <MX_I2C3_Init+0x54>)
 8001f44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f48:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <MX_I2C3_Init+0x58>)
 8001f4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f5e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <MX_I2C3_Init+0x50>)
 8001f7a:	f001 fd37 	bl	80039ec <HAL_I2C_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f84:	f000 fa8c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000320 	.word	0x20000320
 8001f90:	40005c00 	.word	0x40005c00
 8001f94:	000186a0 	.word	0x000186a0

08001f98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2224      	movs	r2, #36	@ 0x24
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00a fc9a 	bl	800c8e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fb6:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <MX_TIM1_Init+0xac>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	4619      	mov	r1, r3
 800200a:	480d      	ldr	r0, [pc, #52]	@ (8002040 <MX_TIM1_Init+0xa8>)
 800200c:	f003 f95a 	bl	80052c4 <HAL_TIM_Encoder_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002016:	f000 fa43 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	@ (8002040 <MX_TIM1_Init+0xa8>)
 8002028:	f003 fc54 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002032:	f000 fa35 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3730      	adds	r7, #48	@ 0x30
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000374 	.word	0x20000374
 8002044:	40010000 	.word	0x40010000

08002048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	@ 0x30
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f00a fc42 	bl	800c8e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <MX_TIM2_Init+0xa4>)
 8002066:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800206a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800206c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <MX_TIM2_Init+0xa4>)
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <MX_TIM2_Init+0xa4>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <MX_TIM2_Init+0xa4>)
 800207a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800207e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002080:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <MX_TIM2_Init+0xa4>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <MX_TIM2_Init+0xa4>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800208c:	2303      	movs	r3, #3
 800208e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002094:	2301      	movs	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020a4:	2301      	movs	r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4619      	mov	r1, r3
 80020b6:	480d      	ldr	r0, [pc, #52]	@ (80020ec <MX_TIM2_Init+0xa4>)
 80020b8:	f003 f904 	bl	80052c4 <HAL_TIM_Encoder_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020c2:	f000 f9ed 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4806      	ldr	r0, [pc, #24]	@ (80020ec <MX_TIM2_Init+0xa4>)
 80020d4:	f003 fbfe 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020de:	f000 f9df 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	3730      	adds	r7, #48	@ 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003bc 	.word	0x200003bc

080020f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	@ 0x30
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2224      	movs	r2, #36	@ 0x24
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f00a fbee 	bl	800c8e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <MX_TIM3_Init+0xa0>)
 800210e:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <MX_TIM3_Init+0xa4>)
 8002110:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002112:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <MX_TIM3_Init+0xa0>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <MX_TIM3_Init+0xa0>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800211e:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <MX_TIM3_Init+0xa0>)
 8002120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002124:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <MX_TIM3_Init+0xa0>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <MX_TIM3_Init+0xa0>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002132:	2303      	movs	r3, #3
 8002134:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800214a:	2301      	movs	r3, #1
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <MX_TIM3_Init+0xa0>)
 800215e:	f003 f8b1 	bl	80052c4 <HAL_TIM_Encoder_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002168:	f000 f99a 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	@ (8002190 <MX_TIM3_Init+0xa0>)
 800217a:	f003 fbab 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002184:	f000 f98c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3730      	adds	r7, #48	@ 0x30
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000404 	.word	0x20000404
 8002194:	40000400 	.word	0x40000400

08002198 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	@ 0x30
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2224      	movs	r2, #36	@ 0x24
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f00a fb9a 	bl	800c8e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021b4:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <MX_TIM4_Init+0xa0>)
 80021b6:	4a21      	ldr	r2, [pc, #132]	@ (800223c <MX_TIM4_Init+0xa4>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <MX_TIM4_Init+0xa0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <MX_TIM4_Init+0xa0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <MX_TIM4_Init+0xa0>)
 80021c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <MX_TIM4_Init+0xa0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <MX_TIM4_Init+0xa0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021da:	2303      	movs	r3, #3
 80021dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f2:	2301      	movs	r3, #1
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	4619      	mov	r1, r3
 8002204:	480c      	ldr	r0, [pc, #48]	@ (8002238 <MX_TIM4_Init+0xa0>)
 8002206:	f003 f85d 	bl	80052c4 <HAL_TIM_Encoder_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002210:	f000 f946 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	@ (8002238 <MX_TIM4_Init+0xa0>)
 8002222:	f003 fb57 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800222c:	f000 f938 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	3730      	adds	r7, #48	@ 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	2000044c 	.word	0x2000044c
 800223c:	40000800 	.word	0x40000800

08002240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <MX_USART1_UART_Init+0x50>)
 8002248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 800224c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_USART1_UART_Init+0x4c>)
 8002278:	f003 fbae 	bl	80059d8 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002282:	f000 f90d 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000494 	.word	0x20000494
 8002290:	40011000 	.word	0x40011000

08002294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <MX_USART2_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022cc:	f003 fb84 	bl	80059d8 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f000 f8e3 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200004dc 	.word	0x200004dc
 80022e4:	40004400 	.word	0x40004400

080022e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <MX_USART6_UART_Init+0x50>)
 80022f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_USART6_UART_Init+0x4c>)
 8002320:	f003 fb5a 	bl	80059d8 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800232a:	f000 f8b9 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000524 	.word	0x20000524
 8002338:	40011400 	.word	0x40011400

0800233c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_DMA_Init+0x3c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a0b      	ldr	r2, [pc, #44]	@ (8002378 <MX_DMA_Init+0x3c>)
 800234c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_DMA_Init+0x3c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	203a      	movs	r0, #58	@ 0x3a
 8002364:	f000 fdf1 	bl	8002f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002368:	203a      	movs	r0, #58	@ 0x3a
 800236a:	f000 fe0a 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	@ 0x30
 8002380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <MX_GPIO_Init+0x118>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a3e      	ldr	r2, [pc, #248]	@ (8002494 <MX_GPIO_Init+0x118>)
 800239c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a37      	ldr	r2, [pc, #220]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b35      	ldr	r3, [pc, #212]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b31      	ldr	r3, [pc, #196]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a30      	ldr	r2, [pc, #192]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b2e      	ldr	r3, [pc, #184]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a29      	ldr	r2, [pc, #164]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <MX_GPIO_Init+0x118>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <MX_GPIO_Init+0x118>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <MX_GPIO_Init+0x118>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <MX_GPIO_Init+0x118>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <MX_GPIO_Init+0x118>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <MX_GPIO_Init+0x118>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <MX_GPIO_Init+0x118>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	2110      	movs	r1, #16
 800243e:	4816      	ldr	r0, [pc, #88]	@ (8002498 <MX_GPIO_Init+0x11c>)
 8002440:	f001 faba 	bl	80039b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8002444:	2200      	movs	r2, #0
 8002446:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 800244a:	4814      	ldr	r0, [pc, #80]	@ (800249c <MX_GPIO_Init+0x120>)
 800244c:	f001 fab4 	bl	80039b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002450:	2310      	movs	r3, #16
 8002452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	480c      	ldr	r0, [pc, #48]	@ (8002498 <MX_GPIO_Init+0x11c>)
 8002468:	f001 f922 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800246c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8002470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	@ (800249c <MX_GPIO_Init+0x120>)
 8002486:	f001 f913 	bl	80036b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800248a:	bf00      	nop
 800248c:	3730      	adds	r7, #48	@ 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020c00 	.word	0x40020c00

080024a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
}
 80024a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <Error_Handler+0x8>

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	4a0f      	ldr	r2, [pc, #60]	@ (80024f8 <HAL_MspInit+0x4c>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_MspInit+0x4c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	4a08      	ldr	r2, [pc, #32]	@ (80024f8 <HAL_MspInit+0x4c>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024de:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a29      	ldr	r2, [pc, #164]	@ (80025c0 <HAL_I2C_MspInit+0xc4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d14b      	bne.n	80025b6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a27      	ldr	r2, [pc, #156]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a20      	ldr	r2, [pc, #128]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800255c:	2312      	movs	r3, #18
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002568:	2304      	movs	r3, #4
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4815      	ldr	r0, [pc, #84]	@ (80025c8 <HAL_I2C_MspInit+0xcc>)
 8002574:	f001 f89c 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257e:	2312      	movs	r3, #18
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800258a:	2304      	movs	r3, #4
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	480d      	ldr	r0, [pc, #52]	@ (80025cc <HAL_I2C_MspInit+0xd0>)
 8002596:	f001 f88b 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a08      	ldr	r2, [pc, #32]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 80025a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_I2C_MspInit+0xc8>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	@ 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40005c00 	.word	0x40005c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020000 	.word	0x40020000

080025d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b090      	sub	sp, #64	@ 0x40
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a68      	ldr	r2, [pc, #416]	@ (8002790 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d135      	bne.n	800265e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	4a66      	ldr	r2, [pc, #408]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6453      	str	r3, [r2, #68]	@ 0x44
 8002602:	4b64      	ldr	r3, [pc, #400]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a5f      	ldr	r2, [pc, #380]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002618:	f043 0310 	orr.w	r3, r3, #16
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b5d      	ldr	r3, [pc, #372]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800262a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800263c:	2301      	movs	r3, #1
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002640:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002644:	4619      	mov	r1, r3
 8002646:	4854      	ldr	r0, [pc, #336]	@ (8002798 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002648:	f001 f832 	bl	80036b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2102      	movs	r1, #2
 8002650:	2018      	movs	r0, #24
 8002652:	f000 fc7a 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002656:	2018      	movs	r0, #24
 8002658:	f000 fc93 	bl	8002f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800265c:	e094      	b.n	8002788 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002666:	d12c      	bne.n	80026c2 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	4b49      	ldr	r3, [pc, #292]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	4a48      	ldr	r2, [pc, #288]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6413      	str	r3, [r2, #64]	@ 0x40
 8002678:	4b46      	ldr	r3, [pc, #280]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a41      	ldr	r2, [pc, #260]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b3f      	ldr	r3, [pc, #252]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80026a0:	2322      	movs	r3, #34	@ 0x22
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026b0:	2301      	movs	r3, #1
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026b8:	4619      	mov	r1, r3
 80026ba:	4838      	ldr	r0, [pc, #224]	@ (800279c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80026bc:	f000 fff8 	bl	80036b0 <HAL_GPIO_Init>
}
 80026c0:	e062      	b.n	8002788 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM3)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a36      	ldr	r2, [pc, #216]	@ (80027a0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d12c      	bne.n	8002726 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	6413      	str	r3, [r2, #64]	@ 0x40
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f8:	4b26      	ldr	r3, [pc, #152]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002704:	2330      	movs	r3, #48	@ 0x30
 8002706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002714:	2302      	movs	r3, #2
 8002716:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800271c:	4619      	mov	r1, r3
 800271e:	4821      	ldr	r0, [pc, #132]	@ (80027a4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002720:	f000 ffc6 	bl	80036b0 <HAL_GPIO_Init>
}
 8002724:	e030      	b.n	8002788 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM4)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d12b      	bne.n	8002788 <HAL_TIM_Encoder_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	6313      	str	r3, [r2, #48]	@ 0x30
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002768:	23c0      	movs	r3, #192	@ 0xc0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002778:	2302      	movs	r3, #2
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002780:	4619      	mov	r1, r3
 8002782:	4808      	ldr	r0, [pc, #32]	@ (80027a4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002784:	f000 ff94 	bl	80036b0 <HAL_GPIO_Init>
}
 8002788:	bf00      	nop
 800278a:	3740      	adds	r7, #64	@ 0x40
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40010000 	.word	0x40010000
 8002794:	40023800 	.word	0x40023800
 8002798:	40021000 	.word	0x40021000
 800279c:	40020000 	.word	0x40020000
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40000800 	.word	0x40000800

080027ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08e      	sub	sp, #56	@ 0x38
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a75      	ldr	r2, [pc, #468]	@ (80029a0 <HAL_UART_MspInit+0x1f4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d179      	bne.n	80028c2 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	4b74      	ldr	r3, [pc, #464]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a73      	ldr	r2, [pc, #460]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b71      	ldr	r3, [pc, #452]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	4b6d      	ldr	r3, [pc, #436]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a6c      	ldr	r2, [pc, #432]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b6a      	ldr	r3, [pc, #424]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	4b66      	ldr	r3, [pc, #408]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002826:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002834:	2307      	movs	r3, #7
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800283c:	4619      	mov	r1, r3
 800283e:	485a      	ldr	r0, [pc, #360]	@ (80029a8 <HAL_UART_MspInit+0x1fc>)
 8002840:	f000 ff36 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002844:	2308      	movs	r3, #8
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002854:	2307      	movs	r3, #7
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285c:	4619      	mov	r1, r3
 800285e:	4853      	ldr	r0, [pc, #332]	@ (80029ac <HAL_UART_MspInit+0x200>)
 8002860:	f000 ff26 	bl	80036b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002864:	4b52      	ldr	r3, [pc, #328]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 8002866:	4a53      	ldr	r2, [pc, #332]	@ (80029b4 <HAL_UART_MspInit+0x208>)
 8002868:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 800286c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002870:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002872:	4b4f      	ldr	r3, [pc, #316]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002878:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287e:	4b4c      	ldr	r3, [pc, #304]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 8002880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002884:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288c:	4b48      	ldr	r3, [pc, #288]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002892:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002898:	4b45      	ldr	r3, [pc, #276]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289e:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028a4:	4842      	ldr	r0, [pc, #264]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 80028a6:	f000 fb87 	bl	8002fb8 <HAL_DMA_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80028b0:	f7ff fdf6 	bl	80024a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3e      	ldr	r2, [pc, #248]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 80028b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028ba:	4a3d      	ldr	r2, [pc, #244]	@ (80029b0 <HAL_UART_MspInit+0x204>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028c0:	e06a      	b.n	8002998 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3c      	ldr	r2, [pc, #240]	@ (80029b8 <HAL_UART_MspInit+0x20c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d134      	bne.n	8002936 <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	4a33      	ldr	r2, [pc, #204]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80028d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028da:	6413      	str	r3, [r2, #64]	@ 0x40
 80028dc:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	4b2d      	ldr	r3, [pc, #180]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002904:	2360      	movs	r3, #96	@ 0x60
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002914:	2307      	movs	r3, #7
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	4827      	ldr	r0, [pc, #156]	@ (80029bc <HAL_UART_MspInit+0x210>)
 8002920:	f000 fec6 	bl	80036b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2026      	movs	r0, #38	@ 0x26
 800292a:	f000 fb0e 	bl	8002f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800292e:	2026      	movs	r0, #38	@ 0x26
 8002930:	f000 fb27 	bl	8002f82 <HAL_NVIC_EnableIRQ>
}
 8002934:	e030      	b.n	8002998 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART6)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <HAL_UART_MspInit+0x214>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d12b      	bne.n	8002998 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 8002946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002948:	4a16      	ldr	r2, [pc, #88]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002950:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	4a0f      	ldr	r2, [pc, #60]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6313      	str	r3, [r2, #48]	@ 0x30
 800296c:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_UART_MspInit+0x1f8>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002978:	23c0      	movs	r3, #192	@ 0xc0
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002988:	2308      	movs	r3, #8
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <HAL_UART_MspInit+0x218>)
 8002994:	f000 fe8c 	bl	80036b0 <HAL_GPIO_Init>
}
 8002998:	bf00      	nop
 800299a:	3738      	adds	r7, #56	@ 0x38
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40011000 	.word	0x40011000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	2000056c 	.word	0x2000056c
 80029b4:	40026440 	.word	0x40026440
 80029b8:	40004400 	.word	0x40004400
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40011400 	.word	0x40011400
 80029c4:	40020800 	.word	0x40020800

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <NMI_Handler+0x4>

080029d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <UsageFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a1e:	f000 f975 	bl	8002d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002a2e:	f002 fd7d 	bl	800552c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000374 	.word	0x20000374

08002a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <USART2_IRQHandler+0x10>)
 8002a42:	f003 f961 	bl	8005d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200004dc 	.word	0x200004dc

08002a50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a54:	4802      	ldr	r0, [pc, #8]	@ (8002a60 <DMA2_Stream2_IRQHandler+0x10>)
 8002a56:	f000 fbef 	bl	8003238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000056c 	.word	0x2000056c

08002a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return 1;
 8002a68:	2301      	movs	r3, #1
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_kill>:

int _kill(int pid, int sig)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a7e:	f009 ffef 	bl	800ca60 <__errno>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2216      	movs	r2, #22
 8002a86:	601a      	str	r2, [r3, #0]
  return -1;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_exit>:

void _exit (int status)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ffe7 	bl	8002a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <_exit+0x12>

08002aaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e00a      	b.n	8002ad2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002abc:	f3af 8000 	nop.w
 8002ac0:	4601      	mov	r1, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	60ba      	str	r2, [r7, #8]
 8002ac8:	b2ca      	uxtb	r2, r1
 8002aca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	dbf0      	blt.n	8002abc <_read+0x12>
  }

  return len;
 8002ada:	687b      	ldr	r3, [r7, #4]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e009      	b.n	8002b0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	60ba      	str	r2, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3301      	adds	r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	dbf1      	blt.n	8002af6 <_write+0x12>
  }
  return len;
 8002b12:	687b      	ldr	r3, [r7, #4]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_close>:

int _close(int file)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b44:	605a      	str	r2, [r3, #4]
  return 0;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_isatty>:

int _isatty(int file)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b5c:	2301      	movs	r3, #1
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b8c:	4a14      	ldr	r2, [pc, #80]	@ (8002be0 <_sbrk+0x5c>)
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <_sbrk+0x60>)
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	@ (8002be8 <_sbrk+0x64>)
 8002ba2:	4a12      	ldr	r2, [pc, #72]	@ (8002bec <_sbrk+0x68>)
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d207      	bcs.n	8002bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb4:	f009 ff54 	bl	800ca60 <__errno>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	220c      	movs	r2, #12
 8002bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e009      	b.n	8002bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a05      	ldr	r2, [pc, #20]	@ (8002be8 <_sbrk+0x64>)
 8002bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20020000 	.word	0x20020000
 8002be4:	00000400 	.word	0x00000400
 8002be8:	200005cc 	.word	0x200005cc
 8002bec:	20000bd8 	.word	0x20000bd8

08002bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <SystemInit+0x20>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <SystemInit+0x20>)
 8002bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c18:	f7ff ffea 	bl	8002bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c1c:	480c      	ldr	r0, [pc, #48]	@ (8002c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c1e:	490d      	ldr	r1, [pc, #52]	@ (8002c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c20:	4a0d      	ldr	r2, [pc, #52]	@ (8002c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c24:	e002      	b.n	8002c2c <LoopCopyDataInit>

08002c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2a:	3304      	adds	r3, #4

08002c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c30:	d3f9      	bcc.n	8002c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c32:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c34:	4c0a      	ldr	r4, [pc, #40]	@ (8002c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c38:	e001      	b.n	8002c3e <LoopFillZerobss>

08002c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c3c:	3204      	adds	r2, #4

08002c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c40:	d3fb      	bcc.n	8002c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c42:	f009 ff13 	bl	800ca6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c46:	f7fe ff9f 	bl	8001b88 <main>
  bx  lr    
 8002c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c54:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c58:	08011230 	.word	0x08011230
  ldr r2, =_sbss
 8002c5c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c60:	20000bd8 	.word	0x20000bd8

08002c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c64:	e7fe      	b.n	8002c64 <ADC_IRQHandler>
	...

08002c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <HAL_Init+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <HAL_Init+0x40>)
 8002c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <HAL_Init+0x40>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <HAL_Init+0x40>)
 8002c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_Init+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <HAL_Init+0x40>)
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c90:	2003      	movs	r0, #3
 8002c92:	f000 f94f 	bl	8002f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c96:	200f      	movs	r0, #15
 8002c98:	f000 f808 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c9c:	f7ff fc06 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023c00 	.word	0x40023c00

08002cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb4:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <HAL_InitTick+0x54>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_InitTick+0x58>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f967 	bl	8002f9e <HAL_SYSTICK_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00e      	b.n	8002cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d80a      	bhi.n	8002cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f000 f92f 	bl	8002f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cec:	4a06      	ldr	r2, [pc, #24]	@ (8002d08 <HAL_InitTick+0x5c>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000008 	.word	0x20000008
 8002d08:	20000004 	.word	0x20000004

08002d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_IncTick+0x20>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_IncTick+0x24>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a04      	ldr	r2, [pc, #16]	@ (8002d30 <HAL_IncTick+0x24>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	200005d0 	.word	0x200005d0

08002d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return uwTick;
 8002d38:	4b03      	ldr	r3, [pc, #12]	@ (8002d48 <HAL_GetTick+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	200005d0 	.word	0x200005d0

08002d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d54:	f7ff ffee 	bl	8002d34 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d005      	beq.n	8002d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_Delay+0x44>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4413      	add	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d72:	bf00      	nop
 8002d74:	f7ff ffde 	bl	8002d34 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d8f7      	bhi.n	8002d74 <HAL_Delay+0x28>
  {
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000008 	.word	0x20000008

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4907      	ldr	r1, [pc, #28]	@ (8002e30 <__NVIC_EnableIRQ+0x38>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000e100 	.word	0xe000e100

08002e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	db0a      	blt.n	8002e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	490c      	ldr	r1, [pc, #48]	@ (8002e80 <__NVIC_SetPriority+0x4c>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	440b      	add	r3, r1
 8002e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e5c:	e00a      	b.n	8002e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <__NVIC_SetPriority+0x50>)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	3b04      	subs	r3, #4
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	440b      	add	r3, r1
 8002e72:	761a      	strb	r2, [r3, #24]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000e100 	.word	0xe000e100
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	@ 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	bf28      	it	cs
 8002ea6:	2304      	movcs	r3, #4
 8002ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3304      	adds	r3, #4
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d902      	bls.n	8002eb8 <NVIC_EncodePriority+0x30>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3b03      	subs	r3, #3
 8002eb6:	e000      	b.n	8002eba <NVIC_EncodePriority+0x32>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	401a      	ands	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43d9      	mvns	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee0:	4313      	orrs	r3, r2
         );
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f00:	d301      	bcc.n	8002f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <SysTick_Config+0x40>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0e:	210f      	movs	r1, #15
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	f7ff ff8e 	bl	8002e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <SysTick_Config+0x40>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1e:	4b04      	ldr	r3, [pc, #16]	@ (8002f30 <SysTick_Config+0x40>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	e000e010 	.word	0xe000e010

08002f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff29 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff3e 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff8e 	bl	8002e88 <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5d 	bl	8002e34 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff31 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa2 	bl	8002ef0 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff feb6 	bl	8002d34 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e099      	b.n	8003108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff4:	e00f      	b.n	8003016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff6:	f7ff fe9d 	bl	8002d34 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b05      	cmp	r3, #5
 8003002:	d908      	bls.n	8003016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e078      	b.n	8003108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e8      	bne.n	8002ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4b38      	ldr	r3, [pc, #224]	@ (8003110 <HAL_DMA_Init+0x158>)
 8003030:	4013      	ands	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	2b04      	cmp	r3, #4
 800306e:	d107      	bne.n	8003080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	4313      	orrs	r3, r2
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0307 	bic.w	r3, r3, #7
 8003096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d117      	bne.n	80030da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fa7b 	bl	80035b8 <DMA_CheckFifoParam>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030d6:	2301      	movs	r3, #1
 80030d8:	e016      	b.n	8003108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa32 	bl	800354c <DMA_CalcBaseAndBitshift>
 80030e8:	4603      	mov	r3, r0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	223f      	movs	r2, #63	@ 0x3f
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	f010803f 	.word	0xf010803f

08003114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003122:	f7ff fe07 	bl	8002d34 <HAL_GetTick>
 8003126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e052      	b.n	80031ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0216 	bic.w	r2, r2, #22
 8003154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_DMA_Abort+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0208 	bic.w	r2, r2, #8
 8003184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003196:	e013      	b.n	80031c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003198:	f7ff fdcc 	bl	8002d34 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d90c      	bls.n	80031c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e015      	b.n	80031ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e4      	bne.n	8003198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	223f      	movs	r2, #63	@ 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d004      	beq.n	8003212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2280      	movs	r2, #128	@ 0x80
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00c      	b.n	800322c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2205      	movs	r2, #5
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003244:	4b8e      	ldr	r3, [pc, #568]	@ (8003480 <HAL_DMA_IRQHandler+0x248>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a8e      	ldr	r2, [pc, #568]	@ (8003484 <HAL_DMA_IRQHandler+0x24c>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003262:	2208      	movs	r2, #8
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01a      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2208      	movs	r2, #8
 8003292:	409a      	lsls	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d012      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	2201      	movs	r2, #1
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	2204      	movs	r2, #4
 80032e0:	409a      	lsls	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	2204      	movs	r2, #4
 80032fe:	409a      	lsls	r2, r3
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f043 0204 	orr.w	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	2210      	movs	r2, #16
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d043      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03c      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003332:	2210      	movs	r2, #16
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d018      	beq.n	800337a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e01f      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
 8003378:	e016      	b.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0208 	bic.w	r2, r2, #8
 8003396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	2220      	movs	r2, #32
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 808f 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8087 	beq.w	80034d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	2220      	movs	r2, #32
 80033d0:	409a      	lsls	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d136      	bne.n	8003450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0216 	bic.w	r2, r2, #22
 80033f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_DMA_IRQHandler+0x1da>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0208 	bic.w	r2, r2, #8
 8003420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003426:	223f      	movs	r2, #63	@ 0x3f
 8003428:	409a      	lsls	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07e      	beq.n	8003544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
        }
        return;
 800344e:	e079      	b.n	8003544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	2b00      	cmp	r3, #0
 8003472:	d031      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e02c      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
 800347e:	bf00      	nop
 8003480:	20000000 	.word	0x20000000
 8003484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e01e      	b.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10f      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d032      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2205      	movs	r2, #5
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	3301      	adds	r3, #1
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	d307      	bcc.n	8003520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f2      	bne.n	8003504 <HAL_DMA_IRQHandler+0x2cc>
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e000      	b.n	8003546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003544:	bf00      	nop
    }
  }
}
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3b10      	subs	r3, #16
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <DMA_CalcBaseAndBitshift+0x64>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003566:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d909      	bls.n	800358e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	1d1a      	adds	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	659a      	str	r2, [r3, #88]	@ 0x58
 800358c:	e007      	b.n	800359e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	aaaaaaab 	.word	0xaaaaaaab
 80035b4:	080109bc 	.word	0x080109bc

080035b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11f      	bne.n	8003612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d856      	bhi.n	8003686 <DMA_CheckFifoParam+0xce>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <DMA_CheckFifoParam+0x28>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	08003603 	.word	0x08003603
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003687 	.word	0x08003687
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d046      	beq.n	800368a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e043      	b.n	800368a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800360a:	d140      	bne.n	800368e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003610:	e03d      	b.n	800368e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361a:	d121      	bne.n	8003660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d837      	bhi.n	8003692 <DMA_CheckFifoParam+0xda>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <DMA_CheckFifoParam+0x70>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	0800363f 	.word	0x0800363f
 8003630:	08003639 	.word	0x08003639
 8003634:	08003651 	.word	0x08003651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e030      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d025      	beq.n	8003696 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364e:	e022      	b.n	8003696 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003658:	d11f      	bne.n	800369a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800365e:	e01c      	b.n	800369a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d903      	bls.n	800366e <DMA_CheckFifoParam+0xb6>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d003      	beq.n	8003674 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800366c:	e018      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      break;
 8003672:	e015      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e00b      	b.n	800369e <DMA_CheckFifoParam+0xe6>
      break;
 8003686:	bf00      	nop
 8003688:	e00a      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800368a:	bf00      	nop
 800368c:	e008      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e006      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003692:	bf00      	nop
 8003694:	e004      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
    }
  } 
  
  return status; 
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	@ 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e159      	b.n	8003980 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 8148 	bne.w	800397a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d005      	beq.n	8003702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d017      	beq.n	80037a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a2 	beq.w	800397a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b57      	ldr	r3, [pc, #348]	@ (8003998 <HAL_GPIO_Init+0x2e8>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	4a56      	ldr	r2, [pc, #344]	@ (8003998 <HAL_GPIO_Init+0x2e8>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003844:	6453      	str	r3, [r2, #68]	@ 0x44
 8003846:	4b54      	ldr	r3, [pc, #336]	@ (8003998 <HAL_GPIO_Init+0x2e8>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a52      	ldr	r2, [pc, #328]	@ (800399c <HAL_GPIO_Init+0x2ec>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a49      	ldr	r2, [pc, #292]	@ (80039a0 <HAL_GPIO_Init+0x2f0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d019      	beq.n	80038b2 <HAL_GPIO_Init+0x202>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a48      	ldr	r2, [pc, #288]	@ (80039a4 <HAL_GPIO_Init+0x2f4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_GPIO_Init+0x1fe>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a47      	ldr	r2, [pc, #284]	@ (80039a8 <HAL_GPIO_Init+0x2f8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00d      	beq.n	80038aa <HAL_GPIO_Init+0x1fa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a46      	ldr	r2, [pc, #280]	@ (80039ac <HAL_GPIO_Init+0x2fc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <HAL_GPIO_Init+0x1f6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a45      	ldr	r2, [pc, #276]	@ (80039b0 <HAL_GPIO_Init+0x300>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_GPIO_Init+0x1f2>
 800389e:	2304      	movs	r3, #4
 80038a0:	e008      	b.n	80038b4 <HAL_GPIO_Init+0x204>
 80038a2:	2307      	movs	r3, #7
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x204>
 80038a6:	2303      	movs	r3, #3
 80038a8:	e004      	b.n	80038b4 <HAL_GPIO_Init+0x204>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e002      	b.n	80038b4 <HAL_GPIO_Init+0x204>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x204>
 80038b2:	2300      	movs	r3, #0
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f002 0203 	and.w	r2, r2, #3
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4093      	lsls	r3, r2
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038c4:	4935      	ldr	r1, [pc, #212]	@ (800399c <HAL_GPIO_Init+0x2ec>)
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	089b      	lsrs	r3, r3, #2
 80038ca:	3302      	adds	r3, #2
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038d2:	4b38      	ldr	r3, [pc, #224]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f6:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038fc:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003920:	4a24      	ldr	r2, [pc, #144]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003926:	4b23      	ldr	r3, [pc, #140]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394a:	4a1a      	ldr	r2, [pc, #104]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4b18      	ldr	r3, [pc, #96]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003974:	4a0f      	ldr	r2, [pc, #60]	@ (80039b4 <HAL_GPIO_Init+0x304>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	f67f aea2 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3724      	adds	r7, #36	@ 0x24
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800
 800399c:	40013800 	.word	0x40013800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
 80039a8:	40020800 	.word	0x40020800
 80039ac:	40020c00 	.word	0x40020c00
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40013c00 	.word	0x40013c00

080039b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
 80039c4:	4613      	mov	r3, r2
 80039c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c8:	787b      	ldrb	r3, [r7, #1]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039d4:	e003      	b.n	80039de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	041a      	lsls	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e12b      	b.n	8003c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fd72 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	@ 0x24
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a50:	f001 fc10 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 8003a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a81      	ldr	r2, [pc, #516]	@ (8003c60 <HAL_I2C_Init+0x274>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d807      	bhi.n	8003a70 <HAL_I2C_Init+0x84>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a80      	ldr	r2, [pc, #512]	@ (8003c64 <HAL_I2C_Init+0x278>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	bf94      	ite	ls
 8003a68:	2301      	movls	r3, #1
 8003a6a:	2300      	movhi	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e006      	b.n	8003a7e <HAL_I2C_Init+0x92>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a7d      	ldr	r2, [pc, #500]	@ (8003c68 <HAL_I2C_Init+0x27c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bf94      	ite	ls
 8003a78:	2301      	movls	r3, #1
 8003a7a:	2300      	movhi	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0e7      	b.n	8003c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a78      	ldr	r2, [pc, #480]	@ (8003c6c <HAL_I2C_Init+0x280>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0c9b      	lsrs	r3, r3, #18
 8003a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c60 <HAL_I2C_Init+0x274>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d802      	bhi.n	8003ac0 <HAL_I2C_Init+0xd4>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	3301      	adds	r3, #1
 8003abe:	e009      	b.n	8003ad4 <HAL_I2C_Init+0xe8>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a69      	ldr	r2, [pc, #420]	@ (8003c70 <HAL_I2C_Init+0x284>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ae6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	495c      	ldr	r1, [pc, #368]	@ (8003c60 <HAL_I2C_Init+0x274>)
 8003af0:	428b      	cmp	r3, r1
 8003af2:	d819      	bhi.n	8003b28 <HAL_I2C_Init+0x13c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e59      	subs	r1, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b02:	1c59      	adds	r1, r3, #1
 8003b04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b08:	400b      	ands	r3, r1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_I2C_Init+0x138>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e59      	subs	r1, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	e051      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b24:	2304      	movs	r3, #4
 8003b26:	e04f      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d111      	bne.n	8003b54 <HAL_I2C_Init+0x168>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e58      	subs	r0, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	440b      	add	r3, r1
 8003b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b42:	3301      	adds	r3, #1
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e012      	b.n	8003b7a <HAL_I2C_Init+0x18e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	0099      	lsls	r1, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Init+0x196>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e022      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10e      	bne.n	8003ba8 <HAL_I2C_Init+0x1bc>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e58      	subs	r0, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	440b      	add	r3, r1
 8003b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba6:	e00f      	b.n	8003bc8 <HAL_I2C_Init+0x1dc>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e58      	subs	r0, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	0099      	lsls	r1, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	6809      	ldr	r1, [r1, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6911      	ldr	r1, [r2, #16]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d2      	ldr	r2, [r2, #12]
 8003c02:	4311      	orrs	r1, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	000186a0 	.word	0x000186a0
 8003c64:	001e847f 	.word	0x001e847f
 8003c68:	003d08ff 	.word	0x003d08ff
 8003c6c:	431bde83 	.word	0x431bde83
 8003c70:	10624dd3 	.word	0x10624dd3

08003c74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	460b      	mov	r3, r1
 8003c82:	817b      	strh	r3, [r7, #10]
 8003c84:	4613      	mov	r3, r2
 8003c86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7ff f854 	bl	8002d34 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	f040 80e0 	bne.w	8003e5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2319      	movs	r3, #25
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4970      	ldr	r1, [pc, #448]	@ (8003e68 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fc7e 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0d3      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2C_Master_Transmit+0x50>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0cc      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	@ 0x21
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2210      	movs	r2, #16
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	893a      	ldrh	r2, [r7, #8]
 8003d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a50      	ldr	r2, [pc, #320]	@ (8003e6c <HAL_I2C_Master_Transmit+0x1f8>)
 8003d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d2c:	8979      	ldrh	r1, [r7, #10]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fae8 	bl	8004308 <I2C_MasterRequestWrite>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e08d      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d58:	e066      	b.n	8003e28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fd3c 	bl	80047dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d107      	bne.n	8003d82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d11b      	bne.n	8003dfc <HAL_I2C_Master_Transmit+0x188>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d017      	beq.n	8003dfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	6a39      	ldr	r1, [r7, #32]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fd33 	bl	800486c <I2C_WaitOnBTFFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e01a      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d194      	bne.n	8003d5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	00100002 	.word	0x00100002
 8003e6c:	ffff0000 	.word	0xffff0000

08003e70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	@ 0x30
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	817b      	strh	r3, [r7, #10]
 8003e80:	4613      	mov	r3, r2
 8003e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7fe ff56 	bl	8002d34 <HAL_GetTick>
 8003e88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	f040 8217 	bne.w	80042c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	2319      	movs	r3, #25
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	497c      	ldr	r1, [pc, #496]	@ (8004094 <HAL_I2C_Master_Receive+0x224>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fb80 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e20a      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2C_Master_Receive+0x50>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e203      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d007      	beq.n	8003ee6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2222      	movs	r2, #34	@ 0x22
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2210      	movs	r2, #16
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	893a      	ldrh	r2, [r7, #8]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a5c      	ldr	r2, [pc, #368]	@ (8004098 <HAL_I2C_Master_Receive+0x228>)
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f28:	8979      	ldrh	r1, [r7, #10]
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fa6c 	bl	800440c <I2C_MasterRequestRead>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e1c4      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d113      	bne.n	8003f6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e198      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d11b      	bne.n	8003fae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e178      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d11b      	bne.n	8003fee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	e158      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004014:	e144      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	2b03      	cmp	r3, #3
 800401c:	f200 80f1 	bhi.w	8004202 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	2b01      	cmp	r3, #1
 8004026:	d123      	bne.n	8004070 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fc65 	bl	80048fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e145      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800406e:	e117      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	2b02      	cmp	r3, #2
 8004076:	d14e      	bne.n	8004116 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	4906      	ldr	r1, [pc, #24]	@ (800409c <HAL_I2C_Master_Receive+0x22c>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fa90 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e11a      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
 8004092:	bf00      	nop
 8004094:	00100002 	.word	0x00100002
 8004098:	ffff0000 	.word	0xffff0000
 800409c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004114:	e0c4      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	496c      	ldr	r1, [pc, #432]	@ (80042d0 <HAL_I2C_Master_Receive+0x460>)
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fa41 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0cb      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	4955      	ldr	r1, [pc, #340]	@ (80042d0 <HAL_I2C_Master_Receive+0x460>)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fa13 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e09d      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004200:	e04e      	b.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004204:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fb78 	bl	80048fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e058      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d124      	bne.n	80042a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f47f aeb6 	bne.w	8004016 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	@ 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	00010004 	.word	0x00010004

080042d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e2:	b2db      	uxtb	r3, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	460b      	mov	r3, r1
 8004316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d006      	beq.n	8004332 <I2C_MasterRequestWrite+0x2a>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d003      	beq.n	8004332 <I2C_MasterRequestWrite+0x2a>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004330:	d108      	bne.n	8004344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e00b      	b.n	800435c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	2b12      	cmp	r3, #18
 800434a:	d107      	bne.n	800435c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800435a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f91d 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004382:	d103      	bne.n	800438c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e035      	b.n	80043fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004398:	d108      	bne.n	80043ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043a8:	611a      	str	r2, [r3, #16]
 80043aa:	e01b      	b.n	80043e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043ac:	897b      	ldrh	r3, [r7, #10]
 80043ae:	11db      	asrs	r3, r3, #7
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0306 	and.w	r3, r3, #6
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f063 030f 	orn	r3, r3, #15
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	490e      	ldr	r1, [pc, #56]	@ (8004404 <I2C_MasterRequestWrite+0xfc>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f966 	bl	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e010      	b.n	80043fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043da:	897b      	ldrh	r3, [r7, #10]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4907      	ldr	r1, [pc, #28]	@ (8004408 <I2C_MasterRequestWrite+0x100>)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f956 	bl	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	00010008 	.word	0x00010008
 8004408:	00010002 	.word	0x00010002

0800440c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	460b      	mov	r3, r1
 800441a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004430:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d006      	beq.n	8004446 <I2C_MasterRequestRead+0x3a>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d003      	beq.n	8004446 <I2C_MasterRequestRead+0x3a>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004444:	d108      	bne.n	8004458 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e00b      	b.n	8004470 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445c:	2b11      	cmp	r3, #17
 800445e:	d107      	bne.n	8004470 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800446e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f893 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004496:	d103      	bne.n	80044a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e079      	b.n	8004598 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ac:	d108      	bne.n	80044c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	e05f      	b.n	8004580 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	11db      	asrs	r3, r3, #7
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0306 	and.w	r3, r3, #6
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f063 030f 	orn	r3, r3, #15
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	4930      	ldr	r1, [pc, #192]	@ (80045a0 <I2C_MasterRequestRead+0x194>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f8dc 	bl	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e054      	b.n	8004598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4929      	ldr	r1, [pc, #164]	@ (80045a4 <I2C_MasterRequestRead+0x198>)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8cc 	bl	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e044      	b.n	8004598 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004532:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f831 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00d      	beq.n	8004568 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800455a:	d103      	bne.n	8004564 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004562:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e017      	b.n	8004598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004568:	897b      	ldrh	r3, [r7, #10]
 800456a:	11db      	asrs	r3, r3, #7
 800456c:	b2db      	uxtb	r3, r3
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f063 030e 	orn	r3, r3, #14
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4907      	ldr	r1, [pc, #28]	@ (80045a4 <I2C_MasterRequestRead+0x198>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f888 	bl	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	00010008 	.word	0x00010008
 80045a4:	00010002 	.word	0x00010002

080045a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b8:	e048      	b.n	800464c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d044      	beq.n	800464c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c2:	f7fe fbb7 	bl	8002d34 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d302      	bcc.n	80045d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d139      	bne.n	800464c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	0c1b      	lsrs	r3, r3, #16
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10d      	bne.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	43da      	mvns	r2, r3
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	e00c      	b.n	8004618 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	43da      	mvns	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	429a      	cmp	r2, r3
 800461c:	d116      	bne.n	800464c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e023      	b.n	8004694 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	0c1b      	lsrs	r3, r3, #16
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10d      	bne.n	8004672 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	e00c      	b.n	800468c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	43da      	mvns	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d093      	beq.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046aa:	e071      	b.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ba:	d123      	bne.n	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	f043 0204 	orr.w	r2, r3, #4
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e067      	b.n	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d041      	beq.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fe fb12 	bl	8002d34 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d136      	bne.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d10c      	bne.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	bf14      	ite	ne
 800473e:	2301      	movne	r3, #1
 8004740:	2300      	moveq	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	e00b      	b.n	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	43da      	mvns	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4013      	ands	r3, r2
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e021      	b.n	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10c      	bne.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e00b      	b.n	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	43da      	mvns	r2, r3
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f af6d 	bne.w	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e8:	e034      	b.n	8004854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f8e3 	bl	80049b6 <I2C_IsAcknowledgeFailed>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e034      	b.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d028      	beq.n	8004854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fe fa97 	bl	8002d34 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11d      	bne.n	8004854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004822:	2b80      	cmp	r3, #128	@ 0x80
 8004824:	d016      	beq.n	8004854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e007      	b.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	2b80      	cmp	r3, #128	@ 0x80
 8004860:	d1c3      	bne.n	80047ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004878:	e034      	b.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f89b 	bl	80049b6 <I2C_IsAcknowledgeFailed>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e034      	b.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d028      	beq.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe fa4f 	bl	8002d34 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d016      	beq.n	80048e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e007      	b.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d1c3      	bne.n	800487a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004908:	e049      	b.n	800499e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b10      	cmp	r3, #16
 8004916:	d119      	bne.n	800494c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0210 	mvn.w	r2, #16
 8004920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e030      	b.n	80049ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494c:	f7fe f9f2 	bl	8002d34 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11d      	bne.n	800499e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	d016      	beq.n	800499e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a8:	2b40      	cmp	r3, #64	@ 0x40
 80049aa:	d1ae      	bne.n	800490a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049cc:	d11b      	bne.n	8004a06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	f043 0204 	orr.w	r2, r3, #4
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e267      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d075      	beq.n	8004b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a32:	4b88      	ldr	r3, [pc, #544]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d00c      	beq.n	8004a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3e:	4b85      	ldr	r3, [pc, #532]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d112      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4a:	4b82      	ldr	r3, [pc, #520]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a56:	d10b      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a58:	4b7e      	ldr	r3, [pc, #504]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05b      	beq.n	8004b1c <HAL_RCC_OscConfig+0x108>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d157      	bne.n	8004b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e242      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x74>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x98>
 8004a92:	4b70      	ldr	r3, [pc, #448]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a6f      	ldr	r2, [pc, #444]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6c      	ldr	r2, [pc, #432]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004aac:	4b69      	ldr	r3, [pc, #420]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a68      	ldr	r2, [pc, #416]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe f932 	bl	8002d34 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe f92e 	bl	8002d34 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e207      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xc0>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fe f91e 	bl	8002d34 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fe f91a 	bl	8002d34 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	@ 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1f3      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	4b51      	ldr	r3, [pc, #324]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0xe8>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b36:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b44      	ldr	r3, [pc, #272]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b41      	ldr	r3, [pc, #260]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1c7      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4937      	ldr	r1, [pc, #220]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b34      	ldr	r3, [pc, #208]	@ (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe f8d3 	bl	8002d34 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fe f8cf 	bl	8002d34 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1a8      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4925      	ldr	r1, [pc, #148]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fe f8b2 	bl	8002d34 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fe f8ae 	bl	8002d34 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e187      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d036      	beq.n	8004c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fe f892 	bl	8002d34 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fe f88e 	bl	8002d34 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e167      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0b      	ldr	r3, [pc, #44]	@ (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x200>
 8004c32:	e01b      	b.n	8004c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe f87b 	bl	8002d34 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00e      	b.n	8004c60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe f877 	bl	8002d34 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d907      	bls.n	8004c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e150      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470000 	.word	0x42470000
 8004c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	4b88      	ldr	r3, [pc, #544]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ea      	bne.n	8004c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8097 	beq.w	8004da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7e:	4b81      	ldr	r3, [pc, #516]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	4a7c      	ldr	r2, [pc, #496]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b77      	ldr	r3, [pc, #476]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b74      	ldr	r3, [pc, #464]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a73      	ldr	r2, [pc, #460]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe f837 	bl	8002d34 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fe f833 	bl	8002d34 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e10c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x2ea>
 8004cf0:	4b64      	ldr	r3, [pc, #400]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	4a63      	ldr	r2, [pc, #396]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfc:	e01c      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x30c>
 8004d06:	4b5f      	ldr	r3, [pc, #380]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d12:	4b5c      	ldr	r3, [pc, #368]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	4a5b      	ldr	r2, [pc, #364]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004d20:	4b58      	ldr	r3, [pc, #352]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d24:	4a57      	ldr	r2, [pc, #348]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2c:	4b55      	ldr	r3, [pc, #340]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a54      	ldr	r2, [pc, #336]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd fff8 	bl	8002d34 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fd fff4 	bl	8002d34 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0cb      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	4b49      	ldr	r3, [pc, #292]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ee      	beq.n	8004d48 <HAL_RCC_OscConfig+0x334>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7fd ffe2 	bl	8002d34 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fd ffde 	bl	8002d34 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0b5      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ee      	bne.n	8004d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b39      	ldr	r3, [pc, #228]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	4a38      	ldr	r2, [pc, #224]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a1 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db2:	4b34      	ldr	r3, [pc, #208]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d05c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d141      	bne.n	8004e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fd ffb2 	bl	8002d34 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fd ffae 	bl	8002d34 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e087      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b27      	ldr	r3, [pc, #156]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	491b      	ldr	r1, [pc, #108]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fd ff87 	bl	8002d34 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fd ff83 	bl	8002d34 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e05c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x416>
 8004e48:	e054      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fd ff70 	bl	8002d34 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fd ff6c 	bl	8002d34 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e045      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x444>
 8004e76:	e03d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e038      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e90:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <HAL_RCC_OscConfig+0x4ec>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d028      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d121      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800

08004f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0cc      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b68      	ldr	r3, [pc, #416]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90c      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b65      	ldr	r3, [pc, #404]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a52      	ldr	r2, [pc, #328]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d044      	beq.n	8005024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d119      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e067      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4934      	ldr	r1, [pc, #208]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7fd fe9e 	bl	8002d34 <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fd fe9a 	bl	8002d34 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e04f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 020c 	and.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d1eb      	bne.n	8004ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b25      	ldr	r3, [pc, #148]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d20c      	bcs.n	800504c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	@ (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005076:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f821 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	@ (80050c4 <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd fdfe 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	080109a4 	.word	0x080109a4
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b090      	sub	sp, #64	@ 0x40
 80050d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050e0:	2300      	movs	r3, #0
 80050e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e8:	4b59      	ldr	r3, [pc, #356]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d00d      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x40>
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	f200 80a1 	bhi.w	800523c <HAL_RCC_GetSysClockFreq+0x16c>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x34>
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0x3a>
 8005102:	e09b      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b53      	ldr	r3, [pc, #332]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x184>)
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005108:	e09b      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800510a:	4b53      	ldr	r3, [pc, #332]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800510c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800510e:	e098      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005110:	4b4f      	ldr	r3, [pc, #316]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005118:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800511a:	4b4d      	ldr	r3, [pc, #308]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d028      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005126:	4b4a      	ldr	r3, [pc, #296]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	099b      	lsrs	r3, r3, #6
 800512c:	2200      	movs	r2, #0
 800512e:	623b      	str	r3, [r7, #32]
 8005130:	627a      	str	r2, [r7, #36]	@ 0x24
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005138:	2100      	movs	r1, #0
 800513a:	4b47      	ldr	r3, [pc, #284]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800513c:	fb03 f201 	mul.w	r2, r3, r1
 8005140:	2300      	movs	r3, #0
 8005142:	fb00 f303 	mul.w	r3, r0, r3
 8005146:	4413      	add	r3, r2
 8005148:	4a43      	ldr	r2, [pc, #268]	@ (8005258 <HAL_RCC_GetSysClockFreq+0x188>)
 800514a:	fba0 1202 	umull	r1, r2, r0, r2
 800514e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005150:	460a      	mov	r2, r1
 8005152:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005156:	4413      	add	r3, r2
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515c:	2200      	movs	r2, #0
 800515e:	61bb      	str	r3, [r7, #24]
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800516a:	f7fb fd95 	bl	8000c98 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4613      	mov	r3, r2
 8005174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005176:	e053      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005178:	4b35      	ldr	r3, [pc, #212]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	099b      	lsrs	r3, r3, #6
 800517e:	2200      	movs	r2, #0
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	617a      	str	r2, [r7, #20]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800518a:	f04f 0b00 	mov.w	fp, #0
 800518e:	4652      	mov	r2, sl
 8005190:	465b      	mov	r3, fp
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	0159      	lsls	r1, r3, #5
 800519c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a0:	0150      	lsls	r0, r2, #5
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	ebb2 080a 	subs.w	r8, r2, sl
 80051aa:	eb63 090b 	sbc.w	r9, r3, fp
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051c2:	ebb2 0408 	subs.w	r4, r2, r8
 80051c6:	eb63 0509 	sbc.w	r5, r3, r9
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	00eb      	lsls	r3, r5, #3
 80051d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d8:	00e2      	lsls	r2, r4, #3
 80051da:	4614      	mov	r4, r2
 80051dc:	461d      	mov	r5, r3
 80051de:	eb14 030a 	adds.w	r3, r4, sl
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	eb45 030b 	adc.w	r3, r5, fp
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f6:	4629      	mov	r1, r5
 80051f8:	028b      	lsls	r3, r1, #10
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005200:	4621      	mov	r1, r4
 8005202:	028a      	lsls	r2, r1, #10
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520a:	2200      	movs	r2, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	60fa      	str	r2, [r7, #12]
 8005210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005214:	f7fb fd40 	bl	8000c98 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x180>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	3301      	adds	r3, #1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005230:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800523a:	e002      	b.n	8005242 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800523c:	4b05      	ldr	r3, [pc, #20]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x184>)
 800523e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005244:	4618      	mov	r0, r3
 8005246:	3740      	adds	r7, #64	@ 0x40
 8005248:	46bd      	mov	sp, r7
 800524a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00f42400 	.word	0x00f42400
 8005258:	017d7840 	.word	0x017d7840

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	@ (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000000 	.word	0x20000000

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	@ (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	080109b4 	.word	0x080109b4

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	@ (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	080109b4 	.word	0x080109b4

080052c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e097      	b.n	8005408 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fd f96f 	bl	80025d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005308:	f023 0307 	bic.w	r3, r3, #7
 800530c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f000 fa29 	bl	8005770 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	4313      	orrs	r3, r2
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005364:	f023 030c 	bic.w	r3, r3, #12
 8005368:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	4313      	orrs	r3, r2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	011a      	lsls	r2, r3, #4
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	031b      	lsls	r3, r3, #12
 8005394:	4313      	orrs	r3, r2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	4313      	orrs	r3, r2
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005420:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005428:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005430:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005438:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d110      	bne.n	8005462 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005440:	7bfb      	ldrb	r3, [r7, #15]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d102      	bne.n	800544c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005446:	7b7b      	ldrb	r3, [r7, #13]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d001      	beq.n	8005450 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e069      	b.n	8005524 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005460:	e031      	b.n	80054c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b04      	cmp	r3, #4
 8005466:	d110      	bne.n	800548a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d102      	bne.n	8005474 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800546e:	7b3b      	ldrb	r3, [r7, #12]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d001      	beq.n	8005478 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e055      	b.n	8005524 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005488:	e01d      	b.n	80054c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d108      	bne.n	80054a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005490:	7bbb      	ldrb	r3, [r7, #14]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d105      	bne.n	80054a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005496:	7b7b      	ldrb	r3, [r7, #13]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d102      	bne.n	80054a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800549c:	7b3b      	ldrb	r3, [r7, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e03e      	b.n	8005524 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2202      	movs	r2, #2
 80054ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_TIM_Encoder_Start+0xc4>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d008      	beq.n	80054e4 <HAL_TIM_Encoder_Start+0xd4>
 80054d2:	e00f      	b.n	80054f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f9d3 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 80054e2:	e016      	b.n	8005512 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	2104      	movs	r1, #4
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f9cb 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 80054f2:	e00e      	b.n	8005512 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2201      	movs	r2, #1
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f9c3 	bl	8005888 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2201      	movs	r2, #1
 8005508:	2104      	movs	r1, #4
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f9bc 	bl	8005888 <TIM_CCxChannelCmd>
      break;
 8005510:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d020      	beq.n	8005590 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0202 	mvn.w	r2, #2
 8005560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8dc 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f8ce 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8df 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d020      	beq.n	80055dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0204 	mvn.w	r2, #4
 80055ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2202      	movs	r2, #2
 80055b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8b6 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 80055c8:	e005      	b.n	80055d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8a8 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f8b9 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0208 	mvn.w	r2, #8
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2204      	movs	r2, #4
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f890 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f882 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f893 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	d020      	beq.n	8005674 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0210 	mvn.w	r2, #16
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2208      	movs	r2, #8
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f86a 	bl	8005734 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f85c 	bl	8005720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f86d 	bl	8005748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0201 	mvn.w	r2, #1
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f83a 	bl	800570c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f984 	bl	80059c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f83e 	bl	800575c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d007      	beq.n	8005704 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0220 	mvn.w	r2, #32
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f956 	bl	80059b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a3a      	ldr	r2, [pc, #232]	@ (800586c <TIM_Base_SetConfig+0xfc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00f      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578e:	d00b      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a37      	ldr	r2, [pc, #220]	@ (8005870 <TIM_Base_SetConfig+0x100>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a36      	ldr	r2, [pc, #216]	@ (8005874 <TIM_Base_SetConfig+0x104>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_Base_SetConfig+0x38>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a35      	ldr	r2, [pc, #212]	@ (8005878 <TIM_Base_SetConfig+0x108>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d108      	bne.n	80057ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2b      	ldr	r2, [pc, #172]	@ (800586c <TIM_Base_SetConfig+0xfc>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01b      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c8:	d017      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a28      	ldr	r2, [pc, #160]	@ (8005870 <TIM_Base_SetConfig+0x100>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a27      	ldr	r2, [pc, #156]	@ (8005874 <TIM_Base_SetConfig+0x104>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00f      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a26      	ldr	r2, [pc, #152]	@ (8005878 <TIM_Base_SetConfig+0x108>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00b      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a25      	ldr	r2, [pc, #148]	@ (800587c <TIM_Base_SetConfig+0x10c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a24      	ldr	r2, [pc, #144]	@ (8005880 <TIM_Base_SetConfig+0x110>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_Base_SetConfig+0x8a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a23      	ldr	r2, [pc, #140]	@ (8005884 <TIM_Base_SetConfig+0x114>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d108      	bne.n	800580c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a0e      	ldr	r2, [pc, #56]	@ (800586c <TIM_Base_SetConfig+0xfc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d103      	bne.n	8005840 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f023 0201 	bic.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	611a      	str	r2, [r3, #16]
  }
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2201      	movs	r2, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a1a      	ldr	r2, [r3, #32]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	401a      	ands	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e050      	b.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1c      	ldr	r2, [pc, #112]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005938:	d013      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a18      	ldr	r2, [pc, #96]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a15      	ldr	r2, [pc, #84]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a13      	ldr	r2, [pc, #76]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40014000 	.word	0x40014000

080059b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e042      	b.n	8005a70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fc fed4 	bl	80027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	@ 0x24
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fe5f 	bl	80066e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695a      	ldr	r2, [r3, #20]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08a      	sub	sp, #40	@ 0x28
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d175      	bne.n	8005b84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_UART_Transmit+0x2c>
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e06e      	b.n	8005b86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2221      	movs	r2, #33	@ 0x21
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab6:	f7fd f93d 	bl	8002d34 <HAL_GetTick>
 8005aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad0:	d108      	bne.n	8005ae4 <HAL_UART_Transmit+0x6c>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e003      	b.n	8005aec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aec:	e02e      	b.n	8005b4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2200      	movs	r2, #0
 8005af6:	2180      	movs	r1, #128	@ 0x80
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fbc1 	bl	8006280 <UART_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e03a      	b.n	8005b86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	e007      	b.n	8005b3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1cb      	bne.n	8005aee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2140      	movs	r1, #64	@ 0x40
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 fb8d 	bl	8006280 <UART_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e006      	b.n	8005b86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b08a      	sub	sp, #40	@ 0x28
 8005b92:	af02      	add	r7, sp, #8
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	f040 8081 	bne.w	8005cb2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Receive+0x2e>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e079      	b.n	8005cb4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2222      	movs	r2, #34	@ 0x22
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bd4:	f7fd f8ae 	bl	8002d34 <HAL_GetTick>
 8005bd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bee:	d108      	bne.n	8005c02 <HAL_UART_Receive+0x74>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	e003      	b.n	8005c0a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c0a:	e047      	b.n	8005c9c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2200      	movs	r2, #0
 8005c14:	2120      	movs	r1, #32
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fb32 	bl	8006280 <UART_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e042      	b.n	8005cb4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	3302      	adds	r3, #2
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e01f      	b.n	8005c8e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c56:	d007      	beq.n	8005c68 <HAL_UART_Receive+0xda>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <HAL_UART_Receive+0xe8>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e008      	b.n	8005c88 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1b2      	bne.n	8005c0c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d112      	bne.n	8005cfc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_UART_Receive_IT+0x26>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00b      	b.n	8005cfe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fb1d 	bl	8006332 <UART_Start_Receive_IT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	e000      	b.n	8005cfe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
  }
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10f      	bne.n	8005d6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <HAL_UART_IRQHandler+0x66>
 8005d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fbfc 	bl	8006564 <UART_Receive_IT>
      return;
 8005d6c:	e25b      	b.n	8006226 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80de 	beq.w	8005f34 <HAL_UART_IRQHandler+0x22c>
 8005d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80d1 	beq.w	8005f34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <HAL_UART_IRQHandler+0xae>
 8005d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	f043 0201 	orr.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_UART_IRQHandler+0xd2>
 8005dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0202 	orr.w	r2, r3, #2
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0xf6>
 8005de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d011      	beq.n	8005e2e <HAL_UART_IRQHandler+0x126>
 8005e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	f043 0208 	orr.w	r2, r3, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 81f2 	beq.w	800621c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_UART_IRQHandler+0x14e>
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fb87 	bl	8006564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e60:	2b40      	cmp	r3, #64	@ 0x40
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <HAL_UART_IRQHandler+0x17a>
 8005e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d04f      	beq.n	8005f22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa8f 	bl	80063a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	d141      	bne.n	8005f1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3314      	adds	r3, #20
 8005e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3314      	adds	r3, #20
 8005ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1d9      	bne.n	8005e96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d013      	beq.n	8005f12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eee:	4a7e      	ldr	r2, [pc, #504]	@ (80060e8 <HAL_UART_IRQHandler+0x3e0>)
 8005ef0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd f97c 	bl	80031f4 <HAL_DMA_Abort_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	e00e      	b.n	8005f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f99e 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	e00a      	b.n	8005f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f99a 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e006      	b.n	8005f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f996 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f2e:	e175      	b.n	800621c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	bf00      	nop
    return;
 8005f32:	e173      	b.n	800621c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	f040 814f 	bne.w	80061dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8148 	beq.w	80061dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8141 	beq.w	80061dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60bb      	str	r3, [r7, #8]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b40      	cmp	r3, #64	@ 0x40
 8005f7c:	f040 80b6 	bne.w	80060ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8145 	beq.w	8006220 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	f080 813e 	bcs.w	8006220 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005faa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb6:	f000 8088 	beq.w	80060ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ff2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1d9      	bne.n	8005fba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3314      	adds	r3, #20
 8006026:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800602a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800602e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006032:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800603c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e1      	bne.n	8006006 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3314      	adds	r3, #20
 8006048:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006066:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006068:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800606c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e3      	bne.n	8006042 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800609a:	f023 0310 	bic.w	r3, r3, #16
 800609e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e3      	bne.n	8006088 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd f825 	bl	8003114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29b      	uxth	r3, r3
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8c1 	bl	8006268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060e6:	e09b      	b.n	8006220 <HAL_UART_IRQHandler+0x518>
 80060e8:	0800646d 	.word	0x0800646d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 808e 	beq.w	8006224 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8089 	beq.w	8006224 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006128:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006136:	647a      	str	r2, [r7, #68]	@ 0x44
 8006138:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800613c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e3      	bne.n	8006112 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	623b      	str	r3, [r7, #32]
   return(result);
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800616e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e3      	bne.n	800614a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0310 	bic.w	r3, r3, #16
 80061a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061b4:	61fa      	str	r2, [r7, #28]
 80061b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69b9      	ldr	r1, [r7, #24]
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	617b      	str	r3, [r7, #20]
   return(result);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e3      	bne.n	8006190 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f847 	bl	8006268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061da:	e023      	b.n	8006224 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d009      	beq.n	80061fc <HAL_UART_IRQHandler+0x4f4>
 80061e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f94d 	bl	8006494 <UART_Transmit_IT>
    return;
 80061fa:	e014      	b.n	8006226 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00e      	beq.n	8006226 <HAL_UART_IRQHandler+0x51e>
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f98d 	bl	8006534 <UART_EndTransmit_IT>
    return;
 800621a:	e004      	b.n	8006226 <HAL_UART_IRQHandler+0x51e>
    return;
 800621c:	bf00      	nop
 800621e:	e002      	b.n	8006226 <HAL_UART_IRQHandler+0x51e>
      return;
 8006220:	bf00      	nop
 8006222:	e000      	b.n	8006226 <HAL_UART_IRQHandler+0x51e>
      return;
 8006224:	bf00      	nop
  }
}
 8006226:	37e8      	adds	r7, #232	@ 0xe8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006290:	e03b      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d037      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629a:	f7fc fd4b 	bl	8002d34 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	6a3a      	ldr	r2, [r7, #32]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d302      	bcc.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e03a      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d023      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0x8a>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b80      	cmp	r3, #128	@ 0x80
 80062c6:	d020      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0x8a>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b40      	cmp	r3, #64	@ 0x40
 80062cc:	d01d      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d116      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f857 	bl	80063a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2208      	movs	r2, #8
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e00f      	b.n	800632a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	bf0c      	ite	eq
 800631a:	2301      	moveq	r3, #1
 800631c:	2300      	movne	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	429a      	cmp	r2, r3
 8006326:	d0b4      	beq.n	8006292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2222      	movs	r2, #34	@ 0x22
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006376:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0220 	orr.w	r2, r2, #32
 8006396:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b095      	sub	sp, #84	@ 0x54
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	330c      	adds	r3, #12
 80063b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	330c      	adds	r3, #12
 80063cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e5      	bne.n	80063ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e5      	bne.n	80063e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	2b01      	cmp	r3, #1
 800641c:	d119      	bne.n	8006452 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	60bb      	str	r3, [r7, #8]
   return(result);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0310 	bic.w	r3, r3, #16
 8006434:	647b      	str	r3, [r7, #68]	@ 0x44
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643e:	61ba      	str	r2, [r7, #24]
 8006440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	613b      	str	r3, [r7, #16]
   return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e5      	bne.n	800641e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006460:	bf00      	nop
 8006462:	3754      	adds	r7, #84	@ 0x54
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff fee4 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b21      	cmp	r3, #33	@ 0x21
 80064a6:	d13e      	bne.n	8006526 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b0:	d114      	bne.n	80064dc <UART_Transmit_IT+0x48>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d110      	bne.n	80064dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	1c9a      	adds	r2, r3, #2
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]
 80064da:	e008      	b.n	80064ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6211      	str	r1, [r2, #32]
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4619      	mov	r1, r3
 80064fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006510:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006520:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	e000      	b.n	8006528 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800654a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fe69 	bl	800622c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	@ 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b22      	cmp	r3, #34	@ 0x22
 8006576:	f040 80ae 	bne.w	80066d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006582:	d117      	bne.n	80065b4 <UART_Receive_IT+0x50>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d113      	bne.n	80065b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80065b2:	e026      	b.n	8006602 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c6:	d007      	beq.n	80065d8 <UART_Receive_IT+0x74>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <UART_Receive_IT+0x82>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	e008      	b.n	80065f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4619      	mov	r1, r3
 8006610:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006612:	2b00      	cmp	r3, #0
 8006614:	d15d      	bne.n	80066d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0220 	bic.w	r2, r2, #32
 8006624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0201 	bic.w	r2, r2, #1
 8006644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006658:	2b01      	cmp	r3, #1
 800665a:	d135      	bne.n	80066c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	613b      	str	r3, [r7, #16]
   return(result);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f023 0310 	bic.w	r3, r3, #16
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006682:	623a      	str	r2, [r7, #32]
 8006684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	69f9      	ldr	r1, [r7, #28]
 8006688:	6a3a      	ldr	r2, [r7, #32]
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e5      	bne.n	8006662 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d10a      	bne.n	80066ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fdd1 	bl	8006268 <HAL_UARTEx_RxEventCallback>
 80066c6:	e002      	b.n	80066ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fdb9 	bl	8006240 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e002      	b.n	80066d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3730      	adds	r7, #48	@ 0x30
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b0c0      	sub	sp, #256	@ 0x100
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fc:	68d9      	ldr	r1, [r3, #12]
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	ea40 0301 	orr.w	r3, r0, r1
 8006708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	431a      	orrs	r2, r3
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	431a      	orrs	r2, r3
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006738:	f021 010c 	bic.w	r1, r1, #12
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006746:	430b      	orrs	r3, r1
 8006748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675a:	6999      	ldr	r1, [r3, #24]
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	ea40 0301 	orr.w	r3, r0, r1
 8006766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b8f      	ldr	r3, [pc, #572]	@ (80069ac <UART_SetConfig+0x2cc>)
 8006770:	429a      	cmp	r2, r3
 8006772:	d005      	beq.n	8006780 <UART_SetConfig+0xa0>
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b8d      	ldr	r3, [pc, #564]	@ (80069b0 <UART_SetConfig+0x2d0>)
 800677c:	429a      	cmp	r2, r3
 800677e:	d104      	bne.n	800678a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006780:	f7fe fd8c 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8006784:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006788:	e003      	b.n	8006792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800678a:	f7fe fd73 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 800678e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800679c:	f040 810c 	bne.w	80069b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067b2:	4622      	mov	r2, r4
 80067b4:	462b      	mov	r3, r5
 80067b6:	1891      	adds	r1, r2, r2
 80067b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067ba:	415b      	adcs	r3, r3
 80067bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067c2:	4621      	mov	r1, r4
 80067c4:	eb12 0801 	adds.w	r8, r2, r1
 80067c8:	4629      	mov	r1, r5
 80067ca:	eb43 0901 	adc.w	r9, r3, r1
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067e2:	4690      	mov	r8, r2
 80067e4:	4699      	mov	r9, r3
 80067e6:	4623      	mov	r3, r4
 80067e8:	eb18 0303 	adds.w	r3, r8, r3
 80067ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067f0:	462b      	mov	r3, r5
 80067f2:	eb49 0303 	adc.w	r3, r9, r3
 80067f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006806:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800680a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800680e:	460b      	mov	r3, r1
 8006810:	18db      	adds	r3, r3, r3
 8006812:	653b      	str	r3, [r7, #80]	@ 0x50
 8006814:	4613      	mov	r3, r2
 8006816:	eb42 0303 	adc.w	r3, r2, r3
 800681a:	657b      	str	r3, [r7, #84]	@ 0x54
 800681c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006824:	f7fa fa38 	bl	8000c98 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4b61      	ldr	r3, [pc, #388]	@ (80069b4 <UART_SetConfig+0x2d4>)
 800682e:	fba3 2302 	umull	r2, r3, r3, r2
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	011c      	lsls	r4, r3, #4
 8006836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006840:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006848:	4642      	mov	r2, r8
 800684a:	464b      	mov	r3, r9
 800684c:	1891      	adds	r1, r2, r2
 800684e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006850:	415b      	adcs	r3, r3
 8006852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006858:	4641      	mov	r1, r8
 800685a:	eb12 0a01 	adds.w	sl, r2, r1
 800685e:	4649      	mov	r1, r9
 8006860:	eb43 0b01 	adc.w	fp, r3, r1
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006878:	4692      	mov	sl, r2
 800687a:	469b      	mov	fp, r3
 800687c:	4643      	mov	r3, r8
 800687e:	eb1a 0303 	adds.w	r3, sl, r3
 8006882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006886:	464b      	mov	r3, r9
 8006888:	eb4b 0303 	adc.w	r3, fp, r3
 800688c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800689c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068a4:	460b      	mov	r3, r1
 80068a6:	18db      	adds	r3, r3, r3
 80068a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068aa:	4613      	mov	r3, r2
 80068ac:	eb42 0303 	adc.w	r3, r2, r3
 80068b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068ba:	f7fa f9ed 	bl	8000c98 <__aeabi_uldivmod>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	4b3b      	ldr	r3, [pc, #236]	@ (80069b4 <UART_SetConfig+0x2d4>)
 80068c6:	fba3 2301 	umull	r2, r3, r3, r1
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	2264      	movs	r2, #100	@ 0x64
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	1acb      	subs	r3, r1, r3
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068da:	4b36      	ldr	r3, [pc, #216]	@ (80069b4 <UART_SetConfig+0x2d4>)
 80068dc:	fba3 2302 	umull	r2, r3, r3, r2
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068e8:	441c      	add	r4, r3
 80068ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068fc:	4642      	mov	r2, r8
 80068fe:	464b      	mov	r3, r9
 8006900:	1891      	adds	r1, r2, r2
 8006902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006904:	415b      	adcs	r3, r3
 8006906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800690c:	4641      	mov	r1, r8
 800690e:	1851      	adds	r1, r2, r1
 8006910:	6339      	str	r1, [r7, #48]	@ 0x30
 8006912:	4649      	mov	r1, r9
 8006914:	414b      	adcs	r3, r1
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006924:	4659      	mov	r1, fp
 8006926:	00cb      	lsls	r3, r1, #3
 8006928:	4651      	mov	r1, sl
 800692a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800692e:	4651      	mov	r1, sl
 8006930:	00ca      	lsls	r2, r1, #3
 8006932:	4610      	mov	r0, r2
 8006934:	4619      	mov	r1, r3
 8006936:	4603      	mov	r3, r0
 8006938:	4642      	mov	r2, r8
 800693a:	189b      	adds	r3, r3, r2
 800693c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006940:	464b      	mov	r3, r9
 8006942:	460a      	mov	r2, r1
 8006944:	eb42 0303 	adc.w	r3, r2, r3
 8006948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006958:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800695c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006960:	460b      	mov	r3, r1
 8006962:	18db      	adds	r3, r3, r3
 8006964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006966:	4613      	mov	r3, r2
 8006968:	eb42 0303 	adc.w	r3, r2, r3
 800696c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800696e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006976:	f7fa f98f 	bl	8000c98 <__aeabi_uldivmod>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4b0d      	ldr	r3, [pc, #52]	@ (80069b4 <UART_SetConfig+0x2d4>)
 8006980:	fba3 1302 	umull	r1, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	2164      	movs	r1, #100	@ 0x64
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	3332      	adds	r3, #50	@ 0x32
 8006992:	4a08      	ldr	r2, [pc, #32]	@ (80069b4 <UART_SetConfig+0x2d4>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 0207 	and.w	r2, r3, #7
 800699e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4422      	add	r2, r4
 80069a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069a8:	e106      	b.n	8006bb8 <UART_SetConfig+0x4d8>
 80069aa:	bf00      	nop
 80069ac:	40011000 	.word	0x40011000
 80069b0:	40011400 	.word	0x40011400
 80069b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069ca:	4642      	mov	r2, r8
 80069cc:	464b      	mov	r3, r9
 80069ce:	1891      	adds	r1, r2, r2
 80069d0:	6239      	str	r1, [r7, #32]
 80069d2:	415b      	adcs	r3, r3
 80069d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069da:	4641      	mov	r1, r8
 80069dc:	1854      	adds	r4, r2, r1
 80069de:	4649      	mov	r1, r9
 80069e0:	eb43 0501 	adc.w	r5, r3, r1
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	00eb      	lsls	r3, r5, #3
 80069ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069f2:	00e2      	lsls	r2, r4, #3
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	4643      	mov	r3, r8
 80069fa:	18e3      	adds	r3, r4, r3
 80069fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a00:	464b      	mov	r3, r9
 8006a02:	eb45 0303 	adc.w	r3, r5, r3
 8006a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a26:	4629      	mov	r1, r5
 8006a28:	008b      	lsls	r3, r1, #2
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a30:	4621      	mov	r1, r4
 8006a32:	008a      	lsls	r2, r1, #2
 8006a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a38:	f7fa f92e 	bl	8000c98 <__aeabi_uldivmod>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4b60      	ldr	r3, [pc, #384]	@ (8006bc4 <UART_SetConfig+0x4e4>)
 8006a42:	fba3 2302 	umull	r2, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	011c      	lsls	r4, r3, #4
 8006a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	1891      	adds	r1, r2, r2
 8006a62:	61b9      	str	r1, [r7, #24]
 8006a64:	415b      	adcs	r3, r3
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a6c:	4641      	mov	r1, r8
 8006a6e:	1851      	adds	r1, r2, r1
 8006a70:	6139      	str	r1, [r7, #16]
 8006a72:	4649      	mov	r1, r9
 8006a74:	414b      	adcs	r3, r1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a84:	4659      	mov	r1, fp
 8006a86:	00cb      	lsls	r3, r1, #3
 8006a88:	4651      	mov	r1, sl
 8006a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8e:	4651      	mov	r1, sl
 8006a90:	00ca      	lsls	r2, r1, #3
 8006a92:	4610      	mov	r0, r2
 8006a94:	4619      	mov	r1, r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	4642      	mov	r2, r8
 8006a9a:	189b      	adds	r3, r3, r2
 8006a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	eb42 0303 	adc.w	r3, r2, r3
 8006aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ab6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	008b      	lsls	r3, r1, #2
 8006ac8:	4641      	mov	r1, r8
 8006aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ace:	4641      	mov	r1, r8
 8006ad0:	008a      	lsls	r2, r1, #2
 8006ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ad6:	f7fa f8df 	bl	8000c98 <__aeabi_uldivmod>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4b38      	ldr	r3, [pc, #224]	@ (8006bc4 <UART_SetConfig+0x4e4>)
 8006ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2264      	movs	r2, #100	@ 0x64
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	1acb      	subs	r3, r1, r3
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	3332      	adds	r3, #50	@ 0x32
 8006af4:	4a33      	ldr	r2, [pc, #204]	@ (8006bc4 <UART_SetConfig+0x4e4>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b00:	441c      	add	r4, r3
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b10:	4642      	mov	r2, r8
 8006b12:	464b      	mov	r3, r9
 8006b14:	1891      	adds	r1, r2, r2
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	415b      	adcs	r3, r3
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b20:	4641      	mov	r1, r8
 8006b22:	1851      	adds	r1, r2, r1
 8006b24:	6039      	str	r1, [r7, #0]
 8006b26:	4649      	mov	r1, r9
 8006b28:	414b      	adcs	r3, r1
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b38:	4659      	mov	r1, fp
 8006b3a:	00cb      	lsls	r3, r1, #3
 8006b3c:	4651      	mov	r1, sl
 8006b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b42:	4651      	mov	r1, sl
 8006b44:	00ca      	lsls	r2, r1, #3
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	189b      	adds	r3, r3, r2
 8006b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b52:	464b      	mov	r3, r9
 8006b54:	460a      	mov	r2, r1
 8006b56:	eb42 0303 	adc.w	r3, r2, r3
 8006b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b66:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b74:	4649      	mov	r1, r9
 8006b76:	008b      	lsls	r3, r1, #2
 8006b78:	4641      	mov	r1, r8
 8006b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b7e:	4641      	mov	r1, r8
 8006b80:	008a      	lsls	r2, r1, #2
 8006b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b86:	f7fa f887 	bl	8000c98 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <UART_SetConfig+0x4e4>)
 8006b90:	fba3 1302 	umull	r1, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	2164      	movs	r1, #100	@ 0x64
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	3332      	adds	r3, #50	@ 0x32
 8006ba2:	4a08      	ldr	r2, [pc, #32]	@ (8006bc4 <UART_SetConfig+0x4e4>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 020f 	and.w	r2, r3, #15
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4422      	add	r2, r4
 8006bb6:	609a      	str	r2, [r3, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc4:	51eb851f 	.word	0x51eb851f

08006bc8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	71fb      	strb	r3, [r7, #7]
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	2007      	movs	r0, #7
 8006bd8:	f7fa fa28 	bl	800102c <bno055_writeData>
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	203d      	movs	r0, #61	@ 0x3d
 8006bf4:	f7fa fa1a 	bl	800102c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8006bfe:	2013      	movs	r0, #19
 8006c00:	f7fa fa08 	bl	8001014 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8006c04:	e002      	b.n	8006c0c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8006c06:	2007      	movs	r0, #7
 8006c08:	f7fa fa04 	bl	8001014 <bno055_delay>
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f7ff ffe3 	bl	8006be4 <bno055_setOperationMode>
}
 8006c1e:	bf00      	nop
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8006c22:	b580      	push	{r7, lr}
 8006c24:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8006c26:	200c      	movs	r0, #12
 8006c28:	f7ff ffdc 	bl	8006be4 <bno055_setOperationMode>
}
 8006c2c:	bf00      	nop
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8006c34:	2120      	movs	r1, #32
 8006c36:	203f      	movs	r0, #63	@ 0x3f
 8006c38:	f7fa f9f8 	bl	800102c <bno055_writeData>
  bno055_delay(700);
 8006c3c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8006c40:	f7fa f9e8 	bl	8001014 <bno055_delay>
}
 8006c44:	bf00      	nop
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
  bno055_reset();
 8006c4e:	f7ff ffef 	bl	8006c30 <bno055_reset>

  uint8_t id = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8006c56:	1dfb      	adds	r3, r7, #7
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f7fa fad1 	bl	8001204 <bno055_readData>
  if (id != BNO055_ID) {
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	2ba0      	cmp	r3, #160	@ 0xa0
 8006c66:	d004      	beq.n	8006c72 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4809      	ldr	r0, [pc, #36]	@ (8006c94 <bno055_setup+0x4c>)
 8006c6e:	f005 fccf 	bl	800c610 <iprintf>
  }
  bno055_setPage(0);
 8006c72:	2000      	movs	r0, #0
 8006c74:	f7ff ffa8 	bl	8006bc8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8006c78:	2100      	movs	r1, #0
 8006c7a:	203f      	movs	r0, #63	@ 0x3f
 8006c7c:	f7fa f9d6 	bl	800102c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8006c80:	f7ff ffc8 	bl	8006c14 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8006c84:	200a      	movs	r0, #10
 8006c86:	f7fa f9c5 	bl	8001014 <bno055_delay>
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	08010960 	.word	0x08010960

08006c98 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8006c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006c9c:	b09e      	sub	sp, #120	@ 0x78
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8006ca6:	2000      	movs	r0, #0
 8006ca8:	f7ff ff8e 	bl	8006bc8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8006cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d108      	bne.n	8006cc6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8006cb4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8006cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fa faa0 	bl	8001204 <bno055_readData>
 8006cc4:	e007      	b.n	8006cd6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8006cc6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8006cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cce:	2206      	movs	r2, #6
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fa fa97 	bl	8001204 <bno055_readData>

  double scale = 1;
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	4b8b      	ldr	r3, [pc, #556]	@ (8006f08 <bno055_getVector+0x270>)
 8006cdc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8006ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ce4:	2b0e      	cmp	r3, #14
 8006ce6:	d109      	bne.n	8006cfc <bno055_getVector+0x64>
    scale = magScale;
 8006ce8:	4b88      	ldr	r3, [pc, #544]	@ (8006f0c <bno055_getVector+0x274>)
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7f9 fc11 	bl	8000514 <__aeabi_ui2d>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8006cfa:	e03e      	b.n	8006d7a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d007      	beq.n	8006d14 <bno055_getVector+0x7c>
 8006d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d08:	2b28      	cmp	r3, #40	@ 0x28
 8006d0a:	d003      	beq.n	8006d14 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8006d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d12:	d109      	bne.n	8006d28 <bno055_getVector+0x90>
    scale = accelScale;
 8006d14:	4b7e      	ldr	r3, [pc, #504]	@ (8006f10 <bno055_getVector+0x278>)
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7f9 fbfb 	bl	8000514 <__aeabi_ui2d>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8006d26:	e028      	b.n	8006d7a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8006d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d2c:	2b14      	cmp	r3, #20
 8006d2e:	d109      	bne.n	8006d44 <bno055_getVector+0xac>
    scale = angularRateScale;
 8006d30:	4b78      	ldr	r3, [pc, #480]	@ (8006f14 <bno055_getVector+0x27c>)
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7f9 fbed 	bl	8000514 <__aeabi_ui2d>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8006d42:	e01a      	b.n	8006d7a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8006d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d48:	2b1a      	cmp	r3, #26
 8006d4a:	d109      	bne.n	8006d60 <bno055_getVector+0xc8>
    scale = eulerScale;
 8006d4c:	4b72      	ldr	r3, [pc, #456]	@ (8006f18 <bno055_getVector+0x280>)
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7f9 fbdf 	bl	8000514 <__aeabi_ui2d>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8006d5e:	e00c      	b.n	8006d7a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8006d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d108      	bne.n	8006d7a <bno055_getVector+0xe2>
    scale = quaScale;
 8006d68:	4b6c      	ldr	r3, [pc, #432]	@ (8006f1c <bno055_getVector+0x284>)
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7f9 fbd1 	bl	8000514 <__aeabi_ui2d>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8006d7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d7e:	2220      	movs	r2, #32
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f005 fdac 	bl	800c8e0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8006d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d150      	bne.n	8006e32 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8006d90:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	b21a      	sxth	r2, r3
 8006d98:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006d9c:	b21b      	sxth	r3, r3
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b21b      	sxth	r3, r3
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7f9 fbc6 	bl	8000534 <__aeabi_i2d>
 8006da8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006dac:	f7f9 fd56 	bl	800085c <__aeabi_ddiv>
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8006db8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	b21a      	sxth	r2, r3
 8006dc0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006dc4:	b21b      	sxth	r3, r3
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	b21b      	sxth	r3, r3
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7f9 fbb2 	bl	8000534 <__aeabi_i2d>
 8006dd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006dd4:	f7f9 fd42 	bl	800085c <__aeabi_ddiv>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8006de0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	b21a      	sxth	r2, r3
 8006de8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8006dec:	b21b      	sxth	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b21b      	sxth	r3, r3
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7f9 fb9e 	bl	8000534 <__aeabi_i2d>
 8006df8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006dfc:	f7f9 fd2e 	bl	800085c <__aeabi_ddiv>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8006e08:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b21a      	sxth	r2, r3
 8006e10:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8006e14:	b21b      	sxth	r3, r3
 8006e16:	4313      	orrs	r3, r2
 8006e18:	b21b      	sxth	r3, r3
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7f9 fb8a 	bl	8000534 <__aeabi_i2d>
 8006e20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006e24:	f7f9 fd1a 	bl	800085c <__aeabi_ddiv>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8006e30:	e03b      	b.n	8006eaa <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8006e32:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	b21a      	sxth	r2, r3
 8006e3a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8006e3e:	b21b      	sxth	r3, r3
 8006e40:	4313      	orrs	r3, r2
 8006e42:	b21b      	sxth	r3, r3
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7f9 fb75 	bl	8000534 <__aeabi_i2d>
 8006e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006e4e:	f7f9 fd05 	bl	800085c <__aeabi_ddiv>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8006e5a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	b21a      	sxth	r2, r3
 8006e62:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	b21b      	sxth	r3, r3
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7f9 fb61 	bl	8000534 <__aeabi_i2d>
 8006e72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006e76:	f7f9 fcf1 	bl	800085c <__aeabi_ddiv>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8006e82:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b21a      	sxth	r2, r3
 8006e8a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8006e8e:	b21b      	sxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b21b      	sxth	r3, r3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7f9 fb4d 	bl	8000534 <__aeabi_i2d>
 8006e9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006e9e:	f7f9 fcdd 	bl	800085c <__aeabi_ddiv>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8006eaa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8006eae:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8006eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006ebe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006ec2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8006ec6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8006eca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006ece:	ec49 8b14 	vmov	d4, r8, r9
 8006ed2:	ec45 4b15 	vmov	d5, r4, r5
 8006ed6:	ec41 0b16 	vmov	d6, r0, r1
 8006eda:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ede:	eeb0 0a44 	vmov.f32	s0, s8
 8006ee2:	eef0 0a64 	vmov.f32	s1, s9
 8006ee6:	eeb0 1a45 	vmov.f32	s2, s10
 8006eea:	eef0 1a65 	vmov.f32	s3, s11
 8006eee:	eeb0 2a46 	vmov.f32	s4, s12
 8006ef2:	eef0 2a66 	vmov.f32	s5, s13
 8006ef6:	eeb0 3a47 	vmov.f32	s6, s14
 8006efa:	eef0 3a67 	vmov.f32	s7, s15
 8006efe:	3778      	adds	r7, #120	@ 0x78
 8006f00:	46bd      	mov	sp, r7
 8006f02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f06:	bf00      	nop
 8006f08:	3ff00000 	.word	0x3ff00000
 8006f0c:	20000010 	.word	0x20000010
 8006f10:	2000000a 	.word	0x2000000a
 8006f14:	2000000c 	.word	0x2000000c
 8006f18:	2000000e 	.word	0x2000000e
 8006f1c:	20000012 	.word	0x20000012

08006f20 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8006f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f24:	b090      	sub	sp, #64	@ 0x40
 8006f26:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8006f28:	201a      	movs	r0, #26
 8006f2a:	f7ff feb5 	bl	8006c98 <bno055_getVector>
 8006f2e:	eeb0 4a40 	vmov.f32	s8, s0
 8006f32:	eef0 4a60 	vmov.f32	s9, s1
 8006f36:	eeb0 5a41 	vmov.f32	s10, s2
 8006f3a:	eef0 5a61 	vmov.f32	s11, s3
 8006f3e:	eeb0 6a42 	vmov.f32	s12, s4
 8006f42:	eef0 6a62 	vmov.f32	s13, s5
 8006f46:	eeb0 7a43 	vmov.f32	s14, s6
 8006f4a:	eef0 7a63 	vmov.f32	s15, s7
 8006f4e:	ed87 4b08 	vstr	d4, [r7, #32]
 8006f52:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8006f56:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8006f5a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8006f5e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f62:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8006f66:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006f6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f6e:	ec49 8b14 	vmov	d4, r8, r9
 8006f72:	ec45 4b15 	vmov	d5, r4, r5
 8006f76:	ec41 0b16 	vmov	d6, r0, r1
 8006f7a:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f7e:	eeb0 0a44 	vmov.f32	s0, s8
 8006f82:	eef0 0a64 	vmov.f32	s1, s9
 8006f86:	eeb0 1a45 	vmov.f32	s2, s10
 8006f8a:	eef0 1a65 	vmov.f32	s3, s11
 8006f8e:	eeb0 2a46 	vmov.f32	s4, s12
 8006f92:	eef0 2a66 	vmov.f32	s5, s13
 8006f96:	eeb0 3a47 	vmov.f32	s6, s14
 8006f9a:	eef0 3a67 	vmov.f32	s7, s15
 8006f9e:	3740      	adds	r7, #64	@ 0x40
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08006fa8 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetInf(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8006fae:	2340      	movs	r3, #64	@ 0x40
 8006fb0:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d10b      	bne.n	8006fdc <rtGetInf+0x34>
    inf = rtGetInfF();
 8006fc4:	f000 f820 	bl	8007008 <rtGetInfF>
 8006fc8:	ee10 3a10 	vmov	r3, s0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7f9 fac3 	bl	8000558 <__aeabi_f2d>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8006fda:	e007      	b.n	8006fec <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8006fdc:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <rtGetInf+0x5c>)
 8006fde:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8006fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8006fec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ff0:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8006ff8:	eef0 0a67 	vmov.f32	s1, s15
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	7ff00000 	.word	0x7ff00000

08007008 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetInfF(void)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800700e:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8007012:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	ee07 3a90 	vmov	s15, r3
}
 800701a:	eeb0 0a67 	vmov.f32	s0, s15
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetMinusInf(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800702e:	2340      	movs	r3, #64	@ 0x40
 8007030:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b20      	cmp	r3, #32
 8007042:	d10b      	bne.n	800705c <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8007044:	f000 f820 	bl	8007088 <rtGetMinusInfF>
 8007048:	ee10 3a10 	vmov	r3, s0
 800704c:	4618      	mov	r0, r3
 800704e:	f7f9 fa83 	bl	8000558 <__aeabi_f2d>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800705a:	e007      	b.n	800706c <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 800705c:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <rtGetMinusInf+0x5c>)
 800705e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8007060:	2300      	movs	r3, #0
 8007062:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8007064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007068:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 800706c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007070:	ec43 2b17 	vmov	d7, r2, r3
}
 8007074:	eeb0 0a47 	vmov.f32	s0, s14
 8007078:	eef0 0a67 	vmov.f32	s1, s15
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	fff00000 	.word	0xfff00000

08007088 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetMinusInfF(void)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 800708e:	4b06      	ldr	r3, [pc, #24]	@ (80070a8 <rtGetMinusInfF+0x20>)
 8007090:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	ee07 3a90 	vmov	s15, r3
}
 8007098:	eeb0 0a67 	vmov.f32	s0, s15
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	ff800000 	.word	0xff800000

080070ac <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetNaN(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80070b2:	2340      	movs	r3, #64	@ 0x40
 80070b4:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d10b      	bne.n	80070e0 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 80070c8:	f000 f820 	bl	800710c <rtGetNaNF>
 80070cc:	ee10 3a10 	vmov	r3, s0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7f9 fa41 	bl	8000558 <__aeabi_f2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80070de:	e007      	b.n	80070f0 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 80070e0:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <rtGetNaN+0x5c>)
 80070e2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 80070e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 80070f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80070f8:	eeb0 0a47 	vmov.f32	s0, s14
 80070fc:	eef0 0a67 	vmov.f32	s1, s15
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	fff80000 	.word	0xfff80000

0800710c <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetNaNF(void)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <rtGetNaNF+0x24>)
 800711a:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	ee07 3a90 	vmov	s15, r3
}
 8007122:	eeb0 0a67 	vmov.f32	s0, s15
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	ffc00000 	.word	0xffc00000

08007134 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
static void rt_InitInfAndNaN(size_t realSize)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 800713c:	f7ff ffb6 	bl	80070ac <rtGetNaN>
 8007140:	eeb0 7a40 	vmov.f32	s14, s0
 8007144:	eef0 7a60 	vmov.f32	s15, s1
 8007148:	4b16      	ldr	r3, [pc, #88]	@ (80071a4 <rt_InitInfAndNaN+0x70>)
 800714a:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800714e:	f7ff ffdd 	bl	800710c <rtGetNaNF>
 8007152:	eef0 7a40 	vmov.f32	s15, s0
 8007156:	4b14      	ldr	r3, [pc, #80]	@ (80071a8 <rt_InitInfAndNaN+0x74>)
 8007158:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 800715c:	f7ff ff24 	bl	8006fa8 <rtGetInf>
 8007160:	eeb0 7a40 	vmov.f32	s14, s0
 8007164:	eef0 7a60 	vmov.f32	s15, s1
 8007168:	4b10      	ldr	r3, [pc, #64]	@ (80071ac <rt_InitInfAndNaN+0x78>)
 800716a:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 800716e:	f7ff ff4b 	bl	8007008 <rtGetInfF>
 8007172:	eef0 7a40 	vmov.f32	s15, s0
 8007176:	4b0e      	ldr	r3, [pc, #56]	@ (80071b0 <rt_InitInfAndNaN+0x7c>)
 8007178:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 800717c:	f7ff ff54 	bl	8007028 <rtGetMinusInf>
 8007180:	eeb0 7a40 	vmov.f32	s14, s0
 8007184:	eef0 7a60 	vmov.f32	s15, s1
 8007188:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <rt_InitInfAndNaN+0x80>)
 800718a:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 800718e:	f7ff ff7b 	bl	8007088 <rtGetMinusInfF>
 8007192:	eef0 7a40 	vmov.f32	s15, s0
 8007196:	4b08      	ldr	r3, [pc, #32]	@ (80071b8 <rt_InitInfAndNaN+0x84>)
 8007198:	edc3 7a00 	vstr	s15, [r3]
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000a78 	.word	0x20000a78
 80071a8:	20000a88 	.word	0x20000a88
 80071ac:	20000a68 	.word	0x20000a68
 80071b0:	20000a80 	.word	0x20000a80
 80071b4:	20000a70 	.word	0x20000a70
 80071b8:	20000a84 	.word	0x20000a84

080071bc <rt_ertODEUpdateContinuousStates>:
/*
 * This function updates continuous states using the ODE5 fixed-step
 * solver algorithm
 */
static void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )
{
 80071bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071c0:	b0a1      	sub	sp, #132	@ 0x84
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
      0.0 },

    { 35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0 }
  };

  time_T t = rtsiGetT(si);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  time_T tnew = rtsiGetSolverStopTime(si);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80071da:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  time_T h = rtsiGetStepSize(si);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
  real_T *x = rtsiGetContStates(si);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ODE5_IntgData *id = (ODE5_IntgData *)rtsiGetSolverData(si);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  real_T *y = id->y;
 80071fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	657b      	str	r3, [r7, #84]	@ 0x54
  real_T *f0 = id->f[0];
 8007200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	653b      	str	r3, [r7, #80]	@ 0x50
  real_T *f1 = id->f[1];
 8007206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  real_T *f2 = id->f[2];
 800720c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	64bb      	str	r3, [r7, #72]	@ 0x48
  real_T *f3 = id->f[3];
 8007212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	647b      	str	r3, [r7, #68]	@ 0x44
  real_T *f4 = id->f[4];
 8007218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	643b      	str	r3, [r7, #64]	@ 0x40
  real_T *f5 = id->f[5];
 800721e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  real_T hB[6];
  int_T i;
  int_T nXc = 6;
 8007224:	2306      	movs	r3, #6
 8007226:	63bb      	str	r3, [r7, #56]	@ 0x38
  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]

  /* Save the state values at time t in y, we'll use x as ynew. */
  (void) memcpy(y, x,
                (uint_T)nXc*sizeof(real_T));
 8007230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  (void) memcpy(y, x,
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	461a      	mov	r2, r3
 8007236:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8007238:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800723a:	f005 fc3e 	bl	800caba <memcpy>

  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */
  /* f0 = f(t,y) */
  rtsiSetdX(si, f0);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007242:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007244:	601a      	str	r2, [r3, #0]
  dynamic_8_g_derivatives();
 8007246:	f003 fb6d 	bl	800a924 <dynamic_8_g_derivatives>

  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */
  hB[0] = h * rt_ODE5_B[0][0];
 800724a:	4b78      	ldr	r3, [pc, #480]	@ (800742c <rt_ertODEUpdateContinuousStates+0x270>)
 800724c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007250:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007254:	f7f9 f9d8 	bl	8000608 <__aeabi_dmul>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for (i = 0; i < nXc; i++) {
 8007260:	2300      	movs	r3, #0
 8007262:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007264:	e024      	b.n	80072b0 <rt_ertODEUpdateContinuousStates+0xf4>
    x[i] = y[i] + (f0[i]*hB[0]);
 8007266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800726c:	4413      	add	r3, r2
 800726e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007272:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007278:	4413      	add	r3, r2
 800727a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800727e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007282:	f7f9 f9c1 	bl	8000608 <__aeabi_dmul>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4610      	mov	r0, r2
 800728c:	4619      	mov	r1, r3
 800728e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007294:	18d6      	adds	r6, r2, r3
 8007296:	4602      	mov	r2, r0
 8007298:	460b      	mov	r3, r1
 800729a:	4620      	mov	r0, r4
 800729c:	4629      	mov	r1, r5
 800729e:	f7f8 fffd 	bl	800029c <__adddf3>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 80072aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072ac:	3301      	adds	r3, #1
 80072ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	429a      	cmp	r2, r3
 80072b6:	dbd6      	blt.n	8007266 <rt_ertODEUpdateContinuousStates+0xaa>
  }

  rtsiSetT(si, t + h*rt_ODE5_A[0]);
 80072b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007430 <rt_ertODEUpdateContinuousStates+0x274>)
 80072ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80072c2:	f7f9 f9a1 	bl	8000608 <__aeabi_dmul>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d2:	681c      	ldr	r4, [r3, #0]
 80072d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80072d8:	f7f8 ffe0 	bl	800029c <__adddf3>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	e9c4 2300 	strd	r2, r3, [r4]
  rtsiSetdX(si, f1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072ea:	601a      	str	r2, [r3, #0]
  dynamic_8_g_step();
 80072ec:	f000 fb1c 	bl	8007928 <dynamic_8_g_step>
  dynamic_8_g_derivatives();
 80072f0:	f003 fb18 	bl	800a924 <dynamic_8_g_derivatives>

  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */
  for (i = 0; i <= 1; i++) {
 80072f4:	2300      	movs	r3, #0
 80072f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072f8:	e016      	b.n	8007328 <rt_ertODEUpdateContinuousStates+0x16c>
    hB[i] = h * rt_ODE5_B[1][i];
 80072fa:	4a4c      	ldr	r2, [pc, #304]	@ (800742c <rt_ertODEUpdateContinuousStates+0x270>)
 80072fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072fe:	3306      	adds	r3, #6
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	4413      	add	r3, r2
 8007304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007308:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800730c:	f7f9 f97c 	bl	8000608 <__aeabi_dmul>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007316:	00c9      	lsls	r1, r1, #3
 8007318:	3180      	adds	r1, #128	@ 0x80
 800731a:	4439      	add	r1, r7
 800731c:	3978      	subs	r1, #120	@ 0x78
 800731e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 1; i++) {
 8007322:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007324:	3301      	adds	r3, #1
 8007326:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007328:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800732a:	2b01      	cmp	r3, #1
 800732c:	dde5      	ble.n	80072fa <rt_ertODEUpdateContinuousStates+0x13e>
  }

  for (i = 0; i < nXc; i++) {
 800732e:	2300      	movs	r3, #0
 8007330:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007332:	e038      	b.n	80073a6 <rt_ertODEUpdateContinuousStates+0x1ea>
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);
 8007334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800733a:	4413      	add	r3, r2
 800733c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007340:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007346:	4413      	add	r3, r2
 8007348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800734c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007350:	f7f9 f95a 	bl	8000608 <__aeabi_dmul>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4690      	mov	r8, r2
 800735a:	4699      	mov	r9, r3
 800735c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007362:	4413      	add	r3, r2
 8007364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007368:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800736c:	f7f9 f94c 	bl	8000608 <__aeabi_dmul>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f8 ff90 	bl	800029c <__adddf3>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4610      	mov	r0, r2
 8007382:	4619      	mov	r1, r3
 8007384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800738a:	18d6      	adds	r6, r2, r3
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4620      	mov	r0, r4
 8007392:	4629      	mov	r1, r5
 8007394:	f7f8 ff82 	bl	800029c <__adddf3>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 80073a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073a2:	3301      	adds	r3, #1
 80073a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073aa:	429a      	cmp	r2, r3
 80073ac:	dbc2      	blt.n	8007334 <rt_ertODEUpdateContinuousStates+0x178>
  }

  rtsiSetT(si, t + h*rt_ODE5_A[1]);
 80073ae:	4b20      	ldr	r3, [pc, #128]	@ (8007430 <rt_ertODEUpdateContinuousStates+0x274>)
 80073b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80073b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80073b8:	f7f9 f926 	bl	8000608 <__aeabi_dmul>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4610      	mov	r0, r2
 80073c2:	4619      	mov	r1, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073c8:	681c      	ldr	r4, [r3, #0]
 80073ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80073ce:	f7f8 ff65 	bl	800029c <__adddf3>
 80073d2:	4602      	mov	r2, r0
 80073d4:	460b      	mov	r3, r1
 80073d6:	e9c4 2300 	strd	r2, r3, [r4]
  rtsiSetdX(si, f2);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e0:	601a      	str	r2, [r3, #0]
  dynamic_8_g_step();
 80073e2:	f000 faa1 	bl	8007928 <dynamic_8_g_step>
  dynamic_8_g_derivatives();
 80073e6:	f003 fa9d 	bl	800a924 <dynamic_8_g_derivatives>

  /* f(:,4) = feval(odefile, t + hA(3), y + f*hB(:,3), args(:)(*)); */
  for (i = 0; i <= 2; i++) {
 80073ea:	2300      	movs	r3, #0
 80073ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073ee:	e016      	b.n	800741e <rt_ertODEUpdateContinuousStates+0x262>
    hB[i] = h * rt_ODE5_B[2][i];
 80073f0:	4a0e      	ldr	r2, [pc, #56]	@ (800742c <rt_ertODEUpdateContinuousStates+0x270>)
 80073f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073f4:	330c      	adds	r3, #12
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007402:	f7f9 f901 	bl	8000608 <__aeabi_dmul>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800740c:	00c9      	lsls	r1, r1, #3
 800740e:	3180      	adds	r1, #128	@ 0x80
 8007410:	4439      	add	r1, r7
 8007412:	3978      	subs	r1, #120	@ 0x78
 8007414:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 2; i++) {
 8007418:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800741a:	3301      	adds	r3, #1
 800741c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800741e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007420:	2b02      	cmp	r3, #2
 8007422:	dde5      	ble.n	80073f0 <rt_ertODEUpdateContinuousStates+0x234>
  }

  for (i = 0; i < nXc; i++) {
 8007424:	2300      	movs	r3, #0
 8007426:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007428:	e051      	b.n	80074ce <rt_ertODEUpdateContinuousStates+0x312>
 800742a:	bf00      	nop
 800742c:	080109c8 	.word	0x080109c8
 8007430:	08010ae8 	.word	0x08010ae8
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);
 8007434:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800743a:	4413      	add	r3, r2
 800743c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007446:	4413      	add	r3, r2
 8007448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800744c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007450:	f7f9 f8da 	bl	8000608 <__aeabi_dmul>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4690      	mov	r8, r2
 800745a:	4699      	mov	r9, r3
 800745c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007462:	4413      	add	r3, r2
 8007464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007468:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800746c:	f7f9 f8cc 	bl	8000608 <__aeabi_dmul>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f8 ff10 	bl	800029c <__adddf3>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4690      	mov	r8, r2
 8007482:	4699      	mov	r9, r3
 8007484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800748a:	4413      	add	r3, r2
 800748c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007494:	f7f9 f8b8 	bl	8000608 <__aeabi_dmul>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4640      	mov	r0, r8
 800749e:	4649      	mov	r1, r9
 80074a0:	f7f8 fefc 	bl	800029c <__adddf3>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80074b2:	18d6      	adds	r6, r2, r3
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4620      	mov	r0, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	f7f8 feee 	bl	800029c <__adddf3>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 80074c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074ca:	3301      	adds	r3, #1
 80074cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80074ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	429a      	cmp	r2, r3
 80074d4:	dbae      	blt.n	8007434 <rt_ertODEUpdateContinuousStates+0x278>
  }

  rtsiSetT(si, t + h*rt_ODE5_A[2]);
 80074d6:	4b70      	ldr	r3, [pc, #448]	@ (8007698 <rt_ertODEUpdateContinuousStates+0x4dc>)
 80074d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80074dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80074e0:	f7f9 f892 	bl	8000608 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4610      	mov	r0, r2
 80074ea:	4619      	mov	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074f0:	681c      	ldr	r4, [r3, #0]
 80074f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80074f6:	f7f8 fed1 	bl	800029c <__adddf3>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9c4 2300 	strd	r2, r3, [r4]
  rtsiSetdX(si, f3);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007508:	601a      	str	r2, [r3, #0]
  dynamic_8_g_step();
 800750a:	f000 fa0d 	bl	8007928 <dynamic_8_g_step>
  dynamic_8_g_derivatives();
 800750e:	f003 fa09 	bl	800a924 <dynamic_8_g_derivatives>

  /* f(:,5) = feval(odefile, t + hA(4), y + f*hB(:,4), args(:)(*)); */
  for (i = 0; i <= 3; i++) {
 8007512:	2300      	movs	r3, #0
 8007514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007516:	e016      	b.n	8007546 <rt_ertODEUpdateContinuousStates+0x38a>
    hB[i] = h * rt_ODE5_B[3][i];
 8007518:	4a60      	ldr	r2, [pc, #384]	@ (800769c <rt_ertODEUpdateContinuousStates+0x4e0>)
 800751a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800751c:	3312      	adds	r3, #18
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4413      	add	r3, r2
 8007522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007526:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800752a:	f7f9 f86d 	bl	8000608 <__aeabi_dmul>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007534:	00c9      	lsls	r1, r1, #3
 8007536:	3180      	adds	r1, #128	@ 0x80
 8007538:	4439      	add	r1, r7
 800753a:	3978      	subs	r1, #120	@ 0x78
 800753c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 3; i++) {
 8007540:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007542:	3301      	adds	r3, #1
 8007544:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007548:	2b03      	cmp	r3, #3
 800754a:	dde5      	ble.n	8007518 <rt_ertODEUpdateContinuousStates+0x35c>
  }

  for (i = 0; i < nXc; i++) {
 800754c:	2300      	movs	r3, #0
 800754e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007550:	e060      	b.n	8007614 <rt_ertODEUpdateContinuousStates+0x458>
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 8007552:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007558:	4413      	add	r3, r2
 800755a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800755e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007564:	4413      	add	r3, r2
 8007566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800756a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4690      	mov	r8, r2
 8007578:	4699      	mov	r9, r3
 800757a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007580:	4413      	add	r3, r2
 8007582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007586:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800758a:	f7f9 f83d 	bl	8000608 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f8 fe81 	bl	800029c <__adddf3>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4690      	mov	r8, r2
 80075a0:	4699      	mov	r9, r3
 80075a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a8:	4413      	add	r3, r2
 80075aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b2:	f7f9 f829 	bl	8000608 <__aeabi_dmul>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	f7f8 fe6d 	bl	800029c <__adddf3>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4690      	mov	r8, r2
 80075c8:	4699      	mov	r9, r3
                   f3[i]*hB[3]);
 80075ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075d0:	4413      	add	r3, r2
 80075d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075da:	f7f9 f815 	bl	8000608 <__aeabi_dmul>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 80075e2:	4640      	mov	r0, r8
 80075e4:	4649      	mov	r1, r9
 80075e6:	f7f8 fe59 	bl	800029c <__adddf3>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4610      	mov	r0, r2
 80075f0:	4619      	mov	r1, r3
 80075f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075f8:	18d6      	adds	r6, r2, r3
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f8 fe4b 	bl	800029c <__adddf3>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 800760e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007610:	3301      	adds	r3, #1
 8007612:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007614:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	429a      	cmp	r2, r3
 800761a:	db9a      	blt.n	8007552 <rt_ertODEUpdateContinuousStates+0x396>
  }

  rtsiSetT(si, t + h*rt_ODE5_A[3]);
 800761c:	4b1e      	ldr	r3, [pc, #120]	@ (8007698 <rt_ertODEUpdateContinuousStates+0x4dc>)
 800761e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007622:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007626:	f7f8 ffef 	bl	8000608 <__aeabi_dmul>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007636:	681c      	ldr	r4, [r3, #0]
 8007638:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800763c:	f7f8 fe2e 	bl	800029c <__adddf3>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	e9c4 2300 	strd	r2, r3, [r4]
  rtsiSetdX(si, f4);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800764c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800764e:	601a      	str	r2, [r3, #0]
  dynamic_8_g_step();
 8007650:	f000 f96a 	bl	8007928 <dynamic_8_g_step>
  dynamic_8_g_derivatives();
 8007654:	f003 f966 	bl	800a924 <dynamic_8_g_derivatives>

  /* f(:,6) = feval(odefile, t + hA(5), y + f*hB(:,5), args(:)(*)); */
  for (i = 0; i <= 4; i++) {
 8007658:	2300      	movs	r3, #0
 800765a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800765c:	e016      	b.n	800768c <rt_ertODEUpdateContinuousStates+0x4d0>
    hB[i] = h * rt_ODE5_B[4][i];
 800765e:	4a0f      	ldr	r2, [pc, #60]	@ (800769c <rt_ertODEUpdateContinuousStates+0x4e0>)
 8007660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007662:	3318      	adds	r3, #24
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4413      	add	r3, r2
 8007668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800766c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007670:	f7f8 ffca 	bl	8000608 <__aeabi_dmul>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800767a:	00c9      	lsls	r1, r1, #3
 800767c:	3180      	adds	r1, #128	@ 0x80
 800767e:	4439      	add	r1, r7
 8007680:	3978      	subs	r1, #120	@ 0x78
 8007682:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 4; i++) {
 8007686:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007688:	3301      	adds	r3, #1
 800768a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800768c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800768e:	2b04      	cmp	r3, #4
 8007690:	dde5      	ble.n	800765e <rt_ertODEUpdateContinuousStates+0x4a2>
  }

  for (i = 0; i < nXc; i++) {
 8007692:	2300      	movs	r3, #0
 8007694:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007696:	e078      	b.n	800778a <rt_ertODEUpdateContinuousStates+0x5ce>
 8007698:	08010ae8 	.word	0x08010ae8
 800769c:	080109c8 	.word	0x080109c8
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 80076a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076a6:	4413      	add	r3, r2
 80076a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076b2:	4413      	add	r3, r2
 80076b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076bc:	f7f8 ffa4 	bl	8000608 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4690      	mov	r8, r2
 80076c6:	4699      	mov	r9, r3
 80076c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076ce:	4413      	add	r3, r2
 80076d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076d8:	f7f8 ff96 	bl	8000608 <__aeabi_dmul>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4640      	mov	r0, r8
 80076e2:	4649      	mov	r1, r9
 80076e4:	f7f8 fdda 	bl	800029c <__adddf3>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4690      	mov	r8, r2
 80076ee:	4699      	mov	r9, r3
 80076f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f6:	4413      	add	r3, r2
 80076f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007700:	f7f8 ff82 	bl	8000608 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4640      	mov	r0, r8
 800770a:	4649      	mov	r1, r9
 800770c:	f7f8 fdc6 	bl	800029c <__adddf3>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4690      	mov	r8, r2
 8007716:	4699      	mov	r9, r3
                   f3[i]*hB[3] + f4[i]*hB[4]);
 8007718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800771e:	4413      	add	r3, r2
 8007720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007724:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007728:	f7f8 ff6e 	bl	8000608 <__aeabi_dmul>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f7f8 fdb2 	bl	800029c <__adddf3>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4690      	mov	r8, r2
 800773e:	4699      	mov	r9, r3
                   f3[i]*hB[3] + f4[i]*hB[4]);
 8007740:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007746:	4413      	add	r3, r2
 8007748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800774c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007750:	f7f8 ff5a 	bl	8000608 <__aeabi_dmul>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f8 fd9e 	bl	800029c <__adddf3>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4610      	mov	r0, r2
 8007766:	4619      	mov	r1, r3
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 8007768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800776e:	18d6      	adds	r6, r2, r3
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f8 fd90 	bl	800029c <__adddf3>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 8007784:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007786:	3301      	adds	r3, #1
 8007788:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800778a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	429a      	cmp	r2, r3
 8007790:	db86      	blt.n	80076a0 <rt_ertODEUpdateContinuousStates+0x4e4>
  }

  rtsiSetT(si, tnew);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800779c:	e9c1 2300 	strd	r2, r3, [r1]
  rtsiSetdX(si, f5);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077a6:	601a      	str	r2, [r3, #0]
  dynamic_8_g_step();
 80077a8:	f000 f8be 	bl	8007928 <dynamic_8_g_step>
  dynamic_8_g_derivatives();
 80077ac:	f003 f8ba 	bl	800a924 <dynamic_8_g_derivatives>

  /* tnew = t + hA(6);
     ynew = y + f*hB(:,6); */
  for (i = 0; i <= 5; i++) {
 80077b0:	2300      	movs	r3, #0
 80077b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077b4:	e016      	b.n	80077e4 <rt_ertODEUpdateContinuousStates+0x628>
    hB[i] = h * rt_ODE5_B[5][i];
 80077b6:	4a5a      	ldr	r2, [pc, #360]	@ (8007920 <rt_ertODEUpdateContinuousStates+0x764>)
 80077b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077ba:	331e      	adds	r3, #30
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4413      	add	r3, r2
 80077c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80077c8:	f7f8 ff1e 	bl	8000608 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077d2:	00c9      	lsls	r1, r1, #3
 80077d4:	3180      	adds	r1, #128	@ 0x80
 80077d6:	4439      	add	r1, r7
 80077d8:	3978      	subs	r1, #120	@ 0x78
 80077da:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i <= 5; i++) {
 80077de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077e0:	3301      	adds	r3, #1
 80077e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	dde5      	ble.n	80077b6 <rt_ertODEUpdateContinuousStates+0x5fa>
  }

  for (i = 0; i < nXc; i++) {
 80077ea:	2300      	movs	r3, #0
 80077ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077ee:	e088      	b.n	8007902 <rt_ertODEUpdateContinuousStates+0x746>
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 80077f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077f6:	4413      	add	r3, r2
 80077f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80077fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007802:	4413      	add	r3, r2
 8007804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800780c:	f7f8 fefc 	bl	8000608 <__aeabi_dmul>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4690      	mov	r8, r2
 8007816:	4699      	mov	r9, r3
 8007818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800781e:	4413      	add	r3, r2
 8007820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007824:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007828:	f7f8 feee 	bl	8000608 <__aeabi_dmul>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	f7f8 fd32 	bl	800029c <__adddf3>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4690      	mov	r8, r2
 800783e:	4699      	mov	r9, r3
 8007840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007846:	4413      	add	r3, r2
 8007848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800784c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007850:	f7f8 feda 	bl	8000608 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7f8 fd1e 	bl	800029c <__adddf3>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4690      	mov	r8, r2
 8007866:	4699      	mov	r9, r3
                   f3[i]*hB[3] + f4[i]*hB[4] + f5[i]*hB[5]);
 8007868:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800786e:	4413      	add	r3, r2
 8007870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007878:	f7f8 fec6 	bl	8000608 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 8007880:	4640      	mov	r0, r8
 8007882:	4649      	mov	r1, r9
 8007884:	f7f8 fd0a 	bl	800029c <__adddf3>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4690      	mov	r8, r2
 800788e:	4699      	mov	r9, r3
                   f3[i]*hB[3] + f4[i]*hB[4] + f5[i]*hB[5]);
 8007890:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007896:	4413      	add	r3, r2
 8007898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800789c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078a0:	f7f8 feb2 	bl	8000608 <__aeabi_dmul>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4640      	mov	r0, r8
 80078aa:	4649      	mov	r1, r9
 80078ac:	f7f8 fcf6 	bl	800029c <__adddf3>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	4699      	mov	r9, r3
 80078b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80078be:	4413      	add	r3, r2
 80078c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80078c8:	f7f8 fe9e 	bl	8000608 <__aeabi_dmul>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4640      	mov	r0, r8
 80078d2:	4649      	mov	r1, r9
 80078d4:	f7f8 fce2 	bl	800029c <__adddf3>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4610      	mov	r0, r2
 80078de:	4619      	mov	r1, r3
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2] +
 80078e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078e6:	18d6      	adds	r6, r2, r3
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fcd4 	bl	800029c <__adddf3>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	e9c6 2300 	strd	r2, r3, [r6]
  for (i = 0; i < nXc; i++) {
 80078fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078fe:	3301      	adds	r3, #1
 8007900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007902:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007906:	429a      	cmp	r2, r3
 8007908:	f6ff af72 	blt.w	80077f0 <rt_ertODEUpdateContinuousStates+0x634>
  }

  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	701a      	strb	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	3784      	adds	r7, #132	@ 0x84
 8007918:	46bd      	mov	sp, r7
 800791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800791e:	bf00      	nop
 8007920:	080109c8 	.word	0x080109c8
 8007924:	00000000 	.word	0x00000000

08007928 <dynamic_8_g_step>:

/* Model step function */
void dynamic_8_g_step(void)
{
 8007928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800792c:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
 8007930:	af00      	add	r7, sp, #0
  if (rtmIsMajorTimeStep(rtM)) {
 8007932:	4b6f      	ldr	r3, [pc, #444]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 8007934:	f893 32a5 	ldrb.w	r3, [r3, #677]	@ 0x2a5
 8007938:	2b01      	cmp	r3, #1
 800793a:	d110      	bne.n	800795e <dynamic_8_g_step+0x36>
    /* set solver stop time */
    rtsiSetSolverStopTime(&rtM->solverInfo,((rtM->Timing.clockTick0+1)*
 800793c:	4b6c      	ldr	r3, [pc, #432]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 800793e:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 8007942:	3301      	adds	r3, #1
 8007944:	4618      	mov	r0, r3
 8007946:	f7f8 fde5 	bl	8000514 <__aeabi_ui2d>
 800794a:	4b69      	ldr	r3, [pc, #420]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 800794c:	e9d3 23a6 	ldrd	r2, r3, [r3, #664]	@ 0x298
 8007950:	4c67      	ldr	r4, [pc, #412]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 8007952:	f7f8 fe59 	bl	8000608 <__aeabi_dmul>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	e9c4 2308 	strd	r2, r3, [r4, #32]
      rtM->Timing.stepSize0));
  }                                    /* end MajorTimeStep */

  /* Update absolute time of base rate at minor time step */
  if (rtmIsMinorTimeStep(rtM)) {
 800795e:	4b64      	ldr	r3, [pc, #400]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 8007960:	f893 32a5 	ldrb.w	r3, [r3, #677]	@ 0x2a5
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10a      	bne.n	800797e <dynamic_8_g_step+0x56>
    rtM->Timing.t[0] = rtsiGetT(&rtM->solverInfo);
 8007968:	4b61      	ldr	r3, [pc, #388]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 800796a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	4b5f      	ldr	r3, [pc, #380]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 8007972:	f8d3 12a8 	ldr.w	r1, [r3, #680]	@ 0x2a8
 8007976:	e9d2 2300 	ldrd	r2, r3, [r2]
 800797a:	e9c1 2300 	strd	r2, r3, [r1]
    int32_T p3;

    /* Sin: '<Root>/Sine Wave1' incorporates:
     *  Sin: '<Root>/Sine Wave'
     */
    w1 = rtM->Timing.t[0];
 800797e:	4b5c      	ldr	r3, [pc, #368]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 8007980:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8

    /* Sin: '<Root>/Sine Wave1' */
    rtDW.SineWave1 = sin(0.20943951023931953 * w1) * 0.5 + 1.5;
 800798c:	a354      	add	r3, pc, #336	@ (adr r3, 8007ae0 <dynamic_8_g_step+0x1b8>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007996:	f7f8 fe37 	bl	8000608 <__aeabi_dmul>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	ec43 2b17 	vmov	d7, r2, r3
 80079a2:	eeb0 0a47 	vmov.f32	s0, s14
 80079a6:	eef0 0a67 	vmov.f32	s1, s15
 80079aa:	f007 fdb1 	bl	800f510 <sin>
 80079ae:	ec51 0b10 	vmov	r0, r1, d0
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	4b4f      	ldr	r3, [pc, #316]	@ (8007af4 <dynamic_8_g_step+0x1cc>)
 80079b8:	f7f8 fe26 	bl	8000608 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4610      	mov	r0, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	4b4b      	ldr	r3, [pc, #300]	@ (8007af8 <dynamic_8_g_step+0x1d0>)
 80079ca:	f7f8 fc67 	bl	800029c <__adddf3>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4610      	mov	r0, r2
 80079d4:	4619      	mov	r1, r3
 80079d6:	4b49      	ldr	r3, [pc, #292]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 80079d8:	e9c3 013c 	strd	r0, r1, [r3, #240]	@ 0xf0

    /* Sin: '<Root>/Sine Wave' */
    rtDW.SineWave = sin(0.41887902047863906 * w1) * 0.5 + 1.2;
 80079dc:	a342      	add	r3, pc, #264	@ (adr r3, 8007ae8 <dynamic_8_g_step+0x1c0>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 80079e6:	f7f8 fe0f 	bl	8000608 <__aeabi_dmul>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	ec43 2b17 	vmov	d7, r2, r3
 80079f2:	eeb0 0a47 	vmov.f32	s0, s14
 80079f6:	eef0 0a67 	vmov.f32	s1, s15
 80079fa:	f007 fd89 	bl	800f510 <sin>
 80079fe:	ec51 0b10 	vmov	r0, r1, d0
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	4b3b      	ldr	r3, [pc, #236]	@ (8007af4 <dynamic_8_g_step+0x1cc>)
 8007a08:	f7f8 fdfe 	bl	8000608 <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4610      	mov	r0, r2
 8007a12:	4619      	mov	r1, r3
 8007a14:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8007a18:	4b39      	ldr	r3, [pc, #228]	@ (8007b00 <dynamic_8_g_step+0x1d8>)
 8007a1a:	f7f8 fc3f 	bl	800029c <__adddf3>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4610      	mov	r0, r2
 8007a24:	4619      	mov	r1, r3
 8007a26:	4b35      	ldr	r3, [pc, #212]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a28:	e9c3 013e 	strd	r0, r1, [r3, #248]	@ 0xf8

    /* Derivative: '<S1>/Derivative1' incorporates:
     *  Derivative: '<S1>/Derivative'
     *  Derivative: '<S1>/Derivative2'
     */
    w1 = rtM->Timing.t[0];
 8007a2c:	4b30      	ldr	r3, [pc, #192]	@ (8007af0 <dynamic_8_g_step+0x1c8>)
 8007a2e:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    if ((rtDW.TimeStampA >= w1) && (rtDW.TimeStampB >= w1)) {
 8007a3a:	4b30      	ldr	r3, [pc, #192]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a3c:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 8007a40:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007a44:	f7f9 f85c 	bl	8000b00 <__aeabi_dcmple>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01f      	beq.n	8007a8e <dynamic_8_g_step+0x166>
 8007a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a50:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8007a54:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007a58:	f7f9 f852 	bl	8000b00 <__aeabi_dcmple>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d015      	beq.n	8007a8e <dynamic_8_g_step+0x166>
      /* Derivative: '<S1>/Derivative1' */
      rtDW.Derivative1[0] = 0.0;
 8007a62:	4926      	ldr	r1, [pc, #152]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.Derivative1[1] = 0.0;
 8007a70:	4922      	ldr	r1, [pc, #136]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      rtDW.Derivative1[2] = 0.0;
 8007a7e:	491f      	ldr	r1, [pc, #124]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007a8c:	e0a3      	b.n	8007bd6 <dynamic_8_g_step+0x2ae>
    } else {
      w2 = rtDW.TimeStampA;
 8007a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007a90:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 8007a94:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      lastU = &rtDW.LastUAtTimeA;
 8007a98:	4b1a      	ldr	r3, [pc, #104]	@ (8007b04 <dynamic_8_g_step+0x1dc>)
 8007a9a:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      if (rtDW.TimeStampA < rtDW.TimeStampB) {
 8007a9e:	4b17      	ldr	r3, [pc, #92]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007aa0:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 8007aa4:	4b15      	ldr	r3, [pc, #84]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007aa6:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8007aaa:	f7f9 f81f 	bl	8000aec <__aeabi_dcmplt>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d02b      	beq.n	8007b0c <dynamic_8_g_step+0x1e4>
        if (rtDW.TimeStampB < w1) {
 8007ab4:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007ab6:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8007aba:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007abe:	f7f9 f833 	bl	8000b28 <__aeabi_dcmpgt>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d033      	beq.n	8007b30 <dynamic_8_g_step+0x208>
          w2 = rtDW.TimeStampB;
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <dynamic_8_g_step+0x1d4>)
 8007aca:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8007ace:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
          lastU = &rtDW.LastUAtTimeB;
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <dynamic_8_g_step+0x1e0>)
 8007ad4:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8007ad8:	e02a      	b.n	8007b30 <dynamic_8_g_step+0x208>
 8007ada:	bf00      	nop
 8007adc:	f3af 8000 	nop.w
 8007ae0:	f37bebd5 	.word	0xf37bebd5
 8007ae4:	3fcacee9 	.word	0x3fcacee9
 8007ae8:	f37bebd5 	.word	0xf37bebd5
 8007aec:	3fdacee9 	.word	0x3fdacee9
 8007af0:	200007a8 	.word	0x200007a8
 8007af4:	3fe00000 	.word	0x3fe00000
 8007af8:	3ff80000 	.word	0x3ff80000
 8007afc:	20000608 	.word	0x20000608
 8007b00:	3ff33333 	.word	0x3ff33333
 8007b04:	20000668 	.word	0x20000668
 8007b08:	20000680 	.word	0x20000680
        }
      } else {
        if (rtDW.TimeStampA >= w1) {
 8007b0c:	4b58      	ldr	r3, [pc, #352]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007b0e:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	@ 0x100
 8007b12:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007b16:	f7f8 fff3 	bl	8000b00 <__aeabi_dcmple>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <dynamic_8_g_step+0x208>
          w2 = rtDW.TimeStampB;
 8007b20:	4b53      	ldr	r3, [pc, #332]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007b22:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8007b26:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
          lastU = &rtDW.LastUAtTimeB;
 8007b2a:	4b52      	ldr	r3, [pc, #328]	@ (8007c74 <dynamic_8_g_step+0x34c>)
 8007b2c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        }
      }

      w2 = w1 - w2;
 8007b30:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007b34:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007b38:	f7f8 fbae 	bl	8000298 <__aeabi_dsub>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0

      /* Derivative: '<S1>/Derivative1' incorporates:
       *  Constant: '<Root>/Constant'
       */
      rtDW.Derivative1[0] = (rtDW.SineWave1 - (*lastU)[0]) / w2;
 8007b44:	4b4a      	ldr	r3, [pc, #296]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007b46:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	@ 0xf0
 8007b4a:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fba1 	bl	8000298 <__aeabi_dsub>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007b62:	f7f8 fe7b 	bl	800085c <__aeabi_ddiv>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4b40      	ldr	r3, [pc, #256]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007b70:	e9c3 0100 	strd	r0, r1, [r3]
      rtDW.Derivative1[1] = (rtDW.SineWave - (*lastU)[1]) / w2;
 8007b74:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007b76:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 8007b7a:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007b7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007b82:	f7f8 fb89 	bl	8000298 <__aeabi_dsub>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007b92:	f7f8 fe63 	bl	800085c <__aeabi_ddiv>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4b34      	ldr	r3, [pc, #208]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007ba0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      rtDW.Derivative1[2] = (0.0 - (*lastU)[2]) / w2;
 8007ba4:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007ba8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007bac:	f04f 0000 	mov.w	r0, #0
 8007bb0:	f04f 0100 	mov.w	r1, #0
 8007bb4:	f7f8 fb70 	bl	8000298 <__aeabi_dsub>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007bc4:	f7f8 fe4a 	bl	800085c <__aeabi_ddiv>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4b27      	ldr	r3, [pc, #156]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007bd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
    }

    /* End of Derivative: '<S1>/Derivative1' */

    /* Derivative: '<S1>/Derivative2' */
    if ((rtDW.TimeStampA_m >= w1) && (rtDW.TimeStampB_i >= w1)) {
 8007bd6:	4b26      	ldr	r3, [pc, #152]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007bd8:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	@ 0x110
 8007bdc:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007be0:	f7f8 ff8e 	bl	8000b00 <__aeabi_dcmple>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01c      	beq.n	8007c24 <dynamic_8_g_step+0x2fc>
 8007bea:	4b21      	ldr	r3, [pc, #132]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007bec:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 8007bf0:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007bf4:	f7f8 ff84 	bl	8000b00 <__aeabi_dcmple>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d012      	beq.n	8007c24 <dynamic_8_g_step+0x2fc>
      rtb_Derivative2[0] = 0.0;
 8007bfe:	f04f 0200 	mov.w	r2, #0
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
      rtb_Derivative2[1] = 0.0;
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
      rtb_Derivative2[2] = 0.0;
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	e9c7 2394 	strd	r2, r3, [r7, #592]	@ 0x250
 8007c22:	e088      	b.n	8007d36 <dynamic_8_g_step+0x40e>
    } else {
      w2 = rtDW.TimeStampA_m;
 8007c24:	4b12      	ldr	r3, [pc, #72]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007c26:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	@ 0x110
 8007c2a:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      lastU = &rtDW.LastUAtTimeA_d;
 8007c2e:	4b12      	ldr	r3, [pc, #72]	@ (8007c78 <dynamic_8_g_step+0x350>)
 8007c30:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      if (rtDW.TimeStampA_m < rtDW.TimeStampB_i) {
 8007c34:	4b0e      	ldr	r3, [pc, #56]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007c36:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007c3c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 8007c40:	f7f8 ff54 	bl	8000aec <__aeabi_dcmplt>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01a      	beq.n	8007c80 <dynamic_8_g_step+0x358>
        if (rtDW.TimeStampB_i < w1) {
 8007c4a:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007c4c:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 8007c50:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007c54:	f7f8 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d022      	beq.n	8007ca4 <dynamic_8_g_step+0x37c>
          w2 = rtDW.TimeStampB_i;
 8007c5e:	4b04      	ldr	r3, [pc, #16]	@ (8007c70 <dynamic_8_g_step+0x348>)
 8007c60:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 8007c64:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
          lastU = &rtDW.LastUAtTimeB_o;
 8007c68:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <dynamic_8_g_step+0x354>)
 8007c6a:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8007c6e:	e019      	b.n	8007ca4 <dynamic_8_g_step+0x37c>
 8007c70:	20000608 	.word	0x20000608
 8007c74:	20000680 	.word	0x20000680
 8007c78:	20000698 	.word	0x20000698
 8007c7c:	200006b0 	.word	0x200006b0
        }
      } else {
        if (rtDW.TimeStampA_m >= w1) {
 8007c80:	4b6a      	ldr	r3, [pc, #424]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007c82:	e9d3 2344 	ldrd	r2, r3, [r3, #272]	@ 0x110
 8007c86:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007c8a:	f7f8 ff39 	bl	8000b00 <__aeabi_dcmple>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d007      	beq.n	8007ca4 <dynamic_8_g_step+0x37c>
          w2 = rtDW.TimeStampB_i;
 8007c94:	4b65      	ldr	r3, [pc, #404]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007c96:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 8007c9a:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
          lastU = &rtDW.LastUAtTimeB_o;
 8007c9e:	4b64      	ldr	r3, [pc, #400]	@ (8007e30 <dynamic_8_g_step+0x508>)
 8007ca0:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        }
      }

      w2 = w1 - w2;
 8007ca4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007ca8:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007cac:	f7f8 faf4 	bl	8000298 <__aeabi_dsub>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      rtb_Derivative2[0] = (rtDW.Derivative1[0] - (*lastU)[0]) / w2;
 8007cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cbe:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	f7f8 fae7 	bl	8000298 <__aeabi_dsub>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007cd6:	f7f8 fdc1 	bl	800085c <__aeabi_ddiv>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	e9c7 2390 	strd	r2, r3, [r7, #576]	@ 0x240
      rtb_Derivative2[1] = (rtDW.Derivative1[1] - (*lastU)[1]) / w2;
 8007ce2:	4b52      	ldr	r3, [pc, #328]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007ce4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007ce8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007cec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007cf0:	f7f8 fad2 	bl	8000298 <__aeabi_dsub>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007d00:	f7f8 fdac 	bl	800085c <__aeabi_ddiv>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
      rtb_Derivative2[2] = (rtDW.Derivative1[2] - (*lastU)[2]) / w2;
 8007d0c:	4b47      	ldr	r3, [pc, #284]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007d12:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007d16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007d1a:	f7f8 fabd 	bl	8000298 <__aeabi_dsub>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4610      	mov	r0, r2
 8007d24:	4619      	mov	r1, r3
 8007d26:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007d2a:	f7f8 fd97 	bl	800085c <__aeabi_ddiv>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	e9c7 2394 	strd	r2, r3, [r7, #592]	@ 0x250
     *  Constant: '<Root>/Constant'
     *  Inport: '<Root>/theta'
     *  Inport: '<Root>/x'
     *  Inport: '<Root>/y'
     */
    rtDW.Sum[0] = rtDW.SineWave1 - rtU.x;
 8007d36:	4b3d      	ldr	r3, [pc, #244]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d38:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	@ 0xf0
 8007d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e34 <dynamic_8_g_step+0x50c>)
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f7f8 faa9 	bl	8000298 <__aeabi_dsub>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4b37      	ldr	r3, [pc, #220]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d50:	e9c3 0106 	strd	r0, r1, [r3, #24]
    rtDW.Sum[1] = rtDW.SineWave - rtU.y;
 8007d54:	4b35      	ldr	r3, [pc, #212]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d56:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	@ 0xf8
 8007d5a:	4b36      	ldr	r3, [pc, #216]	@ (8007e34 <dynamic_8_g_step+0x50c>)
 8007d5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007d60:	f7f8 fa9a 	bl	8000298 <__aeabi_dsub>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d6e:	e9c3 0108 	strd	r0, r1, [r3, #32]
    rtDW.Sum[2] = 0.0 - rtU.theta;
 8007d72:	4b30      	ldr	r3, [pc, #192]	@ (8007e34 <dynamic_8_g_step+0x50c>)
 8007d74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007d78:	f04f 0000 	mov.w	r0, #0
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	f7f8 fa8a 	bl	8000298 <__aeabi_dsub>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d8e:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28

    /* Derivative: '<S1>/Derivative' */
    if ((rtDW.TimeStampA_o >= w1) && (rtDW.TimeStampB_g >= w1)) {
 8007d92:	4b26      	ldr	r3, [pc, #152]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007d94:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8007d98:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007d9c:	f7f8 feb0 	bl	8000b00 <__aeabi_dcmple>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d01c      	beq.n	8007de0 <dynamic_8_g_step+0x4b8>
 8007da6:	4b21      	ldr	r3, [pc, #132]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007da8:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8007dac:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007db0:	f7f8 fea6 	bl	8000b00 <__aeabi_dcmple>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d012      	beq.n	8007de0 <dynamic_8_g_step+0x4b8>
      rtb_Derivative_idx_0 = 0.0;
 8007dba:	f04f 0200 	mov.w	r2, #0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
      rtb_Derivative_idx_1 = 0.0;
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	f04f 0300 	mov.w	r3, #0
 8007dce:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
      rtb_Derivative_idx_2 = 0.0;
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
 8007dde:	e08a      	b.n	8007ef6 <dynamic_8_g_step+0x5ce>
    } else {
      w2 = rtDW.TimeStampA_o;
 8007de0:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007de2:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8007de6:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      lastU = &rtDW.LastUAtTimeA_k;
 8007dea:	4b13      	ldr	r3, [pc, #76]	@ (8007e38 <dynamic_8_g_step+0x510>)
 8007dec:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      if (rtDW.TimeStampA_o < rtDW.TimeStampB_g) {
 8007df0:	4b0e      	ldr	r3, [pc, #56]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007df2:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 8007df6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007df8:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8007dfc:	f7f8 fe76 	bl	8000aec <__aeabi_dcmplt>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01c      	beq.n	8007e40 <dynamic_8_g_step+0x518>
        if (rtDW.TimeStampB_g < w1) {
 8007e06:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007e08:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8007e0c:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007e10:	f7f8 fe8a 	bl	8000b28 <__aeabi_dcmpgt>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d024      	beq.n	8007e64 <dynamic_8_g_step+0x53c>
          w2 = rtDW.TimeStampB_g;
 8007e1a:	4b04      	ldr	r3, [pc, #16]	@ (8007e2c <dynamic_8_g_step+0x504>)
 8007e1c:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8007e20:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
          lastU = &rtDW.LastUAtTimeB_on;
 8007e24:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <dynamic_8_g_step+0x514>)
 8007e26:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8007e2a:	e01b      	b.n	8007e64 <dynamic_8_g_step+0x53c>
 8007e2c:	20000608 	.word	0x20000608
 8007e30:	200006b0 	.word	0x200006b0
 8007e34:	20000740 	.word	0x20000740
 8007e38:	200006c8 	.word	0x200006c8
 8007e3c:	200006e0 	.word	0x200006e0
        }
      } else {
        if (rtDW.TimeStampA_o >= w1) {
 8007e40:	4bbb      	ldr	r3, [pc, #748]	@ (8008130 <dynamic_8_g_step+0x808>)
 8007e42:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 8007e46:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007e4a:	f7f8 fe59 	bl	8000b00 <__aeabi_dcmple>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <dynamic_8_g_step+0x53c>
          w2 = rtDW.TimeStampB_g;
 8007e54:	4bb6      	ldr	r3, [pc, #728]	@ (8008130 <dynamic_8_g_step+0x808>)
 8007e56:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8007e5a:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
          lastU = &rtDW.LastUAtTimeB_on;
 8007e5e:	4bb5      	ldr	r3, [pc, #724]	@ (8008134 <dynamic_8_g_step+0x80c>)
 8007e60:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
        }
      }

      w2 = w1 - w2;
 8007e64:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007e68:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8007e6c:	f7f8 fa14 	bl	8000298 <__aeabi_dsub>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      rtb_Derivative_idx_0 = (rtDW.Sum[0] - (*lastU)[0]) / w2;
 8007e78:	4bad      	ldr	r3, [pc, #692]	@ (8008130 <dynamic_8_g_step+0x808>)
 8007e7a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007e7e:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 fa07 	bl	8000298 <__aeabi_dsub>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4619      	mov	r1, r3
 8007e92:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007e96:	f7f8 fce1 	bl	800085c <__aeabi_ddiv>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
      rtb_Derivative_idx_1 = (rtDW.Sum[1] - (*lastU)[1]) / w2;
 8007ea2:	4ba3      	ldr	r3, [pc, #652]	@ (8008130 <dynamic_8_g_step+0x808>)
 8007ea4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007ea8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007eac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007eb0:	f7f8 f9f2 	bl	8000298 <__aeabi_dsub>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007ec0:	f7f8 fccc 	bl	800085c <__aeabi_ddiv>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
      rtb_Derivative_idx_2 = (rtDW.Sum[2] - (*lastU)[2]) / w2;
 8007ecc:	4b98      	ldr	r3, [pc, #608]	@ (8008130 <dynamic_8_g_step+0x808>)
 8007ece:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007ed2:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8007ed6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007eda:	f7f8 f9dd 	bl	8000298 <__aeabi_dsub>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8007eea:	f7f8 fcb7 	bl	800085c <__aeabi_ddiv>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
     *  Inport: '<Root>/theta'
     *  Inport: '<Root>/theta_dot'
     *  Inport: '<Root>/vx'
     *  Inport: '<Root>/vy'
     */
    w3 = cos(rtU.theta);
 8007ef6:	4b90      	ldr	r3, [pc, #576]	@ (8008138 <dynamic_8_g_step+0x810>)
 8007ef8:	ed93 7b04 	vldr	d7, [r3, #16]
 8007efc:	eeb0 0a47 	vmov.f32	s0, s14
 8007f00:	eef0 0a67 	vmov.f32	s1, s15
 8007f04:	f007 fab0 	bl	800f468 <cos>
 8007f08:	ed87 0bae 	vstr	d0, [r7, #696]	@ 0x2b8
    ym = sin(rtU.theta);
 8007f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8008138 <dynamic_8_g_step+0x810>)
 8007f0e:	ed93 7b04 	vldr	d7, [r3, #16]
 8007f12:	eeb0 0a47 	vmov.f32	s0, s14
 8007f16:	eef0 0a67 	vmov.f32	s1, s15
 8007f1a:	f007 faf9 	bl	800f510 <sin>
 8007f1e:	ed87 0baa 	vstr	d0, [r7, #680]	@ 0x2a8
    B_0[0] = (w3 + ym) * 20.833333333333332;
 8007f22:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8007f26:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8007f2a:	f7f8 f9b7 	bl	800029c <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4610      	mov	r0, r2
 8007f34:	4619      	mov	r1, r3
 8007f36:	a37c      	add	r3, pc, #496	@ (adr r3, 8008128 <dynamic_8_g_step+0x800>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f7f8 fb64 	bl	8000608 <__aeabi_dmul>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4610      	mov	r0, r2
 8007f46:	4619      	mov	r1, r3
 8007f48:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8007f4c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007f50:	e9c3 0100 	strd	r0, r1, [r3]
    B_0[3] = (w3 - ym) * 20.833333333333332;
 8007f54:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8007f58:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8007f5c:	f7f8 f99c 	bl	8000298 <__aeabi_dsub>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	a36f      	add	r3, pc, #444	@ (adr r3, 8008128 <dynamic_8_g_step+0x800>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 fb4b 	bl	8000608 <__aeabi_dmul>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8007f7e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007f82:	e9c3 0106 	strd	r0, r1, [r3, #24]
    xm = (w3 + ym) * 20.833333333333332;
 8007f86:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8007f8a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8007f8e:	f7f8 f985 	bl	800029c <__adddf3>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	a363      	add	r3, pc, #396	@ (adr r3, 8008128 <dynamic_8_g_step+0x800>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fb32 	bl	8000608 <__aeabi_dmul>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    B_0[6] = xm;
 8007fac:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8007fb0:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8007fb4:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8007fb8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    B_0[9] = (w3 - ym) * 20.833333333333332;
 8007fbc:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8007fc0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8007fc4:	f7f8 f968 	bl	8000298 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4610      	mov	r0, r2
 8007fce:	4619      	mov	r1, r3
 8007fd0:	a355      	add	r3, pc, #340	@ (adr r3, 8008128 <dynamic_8_g_step+0x800>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 fb17 	bl	8000608 <__aeabi_dmul>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8007fe6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8007fea:	e9c3 0112 	strd	r0, r1, [r3, #72]	@ 0x48
    B_0[1] = (-w3 + ym) * 20.833333333333332;
 8007fee:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8007ff2:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8007ff6:	f7f8 f94f 	bl	8000298 <__aeabi_dsub>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	a349      	add	r3, pc, #292	@ (adr r3, 8008128 <dynamic_8_g_step+0x800>)
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f7f8 fafe 	bl	8000608 <__aeabi_dmul>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008018:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800801c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    B_0[4] = xm;
 8008020:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008024:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8008028:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800802c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    B_0[7] = (-cos(rtU.theta) + ym) * 20.833333333333332;
 8008030:	4b41      	ldr	r3, [pc, #260]	@ (8008138 <dynamic_8_g_step+0x810>)
 8008032:	ed93 7b04 	vldr	d7, [r3, #16]
 8008036:	eeb0 0a47 	vmov.f32	s0, s14
 800803a:	eef0 0a67 	vmov.f32	s1, s15
 800803e:	f007 fa13 	bl	800f468 <cos>
 8008042:	ec53 2b10 	vmov	r2, r3, d0
 8008046:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800804a:	f7f8 f925 	bl	8000298 <__aeabi_dsub>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4610      	mov	r0, r2
 8008054:	4619      	mov	r1, r3
 8008056:	a334      	add	r3, pc, #208	@ (adr r3, 8008128 <dynamic_8_g_step+0x800>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 fad4 	bl	8000608 <__aeabi_dmul>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4610      	mov	r0, r2
 8008066:	4619      	mov	r1, r3
 8008068:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800806c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8008070:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
    B_0[10] = xm;
 8008074:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008078:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 800807c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8008080:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    B_0[2] = -12.499999999999998;
 8008084:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008088:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 800808c:	f04f 32ff 	mov.w	r2, #4294967295
 8008090:	4b2a      	ldr	r3, [pc, #168]	@ (800813c <dynamic_8_g_step+0x814>)
 8008092:	e9c1 2304 	strd	r2, r3, [r1, #16]
    B_0[5] = 12.499999999999998;
 8008096:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800809a:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 800809e:	f04f 32ff 	mov.w	r2, #4294967295
 80080a2:	4b27      	ldr	r3, [pc, #156]	@ (8008140 <dynamic_8_g_step+0x818>)
 80080a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    B_0[8] = 12.499999999999998;
 80080a8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80080ac:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	4b22      	ldr	r3, [pc, #136]	@ (8008140 <dynamic_8_g_step+0x818>)
 80080b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    B_0[11] = -12.499999999999998;
 80080ba:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80080be:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	4b1d      	ldr	r3, [pc, #116]	@ (800813c <dynamic_8_g_step+0x814>)
 80080c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    xm = w3 * rtU.vx + ym * rtU.vy;
 80080cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008138 <dynamic_8_g_step+0x810>)
 80080ce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80080d2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 80080d6:	f7f8 fa97 	bl	8000608 <__aeabi_dmul>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4614      	mov	r4, r2
 80080e0:	461d      	mov	r5, r3
 80080e2:	4b15      	ldr	r3, [pc, #84]	@ (8008138 <dynamic_8_g_step+0x810>)
 80080e4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80080e8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4620      	mov	r0, r4
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7f8 f8d0 	bl	800029c <__adddf3>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    ym = -ym * rtU.vx + w3 * rtU.vy;
 8008104:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8008108:	63bb      	str	r3, [r7, #56]	@ 0x38
 800810a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800810e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008114:	4b08      	ldr	r3, [pc, #32]	@ (8008138 <dynamic_8_g_step+0x810>)
 8008116:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800811a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800811e:	f7f8 fa73 	bl	8000608 <__aeabi_dmul>
 8008122:	4602      	mov	r2, r0
 8008124:	e00e      	b.n	8008144 <dynamic_8_g_step+0x81c>
 8008126:	bf00      	nop
 8008128:	55555555 	.word	0x55555555
 800812c:	4034d555 	.word	0x4034d555
 8008130:	20000608 	.word	0x20000608
 8008134:	200006e0 	.word	0x200006e0
 8008138:	20000740 	.word	0x20000740
 800813c:	c028ffff 	.word	0xc028ffff
 8008140:	4028ffff 	.word	0x4028ffff
 8008144:	460b      	mov	r3, r1
 8008146:	4614      	mov	r4, r2
 8008148:	461d      	mov	r5, r3
 800814a:	4b97      	ldr	r3, [pc, #604]	@ (80083a8 <dynamic_8_g_step+0xa80>)
 800814c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8008150:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4620      	mov	r0, r4
 800815e:	4629      	mov	r1, r5
 8008160:	f7f8 f89c 	bl	800029c <__adddf3>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    w3 = xm - ym;
 800816c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008170:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8008174:	f7f8 f890 	bl	8000298 <__aeabi_dsub>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
    w1 = (w3 - 0.6 * rtU.theta_dot) * 20.833333333333332;
 8008180:	4b89      	ldr	r3, [pc, #548]	@ (80083a8 <dynamic_8_g_step+0xa80>)
 8008182:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008186:	a384      	add	r3, pc, #528	@ (adr r3, 8008398 <dynamic_8_g_step+0xa70>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 fa3c 	bl	8000608 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8008198:	f7f8 f87e 	bl	8000298 <__aeabi_dsub>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	a37e      	add	r3, pc, #504	@ (adr r3, 80083a0 <dynamic_8_g_step+0xa78>)
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f7f8 fa2d 	bl	8000608 <__aeabi_dmul>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    ym += xm;
 80081b6:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 80081ba:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80081be:	f7f8 f86d 	bl	800029c <__adddf3>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    w2 = (ym + 0.6 * rtU.theta_dot) * 20.833333333333332;
 80081ca:	4b77      	ldr	r3, [pc, #476]	@ (80083a8 <dynamic_8_g_step+0xa80>)
 80081cc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80081d0:	a371      	add	r3, pc, #452	@ (adr r3, 8008398 <dynamic_8_g_step+0xa70>)
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f7f8 fa17 	bl	8000608 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4610      	mov	r0, r2
 80081e0:	4619      	mov	r1, r3
 80081e2:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80081e6:	f7f8 f859 	bl	800029c <__adddf3>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80083a0 <dynamic_8_g_step+0xa78>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f8 fa06 	bl	8000608 <__aeabi_dmul>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
    w3 = (w3 + 0.6 * rtU.theta_dot) * 20.833333333333332;
 8008204:	4b68      	ldr	r3, [pc, #416]	@ (80083a8 <dynamic_8_g_step+0xa80>)
 8008206:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800820a:	a363      	add	r3, pc, #396	@ (adr r3, 8008398 <dynamic_8_g_step+0xa70>)
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f7f8 f9fa 	bl	8000608 <__aeabi_dmul>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4610      	mov	r0, r2
 800821a:	4619      	mov	r1, r3
 800821c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8008220:	f7f8 f83c 	bl	800029c <__adddf3>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4610      	mov	r0, r2
 800822a:	4619      	mov	r1, r3
 800822c:	a35c      	add	r3, pc, #368	@ (adr r3, 80083a0 <dynamic_8_g_step+0xa78>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f9e9 	bl	8000608 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
    xm = (ym - 0.6 * rtU.theta_dot) * 20.833333333333332;
 800823e:	4b5a      	ldr	r3, [pc, #360]	@ (80083a8 <dynamic_8_g_step+0xa80>)
 8008240:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008244:	a354      	add	r3, pc, #336	@ (adr r3, 8008398 <dynamic_8_g_step+0xa70>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f8 f9dd 	bl	8000608 <__aeabi_dmul>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8008256:	f7f8 f81f 	bl	8000298 <__aeabi_dsub>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4610      	mov	r0, r2
 8008260:	4619      	mov	r1, r3
 8008262:	a34f      	add	r3, pc, #316	@ (adr r3, 80083a0 <dynamic_8_g_step+0xa78>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f7f8 f9ce 	bl	8000608 <__aeabi_dmul>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    if (w1 > 2.0) {
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800827c:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8008280:	f7f8 fc52 	bl	8000b28 <__aeabi_dcmpgt>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d006      	beq.n	8008298 <dynamic_8_g_step+0x970>
      w1 = 2.0;
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008292:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
 8008296:	e010      	b.n	80082ba <dynamic_8_g_step+0x992>
    } else {
      if (w1 < -2.0) {
 8008298:	f04f 0200 	mov.w	r2, #0
 800829c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80082a0:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 80082a4:	f7f8 fc22 	bl	8000aec <__aeabi_dcmplt>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <dynamic_8_g_step+0x992>
        w1 = -2.0;
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80082b6:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
      }
    }

    if (w2 > 2.0) {
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80082c2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 80082c6:	f7f8 fc2f 	bl	8000b28 <__aeabi_dcmpgt>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <dynamic_8_g_step+0x9b6>
      w2 = 2.0;
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80082d8:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
 80082dc:	e010      	b.n	8008300 <dynamic_8_g_step+0x9d8>
    } else {
      if (w2 < -2.0) {
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80082e6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 80082ea:	f7f8 fbff 	bl	8000aec <__aeabi_dcmplt>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <dynamic_8_g_step+0x9d8>
        w2 = -2.0;
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80082fc:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      }
    }

    if (w3 > 2.0) {
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008308:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800830c:	f7f8 fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <dynamic_8_g_step+0x9fc>
      w3 = 2.0;
 8008316:	f04f 0200 	mov.w	r2, #0
 800831a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800831e:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 8008322:	e010      	b.n	8008346 <dynamic_8_g_step+0xa1e>
    } else {
      if (w3 < -2.0) {
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800832c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8008330:	f7f8 fbdc 	bl	8000aec <__aeabi_dcmplt>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <dynamic_8_g_step+0xa1e>
        w3 = -2.0;
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8008342:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
      }
    }

    if (xm > 2.0) {
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800834e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8008352:	f7f8 fbe9 	bl	8000b28 <__aeabi_dcmpgt>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d006      	beq.n	800836a <dynamic_8_g_step+0xa42>
      xm = 2.0;
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008364:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
 8008368:	e010      	b.n	800838c <dynamic_8_g_step+0xa64>
    } else {
      if (xm < -2.0) {
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8008372:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8008376:	f7f8 fbb9 	bl	8000aec <__aeabi_dcmplt>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <dynamic_8_g_step+0xa64>
        xm = -2.0;
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8008388:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
      }
    }

    for (p1 = 0; p1 < 3; p1++) {
 800838c:	2300      	movs	r3, #0
 800838e:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8008392:	e16f      	b.n	8008674 <dynamic_8_g_step+0xd4c>
 8008394:	f3af 8000 	nop.w
 8008398:	33333333 	.word	0x33333333
 800839c:	3fe33333 	.word	0x3fe33333
 80083a0:	55555555 	.word	0x55555555
 80083a4:	4034d555 	.word	0x4034d555
 80083a8:	20000740 	.word	0x20000740
      p3 = p1 << 2;
 80083ac:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      y_tmp[p3] = B_0[p1];
 80083b6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80083ba:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80083be:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	4413      	add	r3, r2
 80083c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083ca:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80083ce:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80083d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4413      	add	r3, r2
 80083da:	e9c3 0100 	strd	r0, r1, [r3]
      y_tmp[p3 + 1] = B_0[p1 + 3];
 80083de:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80083e2:	1cd9      	adds	r1, r3, #3
 80083e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80083e8:	1c5c      	adds	r4, r3, #1
 80083ea:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80083ee:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80083f2:	00cb      	lsls	r3, r1, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083fa:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80083fe:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8008402:	00e3      	lsls	r3, r4, #3
 8008404:	4413      	add	r3, r2
 8008406:	e9c3 0100 	strd	r0, r1, [r3]
      y_tmp[p3 + 2] = B_0[p1 + 6];
 800840a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800840e:	1d99      	adds	r1, r3, #6
 8008410:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008414:	1c9c      	adds	r4, r3, #2
 8008416:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800841a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800841e:	00cb      	lsls	r3, r1, #3
 8008420:	4413      	add	r3, r2
 8008422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008426:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800842a:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 800842e:	00e3      	lsls	r3, r4, #3
 8008430:	4413      	add	r3, r2
 8008432:	e9c3 0100 	strd	r0, r1, [r3]
      y_tmp[p3 + 3] = B_0[p1 + 9];
 8008436:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800843a:	f103 0109 	add.w	r1, r3, #9
 800843e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008442:	1cdc      	adds	r4, r3, #3
 8008444:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008448:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800844c:	00cb      	lsls	r3, r1, #3
 800844e:	4413      	add	r3, r2
 8008450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008454:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008458:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 800845c:	00e3      	lsls	r3, r4, #3
 800845e:	4413      	add	r3, r2
 8008460:	e9c3 0100 	strd	r0, r1, [r3]
      for (p2 = 0; p2 < 3; p2++) {
 8008464:	2300      	movs	r3, #0
 8008466:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800846a:	e0f9      	b.n	8008660 <dynamic_8_g_step+0xd38>
        itmp = p2 + 3 * p1;
 800846c:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8008470:	4613      	mov	r3, r2
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	441a      	add	r2, r3
 8008476:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800847a:	4413      	add	r3, r2
 800847c:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
        y[itmp] = 0.0;
 8008480:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008484:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 8008488:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	18d1      	adds	r1, r2, r3
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	e9c1 2300 	strd	r2, r3, [r1]
        y[itmp] += y_tmp[p3] * B_0[p2];
 800849c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80084a0:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 80084a4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80084a8:	00db      	lsls	r3, r3, #3
 80084aa:	4413      	add	r3, r2
 80084ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80084b0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80084b4:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80084b8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084c4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80084c8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80084cc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d8:	f7f8 f896 	bl	8000608 <__aeabi_dmul>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4620      	mov	r0, r4
 80084e2:	4629      	mov	r1, r5
 80084e4:	f7f7 feda 	bl	800029c <__adddf3>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4610      	mov	r0, r2
 80084ee:	4619      	mov	r1, r3
 80084f0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80084f4:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 80084f8:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	4413      	add	r3, r2
 8008500:	e9c3 0100 	strd	r0, r1, [r3]
        y[itmp] += y_tmp[p3 + 1] * B_0[p2 + 3];
 8008504:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008508:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 800850c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4413      	add	r3, r2
 8008514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008518:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800851c:	1c59      	adds	r1, r3, #1
 800851e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008522:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8008526:	00cb      	lsls	r3, r1, #3
 8008528:	4413      	add	r3, r2
 800852a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800852e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008532:	1cd9      	adds	r1, r3, #3
 8008534:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008538:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800853c:	00cb      	lsls	r3, r1, #3
 800853e:	4413      	add	r3, r2
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 f85e 	bl	8000608 <__aeabi_dmul>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f7 fea2 	bl	800029c <__adddf3>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008564:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 8008568:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	4413      	add	r3, r2
 8008570:	e9c3 0100 	strd	r0, r1, [r3]
        y[itmp] += y_tmp[p3 + 2] * B_0[p2 + 6];
 8008574:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008578:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 800857c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4413      	add	r3, r2
 8008584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008588:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800858c:	1c99      	adds	r1, r3, #2
 800858e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008592:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8008596:	00cb      	lsls	r3, r1, #3
 8008598:	4413      	add	r3, r2
 800859a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800859e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80085a2:	1d99      	adds	r1, r3, #6
 80085a4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80085a8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80085ac:	00cb      	lsls	r3, r1, #3
 80085ae:	4413      	add	r3, r2
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	4620      	mov	r0, r4
 80085b6:	4629      	mov	r1, r5
 80085b8:	f7f8 f826 	bl	8000608 <__aeabi_dmul>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4640      	mov	r0, r8
 80085c2:	4649      	mov	r1, r9
 80085c4:	f7f7 fe6a 	bl	800029c <__adddf3>
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4610      	mov	r0, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80085d4:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 80085d8:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	4413      	add	r3, r2
 80085e0:	e9c3 0100 	strd	r0, r1, [r3]
        y[itmp] += y_tmp[p3 + 3] * B_0[p2 + 9];
 80085e4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80085e8:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 80085ec:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	4413      	add	r3, r2
 80085f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085f8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80085fc:	1cd9      	adds	r1, r3, #3
 80085fe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008602:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8008606:	00cb      	lsls	r3, r1, #3
 8008608:	4413      	add	r3, r2
 800860a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800860e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008612:	f103 0109 	add.w	r1, r3, #9
 8008616:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800861a:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800861e:	00cb      	lsls	r3, r1, #3
 8008620:	4413      	add	r3, r2
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f7 ffed 	bl	8000608 <__aeabi_dmul>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f7f7 fe31 	bl	800029c <__adddf3>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4610      	mov	r0, r2
 8008640:	4619      	mov	r1, r3
 8008642:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008646:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 800864a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	e9c3 0100 	strd	r0, r1, [r3]
      for (p2 = 0; p2 < 3; p2++) {
 8008656:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800865a:	3301      	adds	r3, #1
 800865c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8008660:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008664:	2b02      	cmp	r3, #2
 8008666:	f77f af01 	ble.w	800846c <dynamic_8_g_step+0xb44>
    for (p1 = 0; p1 < 3; p1++) {
 800866a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800866e:	3301      	adds	r3, #1
 8008670:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8008674:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008678:	2b02      	cmp	r3, #2
 800867a:	f77f ae97 	ble.w	80083ac <dynamic_8_g_step+0xa84>
      }
    }

    memcpy(&x[0], &y[0], 9U * sizeof(real_T));
 800867e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8008682:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008686:	2248      	movs	r2, #72	@ 0x48
 8008688:	4618      	mov	r0, r3
 800868a:	f004 fa16 	bl	800caba <memcpy>
    p1 = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
    p2 = 3;
 8008694:	2303      	movs	r3, #3
 8008696:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
    p3 = 6;
 800869a:	2306      	movs	r3, #6
 800869c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
    ym = fabs(y[0]);
 80086a0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80086a4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	4611      	mov	r1, r2
 80086ae:	f8c7 12a8 	str.w	r1, [r7, #680]	@ 0x2a8
 80086b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086b6:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
    absx21 = fabs(y[1]);
 80086ba:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80086be:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80086c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80086c6:	4611      	mov	r1, r2
 80086c8:	f8c7 12f8 	str.w	r1, [r7, #760]	@ 0x2f8
 80086cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086d0:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
    absx31 = fabs(y[2]);
 80086d4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80086d8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80086dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80086e0:	4611      	mov	r1, r2
 80086e2:	f8c7 12f0 	str.w	r1, [r7, #752]	@ 0x2f0
 80086e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086ea:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    if ((absx21 > ym) && (absx21 > absx31)) {
 80086ee:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80086f2:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
 80086f6:	f7f8 fa17 	bl	8000b28 <__aeabi_dcmpgt>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d057      	beq.n	80087b0 <dynamic_8_g_step+0xe88>
 8008700:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008704:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
 8008708:	f7f8 fa0e 	bl	8000b28 <__aeabi_dcmpgt>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d04e      	beq.n	80087b0 <dynamic_8_g_step+0xe88>
      p1 = 3;
 8008712:	2303      	movs	r3, #3
 8008714:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
      p2 = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
      x[0] = y[1];
 800871e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008722:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008726:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800872a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800872e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008732:	e9c3 0100 	strd	r0, r1, [r3]
      x[1] = y[0];
 8008736:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800873a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800873e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008742:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008746:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800874a:	e9c3 0102 	strd	r0, r1, [r3, #8]
      x[3] = y[4];
 800874e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008752:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008756:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800875a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800875e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008762:	e9c3 0106 	strd	r0, r1, [r3, #24]
      x[4] = y[3];
 8008766:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800876a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800876e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008772:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008776:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800877a:	e9c3 0108 	strd	r0, r1, [r3, #32]
      x[6] = y[7];
 800877e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008782:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008786:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800878a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800878e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008792:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
      x[7] = y[6];
 8008796:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800879a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800879e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80087a2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80087a6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80087aa:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
 80087ae:	e056      	b.n	800885e <dynamic_8_g_step+0xf36>
    } else {
      if (absx31 > ym) {
 80087b0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80087b4:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 80087b8:	f7f8 f9b6 	bl	8000b28 <__aeabi_dcmpgt>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d04d      	beq.n	800885e <dynamic_8_g_step+0xf36>
        p1 = 6;
 80087c2:	2306      	movs	r3, #6
 80087c4:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
        p3 = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        x[0] = y[2];
 80087ce:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80087d2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80087d6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80087da:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80087de:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80087e2:	e9c3 0100 	strd	r0, r1, [r3]
        x[2] = y[0];
 80087e6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80087ea:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80087ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087f2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80087f6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80087fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
        x[3] = y[5];
 80087fe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008802:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008806:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800880a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800880e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008812:	e9c3 0106 	strd	r0, r1, [r3, #24]
        x[5] = y[3];
 8008816:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800881a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800881e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008822:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008826:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800882a:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
        x[6] = y[8];
 800882e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008832:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8008836:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800883a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800883e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008842:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
        x[8] = y[6];
 8008846:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800884a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800884e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8008852:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008856:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800885a:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
      }
    }

    absx31 = x[1] / x[0];
 800885e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008862:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008866:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800886a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800886e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fff1 	bl	800085c <__aeabi_ddiv>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
    x[1] = absx31;
 8008882:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008886:	f5a3 712a 	sub.w	r1, r3, #680	@ 0x2a8
 800888a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800888e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    ym = x[2] / x[0];
 8008892:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008896:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800889a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800889e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80088a2:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	f7f7 ffd7 	bl	800085c <__aeabi_ddiv>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    x[2] = ym;
 80088b6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80088ba:	f5a3 712a 	sub.w	r1, r3, #680	@ 0x2a8
 80088be:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80088c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    x[4] -= absx31 * x[3];
 80088c6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80088ca:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80088ce:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80088d2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80088d6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80088da:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80088de:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 80088e2:	f7f7 fe91 	bl	8000608 <__aeabi_dmul>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4620      	mov	r0, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f7 fcd3 	bl	8000298 <__aeabi_dsub>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4610      	mov	r0, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80088fe:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008902:	e9c3 0108 	strd	r0, r1, [r3, #32]
    x[5] -= ym * x[3];
 8008906:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800890a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800890e:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008912:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008916:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800891a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800891e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008922:	f7f7 fe71 	bl	8000608 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fcb3 	bl	8000298 <__aeabi_dsub>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4610      	mov	r0, r2
 8008938:	4619      	mov	r1, r3
 800893a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800893e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008942:	e9c3 010a 	strd	r0, r1, [r3, #40]	@ 0x28
    x[7] -= absx31 * x[6];
 8008946:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800894a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800894e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008952:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008956:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800895a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800895e:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008962:	f7f7 fe51 	bl	8000608 <__aeabi_dmul>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4620      	mov	r0, r4
 800896c:	4629      	mov	r1, r5
 800896e:	f7f7 fc93 	bl	8000298 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4610      	mov	r0, r2
 8008978:	4619      	mov	r1, r3
 800897a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800897e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008982:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
    x[8] -= ym * x[6];
 8008986:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800898a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800898e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008992:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008996:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800899a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800899e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80089a2:	f7f7 fe31 	bl	8000608 <__aeabi_dmul>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4620      	mov	r0, r4
 80089ac:	4629      	mov	r1, r5
 80089ae:	f7f7 fc73 	bl	8000298 <__aeabi_dsub>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4610      	mov	r0, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80089be:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80089c2:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
    if (fabs(x[5]) > fabs(x[4])) {
 80089c6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80089ca:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80089ce:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80089d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80089d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089da:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80089de:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80089e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089e6:	4692      	mov	sl, r2
 80089e8:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80089ec:	4652      	mov	r2, sl
 80089ee:	465b      	mov	r3, fp
 80089f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80089f4:	f7f8 f898 	bl	8000b28 <__aeabi_dcmpgt>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d053      	beq.n	8008aa6 <dynamic_8_g_step+0x117e>
      itmp = p2;
 80089fe:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008a02:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
      p2 = p3;
 8008a06:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008a0a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
      p3 = itmp;
 8008a0e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 8008a12:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
      x[1] = ym;
 8008a16:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a1a:	f5a3 712a 	sub.w	r1, r3, #680	@ 0x2a8
 8008a1e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008a22:	e9c1 2302 	strd	r2, r3, [r1, #8]
      x[2] = absx31;
 8008a26:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a2a:	f5a3 712a 	sub.w	r1, r3, #680	@ 0x2a8
 8008a2e:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008a32:	e9c1 2304 	strd	r2, r3, [r1, #16]
      ym = x[4];
 8008a36:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a3a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008a3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a42:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
      x[4] = x[5];
 8008a46:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a4a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008a4e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008a52:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a56:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008a5a:	e9c3 0108 	strd	r0, r1, [r3, #32]
      x[5] = ym;
 8008a5e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a62:	f5a3 712a 	sub.w	r1, r3, #680	@ 0x2a8
 8008a66:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008a6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
      ym = x[7];
 8008a6e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a72:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008a76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008a7a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
      x[7] = x[8];
 8008a7e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a82:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008a86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8008a8a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a8e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008a92:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
      x[8] = ym;
 8008a96:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008a9a:	f5a3 712a 	sub.w	r1, r3, #680	@ 0x2a8
 8008a9e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008aa2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    }

    absx31 = x[5] / x[4];
 8008aa6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008aaa:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008aae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008ab2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008ab6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008aba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008abe:	f7f7 fecd 	bl	800085c <__aeabi_ddiv>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
    x[8] -= absx31 * x[7];
 8008aca:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008ace:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008ad2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008ad6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008ada:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008ade:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008ae2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008ae6:	f7f7 fd8f 	bl	8000608 <__aeabi_dmul>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f7 fbd1 	bl	8000298 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4610      	mov	r0, r2
 8008afc:	4619      	mov	r1, r3
 8008afe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b02:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b06:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
    ym = (absx31 * x[1] - x[2]) / x[8];
 8008b0a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b0e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008b16:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8008b1a:	f7f7 fd75 	bl	8000608 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4610      	mov	r0, r2
 8008b24:	4619      	mov	r1, r3
 8008b26:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b2a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008b32:	f7f7 fbb1 	bl	8000298 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b42:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b46:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b4a:	f7f7 fe87 	bl	800085c <__aeabi_ddiv>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    absx21 = -(x[7] * ym + x[1]) / x[4];
 8008b56:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b5a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b5e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008b62:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008b66:	f7f7 fd4f 	bl	8000608 <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b76:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008b7e:	f7f7 fb8d 	bl	800029c <__adddf3>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b88:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b8e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008b92:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008b96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b9e:	f7f7 fe5d 	bl	800085c <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
    y[p1] = ((1.0 - x[3] * absx21) - x[6] * ym) / x[0];
 8008baa:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008bae:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008bb2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008bb6:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8008bba:	f7f7 fd25 	bl	8000608 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	49c1      	ldr	r1, [pc, #772]	@ (8008ecc <dynamic_8_g_step+0x15a4>)
 8008bc8:	f7f7 fb66 	bl	8000298 <__aeabi_dsub>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	461d      	mov	r5, r3
 8008bd4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008bd8:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008bdc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8008be0:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008be4:	f7f7 fd10 	bl	8000608 <__aeabi_dmul>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4620      	mov	r0, r4
 8008bee:	4629      	mov	r1, r5
 8008bf0:	f7f7 fb52 	bl	8000298 <__aeabi_dsub>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008c00:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fe28 	bl	800085c <__aeabi_ddiv>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4610      	mov	r0, r2
 8008c12:	4619      	mov	r1, r3
 8008c14:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008c18:	f5a3 7218 	sub.w	r2, r3, #608	@ 0x260
 8008c1c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	4413      	add	r3, r2
 8008c24:	e9c3 0100 	strd	r0, r1, [r3]
    y[p1 + 1] = absx21;
 8008c28:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008c32:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	18d1      	adds	r1, r2, r3
 8008c3a:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8008c3e:	e9c1 2300 	strd	r2, r3, [r1]
    y[p1 + 2] = ym;
 8008c42:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008c46:	3302      	adds	r3, #2
 8008c48:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008c4c:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	18d1      	adds	r1, r2, r3
 8008c54:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008c58:	e9c1 2300 	strd	r2, r3, [r1]
    ym = -absx31 / x[8];
 8008c5c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8008c60:	623b      	str	r3, [r7, #32]
 8008c62:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8008c66:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c6c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008c70:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008c74:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008c78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c7c:	f7f7 fdee 	bl	800085c <__aeabi_ddiv>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    absx21 = (1.0 - x[7] * ym) / x[4];
 8008c88:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008c8c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008c90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008c94:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008c98:	f7f7 fcb6 	bl	8000608 <__aeabi_dmul>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	f04f 0000 	mov.w	r0, #0
 8008ca4:	4989      	ldr	r1, [pc, #548]	@ (8008ecc <dynamic_8_g_step+0x15a4>)
 8008ca6:	f7f7 faf7 	bl	8000298 <__aeabi_dsub>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008cb6:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008cba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cbe:	f7f7 fdcd 	bl	800085c <__aeabi_ddiv>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
    y[p2] = -(x[3] * absx21 + x[6] * ym) / x[0];
 8008cca:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008cce:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008cd2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008cd6:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8008cda:	f7f7 fc95 	bl	8000608 <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4614      	mov	r4, r2
 8008ce4:	461d      	mov	r5, r3
 8008ce6:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008cea:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008cee:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8008cf2:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008cf6:	f7f7 fc87 	bl	8000608 <__aeabi_dmul>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 facb 	bl	800029c <__adddf3>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	61ba      	str	r2, [r7, #24]
 8008d0c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008d10:	61fb      	str	r3, [r7, #28]
 8008d12:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008d16:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d22:	f7f7 fd9b 	bl	800085c <__aeabi_ddiv>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8008d2e:	f5a1 7018 	sub.w	r0, r1, #608	@ 0x260
 8008d32:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 8008d36:	00c9      	lsls	r1, r1, #3
 8008d38:	4401      	add	r1, r0
 8008d3a:	e9c1 2300 	strd	r2, r3, [r1]
    y[p2 + 1] = absx21;
 8008d3e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008d42:	3301      	adds	r3, #1
 8008d44:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008d48:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	18d1      	adds	r1, r2, r3
 8008d50:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8008d54:	e9c1 2300 	strd	r2, r3, [r1]
    y[p2 + 2] = ym;
 8008d58:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008d62:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	18d1      	adds	r1, r2, r3
 8008d6a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008d6e:	e9c1 2300 	strd	r2, r3, [r1]
    ym = 1.0 / x[8];
 8008d72:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008d76:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008d7a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008d7e:	f04f 0000 	mov.w	r0, #0
 8008d82:	4952      	ldr	r1, [pc, #328]	@ (8008ecc <dynamic_8_g_step+0x15a4>)
 8008d84:	f7f7 fd6a 	bl	800085c <__aeabi_ddiv>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    absx21 = -x[7] * ym / x[4];
 8008d90:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008d94:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008d98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008d9c:	613a      	str	r2, [r7, #16]
 8008d9e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008da8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008dac:	f7f7 fc2c 	bl	8000608 <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4610      	mov	r0, r2
 8008db6:	4619      	mov	r1, r3
 8008db8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008dbc:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008dc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dc4:	f7f7 fd4a 	bl	800085c <__aeabi_ddiv>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
    y[p3] = -(x[3] * absx21 + x[6] * ym) / x[0];
 8008dd0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008dd4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008dd8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8008ddc:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8008de0:	f7f7 fc12 	bl	8000608 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4614      	mov	r4, r2
 8008dea:	461d      	mov	r5, r3
 8008dec:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008df0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008df4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8008df8:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008dfc:	f7f7 fc04 	bl	8000608 <__aeabi_dmul>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fa48 	bl	800029c <__adddf3>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	60ba      	str	r2, [r7, #8]
 8008e12:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008e1c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e28:	f7f7 fd18 	bl	800085c <__aeabi_ddiv>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8008e34:	f5a1 7018 	sub.w	r0, r1, #608	@ 0x260
 8008e38:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8008e3c:	00c9      	lsls	r1, r1, #3
 8008e3e:	4401      	add	r1, r0
 8008e40:	e9c1 2300 	strd	r2, r3, [r1]
    y[p3 + 1] = absx21;
 8008e44:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008e48:	3301      	adds	r3, #1
 8008e4a:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008e4e:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	18d1      	adds	r1, r2, r3
 8008e56:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8008e5a:	e9c1 2300 	strd	r2, r3, [r1]
    y[p3 + 2] = ym;
 8008e5e:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008e62:	3302      	adds	r3, #2
 8008e64:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008e68:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	18d1      	adds	r1, r2, r3
 8008e70:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8008e74:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 9; p1++) {
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8008e7e:	e019      	b.n	8008eb4 <dynamic_8_g_step+0x158c>
      x[p1] = a[p1];
 8008e80:	4a13      	ldr	r2, [pc, #76]	@ (8008ed0 <dynamic_8_g_step+0x15a8>)
 8008e82:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008e86:	4413      	add	r3, r2
 8008e88:	f993 3000 	ldrsb.w	r3, [r3]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7f7 fb51 	bl	8000534 <__aeabi_i2d>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8008e9a:	f5a1 702a 	sub.w	r0, r1, #680	@ 0x2a8
 8008e9e:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 8008ea2:	00c9      	lsls	r1, r1, #3
 8008ea4:	4401      	add	r1, r0
 8008ea6:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 9; p1++) {
 8008eaa:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8008eb4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	dde1      	ble.n	8008e80 <dynamic_8_g_step+0x1558>
    }

    for (p1 = 0; p1 < 3; p1++) {
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8008ec2:	e0cf      	b.n	8009064 <dynamic_8_g_step+0x173c>
      for (p2 = 0; p2 < 4; p2++) {
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8008eca:	e0c1      	b.n	8009050 <dynamic_8_g_step+0x1728>
 8008ecc:	3ff00000 	.word	0x3ff00000
 8008ed0:	08010b18 	.word	0x08010b18
        p3 = p2 + (p1 << 2);
 8008ed4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8008ede:	4413      	add	r3, r2
 8008ee0:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        y_tmp_0[p3] = 0.0;
 8008ee4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008ee8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8008eec:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	18d1      	adds	r1, r2, r3
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp_0[p3] += y[3 * p1] * y_tmp[p2];
 8008f00:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008f04:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8008f08:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4413      	add	r3, r2
 8008f10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f14:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8008f18:	4613      	mov	r3, r2
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008f22:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	4413      	add	r3, r2
 8008f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f2e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008f32:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8008f36:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 fb61 	bl	8000608 <__aeabi_dmul>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	f7f7 f9a5 	bl	800029c <__adddf3>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8008f5a:	f5a1 70ac 	sub.w	r0, r1, #344	@ 0x158
 8008f5e:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8008f62:	00c9      	lsls	r1, r1, #3
 8008f64:	4401      	add	r1, r0
 8008f66:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp_0[p3] += y[3 * p1 + 1] * y_tmp[p2 + 4];
 8008f6a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008f6e:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8008f72:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008f7e:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8008f82:	4613      	mov	r3, r2
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	4413      	add	r3, r2
 8008f88:	3301      	adds	r3, #1
 8008f8a:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008f8e:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4413      	add	r3, r2
 8008f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f9a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008fa4:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	4413      	add	r3, r2
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 fb2a 	bl	8000608 <__aeabi_dmul>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f7f7 f96e 	bl	800029c <__adddf3>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8008fc8:	f5a1 70ac 	sub.w	r0, r1, #344	@ 0x158
 8008fcc:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8008fd0:	00c9      	lsls	r1, r1, #3
 8008fd2:	4401      	add	r1, r0
 8008fd4:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp_0[p3] += y[3 * p1 + 2] * y_tmp[p2 + 8];
 8008fd8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8008fdc:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8008fe0:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008fec:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8008ffc:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	4413      	add	r3, r2
 8009004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009008:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800900c:	3308      	adds	r3, #8
 800900e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009012:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	f7f7 faf3 	bl	8000608 <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4620      	mov	r0, r4
 8009028:	4629      	mov	r1, r5
 800902a:	f7f7 f937 	bl	800029c <__adddf3>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009036:	f5a1 70ac 	sub.w	r0, r1, #344	@ 0x158
 800903a:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 800903e:	00c9      	lsls	r1, r1, #3
 8009040:	4401      	add	r1, r0
 8009042:	e9c1 2300 	strd	r2, r3, [r1]
      for (p2 = 0; p2 < 4; p2++) {
 8009046:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800904a:	3301      	adds	r3, #1
 800904c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8009050:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8009054:	2b03      	cmp	r3, #3
 8009056:	f77f af3d 	ble.w	8008ed4 <dynamic_8_g_step+0x15ac>
    for (p1 = 0; p1 < 3; p1++) {
 800905a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800905e:	3301      	adds	r3, #1
 8009060:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8009064:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009068:	2b02      	cmp	r3, #2
 800906a:	f77f af2b 	ble.w	8008ec4 <dynamic_8_g_step+0x159c>
      }
    }

    ym = 178.61111111111111 * rtU.vy * rtU.theta_dot;
 800906e:	4b9c      	ldr	r3, [pc, #624]	@ (80092e0 <dynamic_8_g_step+0x19b8>)
 8009070:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8009074:	a394      	add	r3, pc, #592	@ (adr r3, 80092c8 <dynamic_8_g_step+0x19a0>)
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f7f7 fac5 	bl	8000608 <__aeabi_dmul>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4610      	mov	r0, r2
 8009084:	4619      	mov	r1, r3
 8009086:	4b96      	ldr	r3, [pc, #600]	@ (80092e0 <dynamic_8_g_step+0x19b8>)
 8009088:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800908c:	f7f7 fabc 	bl	8000608 <__aeabi_dmul>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    absx21 = -178.61111111111111 * rtU.vx * rtU.theta_dot;
 8009098:	4b91      	ldr	r3, [pc, #580]	@ (80092e0 <dynamic_8_g_step+0x19b8>)
 800909a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800909e:	a38c      	add	r3, pc, #560	@ (adr r3, 80092d0 <dynamic_8_g_step+0x19a8>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7f7 fab0 	bl	8000608 <__aeabi_dmul>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4610      	mov	r0, r2
 80090ae:	4619      	mov	r1, r3
 80090b0:	4b8b      	ldr	r3, [pc, #556]	@ (80092e0 <dynamic_8_g_step+0x19b8>)
 80090b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80090b6:	f7f7 faa7 	bl	8000608 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
    if (w1 < 0.0) {
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 80090ce:	f7f7 fd0d 	bl	8000aec <__aeabi_dcmplt>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <dynamic_8_g_step+0x17bc>
      w1 = -1.0;
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	4b81      	ldr	r3, [pc, #516]	@ (80092e4 <dynamic_8_g_step+0x19bc>)
 80090de:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
 80090e2:	e027      	b.n	8009134 <dynamic_8_g_step+0x180c>
    } else if (w1 > 0.0) {
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 80090f0:	f7f7 fd1a 	bl	8000b28 <__aeabi_dcmpgt>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <dynamic_8_g_step+0x17de>
      w1 = 1.0;
 80090fa:	f04f 0200 	mov.w	r2, #0
 80090fe:	4b7a      	ldr	r3, [pc, #488]	@ (80092e8 <dynamic_8_g_step+0x19c0>)
 8009100:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
 8009104:	e016      	b.n	8009134 <dynamic_8_g_step+0x180c>
    } else if (w1 == 0.0) {
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8009112:	f7f7 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d006      	beq.n	800912a <dynamic_8_g_step+0x1802>
      w1 = 0.0;
 800911c:	f04f 0200 	mov.w	r2, #0
 8009120:	f04f 0300 	mov.w	r3, #0
 8009124:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
 8009128:	e004      	b.n	8009134 <dynamic_8_g_step+0x180c>
    } else {
      w1 = (rtNaN);
 800912a:	4b70      	ldr	r3, [pc, #448]	@ (80092ec <dynamic_8_g_step+0x19c4>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    }

    w1 *= 0.00588;
 8009134:	a368      	add	r3, pc, #416	@ (adr r3, 80092d8 <dynamic_8_g_step+0x19b0>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 800913e:	f7f7 fa63 	bl	8000608 <__aeabi_dmul>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    if (w2 < 0.0) {
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8009156:	f7f7 fcc9 	bl	8000aec <__aeabi_dcmplt>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <dynamic_8_g_step+0x1844>
      w2 = -1.0;
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	4b5f      	ldr	r3, [pc, #380]	@ (80092e4 <dynamic_8_g_step+0x19bc>)
 8009166:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
 800916a:	e027      	b.n	80091bc <dynamic_8_g_step+0x1894>
    } else if (w2 > 0.0) {
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8009178:	f7f7 fcd6 	bl	8000b28 <__aeabi_dcmpgt>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <dynamic_8_g_step+0x1866>
      w2 = 1.0;
 8009182:	f04f 0200 	mov.w	r2, #0
 8009186:	4b58      	ldr	r3, [pc, #352]	@ (80092e8 <dynamic_8_g_step+0x19c0>)
 8009188:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
 800918c:	e016      	b.n	80091bc <dynamic_8_g_step+0x1894>
    } else if (w2 == 0.0) {
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 800919a:	f7f7 fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d006      	beq.n	80091b2 <dynamic_8_g_step+0x188a>
      w2 = 0.0;
 80091a4:	f04f 0200 	mov.w	r2, #0
 80091a8:	f04f 0300 	mov.w	r3, #0
 80091ac:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
 80091b0:	e004      	b.n	80091bc <dynamic_8_g_step+0x1894>
    } else {
      w2 = (rtNaN);
 80091b2:	4b4e      	ldr	r3, [pc, #312]	@ (80092ec <dynamic_8_g_step+0x19c4>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
    }

    w2 *= 0.00588;
 80091bc:	a346      	add	r3, pc, #280	@ (adr r3, 80092d8 <dynamic_8_g_step+0x19b0>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 80091c6:	f7f7 fa1f 	bl	8000608 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
    if (w3 < 0.0) {
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	f04f 0300 	mov.w	r3, #0
 80091da:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 80091de:	f7f7 fc85 	bl	8000aec <__aeabi_dcmplt>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <dynamic_8_g_step+0x18cc>
      w3 = -1.0;
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	4b3d      	ldr	r3, [pc, #244]	@ (80092e4 <dynamic_8_g_step+0x19bc>)
 80091ee:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 80091f2:	e027      	b.n	8009244 <dynamic_8_g_step+0x191c>
    } else if (w3 > 0.0) {
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	f04f 0300 	mov.w	r3, #0
 80091fc:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009200:	f7f7 fc92 	bl	8000b28 <__aeabi_dcmpgt>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d005      	beq.n	8009216 <dynamic_8_g_step+0x18ee>
      w3 = 1.0;
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	4b36      	ldr	r3, [pc, #216]	@ (80092e8 <dynamic_8_g_step+0x19c0>)
 8009210:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 8009214:	e016      	b.n	8009244 <dynamic_8_g_step+0x191c>
    } else if (w3 == 0.0) {
 8009216:	f04f 0200 	mov.w	r2, #0
 800921a:	f04f 0300 	mov.w	r3, #0
 800921e:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009222:	f7f7 fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d006      	beq.n	800923a <dynamic_8_g_step+0x1912>
      w3 = 0.0;
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 8009238:	e004      	b.n	8009244 <dynamic_8_g_step+0x191c>
    } else {
      w3 = (rtNaN);
 800923a:	4b2c      	ldr	r3, [pc, #176]	@ (80092ec <dynamic_8_g_step+0x19c4>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
    }

    absx31 = 0.00588 * w3;
 8009244:	a324      	add	r3, pc, #144	@ (adr r3, 80092d8 <dynamic_8_g_step+0x19b0>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800924e:	f7f7 f9db 	bl	8000608 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
    if (xm < 0.0) {
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	f04f 0300 	mov.w	r3, #0
 8009262:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009266:	f7f7 fc41 	bl	8000aec <__aeabi_dcmplt>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <dynamic_8_g_step+0x1954>
      xm = -1.0;
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	4b1b      	ldr	r3, [pc, #108]	@ (80092e4 <dynamic_8_g_step+0x19bc>)
 8009276:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
 800927a:	e03e      	b.n	80092fa <dynamic_8_g_step+0x19d2>
    } else if (xm > 0.0) {
 800927c:	f04f 0200 	mov.w	r2, #0
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009288:	f7f7 fc4e 	bl	8000b28 <__aeabi_dcmpgt>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <dynamic_8_g_step+0x1976>
      xm = 1.0;
 8009292:	f04f 0200 	mov.w	r2, #0
 8009296:	4b14      	ldr	r3, [pc, #80]	@ (80092e8 <dynamic_8_g_step+0x19c0>)
 8009298:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
 800929c:	e02d      	b.n	80092fa <dynamic_8_g_step+0x19d2>
    } else if (xm == 0.0) {
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	f04f 0300 	mov.w	r3, #0
 80092a6:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 80092aa:	f7f7 fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01d      	beq.n	80092f0 <dynamic_8_g_step+0x19c8>
      xm = 0.0;
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
 80092c0:	e01b      	b.n	80092fa <dynamic_8_g_step+0x19d2>
 80092c2:	bf00      	nop
 80092c4:	f3af 8000 	nop.w
 80092c8:	38e38e39 	.word	0x38e38e39
 80092cc:	4066538e 	.word	0x4066538e
 80092d0:	38e38e39 	.word	0x38e38e39
 80092d4:	c066538e 	.word	0xc066538e
 80092d8:	7b352a84 	.word	0x7b352a84
 80092dc:	3f7815a0 	.word	0x3f7815a0
 80092e0:	20000740 	.word	0x20000740
 80092e4:	bff00000 	.word	0xbff00000
 80092e8:	3ff00000 	.word	0x3ff00000
 80092ec:	20000a78 	.word	0x20000a78
    } else {
      xm = (rtNaN);
 80092f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009370 <dynamic_8_g_step+0x1a48>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    }

    tmp_0 = 0.00588 * xm;
 80092fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8009368 <dynamic_8_g_step+0x1a40>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009304:	f7f7 f980 	bl	8000608 <__aeabi_dmul>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
     *  Inport: '<Root>/theta_dot'
     *  Inport: '<Root>/vx'
     *  Inport: '<Root>/vy'
     *  MATLAB Function: '<S1>/x2r'
     */
    x_0[0] = rtU.vx;
 8009310:	4b18      	ldr	r3, [pc, #96]	@ (8009374 <dynamic_8_g_step+0x1a4c>)
 8009312:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009316:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
    x_0[1] = rtU.vy;
 800931a:	4b16      	ldr	r3, [pc, #88]	@ (8009374 <dynamic_8_g_step+0x1a4c>)
 800931c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009320:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
    x_0[2] = rtU.theta_dot;
 8009324:	4b13      	ldr	r3, [pc, #76]	@ (8009374 <dynamic_8_g_step+0x1a4c>)
 8009326:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800932a:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
    for (p1 = 0; p1 < 3; p1++) {
 800932e:	2300      	movs	r3, #0
 8009330:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8009334:	e23d      	b.n	80097b2 <dynamic_8_g_step+0x1e8a>
      /* MATLAB Function: '<S1>/control' */
      xm = b_a[p1 + 3];
 8009336:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800933a:	3303      	adds	r3, #3
 800933c:	4a0e      	ldr	r2, [pc, #56]	@ (8009378 <dynamic_8_g_step+0x1a50>)
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	4413      	add	r3, r2
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
      w3 = b_a[p1 + 6];
 800934a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800934e:	3306      	adds	r3, #6
 8009350:	4a09      	ldr	r2, [pc, #36]	@ (8009378 <dynamic_8_g_step+0x1a50>)
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4413      	add	r3, r2
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
      for (p2 = 0; p2 < 4; p2++) {
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8009364:	e0b5      	b.n	80094d2 <dynamic_8_g_step+0x1baa>
 8009366:	bf00      	nop
 8009368:	7b352a84 	.word	0x7b352a84
 800936c:	3f7815a0 	.word	0x3f7815a0
 8009370:	20000a78 	.word	0x20000a78
 8009374:	20000740 	.word	0x20000740
 8009378:	08010b28 	.word	0x08010b28
        p3 = p1 + 3 * p2;
 800937c:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 800938a:	4413      	add	r3, r2
 800938c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        y_tmp[p3] = 0.0;
 8009390:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009394:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8009398:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	18d1      	adds	r1, r2, r3
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp[p3] += B_0[3 * p2] * b_a[p1];
 80093ac:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80093b0:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80093b4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4413      	add	r3, r2
 80093bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80093c0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80093c4:	4613      	mov	r3, r2
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	4413      	add	r3, r2
 80093ca:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80093ce:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 80093d2:	00db      	lsls	r3, r3, #3
 80093d4:	4413      	add	r3, r2
 80093d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093da:	4ad5      	ldr	r2, [pc, #852]	@ (8009730 <dynamic_8_g_step+0x1e08>)
 80093dc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4413      	add	r3, r2
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	f7f7 f90e 	bl	8000608 <__aeabi_dmul>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f6 ff52 	bl	800029c <__adddf3>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009400:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 8009404:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8009408:	00c9      	lsls	r1, r1, #3
 800940a:	4401      	add	r1, r0
 800940c:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp[p3] += B_0[3 * p2 + 1] * xm;
 8009410:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009414:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8009418:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	4413      	add	r3, r2
 8009420:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009424:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8009428:	4613      	mov	r3, r2
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	4413      	add	r3, r2
 800942e:	3301      	adds	r3, #1
 8009430:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009434:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	4413      	add	r3, r2
 800943c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009440:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8009444:	f7f7 f8e0 	bl	8000608 <__aeabi_dmul>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f6 ff24 	bl	800029c <__adddf3>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 800945c:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 8009460:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8009464:	00c9      	lsls	r1, r1, #3
 8009466:	4401      	add	r1, r0
 8009468:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp[p3] += B_0[3 * p2 + 2] * w3;
 800946c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009470:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8009474:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4413      	add	r3, r2
 800947c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009480:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8009484:	4613      	mov	r3, r2
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	4413      	add	r3, r2
 800948a:	3302      	adds	r3, #2
 800948c:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009490:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	4413      	add	r3, r2
 8009498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800949c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 80094a0:	f7f7 f8b2 	bl	8000608 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4620      	mov	r0, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	f7f6 fef6 	bl	800029c <__adddf3>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80094b8:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 80094bc:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 80094c0:	00c9      	lsls	r1, r1, #3
 80094c2:	4401      	add	r1, r0
 80094c4:	e9c1 2300 	strd	r2, r3, [r1]
      for (p2 = 0; p2 < 4; p2++) {
 80094c8:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80094cc:	3301      	adds	r3, #1
 80094ce:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80094d2:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	f77f af50 	ble.w	800937c <dynamic_8_g_step+0x1a54>
      }

      /* MATLAB Function: '<S1>/x2r' */
      B_1[p1] = ((((real_T)a[p1 + 3] * rtDW.Sum[1] + (real_T)a[p1] * rtDW.Sum[0])
 80094dc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80094e0:	3303      	adds	r3, #3
 80094e2:	4a94      	ldr	r2, [pc, #592]	@ (8009734 <dynamic_8_g_step+0x1e0c>)
 80094e4:	56d3      	ldrsb	r3, [r2, r3]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f7 f824 	bl	8000534 <__aeabi_i2d>
 80094ec:	4b92      	ldr	r3, [pc, #584]	@ (8009738 <dynamic_8_g_step+0x1e10>)
 80094ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094f2:	f7f7 f889 	bl	8000608 <__aeabi_dmul>
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4614      	mov	r4, r2
 80094fc:	461d      	mov	r5, r3
 80094fe:	4a8d      	ldr	r2, [pc, #564]	@ (8009734 <dynamic_8_g_step+0x1e0c>)
 8009500:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009504:	4413      	add	r3, r2
 8009506:	f993 3000 	ldrsb.w	r3, [r3]
 800950a:	4618      	mov	r0, r3
 800950c:	f7f7 f812 	bl	8000534 <__aeabi_i2d>
 8009510:	4b89      	ldr	r3, [pc, #548]	@ (8009738 <dynamic_8_g_step+0x1e10>)
 8009512:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009516:	f7f7 f877 	bl	8000608 <__aeabi_dmul>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f6 febb 	bl	800029c <__adddf3>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4614      	mov	r4, r2
 800952c:	461d      	mov	r5, r3
                  + (real_T)a[p1 + 6] * rtDW.Sum[2]) + rtDW.Derivative1[p1]) -
 800952e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009532:	3306      	adds	r3, #6
 8009534:	4a7f      	ldr	r2, [pc, #508]	@ (8009734 <dynamic_8_g_step+0x1e0c>)
 8009536:	56d3      	ldrsb	r3, [r2, r3]
 8009538:	4618      	mov	r0, r3
 800953a:	f7f6 fffb 	bl	8000534 <__aeabi_i2d>
 800953e:	4b7e      	ldr	r3, [pc, #504]	@ (8009738 <dynamic_8_g_step+0x1e10>)
 8009540:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8009544:	f7f7 f860 	bl	8000608 <__aeabi_dmul>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f6 fea4 	bl	800029c <__adddf3>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4610      	mov	r0, r2
 800955a:	4619      	mov	r1, r3
 800955c:	4a76      	ldr	r2, [pc, #472]	@ (8009738 <dynamic_8_g_step+0x1e10>)
 800955e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	4413      	add	r3, r2
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fe97 	bl	800029c <__adddf3>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4610      	mov	r0, r2
 8009574:	4619      	mov	r1, r3
        x_0[p1];
 8009576:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8009580:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009584:	4413      	add	r3, r2
 8009586:	3bf8      	subs	r3, #248	@ 0xf8
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
                  + (real_T)a[p1 + 6] * rtDW.Sum[2]) + rtDW.Derivative1[p1]) -
 800958c:	f7f6 fe84 	bl	8000298 <__aeabi_dsub>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
      B_1[p1] = ((((real_T)a[p1 + 3] * rtDW.Sum[1] + (real_T)a[p1] * rtDW.Sum[0])
 8009594:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 8009598:	00c9      	lsls	r1, r1, #3
 800959a:	f501 7132 	add.w	r1, r1, #712	@ 0x2c8
 800959e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80095a2:	4401      	add	r1, r0
 80095a4:	39b0      	subs	r1, #176	@ 0xb0
 80095a6:	e9c1 2300 	strd	r2, r3, [r1]

      /* MATLAB Function: '<S1>/control' */
      rtb_Derivative2_0[p1] = ((((x[p1 + 3] * rtb_Derivative_idx_1 + x[p1] *
 80095aa:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80095ae:	3303      	adds	r3, #3
 80095b0:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80095b4:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	4413      	add	r3, r2
 80095bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095c0:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 80095c4:	f7f7 f820 	bl	8000608 <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4614      	mov	r4, r2
 80095ce:	461d      	mov	r5, r3
 80095d0:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80095d4:	f5a3 722a 	sub.w	r2, r3, #680	@ 0x2a8
 80095d8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	4413      	add	r3, r2
 80095e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 80095e8:	f7f7 f80e 	bl	8000608 <__aeabi_dmul>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4620      	mov	r0, r4
 80095f2:	4629      	mov	r1, r5
 80095f4:	f7f6 fe52 	bl	800029c <__adddf3>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	461d      	mov	r5, r3
        rtb_Derivative_idx_0) + x[p1 + 6] * rtb_Derivative_idx_2) +
 8009600:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009604:	3306      	adds	r3, #6
 8009606:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800960a:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	4413      	add	r3, r2
 8009612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009616:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 800961a:	f7f6 fff5 	bl	8000608 <__aeabi_dmul>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4620      	mov	r0, r4
 8009624:	4629      	mov	r1, r5
 8009626:	f7f6 fe39 	bl	800029c <__adddf3>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4610      	mov	r0, r2
 8009630:	4619      	mov	r1, r3
        rtb_Derivative2[p1]) + (w3 * 0.0 + (xm * absx21 + b_a[p1] * ym))) +
 8009632:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800963c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009640:	4413      	add	r3, r2
 8009642:	3bc8      	subs	r3, #200	@ 0xc8
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
        rtb_Derivative_idx_0) + x[p1 + 6] * rtb_Derivative_idx_2) +
 8009648:	f7f6 fe28 	bl	800029c <__adddf3>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4614      	mov	r4, r2
 8009652:	461d      	mov	r5, r3
        rtb_Derivative2[p1]) + (w3 * 0.0 + (xm * absx21 + b_a[p1] * ym))) +
 8009654:	f04f 0200 	mov.w	r2, #0
 8009658:	f04f 0300 	mov.w	r3, #0
 800965c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009660:	f7f6 ffd2 	bl	8000608 <__aeabi_dmul>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4690      	mov	r8, r2
 800966a:	4699      	mov	r9, r3
 800966c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8009670:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009674:	f7f6 ffc8 	bl	8000608 <__aeabi_dmul>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4692      	mov	sl, r2
 800967e:	469b      	mov	fp, r3
 8009680:	4a2b      	ldr	r2, [pc, #172]	@ (8009730 <dynamic_8_g_step+0x1e08>)
 8009682:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	4413      	add	r3, r2
 800968a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800968e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8009692:	f7f6 ffb9 	bl	8000608 <__aeabi_dmul>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4650      	mov	r0, sl
 800969c:	4659      	mov	r1, fp
 800969e:	f7f6 fdfd 	bl	800029c <__adddf3>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f6 fdf7 	bl	800029c <__adddf3>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4620      	mov	r0, r4
 80096b4:	4629      	mov	r1, r5
 80096b6:	f7f6 fdf1 	bl	800029c <__adddf3>
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4614      	mov	r4, r2
 80096c0:	461d      	mov	r5, r3
        (((y_tmp[p1 + 3] * w2 + y_tmp[p1] * w1) + y_tmp[p1 + 6] * absx31) +
 80096c2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80096c6:	3303      	adds	r3, #3
 80096c8:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80096cc:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	4413      	add	r3, r2
 80096d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096d8:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80096dc:	f7f6 ff94 	bl	8000608 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4690      	mov	r8, r2
 80096e6:	4699      	mov	r9, r3
 80096e8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80096ec:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80096f0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80096f4:	00db      	lsls	r3, r3, #3
 80096f6:	4413      	add	r3, r2
 80096f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096fc:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8009700:	f7f6 ff82 	bl	8000608 <__aeabi_dmul>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4640      	mov	r0, r8
 800970a:	4649      	mov	r1, r9
 800970c:	f7f6 fdc6 	bl	800029c <__adddf3>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4690      	mov	r8, r2
 8009716:	4699      	mov	r9, r3
 8009718:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800971c:	3306      	adds	r3, #6
 800971e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009722:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4413      	add	r3, r2
 800972a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800972e:	e005      	b.n	800973c <dynamic_8_g_step+0x1e14>
 8009730:	08010b28 	.word	0x08010b28
 8009734:	08010b18 	.word	0x08010b18
 8009738:	20000608 	.word	0x20000608
 800973c:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8009740:	f7f6 ff62 	bl	8000608 <__aeabi_dmul>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4640      	mov	r0, r8
 800974a:	4649      	mov	r1, r9
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4690      	mov	r8, r2
 8009756:	4699      	mov	r9, r3
         y_tmp[p1 + 9] * tmp_0);
 8009758:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800975c:	3309      	adds	r3, #9
 800975e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009762:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	4413      	add	r3, r2
 800976a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800976e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8009772:	f7f6 ff49 	bl	8000608 <__aeabi_dmul>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
        (((y_tmp[p1 + 3] * w2 + y_tmp[p1] * w1) + y_tmp[p1 + 6] * absx31) +
 800977a:	4640      	mov	r0, r8
 800977c:	4649      	mov	r1, r9
 800977e:	f7f6 fd8d 	bl	800029c <__adddf3>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
        rtb_Derivative2[p1]) + (w3 * 0.0 + (xm * absx21 + b_a[p1] * ym))) +
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fd87 	bl	800029c <__adddf3>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
      rtb_Derivative2_0[p1] = ((((x[p1 + 3] * rtb_Derivative_idx_1 + x[p1] *
 8009792:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 8009796:	00c9      	lsls	r1, r1, #3
 8009798:	f501 7132 	add.w	r1, r1, #712	@ 0x2c8
 800979c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80097a0:	4401      	add	r1, r0
 80097a2:	39e0      	subs	r1, #224	@ 0xe0
 80097a4:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 3; p1++) {
 80097a8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80097ac:	3301      	adds	r3, #1
 80097ae:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80097b2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	f77f adbd 	ble.w	8009336 <dynamic_8_g_step+0x1a0e>
    }

    /* MATLAB Function: '<S1>/control' */
    for (p1 = 0; p1 < 3; p1++) {
 80097bc:	2300      	movs	r3, #0
 80097be:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80097c2:	e10f      	b.n	80099e4 <dynamic_8_g_step+0x20bc>
      for (p2 = 0; p2 < 4; p2++) {
 80097c4:	2300      	movs	r3, #0
 80097c6:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80097ca:	e0b4      	b.n	8009936 <dynamic_8_g_step+0x200e>
        p3 = p2 + (p1 << 2);
 80097cc:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80097d6:	4413      	add	r3, r2
 80097d8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        y_tmp[p3] = 0.0;
 80097dc:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80097e0:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80097e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	18d1      	adds	r1, r2, r3
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp[p3] += b_b[3 * p1] * y_tmp_0[p2];
 80097f8:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80097fc:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8009800:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	4413      	add	r3, r2
 8009808:	e9d3 4500 	ldrd	r4, r5, [r3]
 800980c:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8009810:	4613      	mov	r3, r2
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	4413      	add	r3, r2
 8009816:	4ac1      	ldr	r2, [pc, #772]	@ (8009b1c <dynamic_8_g_step+0x21f4>)
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	4413      	add	r3, r2
 800981c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009820:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009824:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8009828:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	4413      	add	r3, r2
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f6 fee8 	bl	8000608 <__aeabi_dmul>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	4620      	mov	r0, r4
 800983e:	4629      	mov	r1, r5
 8009840:	f7f6 fd2c 	bl	800029c <__adddf3>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 800984c:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 8009850:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8009854:	00c9      	lsls	r1, r1, #3
 8009856:	4401      	add	r1, r0
 8009858:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp[p3] += b_b[3 * p1 + 1] * y_tmp_0[p2 + 4];
 800985c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009860:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8009864:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009870:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8009874:	4613      	mov	r3, r2
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	4413      	add	r3, r2
 800987a:	3301      	adds	r3, #1
 800987c:	4aa7      	ldr	r2, [pc, #668]	@ (8009b1c <dynamic_8_g_step+0x21f4>)
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4413      	add	r3, r2
 8009882:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009886:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800988a:	3304      	adds	r3, #4
 800988c:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009890:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 feb4 	bl	8000608 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4620      	mov	r0, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7f6 fcf8 	bl	800029c <__adddf3>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 80098b4:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 80098b8:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 80098bc:	00c9      	lsls	r1, r1, #3
 80098be:	4401      	add	r1, r0
 80098c0:	e9c1 2300 	strd	r2, r3, [r1]
        y_tmp[p3] += b_b[3 * p1 + 2] * y_tmp_0[p2 + 8];
 80098c4:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80098c8:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 80098cc:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	4413      	add	r3, r2
 80098d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80098d8:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	3302      	adds	r3, #2
 80098e4:	4a8d      	ldr	r2, [pc, #564]	@ (8009b1c <dynamic_8_g_step+0x21f4>)
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	4413      	add	r3, r2
 80098ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098ee:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 80098f2:	3308      	adds	r3, #8
 80098f4:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80098f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	4413      	add	r3, r2
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	f7f6 fe80 	bl	8000608 <__aeabi_dmul>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fcc4 	bl	800029c <__adddf3>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 800991c:	f5a1 70dc 	sub.w	r0, r1, #440	@ 0x1b8
 8009920:	f8d7 129c 	ldr.w	r1, [r7, #668]	@ 0x29c
 8009924:	00c9      	lsls	r1, r1, #3
 8009926:	4401      	add	r1, r0
 8009928:	e9c1 2300 	strd	r2, r3, [r1]
      for (p2 = 0; p2 < 4; p2++) {
 800992c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8009930:	3301      	adds	r3, #1
 8009932:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8009936:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800993a:	2b03      	cmp	r3, #3
 800993c:	f77f af46 	ble.w	80097cc <dynamic_8_g_step+0x1ea4>
      }

      x_0[p1] = x[p1 + 6] * B_1[2] + (x[p1 + 3] * B_1[1] + x[p1] * B_1[0]);
 8009940:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009944:	3306      	adds	r3, #6
 8009946:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800994a:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	4413      	add	r3, r2
 8009952:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009956:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 800995a:	f7f6 fe55 	bl	8000608 <__aeabi_dmul>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4614      	mov	r4, r2
 8009964:	461d      	mov	r5, r3
 8009966:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800996a:	3303      	adds	r3, #3
 800996c:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009970:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	4413      	add	r3, r2
 8009978:	e9d3 0100 	ldrd	r0, r1, [r3]
 800997c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 8009980:	f7f6 fe42 	bl	8000608 <__aeabi_dmul>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4690      	mov	r8, r2
 800998a:	4699      	mov	r9, r3
 800998c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009990:	f5a3 722a 	sub.w	r2, r3, #680	@ 0x2a8
 8009994:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009998:	00db      	lsls	r3, r3, #3
 800999a:	4413      	add	r3, r2
 800999c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099a0:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 80099a4:	f7f6 fe30 	bl	8000608 <__aeabi_dmul>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f6 fc74 	bl	800029c <__adddf3>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fc6e 	bl	800029c <__adddf3>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 80099c8:	00c9      	lsls	r1, r1, #3
 80099ca:	f501 7132 	add.w	r1, r1, #712	@ 0x2c8
 80099ce:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80099d2:	4401      	add	r1, r0
 80099d4:	39f8      	subs	r1, #248	@ 0xf8
 80099d6:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 3; p1++) {
 80099da:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80099de:	3301      	adds	r3, #1
 80099e0:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80099e4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	f77f aeeb 	ble.w	80097c4 <dynamic_8_g_step+0x1e9c>
    }

    w2 = rtb_Derivative2_0[0] + x_0[0];
 80099ee:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80099f2:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 80099f6:	f7f6 fc51 	bl	800029c <__adddf3>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
    w1 = rtb_Derivative2_0[1] + x_0[1];
 8009a02:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8009a06:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8009a0a:	f7f6 fc47 	bl	800029c <__adddf3>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    xm = rtb_Derivative2_0[2] + x_0[2];
 8009a16:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8009a1a:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8009a1e:	f7f6 fc3d 	bl	800029c <__adddf3>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    for (p1 = 0; p1 < 4; p1++) {
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8009a30:	e08b      	b.n	8009b4a <dynamic_8_g_step+0x2222>
      w3 = y_tmp[p1 + 8] * xm + (y_tmp[p1 + 4] * w1 + y_tmp[p1] * w2);
 8009a32:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009a36:	3308      	adds	r3, #8
 8009a38:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009a3c:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8009a40:	00db      	lsls	r3, r3, #3
 8009a42:	4413      	add	r3, r2
 8009a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a48:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8009a4c:	f7f6 fddc 	bl	8000608 <__aeabi_dmul>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	461d      	mov	r5, r3
 8009a58:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8009a62:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	4413      	add	r3, r2
 8009a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a6e:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4690      	mov	r8, r2
 8009a7c:	4699      	mov	r9, r3
 8009a7e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009a82:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8009a86:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a92:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8009a96:	f7f6 fdb7 	bl	8000608 <__aeabi_dmul>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	f7f6 fbfb 	bl	800029c <__adddf3>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4620      	mov	r0, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	f7f6 fbf5 	bl	800029c <__adddf3>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8

      /* Saturate: '<Root>/Saturation' */
      if (w3 > 5.0) {
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	4b18      	ldr	r3, [pc, #96]	@ (8009b20 <dynamic_8_g_step+0x21f8>)
 8009ac0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009ac4:	f7f7 f830 	bl	8000b28 <__aeabi_dcmpgt>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00d      	beq.n	8009aea <dynamic_8_g_step+0x21c2>
        rtb_Saturation[p1] = 5.0;
 8009ace:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009ad2:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 8009ad6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	18d1      	adds	r1, r2, r3
 8009ade:	f04f 0200 	mov.w	r2, #0
 8009ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b20 <dynamic_8_g_step+0x21f8>)
 8009ae4:	e9c1 2300 	strd	r2, r3, [r1]
 8009ae8:	e02a      	b.n	8009b40 <dynamic_8_g_step+0x2218>
      } else if (w3 < -5.0) {
 8009aea:	f04f 0200 	mov.w	r2, #0
 8009aee:	4b0d      	ldr	r3, [pc, #52]	@ (8009b24 <dynamic_8_g_step+0x21fc>)
 8009af0:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009af4:	f7f6 fffa 	bl	8000aec <__aeabi_dcmplt>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d014      	beq.n	8009b28 <dynamic_8_g_step+0x2200>
        rtb_Saturation[p1] = -5.0;
 8009afe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009b02:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 8009b06:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	18d1      	adds	r1, r2, r3
 8009b0e:	f04f 0200 	mov.w	r2, #0
 8009b12:	4b04      	ldr	r3, [pc, #16]	@ (8009b24 <dynamic_8_g_step+0x21fc>)
 8009b14:	e9c1 2300 	strd	r2, r3, [r1]
 8009b18:	e012      	b.n	8009b40 <dynamic_8_g_step+0x2218>
 8009b1a:	bf00      	nop
 8009b1c:	08010b70 	.word	0x08010b70
 8009b20:	40140000 	.word	0x40140000
 8009b24:	c0140000 	.word	0xc0140000
      } else {
        rtb_Saturation[p1] = w3;
 8009b28:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009b2c:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 8009b30:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009b34:	00db      	lsls	r3, r3, #3
 8009b36:	18d1      	adds	r1, r2, r3
 8009b38:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8009b3c:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 4; p1++) {
 8009b40:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009b44:	3301      	adds	r3, #1
 8009b46:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8009b4a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	f77f af6f 	ble.w	8009a32 <dynamic_8_g_step+0x210a>

      /* End of Saturate: '<Root>/Saturation' */
    }

    /* Integrator: '<S2>/Integrator' */
    rtDW.Integrator[0] = rtX.Integrator_CSTATE[0];
 8009b54:	4bb4      	ldr	r3, [pc, #720]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	49b4      	ldr	r1, [pc, #720]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009b5c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    rtDW.Integrator[1] = rtX.Integrator_CSTATE[1];
 8009b60:	4bb1      	ldr	r3, [pc, #708]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009b62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b66:	49b1      	ldr	r1, [pc, #708]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009b68:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    rtDW.Integrator[2] = rtX.Integrator_CSTATE[2];
 8009b6c:	4bae      	ldr	r3, [pc, #696]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009b6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009b72:	49ae      	ldr	r1, [pc, #696]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009b74:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    /* Integrator: '<S2>/Integrator1' incorporates:
     *  Inport: '<Root>/theta0'
     *  Inport: '<Root>/x0'
     *  Inport: '<Root>/y0'
     */
    if (rtDW.Integrator1_IWORK != 0) {
 8009b78:	4bac      	ldr	r3, [pc, #688]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009b7a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d011      	beq.n	8009ba6 <dynamic_8_g_step+0x227e>
      rtX.Integrator1_CSTATE[0] = rtU.x0;
 8009b82:	4bab      	ldr	r3, [pc, #684]	@ (8009e30 <dynamic_8_g_step+0x2508>)
 8009b84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009b88:	49a7      	ldr	r1, [pc, #668]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009b8a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      rtX.Integrator1_CSTATE[1] = rtU.y0;
 8009b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8009e30 <dynamic_8_g_step+0x2508>)
 8009b90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009b94:	49a4      	ldr	r1, [pc, #656]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009b96:	e9c1 2308 	strd	r2, r3, [r1, #32]
      rtX.Integrator1_CSTATE[2] = rtU.theta0;
 8009b9a:	4ba5      	ldr	r3, [pc, #660]	@ (8009e30 <dynamic_8_g_step+0x2508>)
 8009b9c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009ba0:	49a1      	ldr	r1, [pc, #644]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009ba2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }

    /* MATLAB Function: '<S2>/robot' incorporates:
     *  Integrator: '<S2>/Integrator1'
     */
    w1 = cos(rtX.Integrator1_CSTATE[2]);
 8009ba6:	4ba0      	ldr	r3, [pc, #640]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009ba8:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8009bac:	eeb0 0a47 	vmov.f32	s0, s14
 8009bb0:	eef0 0a67 	vmov.f32	s1, s15
 8009bb4:	f005 fc58 	bl	800f468 <cos>
 8009bb8:	ed87 0bb2 	vstr	d0, [r7, #712]	@ 0x2c8
    w2 = sin(rtX.Integrator1_CSTATE[2]);
 8009bbc:	4b9a      	ldr	r3, [pc, #616]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009bbe:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8009bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8009bc6:	eef0 0a67 	vmov.f32	s1, s15
 8009bca:	f005 fca1 	bl	800f510 <sin>
 8009bce:	ed87 0bb0 	vstr	d0, [r7, #704]	@ 0x2c0
    B_0[0] = (w1 + w2) * 20.833333333333332;
 8009bd2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8009bd6:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8009bda:	f7f6 fb5f 	bl	800029c <__adddf3>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
 8009be6:	a38e      	add	r3, pc, #568	@ (adr r3, 8009e20 <dynamic_8_g_step+0x24f8>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fd0c 	bl	8000608 <__aeabi_dmul>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009bf8:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8009bfc:	e9c1 2300 	strd	r2, r3, [r1]
    B_0[3] = (w1 - w2) * 20.833333333333332;
 8009c00:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8009c04:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8009c08:	f7f6 fb46 	bl	8000298 <__aeabi_dsub>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	a382      	add	r3, pc, #520	@ (adr r3, 8009e20 <dynamic_8_g_step+0x24f8>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 fcf5 	bl	8000608 <__aeabi_dmul>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009c26:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8009c2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    xm = cos(rtX.Integrator1_CSTATE[2]);
 8009c2e:	4b7e      	ldr	r3, [pc, #504]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009c30:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8009c34:	eeb0 0a47 	vmov.f32	s0, s14
 8009c38:	eef0 0a67 	vmov.f32	s1, s15
 8009c3c:	f005 fc14 	bl	800f468 <cos>
 8009c40:	ed87 0bac 	vstr	d0, [r7, #688]	@ 0x2b0
    w3 = sin(rtX.Integrator1_CSTATE[2]);
 8009c44:	4b78      	ldr	r3, [pc, #480]	@ (8009e28 <dynamic_8_g_step+0x2500>)
 8009c46:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8009c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8009c4e:	eef0 0a67 	vmov.f32	s1, s15
 8009c52:	f005 fc5d 	bl	800f510 <sin>
 8009c56:	ed87 0bae 	vstr	d0, [r7, #696]	@ 0x2b8
    ym = (xm + w3) * 20.833333333333332;
 8009c5a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8009c5e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009c62:	f7f6 fb1b 	bl	800029c <__adddf3>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	a36c      	add	r3, pc, #432	@ (adr r3, 8009e20 <dynamic_8_g_step+0x24f8>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fcc8 	bl	8000608 <__aeabi_dmul>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    B_0[6] = ym;
 8009c80:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009c84:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009c88:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8009c8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    B_0[9] = (xm - w3) * 20.833333333333332;
 8009c90:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8009c94:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009c98:	f7f6 fafe 	bl	8000298 <__aeabi_dsub>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009e20 <dynamic_8_g_step+0x24f8>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 fcad 	bl	8000608 <__aeabi_dmul>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009cb6:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8009cba:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    B_0[1] = (-w1 + w2) * 20.833333333333332;
 8009cbe:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8009cc2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8009cc6:	f7f6 fae7 	bl	8000298 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	a353      	add	r3, pc, #332	@ (adr r3, 8009e20 <dynamic_8_g_step+0x24f8>)
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009ce4:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8009ce8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    B_0[4] = ym;
 8009cec:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009cf0:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009cf4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8009cf8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    B_0[7] = (-xm + w3) * 20.833333333333332;
 8009cfc:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8009d00:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009d04:	f7f6 fac8 	bl	8000298 <__aeabi_dsub>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4619      	mov	r1, r3
 8009d10:	a343      	add	r3, pc, #268	@ (adr r3, 8009e20 <dynamic_8_g_step+0x24f8>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fc77 	bl	8000608 <__aeabi_dmul>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	f507 7142 	add.w	r1, r7, #776	@ 0x308
 8009d22:	f5a1 7106 	sub.w	r1, r1, #536	@ 0x218
 8009d26:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    B_0[10] = ym;
 8009d2a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009d2e:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009d32:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8009d36:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    B_0[2] = -12.499999999999998;
 8009d3a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009d3e:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009d42:	f04f 32ff 	mov.w	r2, #4294967295
 8009d46:	4b3b      	ldr	r3, [pc, #236]	@ (8009e34 <dynamic_8_g_step+0x250c>)
 8009d48:	e9c1 2304 	strd	r2, r3, [r1, #16]
    B_0[5] = 12.499999999999998;
 8009d4c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009d50:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	4b37      	ldr	r3, [pc, #220]	@ (8009e38 <dynamic_8_g_step+0x2510>)
 8009d5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    B_0[8] = 12.499999999999998;
 8009d5e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009d62:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	4b33      	ldr	r3, [pc, #204]	@ (8009e38 <dynamic_8_g_step+0x2510>)
 8009d6c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    B_0[11] = -12.499999999999998;
 8009d70:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8009d74:	f5a3 7106 	sub.w	r1, r3, #536	@ 0x218
 8009d78:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8009e34 <dynamic_8_g_step+0x250c>)
 8009d7e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    xm = w1 * rtDW.Integrator[0] + w2 * rtDW.Integrator[1];
 8009d82:	4b2a      	ldr	r3, [pc, #168]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009d84:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8009d88:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8009d8c:	f7f6 fc3c 	bl	8000608 <__aeabi_dmul>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4614      	mov	r4, r2
 8009d96:	461d      	mov	r5, r3
 8009d98:	4b24      	ldr	r3, [pc, #144]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009d9a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009d9e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8009da2:	f7f6 fc31 	bl	8000608 <__aeabi_dmul>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fa75 	bl	800029c <__adddf3>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    ym = -w2 * rtDW.Integrator[0] + w1 * rtDW.Integrator[1];
 8009dba:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8009dc4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8009dc8:	607b      	str	r3, [r7, #4]
 8009dca:	4b18      	ldr	r3, [pc, #96]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009dcc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dd4:	f7f6 fc18 	bl	8000608 <__aeabi_dmul>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4614      	mov	r4, r2
 8009dde:	461d      	mov	r5, r3
 8009de0:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009de2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009de6:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8009dea:	f7f6 fc0d 	bl	8000608 <__aeabi_dmul>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	4620      	mov	r0, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	f7f6 fa51 	bl	800029c <__adddf3>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    w3 = xm - ym;
 8009e02:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8009e06:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8009e0a:	f7f6 fa45 	bl	8000298 <__aeabi_dsub>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
    w1 = (w3 - 0.6 * rtDW.Integrator[2]) * 20.833333333333332;
 8009e16:	4b05      	ldr	r3, [pc, #20]	@ (8009e2c <dynamic_8_g_step+0x2504>)
 8009e18:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8009e1c:	e00e      	b.n	8009e3c <dynamic_8_g_step+0x2514>
 8009e1e:	bf00      	nop
 8009e20:	55555555 	.word	0x55555555
 8009e24:	4034d555 	.word	0x4034d555
 8009e28:	200005d8 	.word	0x200005d8
 8009e2c:	20000608 	.word	0x20000608
 8009e30:	20000740 	.word	0x20000740
 8009e34:	c028ffff 	.word	0xc028ffff
 8009e38:	4028ffff 	.word	0x4028ffff
 8009e3c:	a3ba      	add	r3, pc, #744	@ (adr r3, 800a128 <dynamic_8_g_step+0x2800>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fbe1 	bl	8000608 <__aeabi_dmul>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009e4e:	f7f6 fa23 	bl	8000298 <__aeabi_dsub>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4610      	mov	r0, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a130 <dynamic_8_g_step+0x2808>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 fbd2 	bl	8000608 <__aeabi_dmul>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
    ym += xm;
 8009e6c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8009e70:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8009e74:	f7f6 fa12 	bl	800029c <__adddf3>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    w2 = (ym + 0.6 * rtDW.Integrator[2]) * 20.833333333333332;
 8009e80:	4bb1      	ldr	r3, [pc, #708]	@ (800a148 <dynamic_8_g_step+0x2820>)
 8009e82:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8009e86:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a128 <dynamic_8_g_step+0x2800>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f7f6 fbbc 	bl	8000608 <__aeabi_dmul>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4610      	mov	r0, r2
 8009e96:	4619      	mov	r1, r3
 8009e98:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8009e9c:	f7f6 f9fe 	bl	800029c <__adddf3>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a130 <dynamic_8_g_step+0x2808>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 fbab 	bl	8000608 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
    w3 = (w3 + 0.6 * rtDW.Integrator[2]) * 20.833333333333332;
 8009eba:	4ba3      	ldr	r3, [pc, #652]	@ (800a148 <dynamic_8_g_step+0x2820>)
 8009ebc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8009ec0:	a399      	add	r3, pc, #612	@ (adr r3, 800a128 <dynamic_8_g_step+0x2800>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 fb9f 	bl	8000608 <__aeabi_dmul>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8009ed6:	f7f6 f9e1 	bl	800029c <__adddf3>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	a393      	add	r3, pc, #588	@ (adr r3, 800a130 <dynamic_8_g_step+0x2808>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7f6 fb8e 	bl	8000608 <__aeabi_dmul>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
    xm = (ym - 0.6 * rtDW.Integrator[2]) * 20.833333333333332;
 8009ef4:	4b94      	ldr	r3, [pc, #592]	@ (800a148 <dynamic_8_g_step+0x2820>)
 8009ef6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8009efa:	a38b      	add	r3, pc, #556	@ (adr r3, 800a128 <dynamic_8_g_step+0x2800>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 fb82 	bl	8000608 <__aeabi_dmul>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8009f0c:	f7f6 f9c4 	bl	8000298 <__aeabi_dsub>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4610      	mov	r0, r2
 8009f16:	4619      	mov	r1, r3
 8009f18:	a385      	add	r3, pc, #532	@ (adr r3, 800a130 <dynamic_8_g_step+0x2808>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 fb73 	bl	8000608 <__aeabi_dmul>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
    if (w1 > 2.0) {
 8009f2a:	f04f 0200 	mov.w	r2, #0
 8009f2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f32:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8009f36:	f7f6 fdf7 	bl	8000b28 <__aeabi_dcmpgt>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <dynamic_8_g_step+0x2626>
      w1 = 2.0;
 8009f40:	f04f 0200 	mov.w	r2, #0
 8009f44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f48:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
 8009f4c:	e010      	b.n	8009f70 <dynamic_8_g_step+0x2648>
    } else {
      if (w1 < -2.0) {
 8009f4e:	f04f 0200 	mov.w	r2, #0
 8009f52:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009f56:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8009f5a:	f7f6 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <dynamic_8_g_step+0x2648>
        w1 = -2.0;
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009f6c:	e9c7 23b2 	strd	r2, r3, [r7, #712]	@ 0x2c8
      }
    }

    if (w2 > 2.0) {
 8009f70:	f04f 0200 	mov.w	r2, #0
 8009f74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f78:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8009f7c:	f7f6 fdd4 	bl	8000b28 <__aeabi_dcmpgt>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d006      	beq.n	8009f94 <dynamic_8_g_step+0x266c>
      w2 = 2.0;
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f8e:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
 8009f92:	e010      	b.n	8009fb6 <dynamic_8_g_step+0x268e>
    } else {
      if (w2 < -2.0) {
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009f9c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8009fa0:	f7f6 fda4 	bl	8000aec <__aeabi_dcmplt>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d005      	beq.n	8009fb6 <dynamic_8_g_step+0x268e>
        w2 = -2.0;
 8009faa:	f04f 0200 	mov.w	r2, #0
 8009fae:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009fb2:	e9c7 23b0 	strd	r2, r3, [r7, #704]	@ 0x2c0
      }
    }

    if (w3 > 2.0) {
 8009fb6:	f04f 0200 	mov.w	r2, #0
 8009fba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009fbe:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009fc2:	f7f6 fdb1 	bl	8000b28 <__aeabi_dcmpgt>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d006      	beq.n	8009fda <dynamic_8_g_step+0x26b2>
      w3 = 2.0;
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009fd4:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
 8009fd8:	e010      	b.n	8009ffc <dynamic_8_g_step+0x26d4>
    } else {
      if (w3 < -2.0) {
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009fe2:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8009fe6:	f7f6 fd81 	bl	8000aec <__aeabi_dcmplt>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <dynamic_8_g_step+0x26d4>
        w3 = -2.0;
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8009ff8:	e9c7 23ae 	strd	r2, r3, [r7, #696]	@ 0x2b8
      }
    }

    if (xm > 2.0) {
 8009ffc:	f04f 0200 	mov.w	r2, #0
 800a000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a004:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800a008:	f7f6 fd8e 	bl	8000b28 <__aeabi_dcmpgt>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d006      	beq.n	800a020 <dynamic_8_g_step+0x26f8>
      xm = 2.0;
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a01a:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
 800a01e:	e010      	b.n	800a042 <dynamic_8_g_step+0x271a>
    } else {
      if (xm < -2.0) {
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800a028:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800a02c:	f7f6 fd5e 	bl	8000aec <__aeabi_dcmplt>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <dynamic_8_g_step+0x271a>
        xm = -2.0;
 800a036:	f04f 0200 	mov.w	r2, #0
 800a03a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800a03e:	e9c7 23ac 	strd	r2, r3, [r7, #688]	@ 0x2b0
      }
    }

    rtb_Derivative_idx_0 = rtb_Saturation[0];
 800a042:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800a046:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	e9c7 23ba 	strd	r2, r3, [r7, #744]	@ 0x2e8
    rtb_Derivative_idx_1 = rtb_Saturation[1];
 800a052:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800a056:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800a05a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a05e:	e9c7 23b8 	strd	r2, r3, [r7, #736]	@ 0x2e0
    rtb_Derivative_idx_2 = rtb_Saturation[2];
 800a062:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800a066:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800a06a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a06e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	@ 0x2d8
    rtb_Saturation_idx_3 = rtb_Saturation[3];
 800a072:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800a076:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 800a07a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a07e:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288
    x_0[0] = 178.61111111111111 * rtDW.Integrator[1] * rtDW.Integrator[2];
 800a082:	4b31      	ldr	r3, [pc, #196]	@ (800a148 <dynamic_8_g_step+0x2820>)
 800a084:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800a088:	a32b      	add	r3, pc, #172	@ (adr r3, 800a138 <dynamic_8_g_step+0x2810>)
 800a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08e:	f7f6 fabb 	bl	8000608 <__aeabi_dmul>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4610      	mov	r0, r2
 800a098:	4619      	mov	r1, r3
 800a09a:	4b2b      	ldr	r3, [pc, #172]	@ (800a148 <dynamic_8_g_step+0x2820>)
 800a09c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800a0a0:	f7f6 fab2 	bl	8000608 <__aeabi_dmul>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	e9c7 2384 	strd	r2, r3, [r7, #528]	@ 0x210
    x_0[1] = -178.61111111111111 * rtDW.Integrator[0] * rtDW.Integrator[2];
 800a0ac:	4b26      	ldr	r3, [pc, #152]	@ (800a148 <dynamic_8_g_step+0x2820>)
 800a0ae:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800a0b2:	a323      	add	r3, pc, #140	@ (adr r3, 800a140 <dynamic_8_g_step+0x2818>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 faa6 	bl	8000608 <__aeabi_dmul>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4b20      	ldr	r3, [pc, #128]	@ (800a148 <dynamic_8_g_step+0x2820>)
 800a0c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800a0ca:	f7f6 fa9d 	bl	8000608 <__aeabi_dmul>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
    x_0[2] = 0.0;
 800a0d6:	f04f 0200 	mov.w	r2, #0
 800a0da:	f04f 0300 	mov.w	r3, #0
 800a0de:	e9c7 2388 	strd	r2, r3, [r7, #544]	@ 0x220
    if (w1 < 0.0) {
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 800a0ee:	f7f6 fcfd 	bl	8000aec <__aeabi_dcmplt>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d005      	beq.n	800a104 <dynamic_8_g_step+0x27dc>
      ym = -1.0;
 800a0f8:	f04f 0200 	mov.w	r2, #0
 800a0fc:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <dynamic_8_g_step+0x2824>)
 800a0fe:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
 800a102:	e03e      	b.n	800a182 <dynamic_8_g_step+0x285a>
    } else if (w1 > 0.0) {
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	f04f 0300 	mov.w	r3, #0
 800a10c:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 800a110:	f7f6 fd0a 	bl	8000b28 <__aeabi_dcmpgt>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01c      	beq.n	800a154 <dynamic_8_g_step+0x282c>
      ym = 1.0;
 800a11a:	f04f 0200 	mov.w	r2, #0
 800a11e:	4b0c      	ldr	r3, [pc, #48]	@ (800a150 <dynamic_8_g_step+0x2828>)
 800a120:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
 800a124:	e02d      	b.n	800a182 <dynamic_8_g_step+0x285a>
 800a126:	bf00      	nop
 800a128:	33333333 	.word	0x33333333
 800a12c:	3fe33333 	.word	0x3fe33333
 800a130:	55555555 	.word	0x55555555
 800a134:	4034d555 	.word	0x4034d555
 800a138:	38e38e39 	.word	0x38e38e39
 800a13c:	4066538e 	.word	0x4066538e
 800a140:	38e38e39 	.word	0x38e38e39
 800a144:	c066538e 	.word	0xc066538e
 800a148:	20000608 	.word	0x20000608
 800a14c:	bff00000 	.word	0xbff00000
 800a150:	3ff00000 	.word	0x3ff00000
    } else if (w1 == 0.0) {
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 800a160:	f7f6 fcba 	bl	8000ad8 <__aeabi_dcmpeq>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d006      	beq.n	800a178 <dynamic_8_g_step+0x2850>
      ym = 0.0;
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
 800a176:	e004      	b.n	800a182 <dynamic_8_g_step+0x285a>
    } else {
      ym = (rtNaN);
 800a178:	4b71      	ldr	r3, [pc, #452]	@ (800a340 <dynamic_8_g_step+0x2a18>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    }

    ym *= 0.00588;
 800a182:	a36d      	add	r3, pc, #436	@ (adr r3, 800a338 <dynamic_8_g_step+0x2a10>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800a18c:	f7f6 fa3c 	bl	8000608 <__aeabi_dmul>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
    if (w2 < 0.0) {
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 800a1a4:	f7f6 fca2 	bl	8000aec <__aeabi_dcmplt>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <dynamic_8_g_step+0x2892>
      absx21 = -1.0;
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	4b64      	ldr	r3, [pc, #400]	@ (800a344 <dynamic_8_g_step+0x2a1c>)
 800a1b4:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
 800a1b8:	e027      	b.n	800a20a <dynamic_8_g_step+0x28e2>
    } else if (w2 > 0.0) {
 800a1ba:	f04f 0200 	mov.w	r2, #0
 800a1be:	f04f 0300 	mov.w	r3, #0
 800a1c2:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 800a1c6:	f7f6 fcaf 	bl	8000b28 <__aeabi_dcmpgt>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <dynamic_8_g_step+0x28b4>
      absx21 = 1.0;
 800a1d0:	f04f 0200 	mov.w	r2, #0
 800a1d4:	4b5c      	ldr	r3, [pc, #368]	@ (800a348 <dynamic_8_g_step+0x2a20>)
 800a1d6:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
 800a1da:	e016      	b.n	800a20a <dynamic_8_g_step+0x28e2>
    } else if (w2 == 0.0) {
 800a1dc:	f04f 0200 	mov.w	r2, #0
 800a1e0:	f04f 0300 	mov.w	r3, #0
 800a1e4:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 800a1e8:	f7f6 fc76 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d006      	beq.n	800a200 <dynamic_8_g_step+0x28d8>
      absx21 = 0.0;
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	f04f 0300 	mov.w	r3, #0
 800a1fa:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
 800a1fe:	e004      	b.n	800a20a <dynamic_8_g_step+0x28e2>
    } else {
      absx21 = (rtNaN);
 800a200:	4b4f      	ldr	r3, [pc, #316]	@ (800a340 <dynamic_8_g_step+0x2a18>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
    }

    absx21 *= 0.00588;
 800a20a:	a34b      	add	r3, pc, #300	@ (adr r3, 800a338 <dynamic_8_g_step+0x2a10>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
 800a214:	f7f6 f9f8 	bl	8000608 <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	e9c7 23be 	strd	r2, r3, [r7, #760]	@ 0x2f8
    if (w3 < 0.0) {
 800a220:	f04f 0200 	mov.w	r2, #0
 800a224:	f04f 0300 	mov.w	r3, #0
 800a228:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a22c:	f7f6 fc5e 	bl	8000aec <__aeabi_dcmplt>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <dynamic_8_g_step+0x291a>
      absx31 = -1.0;
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	4b42      	ldr	r3, [pc, #264]	@ (800a344 <dynamic_8_g_step+0x2a1c>)
 800a23c:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
 800a240:	e027      	b.n	800a292 <dynamic_8_g_step+0x296a>
    } else if (w3 > 0.0) {
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a24e:	f7f6 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d005      	beq.n	800a264 <dynamic_8_g_step+0x293c>
      absx31 = 1.0;
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	4b3a      	ldr	r3, [pc, #232]	@ (800a348 <dynamic_8_g_step+0x2a20>)
 800a25e:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
 800a262:	e016      	b.n	800a292 <dynamic_8_g_step+0x296a>
    } else if (w3 == 0.0) {
 800a264:	f04f 0200 	mov.w	r2, #0
 800a268:	f04f 0300 	mov.w	r3, #0
 800a26c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800a270:	f7f6 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d006      	beq.n	800a288 <dynamic_8_g_step+0x2960>
      absx31 = 0.0;
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
 800a286:	e004      	b.n	800a292 <dynamic_8_g_step+0x296a>
    } else {
      absx31 = (rtNaN);
 800a288:	4b2d      	ldr	r3, [pc, #180]	@ (800a340 <dynamic_8_g_step+0x2a18>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
    }

    absx31 *= 0.00588;
 800a292:	a329      	add	r3, pc, #164	@ (adr r3, 800a338 <dynamic_8_g_step+0x2a10>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	@ 0x2f0
 800a29c:	f7f6 f9b4 	bl	8000608 <__aeabi_dmul>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	e9c7 23bc 	strd	r2, r3, [r7, #752]	@ 0x2f0
    if (xm < 0.0) {
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	f04f 0300 	mov.w	r3, #0
 800a2b0:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800a2b4:	f7f6 fc1a 	bl	8000aec <__aeabi_dcmplt>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <dynamic_8_g_step+0x29a2>
      tmp_0 = -1.0;
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	4b20      	ldr	r3, [pc, #128]	@ (800a344 <dynamic_8_g_step+0x2a1c>)
 800a2c4:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
 800a2c8:	e027      	b.n	800a31a <dynamic_8_g_step+0x29f2>
    } else if (xm > 0.0) {
 800a2ca:	f04f 0200 	mov.w	r2, #0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800a2d6:	f7f6 fc27 	bl	8000b28 <__aeabi_dcmpgt>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d005      	beq.n	800a2ec <dynamic_8_g_step+0x29c4>
      tmp_0 = 1.0;
 800a2e0:	f04f 0200 	mov.w	r2, #0
 800a2e4:	4b18      	ldr	r3, [pc, #96]	@ (800a348 <dynamic_8_g_step+0x2a20>)
 800a2e6:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
 800a2ea:	e016      	b.n	800a31a <dynamic_8_g_step+0x29f2>
    } else if (xm == 0.0) {
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	f04f 0300 	mov.w	r3, #0
 800a2f4:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 800a2f8:	f7f6 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d006      	beq.n	800a310 <dynamic_8_g_step+0x29e8>
      tmp_0 = 0.0;
 800a302:	f04f 0200 	mov.w	r2, #0
 800a306:	f04f 0300 	mov.w	r3, #0
 800a30a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
 800a30e:	e004      	b.n	800a31a <dynamic_8_g_step+0x29f2>
    } else {
      tmp_0 = (rtNaN);
 800a310:	4b0b      	ldr	r3, [pc, #44]	@ (800a340 <dynamic_8_g_step+0x2a18>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
    }

    tmp_0 *= 0.00588;
 800a31a:	a307      	add	r3, pc, #28	@ (adr r3, 800a338 <dynamic_8_g_step+0x2a10>)
 800a31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a320:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 800a324:	f7f6 f970 	bl	8000608 <__aeabi_dmul>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	e9c7 23b4 	strd	r2, r3, [r7, #720]	@ 0x2d0
    for (p1 = 0; p1 < 3; p1++) {
 800a330:	2300      	movs	r3, #0
 800a332:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800a336:	e0d9      	b.n	800a4ec <dynamic_8_g_step+0x2bc4>
 800a338:	7b352a84 	.word	0x7b352a84
 800a33c:	3f7815a0 	.word	0x3f7815a0
 800a340:	20000a78 	.word	0x20000a78
 800a344:	bff00000 	.word	0xbff00000
 800a348:	3ff00000 	.word	0x3ff00000
      B_2 = B_0[p1];
 800a34c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800a350:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800a354:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a358:	00db      	lsls	r3, r3, #3
 800a35a:	4413      	add	r3, r2
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
      tmp = B_2 * ym;
 800a364:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800a368:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a36c:	f7f6 f94c 	bl	8000608 <__aeabi_dmul>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
      B_3 = B_2 * rtb_Derivative_idx_0;
 800a378:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 800a37c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a380:	f7f6 f942 	bl	8000608 <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
      B_2 = B_0[p1 + 3];
 800a38c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a390:	3303      	adds	r3, #3
 800a392:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800a396:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	4413      	add	r3, r2
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
      tmp += B_2 * absx21;
 800a3a6:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 800a3aa:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a3ae:	f7f6 f92b 	bl	8000608 <__aeabi_dmul>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800a3ba:	f7f5 ff6f 	bl	800029c <__adddf3>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
      B_3 += B_2 * rtb_Derivative_idx_1;
 800a3c6:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 800a3ca:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a3ce:	f7f6 f91b 	bl	8000608 <__aeabi_dmul>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800a3da:	f7f5 ff5f 	bl	800029c <__adddf3>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
      B_2 = B_0[p1 + 6];
 800a3e6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a3ea:	3306      	adds	r3, #6
 800a3ec:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800a3f0:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
      tmp += B_2 * absx31;
 800a400:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800a404:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a408:	f7f6 f8fe 	bl	8000608 <__aeabi_dmul>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800a414:	f7f5 ff42 	bl	800029c <__adddf3>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
      B_3 += B_2 * rtb_Derivative_idx_2;
 800a420:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 800a424:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a428:	f7f6 f8ee 	bl	8000608 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800a434:	f7f5 ff32 	bl	800029c <__adddf3>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
      B_2 = B_0[p1 + 9];
 800a440:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a444:	3309      	adds	r3, #9
 800a446:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800a44a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	4413      	add	r3, r2
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	e9c7 23a0 	strd	r2, r3, [r7, #640]	@ 0x280
      tmp += B_2 * tmp_0;
 800a45a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 800a45e:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a462:	f7f6 f8d1 	bl	8000608 <__aeabi_dmul>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800a46e:	f7f5 ff15 	bl	800029c <__adddf3>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278
      B_3 += B_2 * rtb_Saturation_idx_3;
 800a47a:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 800a47e:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800a482:	f7f6 f8c1 	bl	8000608 <__aeabi_dmul>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800a48e:	f7f5 ff05 	bl	800029c <__adddf3>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
      B_1[p1] = (B_3 - x_0[p1]) - tmp;
 800a49a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800a4a4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800a4a8:	4413      	add	r3, r2
 800a4aa:	3bf8      	subs	r3, #248	@ 0xf8
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800a4b4:	f7f5 fef0 	bl	8000298 <__aeabi_dsub>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4610      	mov	r0, r2
 800a4be:	4619      	mov	r1, r3
 800a4c0:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 800a4c4:	f7f5 fee8 	bl	8000298 <__aeabi_dsub>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 800a4d0:	00c9      	lsls	r1, r1, #3
 800a4d2:	f501 7132 	add.w	r1, r1, #712	@ 0x2c8
 800a4d6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800a4da:	4401      	add	r1, r0
 800a4dc:	39b0      	subs	r1, #176	@ 0xb0
 800a4de:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 3; p1++) {
 800a4e2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800a4ec:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	f77f af2b 	ble.w	800a34c <dynamic_8_g_step+0x2a24>
    }

    for (p1 = 0; p1 < 3; p1++) {
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800a4fc:	e07b      	b.n	800a5f6 <dynamic_8_g_step+0x2cce>
      rtDW.Q_2dot[p1] = 0.0;
 800a4fe:	4aa3      	ldr	r2, [pc, #652]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a500:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a504:	3309      	adds	r3, #9
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	18d1      	adds	r1, r2, r3
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.Q_2dot[p1] += b_a[p1] * B_1[0];
 800a516:	4a9d      	ldr	r2, [pc, #628]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a518:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a51c:	3309      	adds	r3, #9
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	4413      	add	r3, r2
 800a522:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a526:	4a9a      	ldr	r2, [pc, #616]	@ (800a790 <dynamic_8_g_step+0x2e68>)
 800a528:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	4413      	add	r3, r2
 800a530:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a534:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 800a538:	f7f6 f866 	bl	8000608 <__aeabi_dmul>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4620      	mov	r0, r4
 800a542:	4629      	mov	r1, r5
 800a544:	f7f5 feaa 	bl	800029c <__adddf3>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	488f      	ldr	r0, [pc, #572]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a54e:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 800a552:	3109      	adds	r1, #9
 800a554:	00c9      	lsls	r1, r1, #3
 800a556:	4401      	add	r1, r0
 800a558:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.Q_2dot[p1] += b_a[p1 + 3] * B_1[1];
 800a55c:	4a8b      	ldr	r2, [pc, #556]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a55e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a562:	3309      	adds	r3, #9
 800a564:	00db      	lsls	r3, r3, #3
 800a566:	4413      	add	r3, r2
 800a568:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a56c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a570:	3303      	adds	r3, #3
 800a572:	4a87      	ldr	r2, [pc, #540]	@ (800a790 <dynamic_8_g_step+0x2e68>)
 800a574:	00db      	lsls	r3, r3, #3
 800a576:	4413      	add	r3, r2
 800a578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a57c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 800a580:	f7f6 f842 	bl	8000608 <__aeabi_dmul>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7f5 fe86 	bl	800029c <__adddf3>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	487d      	ldr	r0, [pc, #500]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a596:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 800a59a:	3109      	adds	r1, #9
 800a59c:	00c9      	lsls	r1, r1, #3
 800a59e:	4401      	add	r1, r0
 800a5a0:	e9c1 2300 	strd	r2, r3, [r1]
      rtDW.Q_2dot[p1] += b_a[p1 + 6] * B_1[2];
 800a5a4:	4a79      	ldr	r2, [pc, #484]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a5a6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a5aa:	3309      	adds	r3, #9
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a5b4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a5b8:	3306      	adds	r3, #6
 800a5ba:	4a75      	ldr	r2, [pc, #468]	@ (800a790 <dynamic_8_g_step+0x2e68>)
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	4413      	add	r3, r2
 800a5c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5c4:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 800a5c8:	f7f6 f81e 	bl	8000608 <__aeabi_dmul>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	f7f5 fe62 	bl	800029c <__adddf3>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	486b      	ldr	r0, [pc, #428]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a5de:	f8d7 12a4 	ldr.w	r1, [r7, #676]	@ 0x2a4
 800a5e2:	3109      	adds	r1, #9
 800a5e4:	00c9      	lsls	r1, r1, #3
 800a5e6:	4401      	add	r1, r0
 800a5e8:	e9c1 2300 	strd	r2, r3, [r1]
    for (p1 = 0; p1 < 3; p1++) {
 800a5ec:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800a5f6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	f77f af7f 	ble.w	800a4fe <dynamic_8_g_step+0x2bd6>
    }

    /* Outport: '<Root>/w1' incorporates:
     *  MATLAB Function: '<S2>/robot'
     */
    rtY.w1 = w1;
 800a600:	4964      	ldr	r1, [pc, #400]	@ (800a794 <dynamic_8_g_step+0x2e6c>)
 800a602:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 800a606:	e9c1 2300 	strd	r2, r3, [r1]

    /* Outport: '<Root>/w2' incorporates:
     *  MATLAB Function: '<S2>/robot'
     */
    rtY.w2 = w2;
 800a60a:	4962      	ldr	r1, [pc, #392]	@ (800a794 <dynamic_8_g_step+0x2e6c>)
 800a60c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 800a610:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* Outport: '<Root>/w3' incorporates:
     *  MATLAB Function: '<S2>/robot'
     */
    rtY.w3 = w3;
 800a614:	495f      	ldr	r1, [pc, #380]	@ (800a794 <dynamic_8_g_step+0x2e6c>)
 800a616:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 800a61a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* Outport: '<Root>/w4' incorporates:
     *  MATLAB Function: '<S2>/robot'
     */
    rtY.w4 = xm;
 800a61e:	495d      	ldr	r1, [pc, #372]	@ (800a794 <dynamic_8_g_step+0x2e6c>)
 800a620:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 800a624:	e9c1 2306 	strd	r2, r3, [r1, #24]
  }

  if (rtmIsMajorTimeStep(rtM)) {
 800a628:	4b5b      	ldr	r3, [pc, #364]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a62a:	f893 32a5 	ldrb.w	r3, [r3, #677]	@ 0x2a5
 800a62e:	2b01      	cmp	r3, #1
 800a630:	f040 8147 	bne.w	800a8c2 <dynamic_8_g_step+0x2f9a>
    real_T (*lastU)[3];

    /* Update for Derivative: '<S1>/Derivative1' incorporates:
     *  Constant: '<Root>/Constant'
     */
    if (rtDW.TimeStampA == (rtInf)) {
 800a634:	4b55      	ldr	r3, [pc, #340]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a636:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800a63a:	4b58      	ldr	r3, [pc, #352]	@ (800a79c <dynamic_8_g_step+0x2e74>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f7f6 fa4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00b      	beq.n	800a662 <dynamic_8_g_step+0x2d3a>
      rtDW.TimeStampA = rtM->Timing.t[0];
 800a64a:	4b53      	ldr	r3, [pc, #332]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a64c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	494d      	ldr	r1, [pc, #308]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a656:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
      lastU = &rtDW.LastUAtTimeA;
 800a65a:	4b51      	ldr	r3, [pc, #324]	@ (800a7a0 <dynamic_8_g_step+0x2e78>)
 800a65c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a660:	e038      	b.n	800a6d4 <dynamic_8_g_step+0x2dac>
    } else if (rtDW.TimeStampB == (rtInf)) {
 800a662:	4b4a      	ldr	r3, [pc, #296]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a664:	e9d3 0142 	ldrd	r0, r1, [r3, #264]	@ 0x108
 800a668:	4b4c      	ldr	r3, [pc, #304]	@ (800a79c <dynamic_8_g_step+0x2e74>)
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	f7f6 fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00b      	beq.n	800a690 <dynamic_8_g_step+0x2d68>
      rtDW.TimeStampB = rtM->Timing.t[0];
 800a678:	4b47      	ldr	r3, [pc, #284]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a67a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	4942      	ldr	r1, [pc, #264]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a684:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108
      lastU = &rtDW.LastUAtTimeB;
 800a688:	4b46      	ldr	r3, [pc, #280]	@ (800a7a4 <dynamic_8_g_step+0x2e7c>)
 800a68a:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a68e:	e021      	b.n	800a6d4 <dynamic_8_g_step+0x2dac>
    } else if (rtDW.TimeStampA < rtDW.TimeStampB) {
 800a690:	4b3e      	ldr	r3, [pc, #248]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a692:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	@ 0x100
 800a696:	4b3d      	ldr	r3, [pc, #244]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a698:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 800a69c:	f7f6 fa26 	bl	8000aec <__aeabi_dcmplt>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <dynamic_8_g_step+0x2d96>
      rtDW.TimeStampA = rtM->Timing.t[0];
 800a6a6:	4b3c      	ldr	r3, [pc, #240]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a6a8:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	4936      	ldr	r1, [pc, #216]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a6b2:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
      lastU = &rtDW.LastUAtTimeA;
 800a6b6:	4b3a      	ldr	r3, [pc, #232]	@ (800a7a0 <dynamic_8_g_step+0x2e78>)
 800a6b8:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a6bc:	e00a      	b.n	800a6d4 <dynamic_8_g_step+0x2dac>
    } else {
      rtDW.TimeStampB = rtM->Timing.t[0];
 800a6be:	4b36      	ldr	r3, [pc, #216]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a6c0:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	4930      	ldr	r1, [pc, #192]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a6ca:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108
      lastU = &rtDW.LastUAtTimeB;
 800a6ce:	4b35      	ldr	r3, [pc, #212]	@ (800a7a4 <dynamic_8_g_step+0x2e7c>)
 800a6d0:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    }

    (*lastU)[0] = rtDW.SineWave1;
 800a6d4:	4b2d      	ldr	r3, [pc, #180]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a6d6:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 800a6da:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a6de:	e9c1 2300 	strd	r2, r3, [r1]
    (*lastU)[1] = rtDW.SineWave;
 800a6e2:	4b2a      	ldr	r3, [pc, #168]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a6e4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	@ 0xf8
 800a6e8:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a6ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*lastU)[2] = 0.0;
 800a6f0:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	f04f 0300 	mov.w	r3, #0
 800a6fc:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* End of Update for Derivative: '<S1>/Derivative1' */

    /* Update for Derivative: '<S1>/Derivative2' */
    if (rtDW.TimeStampA_m == (rtInf)) {
 800a700:	4b22      	ldr	r3, [pc, #136]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a702:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 800a706:	4b25      	ldr	r3, [pc, #148]	@ (800a79c <dynamic_8_g_step+0x2e74>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f6 f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <dynamic_8_g_step+0x2e06>
      rtDW.TimeStampA_m = rtM->Timing.t[0];
 800a716:	4b20      	ldr	r3, [pc, #128]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a718:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	491a      	ldr	r1, [pc, #104]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a722:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
      lastU = &rtDW.LastUAtTimeA_d;
 800a726:	4b20      	ldr	r3, [pc, #128]	@ (800a7a8 <dynamic_8_g_step+0x2e80>)
 800a728:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a72c:	e04b      	b.n	800a7c6 <dynamic_8_g_step+0x2e9e>
    } else if (rtDW.TimeStampB_i == (rtInf)) {
 800a72e:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a730:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	@ 0x118
 800a734:	4b19      	ldr	r3, [pc, #100]	@ (800a79c <dynamic_8_g_step+0x2e74>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	f7f6 f9cd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <dynamic_8_g_step+0x2e34>
      rtDW.TimeStampB_i = rtM->Timing.t[0];
 800a744:	4b14      	ldr	r3, [pc, #80]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a746:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	490f      	ldr	r1, [pc, #60]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a750:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
      lastU = &rtDW.LastUAtTimeB_o;
 800a754:	4b15      	ldr	r3, [pc, #84]	@ (800a7ac <dynamic_8_g_step+0x2e84>)
 800a756:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a75a:	e034      	b.n	800a7c6 <dynamic_8_g_step+0x2e9e>
    } else if (rtDW.TimeStampA_m < rtDW.TimeStampB_i) {
 800a75c:	4b0b      	ldr	r3, [pc, #44]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a75e:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	@ 0x110
 800a762:	4b0a      	ldr	r3, [pc, #40]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a764:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	@ 0x118
 800a768:	f7f6 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01e      	beq.n	800a7b0 <dynamic_8_g_step+0x2e88>
      rtDW.TimeStampA_m = rtM->Timing.t[0];
 800a772:	4b09      	ldr	r3, [pc, #36]	@ (800a798 <dynamic_8_g_step+0x2e70>)
 800a774:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	4903      	ldr	r1, [pc, #12]	@ (800a78c <dynamic_8_g_step+0x2e64>)
 800a77e:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
      lastU = &rtDW.LastUAtTimeA_d;
 800a782:	4b09      	ldr	r3, [pc, #36]	@ (800a7a8 <dynamic_8_g_step+0x2e80>)
 800a784:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a788:	e01d      	b.n	800a7c6 <dynamic_8_g_step+0x2e9e>
 800a78a:	bf00      	nop
 800a78c:	20000608 	.word	0x20000608
 800a790:	08010b28 	.word	0x08010b28
 800a794:	20000788 	.word	0x20000788
 800a798:	200007a8 	.word	0x200007a8
 800a79c:	20000a68 	.word	0x20000a68
 800a7a0:	20000668 	.word	0x20000668
 800a7a4:	20000680 	.word	0x20000680
 800a7a8:	20000698 	.word	0x20000698
 800a7ac:	200006b0 	.word	0x200006b0
    } else {
      rtDW.TimeStampB_i = rtM->Timing.t[0];
 800a7b0:	4b56      	ldr	r3, [pc, #344]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a7b2:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	4955      	ldr	r1, [pc, #340]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a7bc:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118
      lastU = &rtDW.LastUAtTimeB_o;
 800a7c0:	4b54      	ldr	r3, [pc, #336]	@ (800a914 <dynamic_8_g_step+0x2fec>)
 800a7c2:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    }

    (*lastU)[0] = rtDW.Derivative1[0];
 800a7c6:	4b52      	ldr	r3, [pc, #328]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a7d0:	e9c1 2300 	strd	r2, r3, [r1]
    (*lastU)[1] = rtDW.Derivative1[1];
 800a7d4:	4b4e      	ldr	r3, [pc, #312]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a7d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a7da:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a7de:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*lastU)[2] = rtDW.Derivative1[2];
 800a7e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a7e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a7e8:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a7ec:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* End of Update for Derivative: '<S1>/Derivative2' */

    /* Update for Derivative: '<S1>/Derivative' */
    if (rtDW.TimeStampA_o == (rtInf)) {
 800a7f0:	4b47      	ldr	r3, [pc, #284]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a7f2:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 800a7f6:	4b48      	ldr	r3, [pc, #288]	@ (800a918 <dynamic_8_g_step+0x2ff0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f6 f96c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00b      	beq.n	800a81e <dynamic_8_g_step+0x2ef6>
      rtDW.TimeStampA_o = rtM->Timing.t[0];
 800a806:	4b41      	ldr	r3, [pc, #260]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a808:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	493f      	ldr	r1, [pc, #252]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a812:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
      lastU = &rtDW.LastUAtTimeA_k;
 800a816:	4b41      	ldr	r3, [pc, #260]	@ (800a91c <dynamic_8_g_step+0x2ff4>)
 800a818:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a81c:	e038      	b.n	800a890 <dynamic_8_g_step+0x2f68>
    } else if (rtDW.TimeStampB_g == (rtInf)) {
 800a81e:	4b3c      	ldr	r3, [pc, #240]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a820:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	@ 0x128
 800a824:	4b3c      	ldr	r3, [pc, #240]	@ (800a918 <dynamic_8_g_step+0x2ff0>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f6 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00b      	beq.n	800a84c <dynamic_8_g_step+0x2f24>
      rtDW.TimeStampB_g = rtM->Timing.t[0];
 800a834:	4b35      	ldr	r3, [pc, #212]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a836:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	4934      	ldr	r1, [pc, #208]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a840:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
      lastU = &rtDW.LastUAtTimeB_on;
 800a844:	4b36      	ldr	r3, [pc, #216]	@ (800a920 <dynamic_8_g_step+0x2ff8>)
 800a846:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a84a:	e021      	b.n	800a890 <dynamic_8_g_step+0x2f68>
    } else if (rtDW.TimeStampA_o < rtDW.TimeStampB_g) {
 800a84c:	4b30      	ldr	r3, [pc, #192]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a84e:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	@ 0x120
 800a852:	4b2f      	ldr	r3, [pc, #188]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a854:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 800a858:	f7f6 f948 	bl	8000aec <__aeabi_dcmplt>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00b      	beq.n	800a87a <dynamic_8_g_step+0x2f52>
      rtDW.TimeStampA_o = rtM->Timing.t[0];
 800a862:	4b2a      	ldr	r3, [pc, #168]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a864:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	4928      	ldr	r1, [pc, #160]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a86e:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
      lastU = &rtDW.LastUAtTimeA_k;
 800a872:	4b2a      	ldr	r3, [pc, #168]	@ (800a91c <dynamic_8_g_step+0x2ff4>)
 800a874:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 800a878:	e00a      	b.n	800a890 <dynamic_8_g_step+0x2f68>
    } else {
      rtDW.TimeStampB_g = rtM->Timing.t[0];
 800a87a:	4b24      	ldr	r3, [pc, #144]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a87c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	4922      	ldr	r1, [pc, #136]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a886:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128
      lastU = &rtDW.LastUAtTimeB_on;
 800a88a:	4b25      	ldr	r3, [pc, #148]	@ (800a920 <dynamic_8_g_step+0x2ff8>)
 800a88c:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
    }

    (*lastU)[0] = rtDW.Sum[0];
 800a890:	4b1f      	ldr	r3, [pc, #124]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a892:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a896:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a89a:	e9c1 2300 	strd	r2, r3, [r1]
    (*lastU)[1] = rtDW.Sum[1];
 800a89e:	4b1c      	ldr	r3, [pc, #112]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a8a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8a4:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a8a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    (*lastU)[2] = rtDW.Sum[2];
 800a8ac:	4b18      	ldr	r3, [pc, #96]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a8ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a8b2:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 800a8b6:	e9c1 2304 	strd	r2, r3, [r1, #16]

    /* End of Update for Derivative: '<S1>/Derivative' */

    /* Update for Integrator: '<S2>/Integrator1' */
    rtDW.Integrator1_IWORK = 0;
 800a8ba:	4b15      	ldr	r3, [pc, #84]	@ (800a910 <dynamic_8_g_step+0x2fe8>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
  }                                    /* end MajorTimeStep */

  if (rtmIsMajorTimeStep(rtM)) {
 800a8c2:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a8c4:	f893 32a5 	ldrb.w	r3, [r3, #677]	@ 0x2a5
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d118      	bne.n	800a8fe <dynamic_8_g_step+0x2fd6>
    rt_ertODEUpdateContinuousStates(&rtM->solverInfo);
 800a8cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fc fc73 	bl	80071bc <rt_ertODEUpdateContinuousStates>
    /* The "clockTick0" counts the number of times the code of this task has
     * been executed. The absolute time is the multiplication of "clockTick0"
     * and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
     * overflow during the application lifespan selected.
     */
    ++rtM->Timing.clockTick0;
 800a8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a8d8:	f8d3 2290 	ldr.w	r2, [r3, #656]	@ 0x290
 800a8dc:	3201      	adds	r2, #1
 800a8de:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
    rtM->Timing.t[0] = rtsiGetSolverStopTime(&rtM->solverInfo);
 800a8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a8e4:	4a09      	ldr	r2, [pc, #36]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a8e6:	f8d2 12a8 	ldr.w	r1, [r2, #680]	@ 0x2a8
 800a8ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8ee:	e9c1 2300 	strd	r2, r3, [r1]
      /* The "clockTick1" counts the number of times the code of this task has
       * been executed. The resolution of this integer timer is 0.01, which is the step size
       * of the task. Size of "clockTick1" ensures timer will not overflow during the
       * application lifespan selected.
       */
      rtM->Timing.clockTick1++;
 800a8f2:	4b06      	ldr	r3, [pc, #24]	@ (800a90c <dynamic_8_g_step+0x2fe4>)
 800a8f4:	f8d3 22a0 	ldr.w	r2, [r3, #672]	@ 0x2a0
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	f8c3 22a0 	str.w	r2, [r3, #672]	@ 0x2a0
    }
  }                                    /* end MajorTimeStep */
}
 800a8fe:	bf00      	nop
 800a900:	f507 7742 	add.w	r7, r7, #776	@ 0x308
 800a904:	46bd      	mov	sp, r7
 800a906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a90a:	bf00      	nop
 800a90c:	200007a8 	.word	0x200007a8
 800a910:	20000608 	.word	0x20000608
 800a914:	200006b0 	.word	0x200006b0
 800a918:	20000a68 	.word	0x20000a68
 800a91c:	200006c8 	.word	0x200006c8
 800a920:	200006e0 	.word	0x200006e0

0800a924 <dynamic_8_g_derivatives>:

/* Derivatives for root system: '<Root>' */
void dynamic_8_g_derivatives(void)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
  XDot *_rtXdot;
  _rtXdot = ((XDot *) rtM->derivs);
 800a92a:	4b17      	ldr	r3, [pc, #92]	@ (800a988 <dynamic_8_g_derivatives+0x64>)
 800a92c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800a930:	607b      	str	r3, [r7, #4]

  /* Derivatives for Integrator: '<S2>/Integrator' */
  _rtXdot->Integrator_CSTATE[0] = rtDW.Q_2dot[0];
 800a932:	4b16      	ldr	r3, [pc, #88]	@ (800a98c <dynamic_8_g_derivatives+0x68>)
 800a934:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	e9c1 2300 	strd	r2, r3, [r1]

  /* Derivatives for Integrator: '<S2>/Integrator1' */
  _rtXdot->Integrator1_CSTATE[0] = rtDW.Integrator[0];
 800a93e:	4b13      	ldr	r3, [pc, #76]	@ (800a98c <dynamic_8_g_derivatives+0x68>)
 800a940:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	e9c1 2306 	strd	r2, r3, [r1, #24]

  /* Derivatives for Integrator: '<S2>/Integrator' */
  _rtXdot->Integrator_CSTATE[1] = rtDW.Q_2dot[1];
 800a94a:	4b10      	ldr	r3, [pc, #64]	@ (800a98c <dynamic_8_g_derivatives+0x68>)
 800a94c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Derivatives for Integrator: '<S2>/Integrator1' */
  _rtXdot->Integrator1_CSTATE[1] = rtDW.Integrator[1];
 800a956:	4b0d      	ldr	r3, [pc, #52]	@ (800a98c <dynamic_8_g_derivatives+0x68>)
 800a958:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a95c:	6879      	ldr	r1, [r7, #4]
 800a95e:	e9c1 2308 	strd	r2, r3, [r1, #32]

  /* Derivatives for Integrator: '<S2>/Integrator' */
  _rtXdot->Integrator_CSTATE[2] = rtDW.Q_2dot[2];
 800a962:	4b0a      	ldr	r3, [pc, #40]	@ (800a98c <dynamic_8_g_derivatives+0x68>)
 800a964:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800a968:	6879      	ldr	r1, [r7, #4]
 800a96a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Derivatives for Integrator: '<S2>/Integrator1' */
  _rtXdot->Integrator1_CSTATE[2] = rtDW.Integrator[2];
 800a96e:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <dynamic_8_g_derivatives+0x68>)
 800a970:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800a974:	6879      	ldr	r1, [r7, #4]
 800a976:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 800a97a:	bf00      	nop
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	200007a8 	.word	0x200007a8
 800a98c:	20000608 	.word	0x20000608

0800a990 <dynamic_8_g_initialize>:

/* Model initialize function */
void dynamic_8_g_initialize(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800a994:	2008      	movs	r0, #8
 800a996:	f7fc fbcd 	bl	8007134 <rt_InitInfAndNaN>

  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);
 800a99a:	4b75      	ldr	r3, [pc, #468]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a99c:	4a74      	ldr	r2, [pc, #464]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a99e:	f203 23a5 	addw	r3, r3, #677	@ 0x2a5
 800a9a2:	60d3      	str	r3, [r2, #12]
    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));
 800a9a4:	4b72      	ldr	r3, [pc, #456]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9a6:	4a72      	ldr	r2, [pc, #456]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9a8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a9ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);
 800a9b0:	4b6f      	ldr	r3, [pc, #444]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9b2:	4a6f      	ldr	r2, [pc, #444]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9b4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a9b8:	6293      	str	r3, [r2, #40]	@ 0x28
    rtsiSetdXPtr(&rtM->solverInfo, &rtM->derivs);
 800a9ba:	4b6d      	ldr	r3, [pc, #436]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9bc:	4a6c      	ldr	r2, [pc, #432]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9be:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800a9c2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    rtsiSetContStatesPtr(&rtM->solverInfo, (real_T **) &rtM->contStates);
 800a9c6:	4b6a      	ldr	r3, [pc, #424]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9c8:	4a69      	ldr	r2, [pc, #420]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a9ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    rtsiSetNumContStatesPtr(&rtM->solverInfo, &rtM->Sizes.numContStates);
 800a9d2:	4b67      	ldr	r3, [pc, #412]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9d4:	4a66      	ldr	r2, [pc, #408]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9d6:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800a9da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    rtsiSetNumPeriodicContStatesPtr(&rtM->solverInfo,
 800a9de:	4b64      	ldr	r3, [pc, #400]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9e0:	4a63      	ldr	r2, [pc, #396]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9e2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800a9e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      &rtM->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&rtM->solverInfo,
 800a9ea:	4b61      	ldr	r3, [pc, #388]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9ec:	4a60      	ldr	r2, [pc, #384]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9ee:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800a9f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      &rtM->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&rtM->solverInfo,
 800a9f6:	4b5e      	ldr	r3, [pc, #376]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9f8:	4a5d      	ldr	r2, [pc, #372]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800a9fa:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800a9fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      &rtM->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));
 800aa02:	4a5b      	ldr	r2, [pc, #364]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa04:	4b5a      	ldr	r3, [pc, #360]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa06:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);
 800aa0a:	4b59      	ldr	r3, [pc, #356]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa0c:	4a58      	ldr	r2, [pc, #352]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa0e:	609a      	str	r2, [r3, #8]
  }

  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);
 800aa10:	4b57      	ldr	r3, [pc, #348]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2201      	movs	r2, #1
 800aa16:	701a      	strb	r2, [r3, #0]
  rtM->intgData.y = rtM->odeY;
 800aa18:	4b55      	ldr	r3, [pc, #340]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa1a:	4a55      	ldr	r2, [pc, #340]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa1c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800aa20:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
  rtM->intgData.f[0] = rtM->odeF[0];
 800aa24:	4b52      	ldr	r3, [pc, #328]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa26:	4a52      	ldr	r2, [pc, #328]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa28:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800aa2c:	f8c2 326c 	str.w	r3, [r2, #620]	@ 0x26c
  rtM->intgData.f[1] = rtM->odeF[1];
 800aa30:	4b4f      	ldr	r3, [pc, #316]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa32:	4a4f      	ldr	r2, [pc, #316]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa34:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800aa38:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
  rtM->intgData.f[2] = rtM->odeF[2];
 800aa3c:	4b4c      	ldr	r3, [pc, #304]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa3e:	4a4c      	ldr	r2, [pc, #304]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa40:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800aa44:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
  rtM->intgData.f[3] = rtM->odeF[3];
 800aa48:	4b49      	ldr	r3, [pc, #292]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa4a:	4a49      	ldr	r2, [pc, #292]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa4c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800aa50:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  rtM->intgData.f[4] = rtM->odeF[4];
 800aa54:	4b46      	ldr	r3, [pc, #280]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa56:	4a46      	ldr	r2, [pc, #280]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa58:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800aa5c:	f8c2 327c 	str.w	r3, [r2, #636]	@ 0x27c
  rtM->intgData.f[5] = rtM->odeF[5];
 800aa60:	4b43      	ldr	r3, [pc, #268]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa62:	4a43      	ldr	r2, [pc, #268]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa64:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800aa68:	f8c2 3280 	str.w	r3, [r2, #640]	@ 0x280
  rtM->contStates = ((X *) &rtX);
 800aa6c:	4b40      	ldr	r3, [pc, #256]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa6e:	4a41      	ldr	r2, [pc, #260]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800aa70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rtsiSetSolverData(&rtM->solverInfo, (void *)&rtM->intgData);
 800aa74:	4b3e      	ldr	r3, [pc, #248]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa76:	4a3e      	ldr	r2, [pc, #248]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa78:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800aa7c:	6113      	str	r3, [r2, #16]
  rtsiSetSolverName(&rtM->solverInfo,"ode5");
 800aa7e:	4b3c      	ldr	r3, [pc, #240]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa80:	4a3d      	ldr	r2, [pc, #244]	@ (800ab78 <dynamic_8_g_initialize+0x1e8>)
 800aa82:	615a      	str	r2, [r3, #20]
  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);
 800aa84:	4b3a      	ldr	r3, [pc, #232]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa86:	4a3a      	ldr	r2, [pc, #232]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa88:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800aa8c:	f8c2 32a8 	str.w	r3, [r2, #680]	@ 0x2a8
  rtM->Timing.stepSize0 = 0.01;
 800aa90:	4937      	ldr	r1, [pc, #220]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa92:	a335      	add	r3, pc, #212	@ (adr r3, 800ab68 <dynamic_8_g_initialize+0x1d8>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	e9c1 23a6 	strd	r2, r3, [r1, #664]	@ 0x298
  rtmSetFirstInitCond(rtM, 1);
 800aa9c:	4b34      	ldr	r3, [pc, #208]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4

  /* InitializeConditions for Derivative: '<S1>/Derivative1' */
  rtDW.TimeStampA = (rtInf);
 800aaa4:	4b35      	ldr	r3, [pc, #212]	@ (800ab7c <dynamic_8_g_initialize+0x1ec>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	4935      	ldr	r1, [pc, #212]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800aaac:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
  rtDW.TimeStampB = (rtInf);
 800aab0:	4b32      	ldr	r3, [pc, #200]	@ (800ab7c <dynamic_8_g_initialize+0x1ec>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	4932      	ldr	r1, [pc, #200]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800aab8:	e9c1 2342 	strd	r2, r3, [r1, #264]	@ 0x108

  /* InitializeConditions for Derivative: '<S1>/Derivative2' */
  rtDW.TimeStampA_m = (rtInf);
 800aabc:	4b2f      	ldr	r3, [pc, #188]	@ (800ab7c <dynamic_8_g_initialize+0x1ec>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	492f      	ldr	r1, [pc, #188]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800aac4:	e9c1 2344 	strd	r2, r3, [r1, #272]	@ 0x110
  rtDW.TimeStampB_i = (rtInf);
 800aac8:	4b2c      	ldr	r3, [pc, #176]	@ (800ab7c <dynamic_8_g_initialize+0x1ec>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	492c      	ldr	r1, [pc, #176]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800aad0:	e9c1 2346 	strd	r2, r3, [r1, #280]	@ 0x118

  /* InitializeConditions for Derivative: '<S1>/Derivative' */
  rtDW.TimeStampA_o = (rtInf);
 800aad4:	4b29      	ldr	r3, [pc, #164]	@ (800ab7c <dynamic_8_g_initialize+0x1ec>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	4929      	ldr	r1, [pc, #164]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800aadc:	e9c1 2348 	strd	r2, r3, [r1, #288]	@ 0x120
  rtDW.TimeStampB_g = (rtInf);
 800aae0:	4b26      	ldr	r3, [pc, #152]	@ (800ab7c <dynamic_8_g_initialize+0x1ec>)
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	4926      	ldr	r1, [pc, #152]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800aae8:	e9c1 234a 	strd	r2, r3, [r1, #296]	@ 0x128

  /* InitializeConditions for Integrator: '<S2>/Integrator' */
  rtX.Integrator_CSTATE[0] = 0.0;
 800aaec:	4921      	ldr	r1, [pc, #132]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800aaee:	f04f 0200 	mov.w	r2, #0
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	e9c1 2300 	strd	r2, r3, [r1]
  rtX.Integrator_CSTATE[1] = 0.0;
 800aafa:	491e      	ldr	r1, [pc, #120]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtX.Integrator_CSTATE[2] = 0.0;
 800ab08:	491a      	ldr	r1, [pc, #104]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800ab0a:	f04f 0200 	mov.w	r2, #0
 800ab0e:	f04f 0300 	mov.w	r3, #0
 800ab12:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* InitializeConditions for Integrator: '<S2>/Integrator1' */
  if (rtmIsFirstInitCond(rtM)) {
 800ab16:	4b16      	ldr	r3, [pc, #88]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800ab18:	f893 32a4 	ldrb.w	r3, [r3, #676]	@ 0x2a4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d014      	beq.n	800ab4a <dynamic_8_g_initialize+0x1ba>
    rtX.Integrator1_CSTATE[0] = 0.0;
 800ab20:	4914      	ldr	r1, [pc, #80]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800ab22:	f04f 0200 	mov.w	r2, #0
 800ab26:	f04f 0300 	mov.w	r3, #0
 800ab2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    rtX.Integrator1_CSTATE[1] = 0.0;
 800ab2e:	4911      	ldr	r1, [pc, #68]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800ab30:	f04f 0200 	mov.w	r2, #0
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	e9c1 2308 	strd	r2, r3, [r1, #32]
    rtX.Integrator1_CSTATE[2] = 0.0;
 800ab3c:	490d      	ldr	r1, [pc, #52]	@ (800ab74 <dynamic_8_g_initialize+0x1e4>)
 800ab3e:	f04f 0200 	mov.w	r2, #0
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  }

  rtDW.Integrator1_IWORK = 1;
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab80 <dynamic_8_g_initialize+0x1f0>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

  /* End of InitializeConditions for Integrator: '<S2>/Integrator1' */

  /* set "at time zero" to false */
  if (rtmIsFirstInitCond(rtM)) {
 800ab52:	4b07      	ldr	r3, [pc, #28]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800ab54:	f893 32a4 	ldrb.w	r3, [r3, #676]	@ 0x2a4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <dynamic_8_g_initialize+0x1d4>
    rtmSetFirstInitCond(rtM, 0);
 800ab5c:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <dynamic_8_g_initialize+0x1e0>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
  }
}
 800ab64:	bf00      	nop
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	47ae147b 	.word	0x47ae147b
 800ab6c:	3f847ae1 	.word	0x3f847ae1
 800ab70:	200007a8 	.word	0x200007a8
 800ab74:	200005d8 	.word	0x200005d8
 800ab78:	0801099c 	.word	0x0801099c
 800ab7c:	20000a68 	.word	0x20000a68
 800ab80:	20000608 	.word	0x20000608

0800ab84 <atof>:
 800ab84:	2100      	movs	r1, #0
 800ab86:	f000 be09 	b.w	800b79c <strtod>

0800ab8a <sulp>:
 800ab8a:	b570      	push	{r4, r5, r6, lr}
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	ec45 4b10 	vmov	d0, r4, r5
 800ab94:	4616      	mov	r6, r2
 800ab96:	f003 fdd7 	bl	800e748 <__ulp>
 800ab9a:	ec51 0b10 	vmov	r0, r1, d0
 800ab9e:	b17e      	cbz	r6, 800abc0 <sulp+0x36>
 800aba0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aba4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dd09      	ble.n	800abc0 <sulp+0x36>
 800abac:	051b      	lsls	r3, r3, #20
 800abae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800abb2:	2400      	movs	r4, #0
 800abb4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fd24 	bl	8000608 <__aeabi_dmul>
 800abc0:	ec41 0b10 	vmov	d0, r0, r1
 800abc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abc8 <_strtod_l>:
 800abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abcc:	b09f      	sub	sp, #124	@ 0x7c
 800abce:	460c      	mov	r4, r1
 800abd0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800abd2:	2200      	movs	r2, #0
 800abd4:	921a      	str	r2, [sp, #104]	@ 0x68
 800abd6:	9005      	str	r0, [sp, #20]
 800abd8:	f04f 0a00 	mov.w	sl, #0
 800abdc:	f04f 0b00 	mov.w	fp, #0
 800abe0:	460a      	mov	r2, r1
 800abe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800abe4:	7811      	ldrb	r1, [r2, #0]
 800abe6:	292b      	cmp	r1, #43	@ 0x2b
 800abe8:	d04a      	beq.n	800ac80 <_strtod_l+0xb8>
 800abea:	d838      	bhi.n	800ac5e <_strtod_l+0x96>
 800abec:	290d      	cmp	r1, #13
 800abee:	d832      	bhi.n	800ac56 <_strtod_l+0x8e>
 800abf0:	2908      	cmp	r1, #8
 800abf2:	d832      	bhi.n	800ac5a <_strtod_l+0x92>
 800abf4:	2900      	cmp	r1, #0
 800abf6:	d03b      	beq.n	800ac70 <_strtod_l+0xa8>
 800abf8:	2200      	movs	r2, #0
 800abfa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800abfc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800abfe:	782a      	ldrb	r2, [r5, #0]
 800ac00:	2a30      	cmp	r2, #48	@ 0x30
 800ac02:	f040 80b3 	bne.w	800ad6c <_strtod_l+0x1a4>
 800ac06:	786a      	ldrb	r2, [r5, #1]
 800ac08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac0c:	2a58      	cmp	r2, #88	@ 0x58
 800ac0e:	d16e      	bne.n	800acee <_strtod_l+0x126>
 800ac10:	9302      	str	r3, [sp, #8]
 800ac12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	ab1a      	add	r3, sp, #104	@ 0x68
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4a8e      	ldr	r2, [pc, #568]	@ (800ae54 <_strtod_l+0x28c>)
 800ac1c:	9805      	ldr	r0, [sp, #20]
 800ac1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ac20:	a919      	add	r1, sp, #100	@ 0x64
 800ac22:	f002 fe83 	bl	800d92c <__gethex>
 800ac26:	f010 060f 	ands.w	r6, r0, #15
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	d005      	beq.n	800ac3a <_strtod_l+0x72>
 800ac2e:	2e06      	cmp	r6, #6
 800ac30:	d128      	bne.n	800ac84 <_strtod_l+0xbc>
 800ac32:	3501      	adds	r5, #1
 800ac34:	2300      	movs	r3, #0
 800ac36:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 858e 	bne.w	800b75e <_strtod_l+0xb96>
 800ac42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac44:	b1cb      	cbz	r3, 800ac7a <_strtod_l+0xb2>
 800ac46:	4652      	mov	r2, sl
 800ac48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ac4c:	ec43 2b10 	vmov	d0, r2, r3
 800ac50:	b01f      	add	sp, #124	@ 0x7c
 800ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac56:	2920      	cmp	r1, #32
 800ac58:	d1ce      	bne.n	800abf8 <_strtod_l+0x30>
 800ac5a:	3201      	adds	r2, #1
 800ac5c:	e7c1      	b.n	800abe2 <_strtod_l+0x1a>
 800ac5e:	292d      	cmp	r1, #45	@ 0x2d
 800ac60:	d1ca      	bne.n	800abf8 <_strtod_l+0x30>
 800ac62:	2101      	movs	r1, #1
 800ac64:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac66:	1c51      	adds	r1, r2, #1
 800ac68:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac6a:	7852      	ldrb	r2, [r2, #1]
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	d1c5      	bne.n	800abfc <_strtod_l+0x34>
 800ac70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac72:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f040 8570 	bne.w	800b75a <_strtod_l+0xb92>
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	e7e5      	b.n	800ac4c <_strtod_l+0x84>
 800ac80:	2100      	movs	r1, #0
 800ac82:	e7ef      	b.n	800ac64 <_strtod_l+0x9c>
 800ac84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac86:	b13a      	cbz	r2, 800ac98 <_strtod_l+0xd0>
 800ac88:	2135      	movs	r1, #53	@ 0x35
 800ac8a:	a81c      	add	r0, sp, #112	@ 0x70
 800ac8c:	f003 fe56 	bl	800e93c <__copybits>
 800ac90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac92:	9805      	ldr	r0, [sp, #20]
 800ac94:	f003 fa24 	bl	800e0e0 <_Bfree>
 800ac98:	3e01      	subs	r6, #1
 800ac9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac9c:	2e04      	cmp	r6, #4
 800ac9e:	d806      	bhi.n	800acae <_strtod_l+0xe6>
 800aca0:	e8df f006 	tbb	[pc, r6]
 800aca4:	201d0314 	.word	0x201d0314
 800aca8:	14          	.byte	0x14
 800aca9:	00          	.byte	0x00
 800acaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800acae:	05e1      	lsls	r1, r4, #23
 800acb0:	bf48      	it	mi
 800acb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800acb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acba:	0d1b      	lsrs	r3, r3, #20
 800acbc:	051b      	lsls	r3, r3, #20
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1bb      	bne.n	800ac3a <_strtod_l+0x72>
 800acc2:	f001 fecd 	bl	800ca60 <__errno>
 800acc6:	2322      	movs	r3, #34	@ 0x22
 800acc8:	6003      	str	r3, [r0, #0]
 800acca:	e7b6      	b.n	800ac3a <_strtod_l+0x72>
 800accc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800acd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800acd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acdc:	e7e7      	b.n	800acae <_strtod_l+0xe6>
 800acde:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ae5c <_strtod_l+0x294>
 800ace2:	e7e4      	b.n	800acae <_strtod_l+0xe6>
 800ace4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ace8:	f04f 3aff 	mov.w	sl, #4294967295
 800acec:	e7df      	b.n	800acae <_strtod_l+0xe6>
 800acee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	2b30      	cmp	r3, #48	@ 0x30
 800acf8:	d0f9      	beq.n	800acee <_strtod_l+0x126>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d09d      	beq.n	800ac3a <_strtod_l+0x72>
 800acfe:	2301      	movs	r3, #1
 800ad00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad04:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad06:	2300      	movs	r3, #0
 800ad08:	9308      	str	r3, [sp, #32]
 800ad0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad0c:	461f      	mov	r7, r3
 800ad0e:	220a      	movs	r2, #10
 800ad10:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ad12:	7805      	ldrb	r5, [r0, #0]
 800ad14:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ad18:	b2d9      	uxtb	r1, r3
 800ad1a:	2909      	cmp	r1, #9
 800ad1c:	d928      	bls.n	800ad70 <_strtod_l+0x1a8>
 800ad1e:	494e      	ldr	r1, [pc, #312]	@ (800ae58 <_strtod_l+0x290>)
 800ad20:	2201      	movs	r2, #1
 800ad22:	f001 fde5 	bl	800c8f0 <strncmp>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d032      	beq.n	800ad90 <_strtod_l+0x1c8>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	462a      	mov	r2, r5
 800ad2e:	4681      	mov	r9, r0
 800ad30:	463d      	mov	r5, r7
 800ad32:	4603      	mov	r3, r0
 800ad34:	2a65      	cmp	r2, #101	@ 0x65
 800ad36:	d001      	beq.n	800ad3c <_strtod_l+0x174>
 800ad38:	2a45      	cmp	r2, #69	@ 0x45
 800ad3a:	d114      	bne.n	800ad66 <_strtod_l+0x19e>
 800ad3c:	b91d      	cbnz	r5, 800ad46 <_strtod_l+0x17e>
 800ad3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad40:	4302      	orrs	r2, r0
 800ad42:	d095      	beq.n	800ac70 <_strtod_l+0xa8>
 800ad44:	2500      	movs	r5, #0
 800ad46:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ad48:	1c62      	adds	r2, r4, #1
 800ad4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad4c:	7862      	ldrb	r2, [r4, #1]
 800ad4e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ad50:	d077      	beq.n	800ae42 <_strtod_l+0x27a>
 800ad52:	2a2d      	cmp	r2, #45	@ 0x2d
 800ad54:	d07b      	beq.n	800ae4e <_strtod_l+0x286>
 800ad56:	f04f 0c00 	mov.w	ip, #0
 800ad5a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ad5e:	2909      	cmp	r1, #9
 800ad60:	f240 8082 	bls.w	800ae68 <_strtod_l+0x2a0>
 800ad64:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	e0a2      	b.n	800aeb2 <_strtod_l+0x2ea>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e7c7      	b.n	800ad00 <_strtod_l+0x138>
 800ad70:	2f08      	cmp	r7, #8
 800ad72:	bfd5      	itete	le
 800ad74:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ad76:	9908      	ldrgt	r1, [sp, #32]
 800ad78:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad7c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ad80:	f100 0001 	add.w	r0, r0, #1
 800ad84:	bfd4      	ite	le
 800ad86:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ad88:	9308      	strgt	r3, [sp, #32]
 800ad8a:	3701      	adds	r7, #1
 800ad8c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad8e:	e7bf      	b.n	800ad10 <_strtod_l+0x148>
 800ad90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad96:	785a      	ldrb	r2, [r3, #1]
 800ad98:	b37f      	cbz	r7, 800adfa <_strtod_l+0x232>
 800ad9a:	4681      	mov	r9, r0
 800ad9c:	463d      	mov	r5, r7
 800ad9e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ada2:	2b09      	cmp	r3, #9
 800ada4:	d912      	bls.n	800adcc <_strtod_l+0x204>
 800ada6:	2301      	movs	r3, #1
 800ada8:	e7c4      	b.n	800ad34 <_strtod_l+0x16c>
 800adaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	9219      	str	r2, [sp, #100]	@ 0x64
 800adb0:	785a      	ldrb	r2, [r3, #1]
 800adb2:	3001      	adds	r0, #1
 800adb4:	2a30      	cmp	r2, #48	@ 0x30
 800adb6:	d0f8      	beq.n	800adaa <_strtod_l+0x1e2>
 800adb8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800adbc:	2b08      	cmp	r3, #8
 800adbe:	f200 84d3 	bhi.w	800b768 <_strtod_l+0xba0>
 800adc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adc4:	930c      	str	r3, [sp, #48]	@ 0x30
 800adc6:	4681      	mov	r9, r0
 800adc8:	2000      	movs	r0, #0
 800adca:	4605      	mov	r5, r0
 800adcc:	3a30      	subs	r2, #48	@ 0x30
 800adce:	f100 0301 	add.w	r3, r0, #1
 800add2:	d02a      	beq.n	800ae2a <_strtod_l+0x262>
 800add4:	4499      	add	r9, r3
 800add6:	eb00 0c05 	add.w	ip, r0, r5
 800adda:	462b      	mov	r3, r5
 800addc:	210a      	movs	r1, #10
 800adde:	4563      	cmp	r3, ip
 800ade0:	d10d      	bne.n	800adfe <_strtod_l+0x236>
 800ade2:	1c69      	adds	r1, r5, #1
 800ade4:	4401      	add	r1, r0
 800ade6:	4428      	add	r0, r5
 800ade8:	2808      	cmp	r0, #8
 800adea:	dc16      	bgt.n	800ae1a <_strtod_l+0x252>
 800adec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800adee:	230a      	movs	r3, #10
 800adf0:	fb03 2300 	mla	r3, r3, r0, r2
 800adf4:	930a      	str	r3, [sp, #40]	@ 0x28
 800adf6:	2300      	movs	r3, #0
 800adf8:	e018      	b.n	800ae2c <_strtod_l+0x264>
 800adfa:	4638      	mov	r0, r7
 800adfc:	e7da      	b.n	800adb4 <_strtod_l+0x1ec>
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	f103 0301 	add.w	r3, r3, #1
 800ae04:	dc03      	bgt.n	800ae0e <_strtod_l+0x246>
 800ae06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ae08:	434e      	muls	r6, r1
 800ae0a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ae0c:	e7e7      	b.n	800adde <_strtod_l+0x216>
 800ae0e:	2b10      	cmp	r3, #16
 800ae10:	bfde      	ittt	le
 800ae12:	9e08      	ldrle	r6, [sp, #32]
 800ae14:	434e      	mulle	r6, r1
 800ae16:	9608      	strle	r6, [sp, #32]
 800ae18:	e7e1      	b.n	800adde <_strtod_l+0x216>
 800ae1a:	280f      	cmp	r0, #15
 800ae1c:	dceb      	bgt.n	800adf6 <_strtod_l+0x22e>
 800ae1e:	9808      	ldr	r0, [sp, #32]
 800ae20:	230a      	movs	r3, #10
 800ae22:	fb03 2300 	mla	r3, r3, r0, r2
 800ae26:	9308      	str	r3, [sp, #32]
 800ae28:	e7e5      	b.n	800adf6 <_strtod_l+0x22e>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae2e:	1c50      	adds	r0, r2, #1
 800ae30:	9019      	str	r0, [sp, #100]	@ 0x64
 800ae32:	7852      	ldrb	r2, [r2, #1]
 800ae34:	4618      	mov	r0, r3
 800ae36:	460d      	mov	r5, r1
 800ae38:	e7b1      	b.n	800ad9e <_strtod_l+0x1d6>
 800ae3a:	f04f 0900 	mov.w	r9, #0
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e77d      	b.n	800ad3e <_strtod_l+0x176>
 800ae42:	f04f 0c00 	mov.w	ip, #0
 800ae46:	1ca2      	adds	r2, r4, #2
 800ae48:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae4a:	78a2      	ldrb	r2, [r4, #2]
 800ae4c:	e785      	b.n	800ad5a <_strtod_l+0x192>
 800ae4e:	f04f 0c01 	mov.w	ip, #1
 800ae52:	e7f8      	b.n	800ae46 <_strtod_l+0x27e>
 800ae54:	08010bd0 	.word	0x08010bd0
 800ae58:	08010bb8 	.word	0x08010bb8
 800ae5c:	7ff00000 	.word	0x7ff00000
 800ae60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae62:	1c51      	adds	r1, r2, #1
 800ae64:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae66:	7852      	ldrb	r2, [r2, #1]
 800ae68:	2a30      	cmp	r2, #48	@ 0x30
 800ae6a:	d0f9      	beq.n	800ae60 <_strtod_l+0x298>
 800ae6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae70:	2908      	cmp	r1, #8
 800ae72:	f63f af78 	bhi.w	800ad66 <_strtod_l+0x19e>
 800ae76:	3a30      	subs	r2, #48	@ 0x30
 800ae78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae7e:	f04f 080a 	mov.w	r8, #10
 800ae82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae84:	1c56      	adds	r6, r2, #1
 800ae86:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae88:	7852      	ldrb	r2, [r2, #1]
 800ae8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae8e:	f1be 0f09 	cmp.w	lr, #9
 800ae92:	d939      	bls.n	800af08 <_strtod_l+0x340>
 800ae94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae96:	1a76      	subs	r6, r6, r1
 800ae98:	2e08      	cmp	r6, #8
 800ae9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae9e:	dc03      	bgt.n	800aea8 <_strtod_l+0x2e0>
 800aea0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aea2:	4588      	cmp	r8, r1
 800aea4:	bfa8      	it	ge
 800aea6:	4688      	movge	r8, r1
 800aea8:	f1bc 0f00 	cmp.w	ip, #0
 800aeac:	d001      	beq.n	800aeb2 <_strtod_l+0x2ea>
 800aeae:	f1c8 0800 	rsb	r8, r8, #0
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	d14e      	bne.n	800af54 <_strtod_l+0x38c>
 800aeb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aeb8:	4308      	orrs	r0, r1
 800aeba:	f47f aebe 	bne.w	800ac3a <_strtod_l+0x72>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f47f aed6 	bne.w	800ac70 <_strtod_l+0xa8>
 800aec4:	2a69      	cmp	r2, #105	@ 0x69
 800aec6:	d028      	beq.n	800af1a <_strtod_l+0x352>
 800aec8:	dc25      	bgt.n	800af16 <_strtod_l+0x34e>
 800aeca:	2a49      	cmp	r2, #73	@ 0x49
 800aecc:	d025      	beq.n	800af1a <_strtod_l+0x352>
 800aece:	2a4e      	cmp	r2, #78	@ 0x4e
 800aed0:	f47f aece 	bne.w	800ac70 <_strtod_l+0xa8>
 800aed4:	499b      	ldr	r1, [pc, #620]	@ (800b144 <_strtod_l+0x57c>)
 800aed6:	a819      	add	r0, sp, #100	@ 0x64
 800aed8:	f002 ff4a 	bl	800dd70 <__match>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f43f aec7 	beq.w	800ac70 <_strtod_l+0xa8>
 800aee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b28      	cmp	r3, #40	@ 0x28
 800aee8:	d12e      	bne.n	800af48 <_strtod_l+0x380>
 800aeea:	4997      	ldr	r1, [pc, #604]	@ (800b148 <_strtod_l+0x580>)
 800aeec:	aa1c      	add	r2, sp, #112	@ 0x70
 800aeee:	a819      	add	r0, sp, #100	@ 0x64
 800aef0:	f002 ff52 	bl	800dd98 <__hexnan>
 800aef4:	2805      	cmp	r0, #5
 800aef6:	d127      	bne.n	800af48 <_strtod_l+0x380>
 800aef8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aefa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aefe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800af02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800af06:	e698      	b.n	800ac3a <_strtod_l+0x72>
 800af08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af0a:	fb08 2101 	mla	r1, r8, r1, r2
 800af0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800af12:	920e      	str	r2, [sp, #56]	@ 0x38
 800af14:	e7b5      	b.n	800ae82 <_strtod_l+0x2ba>
 800af16:	2a6e      	cmp	r2, #110	@ 0x6e
 800af18:	e7da      	b.n	800aed0 <_strtod_l+0x308>
 800af1a:	498c      	ldr	r1, [pc, #560]	@ (800b14c <_strtod_l+0x584>)
 800af1c:	a819      	add	r0, sp, #100	@ 0x64
 800af1e:	f002 ff27 	bl	800dd70 <__match>
 800af22:	2800      	cmp	r0, #0
 800af24:	f43f aea4 	beq.w	800ac70 <_strtod_l+0xa8>
 800af28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af2a:	4989      	ldr	r1, [pc, #548]	@ (800b150 <_strtod_l+0x588>)
 800af2c:	3b01      	subs	r3, #1
 800af2e:	a819      	add	r0, sp, #100	@ 0x64
 800af30:	9319      	str	r3, [sp, #100]	@ 0x64
 800af32:	f002 ff1d 	bl	800dd70 <__match>
 800af36:	b910      	cbnz	r0, 800af3e <_strtod_l+0x376>
 800af38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af3a:	3301      	adds	r3, #1
 800af3c:	9319      	str	r3, [sp, #100]	@ 0x64
 800af3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b160 <_strtod_l+0x598>
 800af42:	f04f 0a00 	mov.w	sl, #0
 800af46:	e678      	b.n	800ac3a <_strtod_l+0x72>
 800af48:	4882      	ldr	r0, [pc, #520]	@ (800b154 <_strtod_l+0x58c>)
 800af4a:	f001 fdc5 	bl	800cad8 <nan>
 800af4e:	ec5b ab10 	vmov	sl, fp, d0
 800af52:	e672      	b.n	800ac3a <_strtod_l+0x72>
 800af54:	eba8 0309 	sub.w	r3, r8, r9
 800af58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af5c:	2f00      	cmp	r7, #0
 800af5e:	bf08      	it	eq
 800af60:	462f      	moveq	r7, r5
 800af62:	2d10      	cmp	r5, #16
 800af64:	462c      	mov	r4, r5
 800af66:	bfa8      	it	ge
 800af68:	2410      	movge	r4, #16
 800af6a:	f7f5 fad3 	bl	8000514 <__aeabi_ui2d>
 800af6e:	2d09      	cmp	r5, #9
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	dc13      	bgt.n	800af9e <_strtod_l+0x3d6>
 800af76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f43f ae5e 	beq.w	800ac3a <_strtod_l+0x72>
 800af7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af80:	dd78      	ble.n	800b074 <_strtod_l+0x4ac>
 800af82:	2b16      	cmp	r3, #22
 800af84:	dc5f      	bgt.n	800b046 <_strtod_l+0x47e>
 800af86:	4974      	ldr	r1, [pc, #464]	@ (800b158 <_strtod_l+0x590>)
 800af88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af90:	4652      	mov	r2, sl
 800af92:	465b      	mov	r3, fp
 800af94:	f7f5 fb38 	bl	8000608 <__aeabi_dmul>
 800af98:	4682      	mov	sl, r0
 800af9a:	468b      	mov	fp, r1
 800af9c:	e64d      	b.n	800ac3a <_strtod_l+0x72>
 800af9e:	4b6e      	ldr	r3, [pc, #440]	@ (800b158 <_strtod_l+0x590>)
 800afa0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afa4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800afa8:	f7f5 fb2e 	bl	8000608 <__aeabi_dmul>
 800afac:	4682      	mov	sl, r0
 800afae:	9808      	ldr	r0, [sp, #32]
 800afb0:	468b      	mov	fp, r1
 800afb2:	f7f5 faaf 	bl	8000514 <__aeabi_ui2d>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4650      	mov	r0, sl
 800afbc:	4659      	mov	r1, fp
 800afbe:	f7f5 f96d 	bl	800029c <__adddf3>
 800afc2:	2d0f      	cmp	r5, #15
 800afc4:	4682      	mov	sl, r0
 800afc6:	468b      	mov	fp, r1
 800afc8:	ddd5      	ble.n	800af76 <_strtod_l+0x3ae>
 800afca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afcc:	1b2c      	subs	r4, r5, r4
 800afce:	441c      	add	r4, r3
 800afd0:	2c00      	cmp	r4, #0
 800afd2:	f340 8096 	ble.w	800b102 <_strtod_l+0x53a>
 800afd6:	f014 030f 	ands.w	r3, r4, #15
 800afda:	d00a      	beq.n	800aff2 <_strtod_l+0x42a>
 800afdc:	495e      	ldr	r1, [pc, #376]	@ (800b158 <_strtod_l+0x590>)
 800afde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afe2:	4652      	mov	r2, sl
 800afe4:	465b      	mov	r3, fp
 800afe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afea:	f7f5 fb0d 	bl	8000608 <__aeabi_dmul>
 800afee:	4682      	mov	sl, r0
 800aff0:	468b      	mov	fp, r1
 800aff2:	f034 040f 	bics.w	r4, r4, #15
 800aff6:	d073      	beq.n	800b0e0 <_strtod_l+0x518>
 800aff8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800affc:	dd48      	ble.n	800b090 <_strtod_l+0x4c8>
 800affe:	2400      	movs	r4, #0
 800b000:	46a0      	mov	r8, r4
 800b002:	940a      	str	r4, [sp, #40]	@ 0x28
 800b004:	46a1      	mov	r9, r4
 800b006:	9a05      	ldr	r2, [sp, #20]
 800b008:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b160 <_strtod_l+0x598>
 800b00c:	2322      	movs	r3, #34	@ 0x22
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	f04f 0a00 	mov.w	sl, #0
 800b014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b016:	2b00      	cmp	r3, #0
 800b018:	f43f ae0f 	beq.w	800ac3a <_strtod_l+0x72>
 800b01c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b01e:	9805      	ldr	r0, [sp, #20]
 800b020:	f003 f85e 	bl	800e0e0 <_Bfree>
 800b024:	9805      	ldr	r0, [sp, #20]
 800b026:	4649      	mov	r1, r9
 800b028:	f003 f85a 	bl	800e0e0 <_Bfree>
 800b02c:	9805      	ldr	r0, [sp, #20]
 800b02e:	4641      	mov	r1, r8
 800b030:	f003 f856 	bl	800e0e0 <_Bfree>
 800b034:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b036:	9805      	ldr	r0, [sp, #20]
 800b038:	f003 f852 	bl	800e0e0 <_Bfree>
 800b03c:	9805      	ldr	r0, [sp, #20]
 800b03e:	4621      	mov	r1, r4
 800b040:	f003 f84e 	bl	800e0e0 <_Bfree>
 800b044:	e5f9      	b.n	800ac3a <_strtod_l+0x72>
 800b046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b048:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b04c:	4293      	cmp	r3, r2
 800b04e:	dbbc      	blt.n	800afca <_strtod_l+0x402>
 800b050:	4c41      	ldr	r4, [pc, #260]	@ (800b158 <_strtod_l+0x590>)
 800b052:	f1c5 050f 	rsb	r5, r5, #15
 800b056:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b05a:	4652      	mov	r2, sl
 800b05c:	465b      	mov	r3, fp
 800b05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b062:	f7f5 fad1 	bl	8000608 <__aeabi_dmul>
 800b066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b068:	1b5d      	subs	r5, r3, r5
 800b06a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b06e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b072:	e78f      	b.n	800af94 <_strtod_l+0x3cc>
 800b074:	3316      	adds	r3, #22
 800b076:	dba8      	blt.n	800afca <_strtod_l+0x402>
 800b078:	4b37      	ldr	r3, [pc, #220]	@ (800b158 <_strtod_l+0x590>)
 800b07a:	eba9 0808 	sub.w	r8, r9, r8
 800b07e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b082:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b086:	4650      	mov	r0, sl
 800b088:	4659      	mov	r1, fp
 800b08a:	f7f5 fbe7 	bl	800085c <__aeabi_ddiv>
 800b08e:	e783      	b.n	800af98 <_strtod_l+0x3d0>
 800b090:	4b32      	ldr	r3, [pc, #200]	@ (800b15c <_strtod_l+0x594>)
 800b092:	9308      	str	r3, [sp, #32]
 800b094:	2300      	movs	r3, #0
 800b096:	1124      	asrs	r4, r4, #4
 800b098:	4650      	mov	r0, sl
 800b09a:	4659      	mov	r1, fp
 800b09c:	461e      	mov	r6, r3
 800b09e:	2c01      	cmp	r4, #1
 800b0a0:	dc21      	bgt.n	800b0e6 <_strtod_l+0x51e>
 800b0a2:	b10b      	cbz	r3, 800b0a8 <_strtod_l+0x4e0>
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	468b      	mov	fp, r1
 800b0a8:	492c      	ldr	r1, [pc, #176]	@ (800b15c <_strtod_l+0x594>)
 800b0aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b0ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b0b2:	4652      	mov	r2, sl
 800b0b4:	465b      	mov	r3, fp
 800b0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ba:	f7f5 faa5 	bl	8000608 <__aeabi_dmul>
 800b0be:	4b28      	ldr	r3, [pc, #160]	@ (800b160 <_strtod_l+0x598>)
 800b0c0:	460a      	mov	r2, r1
 800b0c2:	400b      	ands	r3, r1
 800b0c4:	4927      	ldr	r1, [pc, #156]	@ (800b164 <_strtod_l+0x59c>)
 800b0c6:	428b      	cmp	r3, r1
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	d898      	bhi.n	800affe <_strtod_l+0x436>
 800b0cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf86      	itte	hi
 800b0d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b168 <_strtod_l+0x5a0>
 800b0d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9308      	str	r3, [sp, #32]
 800b0e4:	e07a      	b.n	800b1dc <_strtod_l+0x614>
 800b0e6:	07e2      	lsls	r2, r4, #31
 800b0e8:	d505      	bpl.n	800b0f6 <_strtod_l+0x52e>
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f7f5 fa8a 	bl	8000608 <__aeabi_dmul>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	9a08      	ldr	r2, [sp, #32]
 800b0f8:	3208      	adds	r2, #8
 800b0fa:	3601      	adds	r6, #1
 800b0fc:	1064      	asrs	r4, r4, #1
 800b0fe:	9208      	str	r2, [sp, #32]
 800b100:	e7cd      	b.n	800b09e <_strtod_l+0x4d6>
 800b102:	d0ed      	beq.n	800b0e0 <_strtod_l+0x518>
 800b104:	4264      	negs	r4, r4
 800b106:	f014 020f 	ands.w	r2, r4, #15
 800b10a:	d00a      	beq.n	800b122 <_strtod_l+0x55a>
 800b10c:	4b12      	ldr	r3, [pc, #72]	@ (800b158 <_strtod_l+0x590>)
 800b10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b112:	4650      	mov	r0, sl
 800b114:	4659      	mov	r1, fp
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	f7f5 fb9f 	bl	800085c <__aeabi_ddiv>
 800b11e:	4682      	mov	sl, r0
 800b120:	468b      	mov	fp, r1
 800b122:	1124      	asrs	r4, r4, #4
 800b124:	d0dc      	beq.n	800b0e0 <_strtod_l+0x518>
 800b126:	2c1f      	cmp	r4, #31
 800b128:	dd20      	ble.n	800b16c <_strtod_l+0x5a4>
 800b12a:	2400      	movs	r4, #0
 800b12c:	46a0      	mov	r8, r4
 800b12e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b130:	46a1      	mov	r9, r4
 800b132:	9a05      	ldr	r2, [sp, #20]
 800b134:	2322      	movs	r3, #34	@ 0x22
 800b136:	f04f 0a00 	mov.w	sl, #0
 800b13a:	f04f 0b00 	mov.w	fp, #0
 800b13e:	6013      	str	r3, [r2, #0]
 800b140:	e768      	b.n	800b014 <_strtod_l+0x44c>
 800b142:	bf00      	nop
 800b144:	08010c1d 	.word	0x08010c1d
 800b148:	08010bbc 	.word	0x08010bbc
 800b14c:	08010c15 	.word	0x08010c15
 800b150:	08010d01 	.word	0x08010d01
 800b154:	08010cfd 	.word	0x08010cfd
 800b158:	08010e68 	.word	0x08010e68
 800b15c:	08010e40 	.word	0x08010e40
 800b160:	7ff00000 	.word	0x7ff00000
 800b164:	7ca00000 	.word	0x7ca00000
 800b168:	7fefffff 	.word	0x7fefffff
 800b16c:	f014 0310 	ands.w	r3, r4, #16
 800b170:	bf18      	it	ne
 800b172:	236a      	movne	r3, #106	@ 0x6a
 800b174:	4ea9      	ldr	r6, [pc, #676]	@ (800b41c <_strtod_l+0x854>)
 800b176:	9308      	str	r3, [sp, #32]
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	2300      	movs	r3, #0
 800b17e:	07e2      	lsls	r2, r4, #31
 800b180:	d504      	bpl.n	800b18c <_strtod_l+0x5c4>
 800b182:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b186:	f7f5 fa3f 	bl	8000608 <__aeabi_dmul>
 800b18a:	2301      	movs	r3, #1
 800b18c:	1064      	asrs	r4, r4, #1
 800b18e:	f106 0608 	add.w	r6, r6, #8
 800b192:	d1f4      	bne.n	800b17e <_strtod_l+0x5b6>
 800b194:	b10b      	cbz	r3, 800b19a <_strtod_l+0x5d2>
 800b196:	4682      	mov	sl, r0
 800b198:	468b      	mov	fp, r1
 800b19a:	9b08      	ldr	r3, [sp, #32]
 800b19c:	b1b3      	cbz	r3, 800b1cc <_strtod_l+0x604>
 800b19e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b1a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	dd0f      	ble.n	800b1cc <_strtod_l+0x604>
 800b1ac:	2b1f      	cmp	r3, #31
 800b1ae:	dd55      	ble.n	800b25c <_strtod_l+0x694>
 800b1b0:	2b34      	cmp	r3, #52	@ 0x34
 800b1b2:	bfde      	ittt	le
 800b1b4:	f04f 33ff 	movle.w	r3, #4294967295
 800b1b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b1bc:	4093      	lslle	r3, r2
 800b1be:	f04f 0a00 	mov.w	sl, #0
 800b1c2:	bfcc      	ite	gt
 800b1c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b1c8:	ea03 0b01 	andle.w	fp, r3, r1
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	f7f5 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d1a6      	bne.n	800b12a <_strtod_l+0x562>
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1e2:	9805      	ldr	r0, [sp, #20]
 800b1e4:	462b      	mov	r3, r5
 800b1e6:	463a      	mov	r2, r7
 800b1e8:	f002 ffe2 	bl	800e1b0 <__s2b>
 800b1ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	f43f af05 	beq.w	800affe <_strtod_l+0x436>
 800b1f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	eba9 0308 	sub.w	r3, r9, r8
 800b1fc:	bfa8      	it	ge
 800b1fe:	2300      	movge	r3, #0
 800b200:	9312      	str	r3, [sp, #72]	@ 0x48
 800b202:	2400      	movs	r4, #0
 800b204:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b208:	9316      	str	r3, [sp, #88]	@ 0x58
 800b20a:	46a0      	mov	r8, r4
 800b20c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b20e:	9805      	ldr	r0, [sp, #20]
 800b210:	6859      	ldr	r1, [r3, #4]
 800b212:	f002 ff25 	bl	800e060 <_Balloc>
 800b216:	4681      	mov	r9, r0
 800b218:	2800      	cmp	r0, #0
 800b21a:	f43f aef4 	beq.w	800b006 <_strtod_l+0x43e>
 800b21e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b220:	691a      	ldr	r2, [r3, #16]
 800b222:	3202      	adds	r2, #2
 800b224:	f103 010c 	add.w	r1, r3, #12
 800b228:	0092      	lsls	r2, r2, #2
 800b22a:	300c      	adds	r0, #12
 800b22c:	f001 fc45 	bl	800caba <memcpy>
 800b230:	ec4b ab10 	vmov	d0, sl, fp
 800b234:	9805      	ldr	r0, [sp, #20]
 800b236:	aa1c      	add	r2, sp, #112	@ 0x70
 800b238:	a91b      	add	r1, sp, #108	@ 0x6c
 800b23a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b23e:	f003 faf3 	bl	800e828 <__d2b>
 800b242:	901a      	str	r0, [sp, #104]	@ 0x68
 800b244:	2800      	cmp	r0, #0
 800b246:	f43f aede 	beq.w	800b006 <_strtod_l+0x43e>
 800b24a:	9805      	ldr	r0, [sp, #20]
 800b24c:	2101      	movs	r1, #1
 800b24e:	f003 f845 	bl	800e2dc <__i2b>
 800b252:	4680      	mov	r8, r0
 800b254:	b948      	cbnz	r0, 800b26a <_strtod_l+0x6a2>
 800b256:	f04f 0800 	mov.w	r8, #0
 800b25a:	e6d4      	b.n	800b006 <_strtod_l+0x43e>
 800b25c:	f04f 32ff 	mov.w	r2, #4294967295
 800b260:	fa02 f303 	lsl.w	r3, r2, r3
 800b264:	ea03 0a0a 	and.w	sl, r3, sl
 800b268:	e7b0      	b.n	800b1cc <_strtod_l+0x604>
 800b26a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b26c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b26e:	2d00      	cmp	r5, #0
 800b270:	bfab      	itete	ge
 800b272:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b274:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b276:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b278:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b27a:	bfac      	ite	ge
 800b27c:	18ef      	addge	r7, r5, r3
 800b27e:	1b5e      	sublt	r6, r3, r5
 800b280:	9b08      	ldr	r3, [sp, #32]
 800b282:	1aed      	subs	r5, r5, r3
 800b284:	4415      	add	r5, r2
 800b286:	4b66      	ldr	r3, [pc, #408]	@ (800b420 <_strtod_l+0x858>)
 800b288:	3d01      	subs	r5, #1
 800b28a:	429d      	cmp	r5, r3
 800b28c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b290:	da50      	bge.n	800b334 <_strtod_l+0x76c>
 800b292:	1b5b      	subs	r3, r3, r5
 800b294:	2b1f      	cmp	r3, #31
 800b296:	eba2 0203 	sub.w	r2, r2, r3
 800b29a:	f04f 0101 	mov.w	r1, #1
 800b29e:	dc3d      	bgt.n	800b31c <_strtod_l+0x754>
 800b2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2aa:	18bd      	adds	r5, r7, r2
 800b2ac:	9b08      	ldr	r3, [sp, #32]
 800b2ae:	42af      	cmp	r7, r5
 800b2b0:	4416      	add	r6, r2
 800b2b2:	441e      	add	r6, r3
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	bfa8      	it	ge
 800b2b8:	462b      	movge	r3, r5
 800b2ba:	42b3      	cmp	r3, r6
 800b2bc:	bfa8      	it	ge
 800b2be:	4633      	movge	r3, r6
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bfc2      	ittt	gt
 800b2c4:	1aed      	subgt	r5, r5, r3
 800b2c6:	1af6      	subgt	r6, r6, r3
 800b2c8:	1aff      	subgt	r7, r7, r3
 800b2ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	dd16      	ble.n	800b2fe <_strtod_l+0x736>
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	9805      	ldr	r0, [sp, #20]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	f003 f8c1 	bl	800e45c <__pow5mult>
 800b2da:	4680      	mov	r8, r0
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d0ba      	beq.n	800b256 <_strtod_l+0x68e>
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b2e4:	9805      	ldr	r0, [sp, #20]
 800b2e6:	f003 f80f 	bl	800e308 <__multiply>
 800b2ea:	900e      	str	r0, [sp, #56]	@ 0x38
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	f43f ae8a 	beq.w	800b006 <_strtod_l+0x43e>
 800b2f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2f4:	9805      	ldr	r0, [sp, #20]
 800b2f6:	f002 fef3 	bl	800e0e0 <_Bfree>
 800b2fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	dc1d      	bgt.n	800b33e <_strtod_l+0x776>
 800b302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd23      	ble.n	800b350 <_strtod_l+0x788>
 800b308:	4649      	mov	r1, r9
 800b30a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b30c:	9805      	ldr	r0, [sp, #20]
 800b30e:	f003 f8a5 	bl	800e45c <__pow5mult>
 800b312:	4681      	mov	r9, r0
 800b314:	b9e0      	cbnz	r0, 800b350 <_strtod_l+0x788>
 800b316:	f04f 0900 	mov.w	r9, #0
 800b31a:	e674      	b.n	800b006 <_strtod_l+0x43e>
 800b31c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b320:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b324:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b328:	35e2      	adds	r5, #226	@ 0xe2
 800b32a:	fa01 f305 	lsl.w	r3, r1, r5
 800b32e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b330:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b332:	e7ba      	b.n	800b2aa <_strtod_l+0x6e2>
 800b334:	2300      	movs	r3, #0
 800b336:	9310      	str	r3, [sp, #64]	@ 0x40
 800b338:	2301      	movs	r3, #1
 800b33a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b33c:	e7b5      	b.n	800b2aa <_strtod_l+0x6e2>
 800b33e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b340:	9805      	ldr	r0, [sp, #20]
 800b342:	462a      	mov	r2, r5
 800b344:	f003 f8e4 	bl	800e510 <__lshift>
 800b348:	901a      	str	r0, [sp, #104]	@ 0x68
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d1d9      	bne.n	800b302 <_strtod_l+0x73a>
 800b34e:	e65a      	b.n	800b006 <_strtod_l+0x43e>
 800b350:	2e00      	cmp	r6, #0
 800b352:	dd07      	ble.n	800b364 <_strtod_l+0x79c>
 800b354:	4649      	mov	r1, r9
 800b356:	9805      	ldr	r0, [sp, #20]
 800b358:	4632      	mov	r2, r6
 800b35a:	f003 f8d9 	bl	800e510 <__lshift>
 800b35e:	4681      	mov	r9, r0
 800b360:	2800      	cmp	r0, #0
 800b362:	d0d8      	beq.n	800b316 <_strtod_l+0x74e>
 800b364:	2f00      	cmp	r7, #0
 800b366:	dd08      	ble.n	800b37a <_strtod_l+0x7b2>
 800b368:	4641      	mov	r1, r8
 800b36a:	9805      	ldr	r0, [sp, #20]
 800b36c:	463a      	mov	r2, r7
 800b36e:	f003 f8cf 	bl	800e510 <__lshift>
 800b372:	4680      	mov	r8, r0
 800b374:	2800      	cmp	r0, #0
 800b376:	f43f ae46 	beq.w	800b006 <_strtod_l+0x43e>
 800b37a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b37c:	9805      	ldr	r0, [sp, #20]
 800b37e:	464a      	mov	r2, r9
 800b380:	f003 f94e 	bl	800e620 <__mdiff>
 800b384:	4604      	mov	r4, r0
 800b386:	2800      	cmp	r0, #0
 800b388:	f43f ae3d 	beq.w	800b006 <_strtod_l+0x43e>
 800b38c:	68c3      	ldr	r3, [r0, #12]
 800b38e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b390:	2300      	movs	r3, #0
 800b392:	60c3      	str	r3, [r0, #12]
 800b394:	4641      	mov	r1, r8
 800b396:	f003 f927 	bl	800e5e8 <__mcmp>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	da46      	bge.n	800b42c <_strtod_l+0x864>
 800b39e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b3a4:	d16c      	bne.n	800b480 <_strtod_l+0x8b8>
 800b3a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d168      	bne.n	800b480 <_strtod_l+0x8b8>
 800b3ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3b2:	0d1b      	lsrs	r3, r3, #20
 800b3b4:	051b      	lsls	r3, r3, #20
 800b3b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3ba:	d961      	bls.n	800b480 <_strtod_l+0x8b8>
 800b3bc:	6963      	ldr	r3, [r4, #20]
 800b3be:	b913      	cbnz	r3, 800b3c6 <_strtod_l+0x7fe>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	dd5c      	ble.n	800b480 <_strtod_l+0x8b8>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	9805      	ldr	r0, [sp, #20]
 800b3cc:	f003 f8a0 	bl	800e510 <__lshift>
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	f003 f908 	bl	800e5e8 <__mcmp>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	dd51      	ble.n	800b480 <_strtod_l+0x8b8>
 800b3dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3e0:	9a08      	ldr	r2, [sp, #32]
 800b3e2:	0d1b      	lsrs	r3, r3, #20
 800b3e4:	051b      	lsls	r3, r3, #20
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	d06b      	beq.n	800b4c2 <_strtod_l+0x8fa>
 800b3ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b3ee:	d868      	bhi.n	800b4c2 <_strtod_l+0x8fa>
 800b3f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b3f4:	f67f ae9d 	bls.w	800b132 <_strtod_l+0x56a>
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b424 <_strtod_l+0x85c>)
 800b3fa:	4650      	mov	r0, sl
 800b3fc:	4659      	mov	r1, fp
 800b3fe:	2200      	movs	r2, #0
 800b400:	f7f5 f902 	bl	8000608 <__aeabi_dmul>
 800b404:	4b08      	ldr	r3, [pc, #32]	@ (800b428 <_strtod_l+0x860>)
 800b406:	400b      	ands	r3, r1
 800b408:	4682      	mov	sl, r0
 800b40a:	468b      	mov	fp, r1
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f47f ae05 	bne.w	800b01c <_strtod_l+0x454>
 800b412:	9a05      	ldr	r2, [sp, #20]
 800b414:	2322      	movs	r3, #34	@ 0x22
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	e600      	b.n	800b01c <_strtod_l+0x454>
 800b41a:	bf00      	nop
 800b41c:	08010be8 	.word	0x08010be8
 800b420:	fffffc02 	.word	0xfffffc02
 800b424:	39500000 	.word	0x39500000
 800b428:	7ff00000 	.word	0x7ff00000
 800b42c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b430:	d165      	bne.n	800b4fe <_strtod_l+0x936>
 800b432:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b438:	b35a      	cbz	r2, 800b492 <_strtod_l+0x8ca>
 800b43a:	4a9f      	ldr	r2, [pc, #636]	@ (800b6b8 <_strtod_l+0xaf0>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d12b      	bne.n	800b498 <_strtod_l+0x8d0>
 800b440:	9b08      	ldr	r3, [sp, #32]
 800b442:	4651      	mov	r1, sl
 800b444:	b303      	cbz	r3, 800b488 <_strtod_l+0x8c0>
 800b446:	4b9d      	ldr	r3, [pc, #628]	@ (800b6bc <_strtod_l+0xaf4>)
 800b448:	465a      	mov	r2, fp
 800b44a:	4013      	ands	r3, r2
 800b44c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b450:	f04f 32ff 	mov.w	r2, #4294967295
 800b454:	d81b      	bhi.n	800b48e <_strtod_l+0x8c6>
 800b456:	0d1b      	lsrs	r3, r3, #20
 800b458:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b45c:	fa02 f303 	lsl.w	r3, r2, r3
 800b460:	4299      	cmp	r1, r3
 800b462:	d119      	bne.n	800b498 <_strtod_l+0x8d0>
 800b464:	4b96      	ldr	r3, [pc, #600]	@ (800b6c0 <_strtod_l+0xaf8>)
 800b466:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b468:	429a      	cmp	r2, r3
 800b46a:	d102      	bne.n	800b472 <_strtod_l+0x8aa>
 800b46c:	3101      	adds	r1, #1
 800b46e:	f43f adca 	beq.w	800b006 <_strtod_l+0x43e>
 800b472:	4b92      	ldr	r3, [pc, #584]	@ (800b6bc <_strtod_l+0xaf4>)
 800b474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b476:	401a      	ands	r2, r3
 800b478:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b47c:	f04f 0a00 	mov.w	sl, #0
 800b480:	9b08      	ldr	r3, [sp, #32]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1b8      	bne.n	800b3f8 <_strtod_l+0x830>
 800b486:	e5c9      	b.n	800b01c <_strtod_l+0x454>
 800b488:	f04f 33ff 	mov.w	r3, #4294967295
 800b48c:	e7e8      	b.n	800b460 <_strtod_l+0x898>
 800b48e:	4613      	mov	r3, r2
 800b490:	e7e6      	b.n	800b460 <_strtod_l+0x898>
 800b492:	ea53 030a 	orrs.w	r3, r3, sl
 800b496:	d0a1      	beq.n	800b3dc <_strtod_l+0x814>
 800b498:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b49a:	b1db      	cbz	r3, 800b4d4 <_strtod_l+0x90c>
 800b49c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b49e:	4213      	tst	r3, r2
 800b4a0:	d0ee      	beq.n	800b480 <_strtod_l+0x8b8>
 800b4a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a4:	9a08      	ldr	r2, [sp, #32]
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	b1bb      	cbz	r3, 800b4dc <_strtod_l+0x914>
 800b4ac:	f7ff fb6d 	bl	800ab8a <sulp>
 800b4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4b4:	ec53 2b10 	vmov	r2, r3, d0
 800b4b8:	f7f4 fef0 	bl	800029c <__adddf3>
 800b4bc:	4682      	mov	sl, r0
 800b4be:	468b      	mov	fp, r1
 800b4c0:	e7de      	b.n	800b480 <_strtod_l+0x8b8>
 800b4c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b4c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b4ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b4ce:	f04f 3aff 	mov.w	sl, #4294967295
 800b4d2:	e7d5      	b.n	800b480 <_strtod_l+0x8b8>
 800b4d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4d6:	ea13 0f0a 	tst.w	r3, sl
 800b4da:	e7e1      	b.n	800b4a0 <_strtod_l+0x8d8>
 800b4dc:	f7ff fb55 	bl	800ab8a <sulp>
 800b4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4e4:	ec53 2b10 	vmov	r2, r3, d0
 800b4e8:	f7f4 fed6 	bl	8000298 <__aeabi_dsub>
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4682      	mov	sl, r0
 800b4f2:	468b      	mov	fp, r1
 800b4f4:	f7f5 faf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0c1      	beq.n	800b480 <_strtod_l+0x8b8>
 800b4fc:	e619      	b.n	800b132 <_strtod_l+0x56a>
 800b4fe:	4641      	mov	r1, r8
 800b500:	4620      	mov	r0, r4
 800b502:	f003 f9e9 	bl	800e8d8 <__ratio>
 800b506:	ec57 6b10 	vmov	r6, r7, d0
 800b50a:	2200      	movs	r2, #0
 800b50c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 faf4 	bl	8000b00 <__aeabi_dcmple>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d06f      	beq.n	800b5fc <_strtod_l+0xa34>
 800b51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d17a      	bne.n	800b618 <_strtod_l+0xa50>
 800b522:	f1ba 0f00 	cmp.w	sl, #0
 800b526:	d158      	bne.n	800b5da <_strtod_l+0xa12>
 800b528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b52a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d15a      	bne.n	800b5e8 <_strtod_l+0xa20>
 800b532:	4b64      	ldr	r3, [pc, #400]	@ (800b6c4 <_strtod_l+0xafc>)
 800b534:	2200      	movs	r2, #0
 800b536:	4630      	mov	r0, r6
 800b538:	4639      	mov	r1, r7
 800b53a:	f7f5 fad7 	bl	8000aec <__aeabi_dcmplt>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d159      	bne.n	800b5f6 <_strtod_l+0xa2e>
 800b542:	4630      	mov	r0, r6
 800b544:	4639      	mov	r1, r7
 800b546:	4b60      	ldr	r3, [pc, #384]	@ (800b6c8 <_strtod_l+0xb00>)
 800b548:	2200      	movs	r2, #0
 800b54a:	f7f5 f85d 	bl	8000608 <__aeabi_dmul>
 800b54e:	4606      	mov	r6, r0
 800b550:	460f      	mov	r7, r1
 800b552:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b556:	9606      	str	r6, [sp, #24]
 800b558:	9307      	str	r3, [sp, #28]
 800b55a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b55e:	4d57      	ldr	r5, [pc, #348]	@ (800b6bc <_strtod_l+0xaf4>)
 800b560:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b566:	401d      	ands	r5, r3
 800b568:	4b58      	ldr	r3, [pc, #352]	@ (800b6cc <_strtod_l+0xb04>)
 800b56a:	429d      	cmp	r5, r3
 800b56c:	f040 80b2 	bne.w	800b6d4 <_strtod_l+0xb0c>
 800b570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b572:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b576:	ec4b ab10 	vmov	d0, sl, fp
 800b57a:	f003 f8e5 	bl	800e748 <__ulp>
 800b57e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b582:	ec51 0b10 	vmov	r0, r1, d0
 800b586:	f7f5 f83f 	bl	8000608 <__aeabi_dmul>
 800b58a:	4652      	mov	r2, sl
 800b58c:	465b      	mov	r3, fp
 800b58e:	f7f4 fe85 	bl	800029c <__adddf3>
 800b592:	460b      	mov	r3, r1
 800b594:	4949      	ldr	r1, [pc, #292]	@ (800b6bc <_strtod_l+0xaf4>)
 800b596:	4a4e      	ldr	r2, [pc, #312]	@ (800b6d0 <_strtod_l+0xb08>)
 800b598:	4019      	ands	r1, r3
 800b59a:	4291      	cmp	r1, r2
 800b59c:	4682      	mov	sl, r0
 800b59e:	d942      	bls.n	800b626 <_strtod_l+0xa5e>
 800b5a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b5a2:	4b47      	ldr	r3, [pc, #284]	@ (800b6c0 <_strtod_l+0xaf8>)
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d103      	bne.n	800b5b0 <_strtod_l+0x9e8>
 800b5a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	f43f ad2b 	beq.w	800b006 <_strtod_l+0x43e>
 800b5b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b6c0 <_strtod_l+0xaf8>
 800b5b4:	f04f 3aff 	mov.w	sl, #4294967295
 800b5b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5ba:	9805      	ldr	r0, [sp, #20]
 800b5bc:	f002 fd90 	bl	800e0e0 <_Bfree>
 800b5c0:	9805      	ldr	r0, [sp, #20]
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	f002 fd8c 	bl	800e0e0 <_Bfree>
 800b5c8:	9805      	ldr	r0, [sp, #20]
 800b5ca:	4641      	mov	r1, r8
 800b5cc:	f002 fd88 	bl	800e0e0 <_Bfree>
 800b5d0:	9805      	ldr	r0, [sp, #20]
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	f002 fd84 	bl	800e0e0 <_Bfree>
 800b5d8:	e618      	b.n	800b20c <_strtod_l+0x644>
 800b5da:	f1ba 0f01 	cmp.w	sl, #1
 800b5de:	d103      	bne.n	800b5e8 <_strtod_l+0xa20>
 800b5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f43f ada5 	beq.w	800b132 <_strtod_l+0x56a>
 800b5e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b698 <_strtod_l+0xad0>
 800b5ec:	4f35      	ldr	r7, [pc, #212]	@ (800b6c4 <_strtod_l+0xafc>)
 800b5ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b5f2:	2600      	movs	r6, #0
 800b5f4:	e7b1      	b.n	800b55a <_strtod_l+0x992>
 800b5f6:	4f34      	ldr	r7, [pc, #208]	@ (800b6c8 <_strtod_l+0xb00>)
 800b5f8:	2600      	movs	r6, #0
 800b5fa:	e7aa      	b.n	800b552 <_strtod_l+0x98a>
 800b5fc:	4b32      	ldr	r3, [pc, #200]	@ (800b6c8 <_strtod_l+0xb00>)
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	2200      	movs	r2, #0
 800b604:	f7f5 f800 	bl	8000608 <__aeabi_dmul>
 800b608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b60a:	4606      	mov	r6, r0
 800b60c:	460f      	mov	r7, r1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d09f      	beq.n	800b552 <_strtod_l+0x98a>
 800b612:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b616:	e7a0      	b.n	800b55a <_strtod_l+0x992>
 800b618:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b6a0 <_strtod_l+0xad8>
 800b61c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b620:	ec57 6b17 	vmov	r6, r7, d7
 800b624:	e799      	b.n	800b55a <_strtod_l+0x992>
 800b626:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b62a:	9b08      	ldr	r3, [sp, #32]
 800b62c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1c1      	bne.n	800b5b8 <_strtod_l+0x9f0>
 800b634:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b638:	0d1b      	lsrs	r3, r3, #20
 800b63a:	051b      	lsls	r3, r3, #20
 800b63c:	429d      	cmp	r5, r3
 800b63e:	d1bb      	bne.n	800b5b8 <_strtod_l+0x9f0>
 800b640:	4630      	mov	r0, r6
 800b642:	4639      	mov	r1, r7
 800b644:	f7f5 fb40 	bl	8000cc8 <__aeabi_d2lz>
 800b648:	f7f4 ffb0 	bl	80005ac <__aeabi_l2d>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f7f4 fe20 	bl	8000298 <__aeabi_dsub>
 800b658:	460b      	mov	r3, r1
 800b65a:	4602      	mov	r2, r0
 800b65c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b660:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b666:	ea46 060a 	orr.w	r6, r6, sl
 800b66a:	431e      	orrs	r6, r3
 800b66c:	d06f      	beq.n	800b74e <_strtod_l+0xb86>
 800b66e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6a8 <_strtod_l+0xae0>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f5 fa3a 	bl	8000aec <__aeabi_dcmplt>
 800b678:	2800      	cmp	r0, #0
 800b67a:	f47f accf 	bne.w	800b01c <_strtod_l+0x454>
 800b67e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b6b0 <_strtod_l+0xae8>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b688:	f7f5 fa4e 	bl	8000b28 <__aeabi_dcmpgt>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d093      	beq.n	800b5b8 <_strtod_l+0x9f0>
 800b690:	e4c4      	b.n	800b01c <_strtod_l+0x454>
 800b692:	bf00      	nop
 800b694:	f3af 8000 	nop.w
 800b698:	00000000 	.word	0x00000000
 800b69c:	bff00000 	.word	0xbff00000
 800b6a0:	00000000 	.word	0x00000000
 800b6a4:	3ff00000 	.word	0x3ff00000
 800b6a8:	94a03595 	.word	0x94a03595
 800b6ac:	3fdfffff 	.word	0x3fdfffff
 800b6b0:	35afe535 	.word	0x35afe535
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	000fffff 	.word	0x000fffff
 800b6bc:	7ff00000 	.word	0x7ff00000
 800b6c0:	7fefffff 	.word	0x7fefffff
 800b6c4:	3ff00000 	.word	0x3ff00000
 800b6c8:	3fe00000 	.word	0x3fe00000
 800b6cc:	7fe00000 	.word	0x7fe00000
 800b6d0:	7c9fffff 	.word	0x7c9fffff
 800b6d4:	9b08      	ldr	r3, [sp, #32]
 800b6d6:	b323      	cbz	r3, 800b722 <_strtod_l+0xb5a>
 800b6d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b6dc:	d821      	bhi.n	800b722 <_strtod_l+0xb5a>
 800b6de:	a328      	add	r3, pc, #160	@ (adr r3, 800b780 <_strtod_l+0xbb8>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	f7f5 fa0a 	bl	8000b00 <__aeabi_dcmple>
 800b6ec:	b1a0      	cbz	r0, 800b718 <_strtod_l+0xb50>
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7f5 fa61 	bl	8000bb8 <__aeabi_d2uiz>
 800b6f6:	2801      	cmp	r0, #1
 800b6f8:	bf38      	it	cc
 800b6fa:	2001      	movcc	r0, #1
 800b6fc:	f7f4 ff0a 	bl	8000514 <__aeabi_ui2d>
 800b700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b702:	4606      	mov	r6, r0
 800b704:	460f      	mov	r7, r1
 800b706:	b9fb      	cbnz	r3, 800b748 <_strtod_l+0xb80>
 800b708:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b70c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b70e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b710:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b714:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b718:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b71a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b71e:	1b5b      	subs	r3, r3, r5
 800b720:	9311      	str	r3, [sp, #68]	@ 0x44
 800b722:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b726:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b72a:	f003 f80d 	bl	800e748 <__ulp>
 800b72e:	4650      	mov	r0, sl
 800b730:	ec53 2b10 	vmov	r2, r3, d0
 800b734:	4659      	mov	r1, fp
 800b736:	f7f4 ff67 	bl	8000608 <__aeabi_dmul>
 800b73a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b73e:	f7f4 fdad 	bl	800029c <__adddf3>
 800b742:	4682      	mov	sl, r0
 800b744:	468b      	mov	fp, r1
 800b746:	e770      	b.n	800b62a <_strtod_l+0xa62>
 800b748:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b74c:	e7e0      	b.n	800b710 <_strtod_l+0xb48>
 800b74e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b788 <_strtod_l+0xbc0>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f5 f9ca 	bl	8000aec <__aeabi_dcmplt>
 800b758:	e798      	b.n	800b68c <_strtod_l+0xac4>
 800b75a:	2300      	movs	r3, #0
 800b75c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b75e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	f7ff ba6d 	b.w	800ac42 <_strtod_l+0x7a>
 800b768:	2a65      	cmp	r2, #101	@ 0x65
 800b76a:	f43f ab66 	beq.w	800ae3a <_strtod_l+0x272>
 800b76e:	2a45      	cmp	r2, #69	@ 0x45
 800b770:	f43f ab63 	beq.w	800ae3a <_strtod_l+0x272>
 800b774:	2301      	movs	r3, #1
 800b776:	f7ff bb9e 	b.w	800aeb6 <_strtod_l+0x2ee>
 800b77a:	bf00      	nop
 800b77c:	f3af 8000 	nop.w
 800b780:	ffc00000 	.word	0xffc00000
 800b784:	41dfffff 	.word	0x41dfffff
 800b788:	94a03595 	.word	0x94a03595
 800b78c:	3fcfffff 	.word	0x3fcfffff

0800b790 <_strtod_r>:
 800b790:	4b01      	ldr	r3, [pc, #4]	@ (800b798 <_strtod_r+0x8>)
 800b792:	f7ff ba19 	b.w	800abc8 <_strtod_l>
 800b796:	bf00      	nop
 800b798:	20000020 	.word	0x20000020

0800b79c <strtod>:
 800b79c:	460a      	mov	r2, r1
 800b79e:	4601      	mov	r1, r0
 800b7a0:	4802      	ldr	r0, [pc, #8]	@ (800b7ac <strtod+0x10>)
 800b7a2:	4b03      	ldr	r3, [pc, #12]	@ (800b7b0 <strtod+0x14>)
 800b7a4:	6800      	ldr	r0, [r0, #0]
 800b7a6:	f7ff ba0f 	b.w	800abc8 <_strtod_l>
 800b7aa:	bf00      	nop
 800b7ac:	2000018c 	.word	0x2000018c
 800b7b0:	20000020 	.word	0x20000020

0800b7b4 <__cvt>:
 800b7b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b8:	ec57 6b10 	vmov	r6, r7, d0
 800b7bc:	2f00      	cmp	r7, #0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	bfbb      	ittet	lt
 800b7c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b7ca:	461f      	movlt	r7, r3
 800b7cc:	2300      	movge	r3, #0
 800b7ce:	232d      	movlt	r3, #45	@ 0x2d
 800b7d0:	700b      	strb	r3, [r1, #0]
 800b7d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b7d8:	4691      	mov	r9, r2
 800b7da:	f023 0820 	bic.w	r8, r3, #32
 800b7de:	bfbc      	itt	lt
 800b7e0:	4632      	movlt	r2, r6
 800b7e2:	4616      	movlt	r6, r2
 800b7e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7e8:	d005      	beq.n	800b7f6 <__cvt+0x42>
 800b7ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b7ee:	d100      	bne.n	800b7f2 <__cvt+0x3e>
 800b7f0:	3401      	adds	r4, #1
 800b7f2:	2102      	movs	r1, #2
 800b7f4:	e000      	b.n	800b7f8 <__cvt+0x44>
 800b7f6:	2103      	movs	r1, #3
 800b7f8:	ab03      	add	r3, sp, #12
 800b7fa:	9301      	str	r3, [sp, #4]
 800b7fc:	ab02      	add	r3, sp, #8
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	ec47 6b10 	vmov	d0, r6, r7
 800b804:	4653      	mov	r3, sl
 800b806:	4622      	mov	r2, r4
 800b808:	f001 fa1a 	bl	800cc40 <_dtoa_r>
 800b80c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b810:	4605      	mov	r5, r0
 800b812:	d119      	bne.n	800b848 <__cvt+0x94>
 800b814:	f019 0f01 	tst.w	r9, #1
 800b818:	d00e      	beq.n	800b838 <__cvt+0x84>
 800b81a:	eb00 0904 	add.w	r9, r0, r4
 800b81e:	2200      	movs	r2, #0
 800b820:	2300      	movs	r3, #0
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f5 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800b82a:	b108      	cbz	r0, 800b830 <__cvt+0x7c>
 800b82c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b830:	2230      	movs	r2, #48	@ 0x30
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	454b      	cmp	r3, r9
 800b836:	d31e      	bcc.n	800b876 <__cvt+0xc2>
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b83c:	1b5b      	subs	r3, r3, r5
 800b83e:	4628      	mov	r0, r5
 800b840:	6013      	str	r3, [r2, #0]
 800b842:	b004      	add	sp, #16
 800b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b84c:	eb00 0904 	add.w	r9, r0, r4
 800b850:	d1e5      	bne.n	800b81e <__cvt+0x6a>
 800b852:	7803      	ldrb	r3, [r0, #0]
 800b854:	2b30      	cmp	r3, #48	@ 0x30
 800b856:	d10a      	bne.n	800b86e <__cvt+0xba>
 800b858:	2200      	movs	r2, #0
 800b85a:	2300      	movs	r3, #0
 800b85c:	4630      	mov	r0, r6
 800b85e:	4639      	mov	r1, r7
 800b860:	f7f5 f93a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b864:	b918      	cbnz	r0, 800b86e <__cvt+0xba>
 800b866:	f1c4 0401 	rsb	r4, r4, #1
 800b86a:	f8ca 4000 	str.w	r4, [sl]
 800b86e:	f8da 3000 	ldr.w	r3, [sl]
 800b872:	4499      	add	r9, r3
 800b874:	e7d3      	b.n	800b81e <__cvt+0x6a>
 800b876:	1c59      	adds	r1, r3, #1
 800b878:	9103      	str	r1, [sp, #12]
 800b87a:	701a      	strb	r2, [r3, #0]
 800b87c:	e7d9      	b.n	800b832 <__cvt+0x7e>

0800b87e <__exponent>:
 800b87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b880:	2900      	cmp	r1, #0
 800b882:	bfba      	itte	lt
 800b884:	4249      	neglt	r1, r1
 800b886:	232d      	movlt	r3, #45	@ 0x2d
 800b888:	232b      	movge	r3, #43	@ 0x2b
 800b88a:	2909      	cmp	r1, #9
 800b88c:	7002      	strb	r2, [r0, #0]
 800b88e:	7043      	strb	r3, [r0, #1]
 800b890:	dd29      	ble.n	800b8e6 <__exponent+0x68>
 800b892:	f10d 0307 	add.w	r3, sp, #7
 800b896:	461d      	mov	r5, r3
 800b898:	270a      	movs	r7, #10
 800b89a:	461a      	mov	r2, r3
 800b89c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b8a0:	fb07 1416 	mls	r4, r7, r6, r1
 800b8a4:	3430      	adds	r4, #48	@ 0x30
 800b8a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	2c63      	cmp	r4, #99	@ 0x63
 800b8ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	dcf1      	bgt.n	800b89a <__exponent+0x1c>
 800b8b6:	3130      	adds	r1, #48	@ 0x30
 800b8b8:	1e94      	subs	r4, r2, #2
 800b8ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b8be:	1c41      	adds	r1, r0, #1
 800b8c0:	4623      	mov	r3, r4
 800b8c2:	42ab      	cmp	r3, r5
 800b8c4:	d30a      	bcc.n	800b8dc <__exponent+0x5e>
 800b8c6:	f10d 0309 	add.w	r3, sp, #9
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	42ac      	cmp	r4, r5
 800b8ce:	bf88      	it	hi
 800b8d0:	2300      	movhi	r3, #0
 800b8d2:	3302      	adds	r3, #2
 800b8d4:	4403      	add	r3, r0
 800b8d6:	1a18      	subs	r0, r3, r0
 800b8d8:	b003      	add	sp, #12
 800b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b8e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b8e4:	e7ed      	b.n	800b8c2 <__exponent+0x44>
 800b8e6:	2330      	movs	r3, #48	@ 0x30
 800b8e8:	3130      	adds	r1, #48	@ 0x30
 800b8ea:	7083      	strb	r3, [r0, #2]
 800b8ec:	70c1      	strb	r1, [r0, #3]
 800b8ee:	1d03      	adds	r3, r0, #4
 800b8f0:	e7f1      	b.n	800b8d6 <__exponent+0x58>
	...

0800b8f4 <_printf_float>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	b08d      	sub	sp, #52	@ 0x34
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b900:	4616      	mov	r6, r2
 800b902:	461f      	mov	r7, r3
 800b904:	4605      	mov	r5, r0
 800b906:	f001 f861 	bl	800c9cc <_localeconv_r>
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	9304      	str	r3, [sp, #16]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7f4 fcb6 	bl	8000280 <strlen>
 800b914:	2300      	movs	r3, #0
 800b916:	930a      	str	r3, [sp, #40]	@ 0x28
 800b918:	f8d8 3000 	ldr.w	r3, [r8]
 800b91c:	9005      	str	r0, [sp, #20]
 800b91e:	3307      	adds	r3, #7
 800b920:	f023 0307 	bic.w	r3, r3, #7
 800b924:	f103 0208 	add.w	r2, r3, #8
 800b928:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b92c:	f8d4 b000 	ldr.w	fp, [r4]
 800b930:	f8c8 2000 	str.w	r2, [r8]
 800b934:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b938:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b93c:	9307      	str	r3, [sp, #28]
 800b93e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b94a:	4b9c      	ldr	r3, [pc, #624]	@ (800bbbc <_printf_float+0x2c8>)
 800b94c:	f04f 32ff 	mov.w	r2, #4294967295
 800b950:	f7f5 f8f4 	bl	8000b3c <__aeabi_dcmpun>
 800b954:	bb70      	cbnz	r0, 800b9b4 <_printf_float+0xc0>
 800b956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b95a:	4b98      	ldr	r3, [pc, #608]	@ (800bbbc <_printf_float+0x2c8>)
 800b95c:	f04f 32ff 	mov.w	r2, #4294967295
 800b960:	f7f5 f8ce 	bl	8000b00 <__aeabi_dcmple>
 800b964:	bb30      	cbnz	r0, 800b9b4 <_printf_float+0xc0>
 800b966:	2200      	movs	r2, #0
 800b968:	2300      	movs	r3, #0
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	f7f5 f8bd 	bl	8000aec <__aeabi_dcmplt>
 800b972:	b110      	cbz	r0, 800b97a <_printf_float+0x86>
 800b974:	232d      	movs	r3, #45	@ 0x2d
 800b976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b97a:	4a91      	ldr	r2, [pc, #580]	@ (800bbc0 <_printf_float+0x2cc>)
 800b97c:	4b91      	ldr	r3, [pc, #580]	@ (800bbc4 <_printf_float+0x2d0>)
 800b97e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b982:	bf94      	ite	ls
 800b984:	4690      	movls	r8, r2
 800b986:	4698      	movhi	r8, r3
 800b988:	2303      	movs	r3, #3
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	f02b 0304 	bic.w	r3, fp, #4
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	f04f 0900 	mov.w	r9, #0
 800b996:	9700      	str	r7, [sp, #0]
 800b998:	4633      	mov	r3, r6
 800b99a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b99c:	4621      	mov	r1, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f000 f9d2 	bl	800bd48 <_printf_common>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f040 808d 	bne.w	800bac4 <_printf_float+0x1d0>
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	b00d      	add	sp, #52	@ 0x34
 800b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b4:	4642      	mov	r2, r8
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	4640      	mov	r0, r8
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	f7f5 f8be 	bl	8000b3c <__aeabi_dcmpun>
 800b9c0:	b140      	cbz	r0, 800b9d4 <_printf_float+0xe0>
 800b9c2:	464b      	mov	r3, r9
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bfbc      	itt	lt
 800b9c8:	232d      	movlt	r3, #45	@ 0x2d
 800b9ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b9ce:	4a7e      	ldr	r2, [pc, #504]	@ (800bbc8 <_printf_float+0x2d4>)
 800b9d0:	4b7e      	ldr	r3, [pc, #504]	@ (800bbcc <_printf_float+0x2d8>)
 800b9d2:	e7d4      	b.n	800b97e <_printf_float+0x8a>
 800b9d4:	6863      	ldr	r3, [r4, #4]
 800b9d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b9da:	9206      	str	r2, [sp, #24]
 800b9dc:	1c5a      	adds	r2, r3, #1
 800b9de:	d13b      	bne.n	800ba58 <_printf_float+0x164>
 800b9e0:	2306      	movs	r3, #6
 800b9e2:	6063      	str	r3, [r4, #4]
 800b9e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	6022      	str	r2, [r4, #0]
 800b9ec:	9303      	str	r3, [sp, #12]
 800b9ee:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b9f4:	ab09      	add	r3, sp, #36	@ 0x24
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	6861      	ldr	r1, [r4, #4]
 800b9fa:	ec49 8b10 	vmov	d0, r8, r9
 800b9fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba02:	4628      	mov	r0, r5
 800ba04:	f7ff fed6 	bl	800b7b4 <__cvt>
 800ba08:	9b06      	ldr	r3, [sp, #24]
 800ba0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba0c:	2b47      	cmp	r3, #71	@ 0x47
 800ba0e:	4680      	mov	r8, r0
 800ba10:	d129      	bne.n	800ba66 <_printf_float+0x172>
 800ba12:	1cc8      	adds	r0, r1, #3
 800ba14:	db02      	blt.n	800ba1c <_printf_float+0x128>
 800ba16:	6863      	ldr	r3, [r4, #4]
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	dd41      	ble.n	800baa0 <_printf_float+0x1ac>
 800ba1c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba20:	fa5f fa8a 	uxtb.w	sl, sl
 800ba24:	3901      	subs	r1, #1
 800ba26:	4652      	mov	r2, sl
 800ba28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba2c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba2e:	f7ff ff26 	bl	800b87e <__exponent>
 800ba32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba34:	1813      	adds	r3, r2, r0
 800ba36:	2a01      	cmp	r2, #1
 800ba38:	4681      	mov	r9, r0
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	dc02      	bgt.n	800ba44 <_printf_float+0x150>
 800ba3e:	6822      	ldr	r2, [r4, #0]
 800ba40:	07d2      	lsls	r2, r2, #31
 800ba42:	d501      	bpl.n	800ba48 <_printf_float+0x154>
 800ba44:	3301      	adds	r3, #1
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d0a2      	beq.n	800b996 <_printf_float+0xa2>
 800ba50:	232d      	movs	r3, #45	@ 0x2d
 800ba52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba56:	e79e      	b.n	800b996 <_printf_float+0xa2>
 800ba58:	9a06      	ldr	r2, [sp, #24]
 800ba5a:	2a47      	cmp	r2, #71	@ 0x47
 800ba5c:	d1c2      	bne.n	800b9e4 <_printf_float+0xf0>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1c0      	bne.n	800b9e4 <_printf_float+0xf0>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e7bd      	b.n	800b9e2 <_printf_float+0xee>
 800ba66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba6a:	d9db      	bls.n	800ba24 <_printf_float+0x130>
 800ba6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ba70:	d118      	bne.n	800baa4 <_printf_float+0x1b0>
 800ba72:	2900      	cmp	r1, #0
 800ba74:	6863      	ldr	r3, [r4, #4]
 800ba76:	dd0b      	ble.n	800ba90 <_printf_float+0x19c>
 800ba78:	6121      	str	r1, [r4, #16]
 800ba7a:	b913      	cbnz	r3, 800ba82 <_printf_float+0x18e>
 800ba7c:	6822      	ldr	r2, [r4, #0]
 800ba7e:	07d0      	lsls	r0, r2, #31
 800ba80:	d502      	bpl.n	800ba88 <_printf_float+0x194>
 800ba82:	3301      	adds	r3, #1
 800ba84:	440b      	add	r3, r1
 800ba86:	6123      	str	r3, [r4, #16]
 800ba88:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ba8a:	f04f 0900 	mov.w	r9, #0
 800ba8e:	e7db      	b.n	800ba48 <_printf_float+0x154>
 800ba90:	b913      	cbnz	r3, 800ba98 <_printf_float+0x1a4>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	07d2      	lsls	r2, r2, #31
 800ba96:	d501      	bpl.n	800ba9c <_printf_float+0x1a8>
 800ba98:	3302      	adds	r3, #2
 800ba9a:	e7f4      	b.n	800ba86 <_printf_float+0x192>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e7f2      	b.n	800ba86 <_printf_float+0x192>
 800baa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800baa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baa6:	4299      	cmp	r1, r3
 800baa8:	db05      	blt.n	800bab6 <_printf_float+0x1c2>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	6121      	str	r1, [r4, #16]
 800baae:	07d8      	lsls	r0, r3, #31
 800bab0:	d5ea      	bpl.n	800ba88 <_printf_float+0x194>
 800bab2:	1c4b      	adds	r3, r1, #1
 800bab4:	e7e7      	b.n	800ba86 <_printf_float+0x192>
 800bab6:	2900      	cmp	r1, #0
 800bab8:	bfd4      	ite	le
 800baba:	f1c1 0202 	rsble	r2, r1, #2
 800babe:	2201      	movgt	r2, #1
 800bac0:	4413      	add	r3, r2
 800bac2:	e7e0      	b.n	800ba86 <_printf_float+0x192>
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	055a      	lsls	r2, r3, #21
 800bac8:	d407      	bmi.n	800bada <_printf_float+0x1e6>
 800baca:	6923      	ldr	r3, [r4, #16]
 800bacc:	4642      	mov	r2, r8
 800bace:	4631      	mov	r1, r6
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b8      	blx	r7
 800bad4:	3001      	adds	r0, #1
 800bad6:	d12b      	bne.n	800bb30 <_printf_float+0x23c>
 800bad8:	e767      	b.n	800b9aa <_printf_float+0xb6>
 800bada:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bade:	f240 80dd 	bls.w	800bc9c <_printf_float+0x3a8>
 800bae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bae6:	2200      	movs	r2, #0
 800bae8:	2300      	movs	r3, #0
 800baea:	f7f4 fff5 	bl	8000ad8 <__aeabi_dcmpeq>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d033      	beq.n	800bb5a <_printf_float+0x266>
 800baf2:	4a37      	ldr	r2, [pc, #220]	@ (800bbd0 <_printf_float+0x2dc>)
 800baf4:	2301      	movs	r3, #1
 800baf6:	4631      	mov	r1, r6
 800baf8:	4628      	mov	r0, r5
 800bafa:	47b8      	blx	r7
 800bafc:	3001      	adds	r0, #1
 800bafe:	f43f af54 	beq.w	800b9aa <_printf_float+0xb6>
 800bb02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb06:	4543      	cmp	r3, r8
 800bb08:	db02      	blt.n	800bb10 <_printf_float+0x21c>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	07d8      	lsls	r0, r3, #31
 800bb0e:	d50f      	bpl.n	800bb30 <_printf_float+0x23c>
 800bb10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb14:	4631      	mov	r1, r6
 800bb16:	4628      	mov	r0, r5
 800bb18:	47b8      	blx	r7
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	f43f af45 	beq.w	800b9aa <_printf_float+0xb6>
 800bb20:	f04f 0900 	mov.w	r9, #0
 800bb24:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb28:	f104 0a1a 	add.w	sl, r4, #26
 800bb2c:	45c8      	cmp	r8, r9
 800bb2e:	dc09      	bgt.n	800bb44 <_printf_float+0x250>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	079b      	lsls	r3, r3, #30
 800bb34:	f100 8103 	bmi.w	800bd3e <_printf_float+0x44a>
 800bb38:	68e0      	ldr	r0, [r4, #12]
 800bb3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb3c:	4298      	cmp	r0, r3
 800bb3e:	bfb8      	it	lt
 800bb40:	4618      	movlt	r0, r3
 800bb42:	e734      	b.n	800b9ae <_printf_float+0xba>
 800bb44:	2301      	movs	r3, #1
 800bb46:	4652      	mov	r2, sl
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b8      	blx	r7
 800bb4e:	3001      	adds	r0, #1
 800bb50:	f43f af2b 	beq.w	800b9aa <_printf_float+0xb6>
 800bb54:	f109 0901 	add.w	r9, r9, #1
 800bb58:	e7e8      	b.n	800bb2c <_printf_float+0x238>
 800bb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	dc39      	bgt.n	800bbd4 <_printf_float+0x2e0>
 800bb60:	4a1b      	ldr	r2, [pc, #108]	@ (800bbd0 <_printf_float+0x2dc>)
 800bb62:	2301      	movs	r3, #1
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b8      	blx	r7
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	f43f af1d 	beq.w	800b9aa <_printf_float+0xb6>
 800bb70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bb74:	ea59 0303 	orrs.w	r3, r9, r3
 800bb78:	d102      	bne.n	800bb80 <_printf_float+0x28c>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	07d9      	lsls	r1, r3, #31
 800bb7e:	d5d7      	bpl.n	800bb30 <_printf_float+0x23c>
 800bb80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb84:	4631      	mov	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b8      	blx	r7
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	f43f af0d 	beq.w	800b9aa <_printf_float+0xb6>
 800bb90:	f04f 0a00 	mov.w	sl, #0
 800bb94:	f104 0b1a 	add.w	fp, r4, #26
 800bb98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb9a:	425b      	negs	r3, r3
 800bb9c:	4553      	cmp	r3, sl
 800bb9e:	dc01      	bgt.n	800bba4 <_printf_float+0x2b0>
 800bba0:	464b      	mov	r3, r9
 800bba2:	e793      	b.n	800bacc <_printf_float+0x1d8>
 800bba4:	2301      	movs	r3, #1
 800bba6:	465a      	mov	r2, fp
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	47b8      	blx	r7
 800bbae:	3001      	adds	r0, #1
 800bbb0:	f43f aefb 	beq.w	800b9aa <_printf_float+0xb6>
 800bbb4:	f10a 0a01 	add.w	sl, sl, #1
 800bbb8:	e7ee      	b.n	800bb98 <_printf_float+0x2a4>
 800bbba:	bf00      	nop
 800bbbc:	7fefffff 	.word	0x7fefffff
 800bbc0:	08010c10 	.word	0x08010c10
 800bbc4:	08010c14 	.word	0x08010c14
 800bbc8:	08010c18 	.word	0x08010c18
 800bbcc:	08010c1c 	.word	0x08010c1c
 800bbd0:	08010c20 	.word	0x08010c20
 800bbd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbda:	4553      	cmp	r3, sl
 800bbdc:	bfa8      	it	ge
 800bbde:	4653      	movge	r3, sl
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	4699      	mov	r9, r3
 800bbe4:	dc36      	bgt.n	800bc54 <_printf_float+0x360>
 800bbe6:	f04f 0b00 	mov.w	fp, #0
 800bbea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbee:	f104 021a 	add.w	r2, r4, #26
 800bbf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbf4:	9306      	str	r3, [sp, #24]
 800bbf6:	eba3 0309 	sub.w	r3, r3, r9
 800bbfa:	455b      	cmp	r3, fp
 800bbfc:	dc31      	bgt.n	800bc62 <_printf_float+0x36e>
 800bbfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc00:	459a      	cmp	sl, r3
 800bc02:	dc3a      	bgt.n	800bc7a <_printf_float+0x386>
 800bc04:	6823      	ldr	r3, [r4, #0]
 800bc06:	07da      	lsls	r2, r3, #31
 800bc08:	d437      	bmi.n	800bc7a <_printf_float+0x386>
 800bc0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc0c:	ebaa 0903 	sub.w	r9, sl, r3
 800bc10:	9b06      	ldr	r3, [sp, #24]
 800bc12:	ebaa 0303 	sub.w	r3, sl, r3
 800bc16:	4599      	cmp	r9, r3
 800bc18:	bfa8      	it	ge
 800bc1a:	4699      	movge	r9, r3
 800bc1c:	f1b9 0f00 	cmp.w	r9, #0
 800bc20:	dc33      	bgt.n	800bc8a <_printf_float+0x396>
 800bc22:	f04f 0800 	mov.w	r8, #0
 800bc26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc2a:	f104 0b1a 	add.w	fp, r4, #26
 800bc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc30:	ebaa 0303 	sub.w	r3, sl, r3
 800bc34:	eba3 0309 	sub.w	r3, r3, r9
 800bc38:	4543      	cmp	r3, r8
 800bc3a:	f77f af79 	ble.w	800bb30 <_printf_float+0x23c>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	465a      	mov	r2, fp
 800bc42:	4631      	mov	r1, r6
 800bc44:	4628      	mov	r0, r5
 800bc46:	47b8      	blx	r7
 800bc48:	3001      	adds	r0, #1
 800bc4a:	f43f aeae 	beq.w	800b9aa <_printf_float+0xb6>
 800bc4e:	f108 0801 	add.w	r8, r8, #1
 800bc52:	e7ec      	b.n	800bc2e <_printf_float+0x33a>
 800bc54:	4642      	mov	r2, r8
 800bc56:	4631      	mov	r1, r6
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b8      	blx	r7
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d1c2      	bne.n	800bbe6 <_printf_float+0x2f2>
 800bc60:	e6a3      	b.n	800b9aa <_printf_float+0xb6>
 800bc62:	2301      	movs	r3, #1
 800bc64:	4631      	mov	r1, r6
 800bc66:	4628      	mov	r0, r5
 800bc68:	9206      	str	r2, [sp, #24]
 800bc6a:	47b8      	blx	r7
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	f43f ae9c 	beq.w	800b9aa <_printf_float+0xb6>
 800bc72:	9a06      	ldr	r2, [sp, #24]
 800bc74:	f10b 0b01 	add.w	fp, fp, #1
 800bc78:	e7bb      	b.n	800bbf2 <_printf_float+0x2fe>
 800bc7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	d1c0      	bne.n	800bc0a <_printf_float+0x316>
 800bc88:	e68f      	b.n	800b9aa <_printf_float+0xb6>
 800bc8a:	9a06      	ldr	r2, [sp, #24]
 800bc8c:	464b      	mov	r3, r9
 800bc8e:	4442      	add	r2, r8
 800bc90:	4631      	mov	r1, r6
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b8      	blx	r7
 800bc96:	3001      	adds	r0, #1
 800bc98:	d1c3      	bne.n	800bc22 <_printf_float+0x32e>
 800bc9a:	e686      	b.n	800b9aa <_printf_float+0xb6>
 800bc9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bca0:	f1ba 0f01 	cmp.w	sl, #1
 800bca4:	dc01      	bgt.n	800bcaa <_printf_float+0x3b6>
 800bca6:	07db      	lsls	r3, r3, #31
 800bca8:	d536      	bpl.n	800bd18 <_printf_float+0x424>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4642      	mov	r2, r8
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b8      	blx	r7
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f43f ae78 	beq.w	800b9aa <_printf_float+0xb6>
 800bcba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f43f ae70 	beq.w	800b9aa <_printf_float+0xb6>
 800bcca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcd6:	f7f4 feff 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcda:	b9c0      	cbnz	r0, 800bd0e <_printf_float+0x41a>
 800bcdc:	4653      	mov	r3, sl
 800bcde:	f108 0201 	add.w	r2, r8, #1
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b8      	blx	r7
 800bce8:	3001      	adds	r0, #1
 800bcea:	d10c      	bne.n	800bd06 <_printf_float+0x412>
 800bcec:	e65d      	b.n	800b9aa <_printf_float+0xb6>
 800bcee:	2301      	movs	r3, #1
 800bcf0:	465a      	mov	r2, fp
 800bcf2:	4631      	mov	r1, r6
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	47b8      	blx	r7
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	f43f ae56 	beq.w	800b9aa <_printf_float+0xb6>
 800bcfe:	f108 0801 	add.w	r8, r8, #1
 800bd02:	45d0      	cmp	r8, sl
 800bd04:	dbf3      	blt.n	800bcee <_printf_float+0x3fa>
 800bd06:	464b      	mov	r3, r9
 800bd08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd0c:	e6df      	b.n	800bace <_printf_float+0x1da>
 800bd0e:	f04f 0800 	mov.w	r8, #0
 800bd12:	f104 0b1a 	add.w	fp, r4, #26
 800bd16:	e7f4      	b.n	800bd02 <_printf_float+0x40e>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	4642      	mov	r2, r8
 800bd1c:	e7e1      	b.n	800bce2 <_printf_float+0x3ee>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	464a      	mov	r2, r9
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f ae3e 	beq.w	800b9aa <_printf_float+0xb6>
 800bd2e:	f108 0801 	add.w	r8, r8, #1
 800bd32:	68e3      	ldr	r3, [r4, #12]
 800bd34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd36:	1a5b      	subs	r3, r3, r1
 800bd38:	4543      	cmp	r3, r8
 800bd3a:	dcf0      	bgt.n	800bd1e <_printf_float+0x42a>
 800bd3c:	e6fc      	b.n	800bb38 <_printf_float+0x244>
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	f104 0919 	add.w	r9, r4, #25
 800bd46:	e7f4      	b.n	800bd32 <_printf_float+0x43e>

0800bd48 <_printf_common>:
 800bd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd4c:	4616      	mov	r6, r2
 800bd4e:	4698      	mov	r8, r3
 800bd50:	688a      	ldr	r2, [r1, #8]
 800bd52:	690b      	ldr	r3, [r1, #16]
 800bd54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	bfb8      	it	lt
 800bd5c:	4613      	movlt	r3, r2
 800bd5e:	6033      	str	r3, [r6, #0]
 800bd60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd64:	4607      	mov	r7, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	b10a      	cbz	r2, 800bd6e <_printf_common+0x26>
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	6033      	str	r3, [r6, #0]
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	0699      	lsls	r1, r3, #26
 800bd72:	bf42      	ittt	mi
 800bd74:	6833      	ldrmi	r3, [r6, #0]
 800bd76:	3302      	addmi	r3, #2
 800bd78:	6033      	strmi	r3, [r6, #0]
 800bd7a:	6825      	ldr	r5, [r4, #0]
 800bd7c:	f015 0506 	ands.w	r5, r5, #6
 800bd80:	d106      	bne.n	800bd90 <_printf_common+0x48>
 800bd82:	f104 0a19 	add.w	sl, r4, #25
 800bd86:	68e3      	ldr	r3, [r4, #12]
 800bd88:	6832      	ldr	r2, [r6, #0]
 800bd8a:	1a9b      	subs	r3, r3, r2
 800bd8c:	42ab      	cmp	r3, r5
 800bd8e:	dc26      	bgt.n	800bdde <_printf_common+0x96>
 800bd90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd94:	6822      	ldr	r2, [r4, #0]
 800bd96:	3b00      	subs	r3, #0
 800bd98:	bf18      	it	ne
 800bd9a:	2301      	movne	r3, #1
 800bd9c:	0692      	lsls	r2, r2, #26
 800bd9e:	d42b      	bmi.n	800bdf8 <_printf_common+0xb0>
 800bda0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bda4:	4641      	mov	r1, r8
 800bda6:	4638      	mov	r0, r7
 800bda8:	47c8      	blx	r9
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d01e      	beq.n	800bdec <_printf_common+0xa4>
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	6922      	ldr	r2, [r4, #16]
 800bdb2:	f003 0306 	and.w	r3, r3, #6
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	bf02      	ittt	eq
 800bdba:	68e5      	ldreq	r5, [r4, #12]
 800bdbc:	6833      	ldreq	r3, [r6, #0]
 800bdbe:	1aed      	subeq	r5, r5, r3
 800bdc0:	68a3      	ldr	r3, [r4, #8]
 800bdc2:	bf0c      	ite	eq
 800bdc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc8:	2500      	movne	r5, #0
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	bfc4      	itt	gt
 800bdce:	1a9b      	subgt	r3, r3, r2
 800bdd0:	18ed      	addgt	r5, r5, r3
 800bdd2:	2600      	movs	r6, #0
 800bdd4:	341a      	adds	r4, #26
 800bdd6:	42b5      	cmp	r5, r6
 800bdd8:	d11a      	bne.n	800be10 <_printf_common+0xc8>
 800bdda:	2000      	movs	r0, #0
 800bddc:	e008      	b.n	800bdf0 <_printf_common+0xa8>
 800bdde:	2301      	movs	r3, #1
 800bde0:	4652      	mov	r2, sl
 800bde2:	4641      	mov	r1, r8
 800bde4:	4638      	mov	r0, r7
 800bde6:	47c8      	blx	r9
 800bde8:	3001      	adds	r0, #1
 800bdea:	d103      	bne.n	800bdf4 <_printf_common+0xac>
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	e7c6      	b.n	800bd86 <_printf_common+0x3e>
 800bdf8:	18e1      	adds	r1, r4, r3
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	2030      	movs	r0, #48	@ 0x30
 800bdfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be02:	4422      	add	r2, r4
 800be04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be0c:	3302      	adds	r3, #2
 800be0e:	e7c7      	b.n	800bda0 <_printf_common+0x58>
 800be10:	2301      	movs	r3, #1
 800be12:	4622      	mov	r2, r4
 800be14:	4641      	mov	r1, r8
 800be16:	4638      	mov	r0, r7
 800be18:	47c8      	blx	r9
 800be1a:	3001      	adds	r0, #1
 800be1c:	d0e6      	beq.n	800bdec <_printf_common+0xa4>
 800be1e:	3601      	adds	r6, #1
 800be20:	e7d9      	b.n	800bdd6 <_printf_common+0x8e>
	...

0800be24 <_printf_i>:
 800be24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be28:	7e0f      	ldrb	r7, [r1, #24]
 800be2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be2c:	2f78      	cmp	r7, #120	@ 0x78
 800be2e:	4691      	mov	r9, r2
 800be30:	4680      	mov	r8, r0
 800be32:	460c      	mov	r4, r1
 800be34:	469a      	mov	sl, r3
 800be36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be3a:	d807      	bhi.n	800be4c <_printf_i+0x28>
 800be3c:	2f62      	cmp	r7, #98	@ 0x62
 800be3e:	d80a      	bhi.n	800be56 <_printf_i+0x32>
 800be40:	2f00      	cmp	r7, #0
 800be42:	f000 80d2 	beq.w	800bfea <_printf_i+0x1c6>
 800be46:	2f58      	cmp	r7, #88	@ 0x58
 800be48:	f000 80b9 	beq.w	800bfbe <_printf_i+0x19a>
 800be4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be54:	e03a      	b.n	800becc <_printf_i+0xa8>
 800be56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be5a:	2b15      	cmp	r3, #21
 800be5c:	d8f6      	bhi.n	800be4c <_printf_i+0x28>
 800be5e:	a101      	add	r1, pc, #4	@ (adr r1, 800be64 <_printf_i+0x40>)
 800be60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be64:	0800bebd 	.word	0x0800bebd
 800be68:	0800bed1 	.word	0x0800bed1
 800be6c:	0800be4d 	.word	0x0800be4d
 800be70:	0800be4d 	.word	0x0800be4d
 800be74:	0800be4d 	.word	0x0800be4d
 800be78:	0800be4d 	.word	0x0800be4d
 800be7c:	0800bed1 	.word	0x0800bed1
 800be80:	0800be4d 	.word	0x0800be4d
 800be84:	0800be4d 	.word	0x0800be4d
 800be88:	0800be4d 	.word	0x0800be4d
 800be8c:	0800be4d 	.word	0x0800be4d
 800be90:	0800bfd1 	.word	0x0800bfd1
 800be94:	0800befb 	.word	0x0800befb
 800be98:	0800bf8b 	.word	0x0800bf8b
 800be9c:	0800be4d 	.word	0x0800be4d
 800bea0:	0800be4d 	.word	0x0800be4d
 800bea4:	0800bff3 	.word	0x0800bff3
 800bea8:	0800be4d 	.word	0x0800be4d
 800beac:	0800befb 	.word	0x0800befb
 800beb0:	0800be4d 	.word	0x0800be4d
 800beb4:	0800be4d 	.word	0x0800be4d
 800beb8:	0800bf93 	.word	0x0800bf93
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	1d1a      	adds	r2, r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	6032      	str	r2, [r6, #0]
 800bec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800becc:	2301      	movs	r3, #1
 800bece:	e09d      	b.n	800c00c <_printf_i+0x1e8>
 800bed0:	6833      	ldr	r3, [r6, #0]
 800bed2:	6820      	ldr	r0, [r4, #0]
 800bed4:	1d19      	adds	r1, r3, #4
 800bed6:	6031      	str	r1, [r6, #0]
 800bed8:	0606      	lsls	r6, r0, #24
 800beda:	d501      	bpl.n	800bee0 <_printf_i+0xbc>
 800bedc:	681d      	ldr	r5, [r3, #0]
 800bede:	e003      	b.n	800bee8 <_printf_i+0xc4>
 800bee0:	0645      	lsls	r5, r0, #25
 800bee2:	d5fb      	bpl.n	800bedc <_printf_i+0xb8>
 800bee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bee8:	2d00      	cmp	r5, #0
 800beea:	da03      	bge.n	800bef4 <_printf_i+0xd0>
 800beec:	232d      	movs	r3, #45	@ 0x2d
 800beee:	426d      	negs	r5, r5
 800bef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bef4:	4859      	ldr	r0, [pc, #356]	@ (800c05c <_printf_i+0x238>)
 800bef6:	230a      	movs	r3, #10
 800bef8:	e011      	b.n	800bf1e <_printf_i+0xfa>
 800befa:	6821      	ldr	r1, [r4, #0]
 800befc:	6833      	ldr	r3, [r6, #0]
 800befe:	0608      	lsls	r0, r1, #24
 800bf00:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf04:	d402      	bmi.n	800bf0c <_printf_i+0xe8>
 800bf06:	0649      	lsls	r1, r1, #25
 800bf08:	bf48      	it	mi
 800bf0a:	b2ad      	uxthmi	r5, r5
 800bf0c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf0e:	4853      	ldr	r0, [pc, #332]	@ (800c05c <_printf_i+0x238>)
 800bf10:	6033      	str	r3, [r6, #0]
 800bf12:	bf14      	ite	ne
 800bf14:	230a      	movne	r3, #10
 800bf16:	2308      	moveq	r3, #8
 800bf18:	2100      	movs	r1, #0
 800bf1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf1e:	6866      	ldr	r6, [r4, #4]
 800bf20:	60a6      	str	r6, [r4, #8]
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	bfa2      	ittt	ge
 800bf26:	6821      	ldrge	r1, [r4, #0]
 800bf28:	f021 0104 	bicge.w	r1, r1, #4
 800bf2c:	6021      	strge	r1, [r4, #0]
 800bf2e:	b90d      	cbnz	r5, 800bf34 <_printf_i+0x110>
 800bf30:	2e00      	cmp	r6, #0
 800bf32:	d04b      	beq.n	800bfcc <_printf_i+0x1a8>
 800bf34:	4616      	mov	r6, r2
 800bf36:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf3a:	fb03 5711 	mls	r7, r3, r1, r5
 800bf3e:	5dc7      	ldrb	r7, [r0, r7]
 800bf40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf44:	462f      	mov	r7, r5
 800bf46:	42bb      	cmp	r3, r7
 800bf48:	460d      	mov	r5, r1
 800bf4a:	d9f4      	bls.n	800bf36 <_printf_i+0x112>
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d10b      	bne.n	800bf68 <_printf_i+0x144>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	07df      	lsls	r7, r3, #31
 800bf54:	d508      	bpl.n	800bf68 <_printf_i+0x144>
 800bf56:	6923      	ldr	r3, [r4, #16]
 800bf58:	6861      	ldr	r1, [r4, #4]
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	bfde      	ittt	le
 800bf5e:	2330      	movle	r3, #48	@ 0x30
 800bf60:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf64:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf68:	1b92      	subs	r2, r2, r6
 800bf6a:	6122      	str	r2, [r4, #16]
 800bf6c:	f8cd a000 	str.w	sl, [sp]
 800bf70:	464b      	mov	r3, r9
 800bf72:	aa03      	add	r2, sp, #12
 800bf74:	4621      	mov	r1, r4
 800bf76:	4640      	mov	r0, r8
 800bf78:	f7ff fee6 	bl	800bd48 <_printf_common>
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d14a      	bne.n	800c016 <_printf_i+0x1f2>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	b004      	add	sp, #16
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	f043 0320 	orr.w	r3, r3, #32
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	4833      	ldr	r0, [pc, #204]	@ (800c060 <_printf_i+0x23c>)
 800bf94:	2778      	movs	r7, #120	@ 0x78
 800bf96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	6831      	ldr	r1, [r6, #0]
 800bf9e:	061f      	lsls	r7, r3, #24
 800bfa0:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfa4:	d402      	bmi.n	800bfac <_printf_i+0x188>
 800bfa6:	065f      	lsls	r7, r3, #25
 800bfa8:	bf48      	it	mi
 800bfaa:	b2ad      	uxthmi	r5, r5
 800bfac:	6031      	str	r1, [r6, #0]
 800bfae:	07d9      	lsls	r1, r3, #31
 800bfb0:	bf44      	itt	mi
 800bfb2:	f043 0320 	orrmi.w	r3, r3, #32
 800bfb6:	6023      	strmi	r3, [r4, #0]
 800bfb8:	b11d      	cbz	r5, 800bfc2 <_printf_i+0x19e>
 800bfba:	2310      	movs	r3, #16
 800bfbc:	e7ac      	b.n	800bf18 <_printf_i+0xf4>
 800bfbe:	4827      	ldr	r0, [pc, #156]	@ (800c05c <_printf_i+0x238>)
 800bfc0:	e7e9      	b.n	800bf96 <_printf_i+0x172>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	f023 0320 	bic.w	r3, r3, #32
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	e7f6      	b.n	800bfba <_printf_i+0x196>
 800bfcc:	4616      	mov	r6, r2
 800bfce:	e7bd      	b.n	800bf4c <_printf_i+0x128>
 800bfd0:	6833      	ldr	r3, [r6, #0]
 800bfd2:	6825      	ldr	r5, [r4, #0]
 800bfd4:	6961      	ldr	r1, [r4, #20]
 800bfd6:	1d18      	adds	r0, r3, #4
 800bfd8:	6030      	str	r0, [r6, #0]
 800bfda:	062e      	lsls	r6, r5, #24
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	d501      	bpl.n	800bfe4 <_printf_i+0x1c0>
 800bfe0:	6019      	str	r1, [r3, #0]
 800bfe2:	e002      	b.n	800bfea <_printf_i+0x1c6>
 800bfe4:	0668      	lsls	r0, r5, #25
 800bfe6:	d5fb      	bpl.n	800bfe0 <_printf_i+0x1bc>
 800bfe8:	8019      	strh	r1, [r3, #0]
 800bfea:	2300      	movs	r3, #0
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	4616      	mov	r6, r2
 800bff0:	e7bc      	b.n	800bf6c <_printf_i+0x148>
 800bff2:	6833      	ldr	r3, [r6, #0]
 800bff4:	1d1a      	adds	r2, r3, #4
 800bff6:	6032      	str	r2, [r6, #0]
 800bff8:	681e      	ldr	r6, [r3, #0]
 800bffa:	6862      	ldr	r2, [r4, #4]
 800bffc:	2100      	movs	r1, #0
 800bffe:	4630      	mov	r0, r6
 800c000:	f7f4 f8ee 	bl	80001e0 <memchr>
 800c004:	b108      	cbz	r0, 800c00a <_printf_i+0x1e6>
 800c006:	1b80      	subs	r0, r0, r6
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	6863      	ldr	r3, [r4, #4]
 800c00c:	6123      	str	r3, [r4, #16]
 800c00e:	2300      	movs	r3, #0
 800c010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c014:	e7aa      	b.n	800bf6c <_printf_i+0x148>
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	4632      	mov	r2, r6
 800c01a:	4649      	mov	r1, r9
 800c01c:	4640      	mov	r0, r8
 800c01e:	47d0      	blx	sl
 800c020:	3001      	adds	r0, #1
 800c022:	d0ad      	beq.n	800bf80 <_printf_i+0x15c>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	079b      	lsls	r3, r3, #30
 800c028:	d413      	bmi.n	800c052 <_printf_i+0x22e>
 800c02a:	68e0      	ldr	r0, [r4, #12]
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	4298      	cmp	r0, r3
 800c030:	bfb8      	it	lt
 800c032:	4618      	movlt	r0, r3
 800c034:	e7a6      	b.n	800bf84 <_printf_i+0x160>
 800c036:	2301      	movs	r3, #1
 800c038:	4632      	mov	r2, r6
 800c03a:	4649      	mov	r1, r9
 800c03c:	4640      	mov	r0, r8
 800c03e:	47d0      	blx	sl
 800c040:	3001      	adds	r0, #1
 800c042:	d09d      	beq.n	800bf80 <_printf_i+0x15c>
 800c044:	3501      	adds	r5, #1
 800c046:	68e3      	ldr	r3, [r4, #12]
 800c048:	9903      	ldr	r1, [sp, #12]
 800c04a:	1a5b      	subs	r3, r3, r1
 800c04c:	42ab      	cmp	r3, r5
 800c04e:	dcf2      	bgt.n	800c036 <_printf_i+0x212>
 800c050:	e7eb      	b.n	800c02a <_printf_i+0x206>
 800c052:	2500      	movs	r5, #0
 800c054:	f104 0619 	add.w	r6, r4, #25
 800c058:	e7f5      	b.n	800c046 <_printf_i+0x222>
 800c05a:	bf00      	nop
 800c05c:	08010c22 	.word	0x08010c22
 800c060:	08010c33 	.word	0x08010c33

0800c064 <_scanf_float>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	b087      	sub	sp, #28
 800c06a:	4617      	mov	r7, r2
 800c06c:	9303      	str	r3, [sp, #12]
 800c06e:	688b      	ldr	r3, [r1, #8]
 800c070:	1e5a      	subs	r2, r3, #1
 800c072:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c076:	bf81      	itttt	hi
 800c078:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c07c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c080:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c084:	608b      	strhi	r3, [r1, #8]
 800c086:	680b      	ldr	r3, [r1, #0]
 800c088:	460a      	mov	r2, r1
 800c08a:	f04f 0500 	mov.w	r5, #0
 800c08e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c092:	f842 3b1c 	str.w	r3, [r2], #28
 800c096:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c09a:	4680      	mov	r8, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	bf98      	it	ls
 800c0a0:	f04f 0b00 	movls.w	fp, #0
 800c0a4:	9201      	str	r2, [sp, #4]
 800c0a6:	4616      	mov	r6, r2
 800c0a8:	46aa      	mov	sl, r5
 800c0aa:	46a9      	mov	r9, r5
 800c0ac:	9502      	str	r5, [sp, #8]
 800c0ae:	68a2      	ldr	r2, [r4, #8]
 800c0b0:	b152      	cbz	r2, 800c0c8 <_scanf_float+0x64>
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	2b4e      	cmp	r3, #78	@ 0x4e
 800c0b8:	d864      	bhi.n	800c184 <_scanf_float+0x120>
 800c0ba:	2b40      	cmp	r3, #64	@ 0x40
 800c0bc:	d83c      	bhi.n	800c138 <_scanf_float+0xd4>
 800c0be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c0c2:	b2c8      	uxtb	r0, r1
 800c0c4:	280e      	cmp	r0, #14
 800c0c6:	d93a      	bls.n	800c13e <_scanf_float+0xda>
 800c0c8:	f1b9 0f00 	cmp.w	r9, #0
 800c0cc:	d003      	beq.n	800c0d6 <_scanf_float+0x72>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0d4:	6023      	str	r3, [r4, #0]
 800c0d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0da:	f1ba 0f01 	cmp.w	sl, #1
 800c0de:	f200 8117 	bhi.w	800c310 <_scanf_float+0x2ac>
 800c0e2:	9b01      	ldr	r3, [sp, #4]
 800c0e4:	429e      	cmp	r6, r3
 800c0e6:	f200 8108 	bhi.w	800c2fa <_scanf_float+0x296>
 800c0ea:	2001      	movs	r0, #1
 800c0ec:	b007      	add	sp, #28
 800c0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c0f6:	2a0d      	cmp	r2, #13
 800c0f8:	d8e6      	bhi.n	800c0c8 <_scanf_float+0x64>
 800c0fa:	a101      	add	r1, pc, #4	@ (adr r1, 800c100 <_scanf_float+0x9c>)
 800c0fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c100:	0800c247 	.word	0x0800c247
 800c104:	0800c0c9 	.word	0x0800c0c9
 800c108:	0800c0c9 	.word	0x0800c0c9
 800c10c:	0800c0c9 	.word	0x0800c0c9
 800c110:	0800c2a7 	.word	0x0800c2a7
 800c114:	0800c27f 	.word	0x0800c27f
 800c118:	0800c0c9 	.word	0x0800c0c9
 800c11c:	0800c0c9 	.word	0x0800c0c9
 800c120:	0800c255 	.word	0x0800c255
 800c124:	0800c0c9 	.word	0x0800c0c9
 800c128:	0800c0c9 	.word	0x0800c0c9
 800c12c:	0800c0c9 	.word	0x0800c0c9
 800c130:	0800c0c9 	.word	0x0800c0c9
 800c134:	0800c20d 	.word	0x0800c20d
 800c138:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c13c:	e7db      	b.n	800c0f6 <_scanf_float+0x92>
 800c13e:	290e      	cmp	r1, #14
 800c140:	d8c2      	bhi.n	800c0c8 <_scanf_float+0x64>
 800c142:	a001      	add	r0, pc, #4	@ (adr r0, 800c148 <_scanf_float+0xe4>)
 800c144:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c148:	0800c1fd 	.word	0x0800c1fd
 800c14c:	0800c0c9 	.word	0x0800c0c9
 800c150:	0800c1fd 	.word	0x0800c1fd
 800c154:	0800c293 	.word	0x0800c293
 800c158:	0800c0c9 	.word	0x0800c0c9
 800c15c:	0800c1a5 	.word	0x0800c1a5
 800c160:	0800c1e3 	.word	0x0800c1e3
 800c164:	0800c1e3 	.word	0x0800c1e3
 800c168:	0800c1e3 	.word	0x0800c1e3
 800c16c:	0800c1e3 	.word	0x0800c1e3
 800c170:	0800c1e3 	.word	0x0800c1e3
 800c174:	0800c1e3 	.word	0x0800c1e3
 800c178:	0800c1e3 	.word	0x0800c1e3
 800c17c:	0800c1e3 	.word	0x0800c1e3
 800c180:	0800c1e3 	.word	0x0800c1e3
 800c184:	2b6e      	cmp	r3, #110	@ 0x6e
 800c186:	d809      	bhi.n	800c19c <_scanf_float+0x138>
 800c188:	2b60      	cmp	r3, #96	@ 0x60
 800c18a:	d8b2      	bhi.n	800c0f2 <_scanf_float+0x8e>
 800c18c:	2b54      	cmp	r3, #84	@ 0x54
 800c18e:	d07b      	beq.n	800c288 <_scanf_float+0x224>
 800c190:	2b59      	cmp	r3, #89	@ 0x59
 800c192:	d199      	bne.n	800c0c8 <_scanf_float+0x64>
 800c194:	2d07      	cmp	r5, #7
 800c196:	d197      	bne.n	800c0c8 <_scanf_float+0x64>
 800c198:	2508      	movs	r5, #8
 800c19a:	e02c      	b.n	800c1f6 <_scanf_float+0x192>
 800c19c:	2b74      	cmp	r3, #116	@ 0x74
 800c19e:	d073      	beq.n	800c288 <_scanf_float+0x224>
 800c1a0:	2b79      	cmp	r3, #121	@ 0x79
 800c1a2:	e7f6      	b.n	800c192 <_scanf_float+0x12e>
 800c1a4:	6821      	ldr	r1, [r4, #0]
 800c1a6:	05c8      	lsls	r0, r1, #23
 800c1a8:	d51b      	bpl.n	800c1e2 <_scanf_float+0x17e>
 800c1aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c1ae:	6021      	str	r1, [r4, #0]
 800c1b0:	f109 0901 	add.w	r9, r9, #1
 800c1b4:	f1bb 0f00 	cmp.w	fp, #0
 800c1b8:	d003      	beq.n	800c1c2 <_scanf_float+0x15e>
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1c0:	60a2      	str	r2, [r4, #8]
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	60a3      	str	r3, [r4, #8]
 800c1c8:	6923      	ldr	r3, [r4, #16]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	6123      	str	r3, [r4, #16]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	607b      	str	r3, [r7, #4]
 800c1d6:	f340 8087 	ble.w	800c2e8 <_scanf_float+0x284>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	e765      	b.n	800c0ae <_scanf_float+0x4a>
 800c1e2:	eb1a 0105 	adds.w	r1, sl, r5
 800c1e6:	f47f af6f 	bne.w	800c0c8 <_scanf_float+0x64>
 800c1ea:	6822      	ldr	r2, [r4, #0]
 800c1ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c1f0:	6022      	str	r2, [r4, #0]
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	468a      	mov	sl, r1
 800c1f6:	f806 3b01 	strb.w	r3, [r6], #1
 800c1fa:	e7e2      	b.n	800c1c2 <_scanf_float+0x15e>
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	0610      	lsls	r0, r2, #24
 800c200:	f57f af62 	bpl.w	800c0c8 <_scanf_float+0x64>
 800c204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c208:	6022      	str	r2, [r4, #0]
 800c20a:	e7f4      	b.n	800c1f6 <_scanf_float+0x192>
 800c20c:	f1ba 0f00 	cmp.w	sl, #0
 800c210:	d10e      	bne.n	800c230 <_scanf_float+0x1cc>
 800c212:	f1b9 0f00 	cmp.w	r9, #0
 800c216:	d10e      	bne.n	800c236 <_scanf_float+0x1d2>
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c21e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c222:	d108      	bne.n	800c236 <_scanf_float+0x1d2>
 800c224:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c228:	6022      	str	r2, [r4, #0]
 800c22a:	f04f 0a01 	mov.w	sl, #1
 800c22e:	e7e2      	b.n	800c1f6 <_scanf_float+0x192>
 800c230:	f1ba 0f02 	cmp.w	sl, #2
 800c234:	d055      	beq.n	800c2e2 <_scanf_float+0x27e>
 800c236:	2d01      	cmp	r5, #1
 800c238:	d002      	beq.n	800c240 <_scanf_float+0x1dc>
 800c23a:	2d04      	cmp	r5, #4
 800c23c:	f47f af44 	bne.w	800c0c8 <_scanf_float+0x64>
 800c240:	3501      	adds	r5, #1
 800c242:	b2ed      	uxtb	r5, r5
 800c244:	e7d7      	b.n	800c1f6 <_scanf_float+0x192>
 800c246:	f1ba 0f01 	cmp.w	sl, #1
 800c24a:	f47f af3d 	bne.w	800c0c8 <_scanf_float+0x64>
 800c24e:	f04f 0a02 	mov.w	sl, #2
 800c252:	e7d0      	b.n	800c1f6 <_scanf_float+0x192>
 800c254:	b97d      	cbnz	r5, 800c276 <_scanf_float+0x212>
 800c256:	f1b9 0f00 	cmp.w	r9, #0
 800c25a:	f47f af38 	bne.w	800c0ce <_scanf_float+0x6a>
 800c25e:	6822      	ldr	r2, [r4, #0]
 800c260:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c264:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c268:	f040 8108 	bne.w	800c47c <_scanf_float+0x418>
 800c26c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c270:	6022      	str	r2, [r4, #0]
 800c272:	2501      	movs	r5, #1
 800c274:	e7bf      	b.n	800c1f6 <_scanf_float+0x192>
 800c276:	2d03      	cmp	r5, #3
 800c278:	d0e2      	beq.n	800c240 <_scanf_float+0x1dc>
 800c27a:	2d05      	cmp	r5, #5
 800c27c:	e7de      	b.n	800c23c <_scanf_float+0x1d8>
 800c27e:	2d02      	cmp	r5, #2
 800c280:	f47f af22 	bne.w	800c0c8 <_scanf_float+0x64>
 800c284:	2503      	movs	r5, #3
 800c286:	e7b6      	b.n	800c1f6 <_scanf_float+0x192>
 800c288:	2d06      	cmp	r5, #6
 800c28a:	f47f af1d 	bne.w	800c0c8 <_scanf_float+0x64>
 800c28e:	2507      	movs	r5, #7
 800c290:	e7b1      	b.n	800c1f6 <_scanf_float+0x192>
 800c292:	6822      	ldr	r2, [r4, #0]
 800c294:	0591      	lsls	r1, r2, #22
 800c296:	f57f af17 	bpl.w	800c0c8 <_scanf_float+0x64>
 800c29a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c29e:	6022      	str	r2, [r4, #0]
 800c2a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2a4:	e7a7      	b.n	800c1f6 <_scanf_float+0x192>
 800c2a6:	6822      	ldr	r2, [r4, #0]
 800c2a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c2ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c2b0:	d006      	beq.n	800c2c0 <_scanf_float+0x25c>
 800c2b2:	0550      	lsls	r0, r2, #21
 800c2b4:	f57f af08 	bpl.w	800c0c8 <_scanf_float+0x64>
 800c2b8:	f1b9 0f00 	cmp.w	r9, #0
 800c2bc:	f000 80de 	beq.w	800c47c <_scanf_float+0x418>
 800c2c0:	0591      	lsls	r1, r2, #22
 800c2c2:	bf58      	it	pl
 800c2c4:	9902      	ldrpl	r1, [sp, #8]
 800c2c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c2ca:	bf58      	it	pl
 800c2cc:	eba9 0101 	subpl.w	r1, r9, r1
 800c2d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c2d4:	bf58      	it	pl
 800c2d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2da:	6022      	str	r2, [r4, #0]
 800c2dc:	f04f 0900 	mov.w	r9, #0
 800c2e0:	e789      	b.n	800c1f6 <_scanf_float+0x192>
 800c2e2:	f04f 0a03 	mov.w	sl, #3
 800c2e6:	e786      	b.n	800c1f6 <_scanf_float+0x192>
 800c2e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	4798      	blx	r3
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f43f aedb 	beq.w	800c0ae <_scanf_float+0x4a>
 800c2f8:	e6e6      	b.n	800c0c8 <_scanf_float+0x64>
 800c2fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c302:	463a      	mov	r2, r7
 800c304:	4640      	mov	r0, r8
 800c306:	4798      	blx	r3
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	6123      	str	r3, [r4, #16]
 800c30e:	e6e8      	b.n	800c0e2 <_scanf_float+0x7e>
 800c310:	1e6b      	subs	r3, r5, #1
 800c312:	2b06      	cmp	r3, #6
 800c314:	d824      	bhi.n	800c360 <_scanf_float+0x2fc>
 800c316:	2d02      	cmp	r5, #2
 800c318:	d836      	bhi.n	800c388 <_scanf_float+0x324>
 800c31a:	9b01      	ldr	r3, [sp, #4]
 800c31c:	429e      	cmp	r6, r3
 800c31e:	f67f aee4 	bls.w	800c0ea <_scanf_float+0x86>
 800c322:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c32a:	463a      	mov	r2, r7
 800c32c:	4640      	mov	r0, r8
 800c32e:	4798      	blx	r3
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	3b01      	subs	r3, #1
 800c334:	6123      	str	r3, [r4, #16]
 800c336:	e7f0      	b.n	800c31a <_scanf_float+0x2b6>
 800c338:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c33c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c340:	463a      	mov	r2, r7
 800c342:	4640      	mov	r0, r8
 800c344:	4798      	blx	r3
 800c346:	6923      	ldr	r3, [r4, #16]
 800c348:	3b01      	subs	r3, #1
 800c34a:	6123      	str	r3, [r4, #16]
 800c34c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c350:	fa5f fa8a 	uxtb.w	sl, sl
 800c354:	f1ba 0f02 	cmp.w	sl, #2
 800c358:	d1ee      	bne.n	800c338 <_scanf_float+0x2d4>
 800c35a:	3d03      	subs	r5, #3
 800c35c:	b2ed      	uxtb	r5, r5
 800c35e:	1b76      	subs	r6, r6, r5
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	05da      	lsls	r2, r3, #23
 800c364:	d530      	bpl.n	800c3c8 <_scanf_float+0x364>
 800c366:	055b      	lsls	r3, r3, #21
 800c368:	d511      	bpl.n	800c38e <_scanf_float+0x32a>
 800c36a:	9b01      	ldr	r3, [sp, #4]
 800c36c:	429e      	cmp	r6, r3
 800c36e:	f67f aebc 	bls.w	800c0ea <_scanf_float+0x86>
 800c372:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c37a:	463a      	mov	r2, r7
 800c37c:	4640      	mov	r0, r8
 800c37e:	4798      	blx	r3
 800c380:	6923      	ldr	r3, [r4, #16]
 800c382:	3b01      	subs	r3, #1
 800c384:	6123      	str	r3, [r4, #16]
 800c386:	e7f0      	b.n	800c36a <_scanf_float+0x306>
 800c388:	46aa      	mov	sl, r5
 800c38a:	46b3      	mov	fp, r6
 800c38c:	e7de      	b.n	800c34c <_scanf_float+0x2e8>
 800c38e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	2965      	cmp	r1, #101	@ 0x65
 800c396:	f103 33ff 	add.w	r3, r3, #4294967295
 800c39a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c39e:	6123      	str	r3, [r4, #16]
 800c3a0:	d00c      	beq.n	800c3bc <_scanf_float+0x358>
 800c3a2:	2945      	cmp	r1, #69	@ 0x45
 800c3a4:	d00a      	beq.n	800c3bc <_scanf_float+0x358>
 800c3a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3aa:	463a      	mov	r2, r7
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4798      	blx	r3
 800c3b0:	6923      	ldr	r3, [r4, #16]
 800c3b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	1eb5      	subs	r5, r6, #2
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3c0:	463a      	mov	r2, r7
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	4798      	blx	r3
 800c3c6:	462e      	mov	r6, r5
 800c3c8:	6822      	ldr	r2, [r4, #0]
 800c3ca:	f012 0210 	ands.w	r2, r2, #16
 800c3ce:	d001      	beq.n	800c3d4 <_scanf_float+0x370>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e68b      	b.n	800c0ec <_scanf_float+0x88>
 800c3d4:	7032      	strb	r2, [r6, #0]
 800c3d6:	6823      	ldr	r3, [r4, #0]
 800c3d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c3dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3e0:	d11c      	bne.n	800c41c <_scanf_float+0x3b8>
 800c3e2:	9b02      	ldr	r3, [sp, #8]
 800c3e4:	454b      	cmp	r3, r9
 800c3e6:	eba3 0209 	sub.w	r2, r3, r9
 800c3ea:	d123      	bne.n	800c434 <_scanf_float+0x3d0>
 800c3ec:	9901      	ldr	r1, [sp, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4640      	mov	r0, r8
 800c3f2:	f7ff f9cd 	bl	800b790 <_strtod_r>
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	6821      	ldr	r1, [r4, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f011 0f02 	tst.w	r1, #2
 800c400:	ec57 6b10 	vmov	r6, r7, d0
 800c404:	f103 0204 	add.w	r2, r3, #4
 800c408:	d01f      	beq.n	800c44a <_scanf_float+0x3e6>
 800c40a:	9903      	ldr	r1, [sp, #12]
 800c40c:	600a      	str	r2, [r1, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	e9c3 6700 	strd	r6, r7, [r3]
 800c414:	68e3      	ldr	r3, [r4, #12]
 800c416:	3301      	adds	r3, #1
 800c418:	60e3      	str	r3, [r4, #12]
 800c41a:	e7d9      	b.n	800c3d0 <_scanf_float+0x36c>
 800c41c:	9b04      	ldr	r3, [sp, #16]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d0e4      	beq.n	800c3ec <_scanf_float+0x388>
 800c422:	9905      	ldr	r1, [sp, #20]
 800c424:	230a      	movs	r3, #10
 800c426:	3101      	adds	r1, #1
 800c428:	4640      	mov	r0, r8
 800c42a:	f002 fb45 	bl	800eab8 <_strtol_r>
 800c42e:	9b04      	ldr	r3, [sp, #16]
 800c430:	9e05      	ldr	r6, [sp, #20]
 800c432:	1ac2      	subs	r2, r0, r3
 800c434:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c438:	429e      	cmp	r6, r3
 800c43a:	bf28      	it	cs
 800c43c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c440:	4910      	ldr	r1, [pc, #64]	@ (800c484 <_scanf_float+0x420>)
 800c442:	4630      	mov	r0, r6
 800c444:	f000 f954 	bl	800c6f0 <siprintf>
 800c448:	e7d0      	b.n	800c3ec <_scanf_float+0x388>
 800c44a:	f011 0f04 	tst.w	r1, #4
 800c44e:	9903      	ldr	r1, [sp, #12]
 800c450:	600a      	str	r2, [r1, #0]
 800c452:	d1dc      	bne.n	800c40e <_scanf_float+0x3aa>
 800c454:	681d      	ldr	r5, [r3, #0]
 800c456:	4632      	mov	r2, r6
 800c458:	463b      	mov	r3, r7
 800c45a:	4630      	mov	r0, r6
 800c45c:	4639      	mov	r1, r7
 800c45e:	f7f4 fb6d 	bl	8000b3c <__aeabi_dcmpun>
 800c462:	b128      	cbz	r0, 800c470 <_scanf_float+0x40c>
 800c464:	4808      	ldr	r0, [pc, #32]	@ (800c488 <_scanf_float+0x424>)
 800c466:	f000 fb3f 	bl	800cae8 <nanf>
 800c46a:	ed85 0a00 	vstr	s0, [r5]
 800c46e:	e7d1      	b.n	800c414 <_scanf_float+0x3b0>
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f4 fbc0 	bl	8000bf8 <__aeabi_d2f>
 800c478:	6028      	str	r0, [r5, #0]
 800c47a:	e7cb      	b.n	800c414 <_scanf_float+0x3b0>
 800c47c:	f04f 0900 	mov.w	r9, #0
 800c480:	e629      	b.n	800c0d6 <_scanf_float+0x72>
 800c482:	bf00      	nop
 800c484:	08010c44 	.word	0x08010c44
 800c488:	08010cfd 	.word	0x08010cfd

0800c48c <std>:
 800c48c:	2300      	movs	r3, #0
 800c48e:	b510      	push	{r4, lr}
 800c490:	4604      	mov	r4, r0
 800c492:	e9c0 3300 	strd	r3, r3, [r0]
 800c496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c49a:	6083      	str	r3, [r0, #8]
 800c49c:	8181      	strh	r1, [r0, #12]
 800c49e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c4a0:	81c2      	strh	r2, [r0, #14]
 800c4a2:	6183      	str	r3, [r0, #24]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	2208      	movs	r2, #8
 800c4a8:	305c      	adds	r0, #92	@ 0x5c
 800c4aa:	f000 fa19 	bl	800c8e0 <memset>
 800c4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c4e4 <std+0x58>)
 800c4b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c4e8 <std+0x5c>)
 800c4b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c4ec <std+0x60>)
 800c4b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <std+0x64>)
 800c4bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c4be:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f4 <std+0x68>)
 800c4c0:	6224      	str	r4, [r4, #32]
 800c4c2:	429c      	cmp	r4, r3
 800c4c4:	d006      	beq.n	800c4d4 <std+0x48>
 800c4c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4ca:	4294      	cmp	r4, r2
 800c4cc:	d002      	beq.n	800c4d4 <std+0x48>
 800c4ce:	33d0      	adds	r3, #208	@ 0xd0
 800c4d0:	429c      	cmp	r4, r3
 800c4d2:	d105      	bne.n	800c4e0 <std+0x54>
 800c4d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4dc:	f000 baea 	b.w	800cab4 <__retarget_lock_init_recursive>
 800c4e0:	bd10      	pop	{r4, pc}
 800c4e2:	bf00      	nop
 800c4e4:	0800c731 	.word	0x0800c731
 800c4e8:	0800c753 	.word	0x0800c753
 800c4ec:	0800c78b 	.word	0x0800c78b
 800c4f0:	0800c7af 	.word	0x0800c7af
 800c4f4:	20000a8c 	.word	0x20000a8c

0800c4f8 <stdio_exit_handler>:
 800c4f8:	4a02      	ldr	r2, [pc, #8]	@ (800c504 <stdio_exit_handler+0xc>)
 800c4fa:	4903      	ldr	r1, [pc, #12]	@ (800c508 <stdio_exit_handler+0x10>)
 800c4fc:	4803      	ldr	r0, [pc, #12]	@ (800c50c <stdio_exit_handler+0x14>)
 800c4fe:	f000 b869 	b.w	800c5d4 <_fwalk_sglue>
 800c502:	bf00      	nop
 800c504:	20000014 	.word	0x20000014
 800c508:	0800f111 	.word	0x0800f111
 800c50c:	20000190 	.word	0x20000190

0800c510 <cleanup_stdio>:
 800c510:	6841      	ldr	r1, [r0, #4]
 800c512:	4b0c      	ldr	r3, [pc, #48]	@ (800c544 <cleanup_stdio+0x34>)
 800c514:	4299      	cmp	r1, r3
 800c516:	b510      	push	{r4, lr}
 800c518:	4604      	mov	r4, r0
 800c51a:	d001      	beq.n	800c520 <cleanup_stdio+0x10>
 800c51c:	f002 fdf8 	bl	800f110 <_fflush_r>
 800c520:	68a1      	ldr	r1, [r4, #8]
 800c522:	4b09      	ldr	r3, [pc, #36]	@ (800c548 <cleanup_stdio+0x38>)
 800c524:	4299      	cmp	r1, r3
 800c526:	d002      	beq.n	800c52e <cleanup_stdio+0x1e>
 800c528:	4620      	mov	r0, r4
 800c52a:	f002 fdf1 	bl	800f110 <_fflush_r>
 800c52e:	68e1      	ldr	r1, [r4, #12]
 800c530:	4b06      	ldr	r3, [pc, #24]	@ (800c54c <cleanup_stdio+0x3c>)
 800c532:	4299      	cmp	r1, r3
 800c534:	d004      	beq.n	800c540 <cleanup_stdio+0x30>
 800c536:	4620      	mov	r0, r4
 800c538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c53c:	f002 bde8 	b.w	800f110 <_fflush_r>
 800c540:	bd10      	pop	{r4, pc}
 800c542:	bf00      	nop
 800c544:	20000a8c 	.word	0x20000a8c
 800c548:	20000af4 	.word	0x20000af4
 800c54c:	20000b5c 	.word	0x20000b5c

0800c550 <global_stdio_init.part.0>:
 800c550:	b510      	push	{r4, lr}
 800c552:	4b0b      	ldr	r3, [pc, #44]	@ (800c580 <global_stdio_init.part.0+0x30>)
 800c554:	4c0b      	ldr	r4, [pc, #44]	@ (800c584 <global_stdio_init.part.0+0x34>)
 800c556:	4a0c      	ldr	r2, [pc, #48]	@ (800c588 <global_stdio_init.part.0+0x38>)
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	4620      	mov	r0, r4
 800c55c:	2200      	movs	r2, #0
 800c55e:	2104      	movs	r1, #4
 800c560:	f7ff ff94 	bl	800c48c <std>
 800c564:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c568:	2201      	movs	r2, #1
 800c56a:	2109      	movs	r1, #9
 800c56c:	f7ff ff8e 	bl	800c48c <std>
 800c570:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c574:	2202      	movs	r2, #2
 800c576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c57a:	2112      	movs	r1, #18
 800c57c:	f7ff bf86 	b.w	800c48c <std>
 800c580:	20000bc4 	.word	0x20000bc4
 800c584:	20000a8c 	.word	0x20000a8c
 800c588:	0800c4f9 	.word	0x0800c4f9

0800c58c <__sfp_lock_acquire>:
 800c58c:	4801      	ldr	r0, [pc, #4]	@ (800c594 <__sfp_lock_acquire+0x8>)
 800c58e:	f000 ba92 	b.w	800cab6 <__retarget_lock_acquire_recursive>
 800c592:	bf00      	nop
 800c594:	20000bcd 	.word	0x20000bcd

0800c598 <__sfp_lock_release>:
 800c598:	4801      	ldr	r0, [pc, #4]	@ (800c5a0 <__sfp_lock_release+0x8>)
 800c59a:	f000 ba8d 	b.w	800cab8 <__retarget_lock_release_recursive>
 800c59e:	bf00      	nop
 800c5a0:	20000bcd 	.word	0x20000bcd

0800c5a4 <__sinit>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	f7ff fff0 	bl	800c58c <__sfp_lock_acquire>
 800c5ac:	6a23      	ldr	r3, [r4, #32]
 800c5ae:	b11b      	cbz	r3, 800c5b8 <__sinit+0x14>
 800c5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b4:	f7ff bff0 	b.w	800c598 <__sfp_lock_release>
 800c5b8:	4b04      	ldr	r3, [pc, #16]	@ (800c5cc <__sinit+0x28>)
 800c5ba:	6223      	str	r3, [r4, #32]
 800c5bc:	4b04      	ldr	r3, [pc, #16]	@ (800c5d0 <__sinit+0x2c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1f5      	bne.n	800c5b0 <__sinit+0xc>
 800c5c4:	f7ff ffc4 	bl	800c550 <global_stdio_init.part.0>
 800c5c8:	e7f2      	b.n	800c5b0 <__sinit+0xc>
 800c5ca:	bf00      	nop
 800c5cc:	0800c511 	.word	0x0800c511
 800c5d0:	20000bc4 	.word	0x20000bc4

0800c5d4 <_fwalk_sglue>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	4607      	mov	r7, r0
 800c5da:	4688      	mov	r8, r1
 800c5dc:	4614      	mov	r4, r2
 800c5de:	2600      	movs	r6, #0
 800c5e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5e4:	f1b9 0901 	subs.w	r9, r9, #1
 800c5e8:	d505      	bpl.n	800c5f6 <_fwalk_sglue+0x22>
 800c5ea:	6824      	ldr	r4, [r4, #0]
 800c5ec:	2c00      	cmp	r4, #0
 800c5ee:	d1f7      	bne.n	800c5e0 <_fwalk_sglue+0xc>
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5f6:	89ab      	ldrh	r3, [r5, #12]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d907      	bls.n	800c60c <_fwalk_sglue+0x38>
 800c5fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c600:	3301      	adds	r3, #1
 800c602:	d003      	beq.n	800c60c <_fwalk_sglue+0x38>
 800c604:	4629      	mov	r1, r5
 800c606:	4638      	mov	r0, r7
 800c608:	47c0      	blx	r8
 800c60a:	4306      	orrs	r6, r0
 800c60c:	3568      	adds	r5, #104	@ 0x68
 800c60e:	e7e9      	b.n	800c5e4 <_fwalk_sglue+0x10>

0800c610 <iprintf>:
 800c610:	b40f      	push	{r0, r1, r2, r3}
 800c612:	b507      	push	{r0, r1, r2, lr}
 800c614:	4906      	ldr	r1, [pc, #24]	@ (800c630 <iprintf+0x20>)
 800c616:	ab04      	add	r3, sp, #16
 800c618:	6808      	ldr	r0, [r1, #0]
 800c61a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c61e:	6881      	ldr	r1, [r0, #8]
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	f002 fbd9 	bl	800edd8 <_vfiprintf_r>
 800c626:	b003      	add	sp, #12
 800c628:	f85d eb04 	ldr.w	lr, [sp], #4
 800c62c:	b004      	add	sp, #16
 800c62e:	4770      	bx	lr
 800c630:	2000018c 	.word	0x2000018c

0800c634 <_puts_r>:
 800c634:	6a03      	ldr	r3, [r0, #32]
 800c636:	b570      	push	{r4, r5, r6, lr}
 800c638:	6884      	ldr	r4, [r0, #8]
 800c63a:	4605      	mov	r5, r0
 800c63c:	460e      	mov	r6, r1
 800c63e:	b90b      	cbnz	r3, 800c644 <_puts_r+0x10>
 800c640:	f7ff ffb0 	bl	800c5a4 <__sinit>
 800c644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c646:	07db      	lsls	r3, r3, #31
 800c648:	d405      	bmi.n	800c656 <_puts_r+0x22>
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	0598      	lsls	r0, r3, #22
 800c64e:	d402      	bmi.n	800c656 <_puts_r+0x22>
 800c650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c652:	f000 fa30 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800c656:	89a3      	ldrh	r3, [r4, #12]
 800c658:	0719      	lsls	r1, r3, #28
 800c65a:	d502      	bpl.n	800c662 <_puts_r+0x2e>
 800c65c:	6923      	ldr	r3, [r4, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d135      	bne.n	800c6ce <_puts_r+0x9a>
 800c662:	4621      	mov	r1, r4
 800c664:	4628      	mov	r0, r5
 800c666:	f000 f8e5 	bl	800c834 <__swsetup_r>
 800c66a:	b380      	cbz	r0, 800c6ce <_puts_r+0x9a>
 800c66c:	f04f 35ff 	mov.w	r5, #4294967295
 800c670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c672:	07da      	lsls	r2, r3, #31
 800c674:	d405      	bmi.n	800c682 <_puts_r+0x4e>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	059b      	lsls	r3, r3, #22
 800c67a:	d402      	bmi.n	800c682 <_puts_r+0x4e>
 800c67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c67e:	f000 fa1b 	bl	800cab8 <__retarget_lock_release_recursive>
 800c682:	4628      	mov	r0, r5
 800c684:	bd70      	pop	{r4, r5, r6, pc}
 800c686:	2b00      	cmp	r3, #0
 800c688:	da04      	bge.n	800c694 <_puts_r+0x60>
 800c68a:	69a2      	ldr	r2, [r4, #24]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	dc17      	bgt.n	800c6c0 <_puts_r+0x8c>
 800c690:	290a      	cmp	r1, #10
 800c692:	d015      	beq.n	800c6c0 <_puts_r+0x8c>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	6022      	str	r2, [r4, #0]
 800c69a:	7019      	strb	r1, [r3, #0]
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	60a3      	str	r3, [r4, #8]
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	d1ed      	bne.n	800c686 <_puts_r+0x52>
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da11      	bge.n	800c6d2 <_puts_r+0x9e>
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	210a      	movs	r1, #10
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f000 f87f 	bl	800c7b6 <__swbuf_r>
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	d0d7      	beq.n	800c66c <_puts_r+0x38>
 800c6bc:	250a      	movs	r5, #10
 800c6be:	e7d7      	b.n	800c670 <_puts_r+0x3c>
 800c6c0:	4622      	mov	r2, r4
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f000 f877 	bl	800c7b6 <__swbuf_r>
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d1e7      	bne.n	800c69c <_puts_r+0x68>
 800c6cc:	e7ce      	b.n	800c66c <_puts_r+0x38>
 800c6ce:	3e01      	subs	r6, #1
 800c6d0:	e7e4      	b.n	800c69c <_puts_r+0x68>
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	6022      	str	r2, [r4, #0]
 800c6d8:	220a      	movs	r2, #10
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	e7ee      	b.n	800c6bc <_puts_r+0x88>
	...

0800c6e0 <puts>:
 800c6e0:	4b02      	ldr	r3, [pc, #8]	@ (800c6ec <puts+0xc>)
 800c6e2:	4601      	mov	r1, r0
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	f7ff bfa5 	b.w	800c634 <_puts_r>
 800c6ea:	bf00      	nop
 800c6ec:	2000018c 	.word	0x2000018c

0800c6f0 <siprintf>:
 800c6f0:	b40e      	push	{r1, r2, r3}
 800c6f2:	b500      	push	{lr}
 800c6f4:	b09c      	sub	sp, #112	@ 0x70
 800c6f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c6f8:	9002      	str	r0, [sp, #8]
 800c6fa:	9006      	str	r0, [sp, #24]
 800c6fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c700:	4809      	ldr	r0, [pc, #36]	@ (800c728 <siprintf+0x38>)
 800c702:	9107      	str	r1, [sp, #28]
 800c704:	9104      	str	r1, [sp, #16]
 800c706:	4909      	ldr	r1, [pc, #36]	@ (800c72c <siprintf+0x3c>)
 800c708:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70c:	9105      	str	r1, [sp, #20]
 800c70e:	6800      	ldr	r0, [r0, #0]
 800c710:	9301      	str	r3, [sp, #4]
 800c712:	a902      	add	r1, sp, #8
 800c714:	f002 fa3a 	bl	800eb8c <_svfiprintf_r>
 800c718:	9b02      	ldr	r3, [sp, #8]
 800c71a:	2200      	movs	r2, #0
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	b01c      	add	sp, #112	@ 0x70
 800c720:	f85d eb04 	ldr.w	lr, [sp], #4
 800c724:	b003      	add	sp, #12
 800c726:	4770      	bx	lr
 800c728:	2000018c 	.word	0x2000018c
 800c72c:	ffff0208 	.word	0xffff0208

0800c730 <__sread>:
 800c730:	b510      	push	{r4, lr}
 800c732:	460c      	mov	r4, r1
 800c734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c738:	f000 f96e 	bl	800ca18 <_read_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	bfab      	itete	ge
 800c740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c742:	89a3      	ldrhlt	r3, [r4, #12]
 800c744:	181b      	addge	r3, r3, r0
 800c746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c74a:	bfac      	ite	ge
 800c74c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c74e:	81a3      	strhlt	r3, [r4, #12]
 800c750:	bd10      	pop	{r4, pc}

0800c752 <__swrite>:
 800c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	461f      	mov	r7, r3
 800c758:	898b      	ldrh	r3, [r1, #12]
 800c75a:	05db      	lsls	r3, r3, #23
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	4616      	mov	r6, r2
 800c762:	d505      	bpl.n	800c770 <__swrite+0x1e>
 800c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c768:	2302      	movs	r3, #2
 800c76a:	2200      	movs	r2, #0
 800c76c:	f000 f942 	bl	800c9f4 <_lseek_r>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	4628      	mov	r0, r5
 800c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	f000 b959 	b.w	800ca3c <_write_r>

0800c78a <__sseek>:
 800c78a:	b510      	push	{r4, lr}
 800c78c:	460c      	mov	r4, r1
 800c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c792:	f000 f92f 	bl	800c9f4 <_lseek_r>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	bf15      	itete	ne
 800c79c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c79e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7a6:	81a3      	strheq	r3, [r4, #12]
 800c7a8:	bf18      	it	ne
 800c7aa:	81a3      	strhne	r3, [r4, #12]
 800c7ac:	bd10      	pop	{r4, pc}

0800c7ae <__sclose>:
 800c7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b2:	f000 b90f 	b.w	800c9d4 <_close_r>

0800c7b6 <__swbuf_r>:
 800c7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b8:	460e      	mov	r6, r1
 800c7ba:	4614      	mov	r4, r2
 800c7bc:	4605      	mov	r5, r0
 800c7be:	b118      	cbz	r0, 800c7c8 <__swbuf_r+0x12>
 800c7c0:	6a03      	ldr	r3, [r0, #32]
 800c7c2:	b90b      	cbnz	r3, 800c7c8 <__swbuf_r+0x12>
 800c7c4:	f7ff feee 	bl	800c5a4 <__sinit>
 800c7c8:	69a3      	ldr	r3, [r4, #24]
 800c7ca:	60a3      	str	r3, [r4, #8]
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	071a      	lsls	r2, r3, #28
 800c7d0:	d501      	bpl.n	800c7d6 <__swbuf_r+0x20>
 800c7d2:	6923      	ldr	r3, [r4, #16]
 800c7d4:	b943      	cbnz	r3, 800c7e8 <__swbuf_r+0x32>
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	4628      	mov	r0, r5
 800c7da:	f000 f82b 	bl	800c834 <__swsetup_r>
 800c7de:	b118      	cbz	r0, 800c7e8 <__swbuf_r+0x32>
 800c7e0:	f04f 37ff 	mov.w	r7, #4294967295
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	6922      	ldr	r2, [r4, #16]
 800c7ec:	1a98      	subs	r0, r3, r2
 800c7ee:	6963      	ldr	r3, [r4, #20]
 800c7f0:	b2f6      	uxtb	r6, r6
 800c7f2:	4283      	cmp	r3, r0
 800c7f4:	4637      	mov	r7, r6
 800c7f6:	dc05      	bgt.n	800c804 <__swbuf_r+0x4e>
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f002 fc88 	bl	800f110 <_fflush_r>
 800c800:	2800      	cmp	r0, #0
 800c802:	d1ed      	bne.n	800c7e0 <__swbuf_r+0x2a>
 800c804:	68a3      	ldr	r3, [r4, #8]
 800c806:	3b01      	subs	r3, #1
 800c808:	60a3      	str	r3, [r4, #8]
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	6022      	str	r2, [r4, #0]
 800c810:	701e      	strb	r6, [r3, #0]
 800c812:	6962      	ldr	r2, [r4, #20]
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	429a      	cmp	r2, r3
 800c818:	d004      	beq.n	800c824 <__swbuf_r+0x6e>
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	07db      	lsls	r3, r3, #31
 800c81e:	d5e1      	bpl.n	800c7e4 <__swbuf_r+0x2e>
 800c820:	2e0a      	cmp	r6, #10
 800c822:	d1df      	bne.n	800c7e4 <__swbuf_r+0x2e>
 800c824:	4621      	mov	r1, r4
 800c826:	4628      	mov	r0, r5
 800c828:	f002 fc72 	bl	800f110 <_fflush_r>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d0d9      	beq.n	800c7e4 <__swbuf_r+0x2e>
 800c830:	e7d6      	b.n	800c7e0 <__swbuf_r+0x2a>
	...

0800c834 <__swsetup_r>:
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	4b29      	ldr	r3, [pc, #164]	@ (800c8dc <__swsetup_r+0xa8>)
 800c838:	4605      	mov	r5, r0
 800c83a:	6818      	ldr	r0, [r3, #0]
 800c83c:	460c      	mov	r4, r1
 800c83e:	b118      	cbz	r0, 800c848 <__swsetup_r+0x14>
 800c840:	6a03      	ldr	r3, [r0, #32]
 800c842:	b90b      	cbnz	r3, 800c848 <__swsetup_r+0x14>
 800c844:	f7ff feae 	bl	800c5a4 <__sinit>
 800c848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c84c:	0719      	lsls	r1, r3, #28
 800c84e:	d422      	bmi.n	800c896 <__swsetup_r+0x62>
 800c850:	06da      	lsls	r2, r3, #27
 800c852:	d407      	bmi.n	800c864 <__swsetup_r+0x30>
 800c854:	2209      	movs	r2, #9
 800c856:	602a      	str	r2, [r5, #0]
 800c858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	f04f 30ff 	mov.w	r0, #4294967295
 800c862:	e033      	b.n	800c8cc <__swsetup_r+0x98>
 800c864:	0758      	lsls	r0, r3, #29
 800c866:	d512      	bpl.n	800c88e <__swsetup_r+0x5a>
 800c868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c86a:	b141      	cbz	r1, 800c87e <__swsetup_r+0x4a>
 800c86c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c870:	4299      	cmp	r1, r3
 800c872:	d002      	beq.n	800c87a <__swsetup_r+0x46>
 800c874:	4628      	mov	r0, r5
 800c876:	f000 ffa7 	bl	800d7c8 <_free_r>
 800c87a:	2300      	movs	r3, #0
 800c87c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c884:	81a3      	strh	r3, [r4, #12]
 800c886:	2300      	movs	r3, #0
 800c888:	6063      	str	r3, [r4, #4]
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	f043 0308 	orr.w	r3, r3, #8
 800c894:	81a3      	strh	r3, [r4, #12]
 800c896:	6923      	ldr	r3, [r4, #16]
 800c898:	b94b      	cbnz	r3, 800c8ae <__swsetup_r+0x7a>
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8a4:	d003      	beq.n	800c8ae <__swsetup_r+0x7a>
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f002 fc91 	bl	800f1d0 <__smakebuf_r>
 800c8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8b2:	f013 0201 	ands.w	r2, r3, #1
 800c8b6:	d00a      	beq.n	800c8ce <__swsetup_r+0x9a>
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	60a2      	str	r2, [r4, #8]
 800c8bc:	6962      	ldr	r2, [r4, #20]
 800c8be:	4252      	negs	r2, r2
 800c8c0:	61a2      	str	r2, [r4, #24]
 800c8c2:	6922      	ldr	r2, [r4, #16]
 800c8c4:	b942      	cbnz	r2, 800c8d8 <__swsetup_r+0xa4>
 800c8c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8ca:	d1c5      	bne.n	800c858 <__swsetup_r+0x24>
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	0799      	lsls	r1, r3, #30
 800c8d0:	bf58      	it	pl
 800c8d2:	6962      	ldrpl	r2, [r4, #20]
 800c8d4:	60a2      	str	r2, [r4, #8]
 800c8d6:	e7f4      	b.n	800c8c2 <__swsetup_r+0x8e>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e7f7      	b.n	800c8cc <__swsetup_r+0x98>
 800c8dc:	2000018c 	.word	0x2000018c

0800c8e0 <memset>:
 800c8e0:	4402      	add	r2, r0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d100      	bne.n	800c8ea <memset+0xa>
 800c8e8:	4770      	bx	lr
 800c8ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ee:	e7f9      	b.n	800c8e4 <memset+0x4>

0800c8f0 <strncmp>:
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	b16a      	cbz	r2, 800c910 <strncmp+0x20>
 800c8f4:	3901      	subs	r1, #1
 800c8f6:	1884      	adds	r4, r0, r2
 800c8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c900:	429a      	cmp	r2, r3
 800c902:	d103      	bne.n	800c90c <strncmp+0x1c>
 800c904:	42a0      	cmp	r0, r4
 800c906:	d001      	beq.n	800c90c <strncmp+0x1c>
 800c908:	2a00      	cmp	r2, #0
 800c90a:	d1f5      	bne.n	800c8f8 <strncmp+0x8>
 800c90c:	1ad0      	subs	r0, r2, r3
 800c90e:	bd10      	pop	{r4, pc}
 800c910:	4610      	mov	r0, r2
 800c912:	e7fc      	b.n	800c90e <strncmp+0x1e>

0800c914 <strtok>:
 800c914:	4b16      	ldr	r3, [pc, #88]	@ (800c970 <strtok+0x5c>)
 800c916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c91a:	681f      	ldr	r7, [r3, #0]
 800c91c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c91e:	4605      	mov	r5, r0
 800c920:	460e      	mov	r6, r1
 800c922:	b9ec      	cbnz	r4, 800c960 <strtok+0x4c>
 800c924:	2050      	movs	r0, #80	@ 0x50
 800c926:	f001 fad3 	bl	800ded0 <malloc>
 800c92a:	4602      	mov	r2, r0
 800c92c:	6478      	str	r0, [r7, #68]	@ 0x44
 800c92e:	b920      	cbnz	r0, 800c93a <strtok+0x26>
 800c930:	4b10      	ldr	r3, [pc, #64]	@ (800c974 <strtok+0x60>)
 800c932:	4811      	ldr	r0, [pc, #68]	@ (800c978 <strtok+0x64>)
 800c934:	215b      	movs	r1, #91	@ 0x5b
 800c936:	f000 f8dd 	bl	800caf4 <__assert_func>
 800c93a:	e9c0 4400 	strd	r4, r4, [r0]
 800c93e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c942:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c946:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c94a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c94e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c952:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c956:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c95a:	6184      	str	r4, [r0, #24]
 800c95c:	7704      	strb	r4, [r0, #28]
 800c95e:	6244      	str	r4, [r0, #36]	@ 0x24
 800c960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c962:	4631      	mov	r1, r6
 800c964:	4628      	mov	r0, r5
 800c966:	2301      	movs	r3, #1
 800c968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c96c:	f000 b806 	b.w	800c97c <__strtok_r>
 800c970:	2000018c 	.word	0x2000018c
 800c974:	08010c49 	.word	0x08010c49
 800c978:	08010c60 	.word	0x08010c60

0800c97c <__strtok_r>:
 800c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c97e:	4604      	mov	r4, r0
 800c980:	b908      	cbnz	r0, 800c986 <__strtok_r+0xa>
 800c982:	6814      	ldr	r4, [r2, #0]
 800c984:	b144      	cbz	r4, 800c998 <__strtok_r+0x1c>
 800c986:	4620      	mov	r0, r4
 800c988:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c98c:	460f      	mov	r7, r1
 800c98e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c992:	b91e      	cbnz	r6, 800c99c <__strtok_r+0x20>
 800c994:	b965      	cbnz	r5, 800c9b0 <__strtok_r+0x34>
 800c996:	6015      	str	r5, [r2, #0]
 800c998:	2000      	movs	r0, #0
 800c99a:	e005      	b.n	800c9a8 <__strtok_r+0x2c>
 800c99c:	42b5      	cmp	r5, r6
 800c99e:	d1f6      	bne.n	800c98e <__strtok_r+0x12>
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1f0      	bne.n	800c986 <__strtok_r+0xa>
 800c9a4:	6014      	str	r4, [r2, #0]
 800c9a6:	7003      	strb	r3, [r0, #0]
 800c9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9aa:	461c      	mov	r4, r3
 800c9ac:	e00c      	b.n	800c9c8 <__strtok_r+0x4c>
 800c9ae:	b915      	cbnz	r5, 800c9b6 <__strtok_r+0x3a>
 800c9b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9b4:	460e      	mov	r6, r1
 800c9b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c9ba:	42ab      	cmp	r3, r5
 800c9bc:	d1f7      	bne.n	800c9ae <__strtok_r+0x32>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0f3      	beq.n	800c9aa <__strtok_r+0x2e>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c9c8:	6014      	str	r4, [r2, #0]
 800c9ca:	e7ed      	b.n	800c9a8 <__strtok_r+0x2c>

0800c9cc <_localeconv_r>:
 800c9cc:	4800      	ldr	r0, [pc, #0]	@ (800c9d0 <_localeconv_r+0x4>)
 800c9ce:	4770      	bx	lr
 800c9d0:	20000110 	.word	0x20000110

0800c9d4 <_close_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d06      	ldr	r5, [pc, #24]	@ (800c9f0 <_close_r+0x1c>)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	602b      	str	r3, [r5, #0]
 800c9e0:	f7f6 f89c 	bl	8002b1c <_close>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_close_r+0x1a>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_close_r+0x1a>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20000bc8 	.word	0x20000bc8

0800c9f4 <_lseek_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ca14 <_lseek_r+0x20>)
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	2200      	movs	r2, #0
 800ca00:	602a      	str	r2, [r5, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	f7f6 f8b1 	bl	8002b6a <_lseek>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_lseek_r+0x1e>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_lseek_r+0x1e>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	20000bc8 	.word	0x20000bc8

0800ca18 <_read_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d07      	ldr	r5, [pc, #28]	@ (800ca38 <_read_r+0x20>)
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4611      	mov	r1, r2
 800ca22:	2200      	movs	r2, #0
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f6 f83f 	bl	8002aaa <_read>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_read_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_read_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20000bc8 	.word	0x20000bc8

0800ca3c <_write_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	@ (800ca5c <_write_r+0x20>)
 800ca40:	4604      	mov	r4, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f7f6 f84a 	bl	8002ae4 <_write>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_write_r+0x1e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_write_r+0x1e>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20000bc8 	.word	0x20000bc8

0800ca60 <__errno>:
 800ca60:	4b01      	ldr	r3, [pc, #4]	@ (800ca68 <__errno+0x8>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	2000018c 	.word	0x2000018c

0800ca6c <__libc_init_array>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	4d0d      	ldr	r5, [pc, #52]	@ (800caa4 <__libc_init_array+0x38>)
 800ca70:	4c0d      	ldr	r4, [pc, #52]	@ (800caa8 <__libc_init_array+0x3c>)
 800ca72:	1b64      	subs	r4, r4, r5
 800ca74:	10a4      	asrs	r4, r4, #2
 800ca76:	2600      	movs	r6, #0
 800ca78:	42a6      	cmp	r6, r4
 800ca7a:	d109      	bne.n	800ca90 <__libc_init_array+0x24>
 800ca7c:	4d0b      	ldr	r5, [pc, #44]	@ (800caac <__libc_init_array+0x40>)
 800ca7e:	4c0c      	ldr	r4, [pc, #48]	@ (800cab0 <__libc_init_array+0x44>)
 800ca80:	f003 fe52 	bl	8010728 <_init>
 800ca84:	1b64      	subs	r4, r4, r5
 800ca86:	10a4      	asrs	r4, r4, #2
 800ca88:	2600      	movs	r6, #0
 800ca8a:	42a6      	cmp	r6, r4
 800ca8c:	d105      	bne.n	800ca9a <__libc_init_array+0x2e>
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca94:	4798      	blx	r3
 800ca96:	3601      	adds	r6, #1
 800ca98:	e7ee      	b.n	800ca78 <__libc_init_array+0xc>
 800ca9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca9e:	4798      	blx	r3
 800caa0:	3601      	adds	r6, #1
 800caa2:	e7f2      	b.n	800ca8a <__libc_init_array+0x1e>
 800caa4:	08011228 	.word	0x08011228
 800caa8:	08011228 	.word	0x08011228
 800caac:	08011228 	.word	0x08011228
 800cab0:	0801122c 	.word	0x0801122c

0800cab4 <__retarget_lock_init_recursive>:
 800cab4:	4770      	bx	lr

0800cab6 <__retarget_lock_acquire_recursive>:
 800cab6:	4770      	bx	lr

0800cab8 <__retarget_lock_release_recursive>:
 800cab8:	4770      	bx	lr

0800caba <memcpy>:
 800caba:	440a      	add	r2, r1
 800cabc:	4291      	cmp	r1, r2
 800cabe:	f100 33ff 	add.w	r3, r0, #4294967295
 800cac2:	d100      	bne.n	800cac6 <memcpy+0xc>
 800cac4:	4770      	bx	lr
 800cac6:	b510      	push	{r4, lr}
 800cac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cad0:	4291      	cmp	r1, r2
 800cad2:	d1f9      	bne.n	800cac8 <memcpy+0xe>
 800cad4:	bd10      	pop	{r4, pc}
	...

0800cad8 <nan>:
 800cad8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cae0 <nan+0x8>
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	00000000 	.word	0x00000000
 800cae4:	7ff80000 	.word	0x7ff80000

0800cae8 <nanf>:
 800cae8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800caf0 <nanf+0x8>
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	7fc00000 	.word	0x7fc00000

0800caf4 <__assert_func>:
 800caf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caf6:	4614      	mov	r4, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	4b09      	ldr	r3, [pc, #36]	@ (800cb20 <__assert_func+0x2c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4605      	mov	r5, r0
 800cb00:	68d8      	ldr	r0, [r3, #12]
 800cb02:	b954      	cbnz	r4, 800cb1a <__assert_func+0x26>
 800cb04:	4b07      	ldr	r3, [pc, #28]	@ (800cb24 <__assert_func+0x30>)
 800cb06:	461c      	mov	r4, r3
 800cb08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb0c:	9100      	str	r1, [sp, #0]
 800cb0e:	462b      	mov	r3, r5
 800cb10:	4905      	ldr	r1, [pc, #20]	@ (800cb28 <__assert_func+0x34>)
 800cb12:	f002 fb25 	bl	800f160 <fiprintf>
 800cb16:	f002 fbe3 	bl	800f2e0 <abort>
 800cb1a:	4b04      	ldr	r3, [pc, #16]	@ (800cb2c <__assert_func+0x38>)
 800cb1c:	e7f4      	b.n	800cb08 <__assert_func+0x14>
 800cb1e:	bf00      	nop
 800cb20:	2000018c 	.word	0x2000018c
 800cb24:	08010cfd 	.word	0x08010cfd
 800cb28:	08010ccf 	.word	0x08010ccf
 800cb2c:	08010cc2 	.word	0x08010cc2

0800cb30 <quorem>:
 800cb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	6903      	ldr	r3, [r0, #16]
 800cb36:	690c      	ldr	r4, [r1, #16]
 800cb38:	42a3      	cmp	r3, r4
 800cb3a:	4607      	mov	r7, r0
 800cb3c:	db7e      	blt.n	800cc3c <quorem+0x10c>
 800cb3e:	3c01      	subs	r4, #1
 800cb40:	f101 0814 	add.w	r8, r1, #20
 800cb44:	00a3      	lsls	r3, r4, #2
 800cb46:	f100 0514 	add.w	r5, r0, #20
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb62:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb66:	d32e      	bcc.n	800cbc6 <quorem+0x96>
 800cb68:	f04f 0a00 	mov.w	sl, #0
 800cb6c:	46c4      	mov	ip, r8
 800cb6e:	46ae      	mov	lr, r5
 800cb70:	46d3      	mov	fp, sl
 800cb72:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb76:	b298      	uxth	r0, r3
 800cb78:	fb06 a000 	mla	r0, r6, r0, sl
 800cb7c:	0c02      	lsrs	r2, r0, #16
 800cb7e:	0c1b      	lsrs	r3, r3, #16
 800cb80:	fb06 2303 	mla	r3, r6, r3, r2
 800cb84:	f8de 2000 	ldr.w	r2, [lr]
 800cb88:	b280      	uxth	r0, r0
 800cb8a:	b292      	uxth	r2, r2
 800cb8c:	1a12      	subs	r2, r2, r0
 800cb8e:	445a      	add	r2, fp
 800cb90:	f8de 0000 	ldr.w	r0, [lr]
 800cb94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cb9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cba2:	b292      	uxth	r2, r2
 800cba4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cba8:	45e1      	cmp	r9, ip
 800cbaa:	f84e 2b04 	str.w	r2, [lr], #4
 800cbae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cbb2:	d2de      	bcs.n	800cb72 <quorem+0x42>
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	58eb      	ldr	r3, [r5, r3]
 800cbb8:	b92b      	cbnz	r3, 800cbc6 <quorem+0x96>
 800cbba:	9b01      	ldr	r3, [sp, #4]
 800cbbc:	3b04      	subs	r3, #4
 800cbbe:	429d      	cmp	r5, r3
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	d32f      	bcc.n	800cc24 <quorem+0xf4>
 800cbc4:	613c      	str	r4, [r7, #16]
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f001 fd0e 	bl	800e5e8 <__mcmp>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	db25      	blt.n	800cc1c <quorem+0xec>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbd8:	f8d1 c000 	ldr.w	ip, [r1]
 800cbdc:	fa1f fe82 	uxth.w	lr, r2
 800cbe0:	fa1f f38c 	uxth.w	r3, ip
 800cbe4:	eba3 030e 	sub.w	r3, r3, lr
 800cbe8:	4403      	add	r3, r0
 800cbea:	0c12      	lsrs	r2, r2, #16
 800cbec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbfa:	45c1      	cmp	r9, r8
 800cbfc:	f841 3b04 	str.w	r3, [r1], #4
 800cc00:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc04:	d2e6      	bcs.n	800cbd4 <quorem+0xa4>
 800cc06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc0e:	b922      	cbnz	r2, 800cc1a <quorem+0xea>
 800cc10:	3b04      	subs	r3, #4
 800cc12:	429d      	cmp	r5, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	d30b      	bcc.n	800cc30 <quorem+0x100>
 800cc18:	613c      	str	r4, [r7, #16]
 800cc1a:	3601      	adds	r6, #1
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	b003      	add	sp, #12
 800cc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc24:	6812      	ldr	r2, [r2, #0]
 800cc26:	3b04      	subs	r3, #4
 800cc28:	2a00      	cmp	r2, #0
 800cc2a:	d1cb      	bne.n	800cbc4 <quorem+0x94>
 800cc2c:	3c01      	subs	r4, #1
 800cc2e:	e7c6      	b.n	800cbbe <quorem+0x8e>
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	3b04      	subs	r3, #4
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	d1ef      	bne.n	800cc18 <quorem+0xe8>
 800cc38:	3c01      	subs	r4, #1
 800cc3a:	e7ea      	b.n	800cc12 <quorem+0xe2>
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	e7ee      	b.n	800cc1e <quorem+0xee>

0800cc40 <_dtoa_r>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	69c7      	ldr	r7, [r0, #28]
 800cc46:	b099      	sub	sp, #100	@ 0x64
 800cc48:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc4c:	ec55 4b10 	vmov	r4, r5, d0
 800cc50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cc52:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc54:	4683      	mov	fp, r0
 800cc56:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc58:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc5a:	b97f      	cbnz	r7, 800cc7c <_dtoa_r+0x3c>
 800cc5c:	2010      	movs	r0, #16
 800cc5e:	f001 f937 	bl	800ded0 <malloc>
 800cc62:	4602      	mov	r2, r0
 800cc64:	f8cb 001c 	str.w	r0, [fp, #28]
 800cc68:	b920      	cbnz	r0, 800cc74 <_dtoa_r+0x34>
 800cc6a:	4ba7      	ldr	r3, [pc, #668]	@ (800cf08 <_dtoa_r+0x2c8>)
 800cc6c:	21ef      	movs	r1, #239	@ 0xef
 800cc6e:	48a7      	ldr	r0, [pc, #668]	@ (800cf0c <_dtoa_r+0x2cc>)
 800cc70:	f7ff ff40 	bl	800caf4 <__assert_func>
 800cc74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc78:	6007      	str	r7, [r0, #0]
 800cc7a:	60c7      	str	r7, [r0, #12]
 800cc7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc80:	6819      	ldr	r1, [r3, #0]
 800cc82:	b159      	cbz	r1, 800cc9c <_dtoa_r+0x5c>
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	604a      	str	r2, [r1, #4]
 800cc88:	2301      	movs	r3, #1
 800cc8a:	4093      	lsls	r3, r2
 800cc8c:	608b      	str	r3, [r1, #8]
 800cc8e:	4658      	mov	r0, fp
 800cc90:	f001 fa26 	bl	800e0e0 <_Bfree>
 800cc94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	601a      	str	r2, [r3, #0]
 800cc9c:	1e2b      	subs	r3, r5, #0
 800cc9e:	bfb9      	ittee	lt
 800cca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cca4:	9303      	strlt	r3, [sp, #12]
 800cca6:	2300      	movge	r3, #0
 800cca8:	6033      	strge	r3, [r6, #0]
 800ccaa:	9f03      	ldr	r7, [sp, #12]
 800ccac:	4b98      	ldr	r3, [pc, #608]	@ (800cf10 <_dtoa_r+0x2d0>)
 800ccae:	bfbc      	itt	lt
 800ccb0:	2201      	movlt	r2, #1
 800ccb2:	6032      	strlt	r2, [r6, #0]
 800ccb4:	43bb      	bics	r3, r7
 800ccb6:	d112      	bne.n	800ccde <_dtoa_r+0x9e>
 800ccb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ccbe:	6013      	str	r3, [r2, #0]
 800ccc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccc4:	4323      	orrs	r3, r4
 800ccc6:	f000 854d 	beq.w	800d764 <_dtoa_r+0xb24>
 800ccca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cf24 <_dtoa_r+0x2e4>
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 854f 	beq.w	800d774 <_dtoa_r+0xb34>
 800ccd6:	f10a 0303 	add.w	r3, sl, #3
 800ccda:	f000 bd49 	b.w	800d770 <_dtoa_r+0xb30>
 800ccde:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cce2:	2200      	movs	r2, #0
 800cce4:	ec51 0b17 	vmov	r0, r1, d7
 800cce8:	2300      	movs	r3, #0
 800ccea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ccee:	f7f3 fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccf2:	4680      	mov	r8, r0
 800ccf4:	b158      	cbz	r0, 800cd0e <_dtoa_r+0xce>
 800ccf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	6013      	str	r3, [r2, #0]
 800ccfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccfe:	b113      	cbz	r3, 800cd06 <_dtoa_r+0xc6>
 800cd00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd02:	4b84      	ldr	r3, [pc, #528]	@ (800cf14 <_dtoa_r+0x2d4>)
 800cd04:	6013      	str	r3, [r2, #0]
 800cd06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cf28 <_dtoa_r+0x2e8>
 800cd0a:	f000 bd33 	b.w	800d774 <_dtoa_r+0xb34>
 800cd0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd12:	aa16      	add	r2, sp, #88	@ 0x58
 800cd14:	a917      	add	r1, sp, #92	@ 0x5c
 800cd16:	4658      	mov	r0, fp
 800cd18:	f001 fd86 	bl	800e828 <__d2b>
 800cd1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd20:	4681      	mov	r9, r0
 800cd22:	2e00      	cmp	r6, #0
 800cd24:	d077      	beq.n	800ce16 <_dtoa_r+0x1d6>
 800cd26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd40:	4619      	mov	r1, r3
 800cd42:	2200      	movs	r2, #0
 800cd44:	4b74      	ldr	r3, [pc, #464]	@ (800cf18 <_dtoa_r+0x2d8>)
 800cd46:	f7f3 faa7 	bl	8000298 <__aeabi_dsub>
 800cd4a:	a369      	add	r3, pc, #420	@ (adr r3, 800cef0 <_dtoa_r+0x2b0>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	f7f3 fc5a 	bl	8000608 <__aeabi_dmul>
 800cd54:	a368      	add	r3, pc, #416	@ (adr r3, 800cef8 <_dtoa_r+0x2b8>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	f7f3 fa9f 	bl	800029c <__adddf3>
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4630      	mov	r0, r6
 800cd62:	460d      	mov	r5, r1
 800cd64:	f7f3 fbe6 	bl	8000534 <__aeabi_i2d>
 800cd68:	a365      	add	r3, pc, #404	@ (adr r3, 800cf00 <_dtoa_r+0x2c0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	f7f3 fc4b 	bl	8000608 <__aeabi_dmul>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	4620      	mov	r0, r4
 800cd78:	4629      	mov	r1, r5
 800cd7a:	f7f3 fa8f 	bl	800029c <__adddf3>
 800cd7e:	4604      	mov	r4, r0
 800cd80:	460d      	mov	r5, r1
 800cd82:	f7f3 fef1 	bl	8000b68 <__aeabi_d2iz>
 800cd86:	2200      	movs	r2, #0
 800cd88:	4607      	mov	r7, r0
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	f7f3 feac 	bl	8000aec <__aeabi_dcmplt>
 800cd94:	b140      	cbz	r0, 800cda8 <_dtoa_r+0x168>
 800cd96:	4638      	mov	r0, r7
 800cd98:	f7f3 fbcc 	bl	8000534 <__aeabi_i2d>
 800cd9c:	4622      	mov	r2, r4
 800cd9e:	462b      	mov	r3, r5
 800cda0:	f7f3 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800cda4:	b900      	cbnz	r0, 800cda8 <_dtoa_r+0x168>
 800cda6:	3f01      	subs	r7, #1
 800cda8:	2f16      	cmp	r7, #22
 800cdaa:	d851      	bhi.n	800ce50 <_dtoa_r+0x210>
 800cdac:	4b5b      	ldr	r3, [pc, #364]	@ (800cf1c <_dtoa_r+0x2dc>)
 800cdae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdba:	f7f3 fe97 	bl	8000aec <__aeabi_dcmplt>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d048      	beq.n	800ce54 <_dtoa_r+0x214>
 800cdc2:	3f01      	subs	r7, #1
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	9312      	str	r3, [sp, #72]	@ 0x48
 800cdc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cdca:	1b9b      	subs	r3, r3, r6
 800cdcc:	1e5a      	subs	r2, r3, #1
 800cdce:	bf44      	itt	mi
 800cdd0:	f1c3 0801 	rsbmi	r8, r3, #1
 800cdd4:	2300      	movmi	r3, #0
 800cdd6:	9208      	str	r2, [sp, #32]
 800cdd8:	bf54      	ite	pl
 800cdda:	f04f 0800 	movpl.w	r8, #0
 800cdde:	9308      	strmi	r3, [sp, #32]
 800cde0:	2f00      	cmp	r7, #0
 800cde2:	db39      	blt.n	800ce58 <_dtoa_r+0x218>
 800cde4:	9b08      	ldr	r3, [sp, #32]
 800cde6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cde8:	443b      	add	r3, r7
 800cdea:	9308      	str	r3, [sp, #32]
 800cdec:	2300      	movs	r3, #0
 800cdee:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf2:	2b09      	cmp	r3, #9
 800cdf4:	d864      	bhi.n	800cec0 <_dtoa_r+0x280>
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	bfc4      	itt	gt
 800cdfa:	3b04      	subgt	r3, #4
 800cdfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cdfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce00:	f1a3 0302 	sub.w	r3, r3, #2
 800ce04:	bfcc      	ite	gt
 800ce06:	2400      	movgt	r4, #0
 800ce08:	2401      	movle	r4, #1
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d863      	bhi.n	800ced6 <_dtoa_r+0x296>
 800ce0e:	e8df f003 	tbb	[pc, r3]
 800ce12:	372a      	.short	0x372a
 800ce14:	5535      	.short	0x5535
 800ce16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ce1a:	441e      	add	r6, r3
 800ce1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce20:	2b20      	cmp	r3, #32
 800ce22:	bfc1      	itttt	gt
 800ce24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce28:	409f      	lslgt	r7, r3
 800ce2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce32:	bfd6      	itet	le
 800ce34:	f1c3 0320 	rsble	r3, r3, #32
 800ce38:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce3c:	fa04 f003 	lslle.w	r0, r4, r3
 800ce40:	f7f3 fb68 	bl	8000514 <__aeabi_ui2d>
 800ce44:	2201      	movs	r2, #1
 800ce46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce4a:	3e01      	subs	r6, #1
 800ce4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ce4e:	e777      	b.n	800cd40 <_dtoa_r+0x100>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e7b8      	b.n	800cdc6 <_dtoa_r+0x186>
 800ce54:	9012      	str	r0, [sp, #72]	@ 0x48
 800ce56:	e7b7      	b.n	800cdc8 <_dtoa_r+0x188>
 800ce58:	427b      	negs	r3, r7
 800ce5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	eba8 0807 	sub.w	r8, r8, r7
 800ce62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce64:	e7c4      	b.n	800cdf0 <_dtoa_r+0x1b0>
 800ce66:	2300      	movs	r3, #0
 800ce68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dc35      	bgt.n	800cedc <_dtoa_r+0x29c>
 800ce70:	2301      	movs	r3, #1
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	9307      	str	r3, [sp, #28]
 800ce76:	461a      	mov	r2, r3
 800ce78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce7a:	e00b      	b.n	800ce94 <_dtoa_r+0x254>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e7f3      	b.n	800ce68 <_dtoa_r+0x228>
 800ce80:	2300      	movs	r3, #0
 800ce82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce86:	18fb      	adds	r3, r7, r3
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	9307      	str	r3, [sp, #28]
 800ce90:	bfb8      	it	lt
 800ce92:	2301      	movlt	r3, #1
 800ce94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	2204      	movs	r2, #4
 800ce9c:	f102 0514 	add.w	r5, r2, #20
 800cea0:	429d      	cmp	r5, r3
 800cea2:	d91f      	bls.n	800cee4 <_dtoa_r+0x2a4>
 800cea4:	6041      	str	r1, [r0, #4]
 800cea6:	4658      	mov	r0, fp
 800cea8:	f001 f8da 	bl	800e060 <_Balloc>
 800ceac:	4682      	mov	sl, r0
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d13c      	bne.n	800cf2c <_dtoa_r+0x2ec>
 800ceb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf20 <_dtoa_r+0x2e0>)
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ceba:	e6d8      	b.n	800cc6e <_dtoa_r+0x2e>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e7e0      	b.n	800ce82 <_dtoa_r+0x242>
 800cec0:	2401      	movs	r4, #1
 800cec2:	2300      	movs	r3, #0
 800cec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cec8:	f04f 33ff 	mov.w	r3, #4294967295
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	9307      	str	r3, [sp, #28]
 800ced0:	2200      	movs	r2, #0
 800ced2:	2312      	movs	r3, #18
 800ced4:	e7d0      	b.n	800ce78 <_dtoa_r+0x238>
 800ced6:	2301      	movs	r3, #1
 800ced8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ceda:	e7f5      	b.n	800cec8 <_dtoa_r+0x288>
 800cedc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	9307      	str	r3, [sp, #28]
 800cee2:	e7d7      	b.n	800ce94 <_dtoa_r+0x254>
 800cee4:	3101      	adds	r1, #1
 800cee6:	0052      	lsls	r2, r2, #1
 800cee8:	e7d8      	b.n	800ce9c <_dtoa_r+0x25c>
 800ceea:	bf00      	nop
 800ceec:	f3af 8000 	nop.w
 800cef0:	636f4361 	.word	0x636f4361
 800cef4:	3fd287a7 	.word	0x3fd287a7
 800cef8:	8b60c8b3 	.word	0x8b60c8b3
 800cefc:	3fc68a28 	.word	0x3fc68a28
 800cf00:	509f79fb 	.word	0x509f79fb
 800cf04:	3fd34413 	.word	0x3fd34413
 800cf08:	08010c49 	.word	0x08010c49
 800cf0c:	08010d0b 	.word	0x08010d0b
 800cf10:	7ff00000 	.word	0x7ff00000
 800cf14:	08010c21 	.word	0x08010c21
 800cf18:	3ff80000 	.word	0x3ff80000
 800cf1c:	08010e68 	.word	0x08010e68
 800cf20:	08010d63 	.word	0x08010d63
 800cf24:	08010d07 	.word	0x08010d07
 800cf28:	08010c20 	.word	0x08010c20
 800cf2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf30:	6018      	str	r0, [r3, #0]
 800cf32:	9b07      	ldr	r3, [sp, #28]
 800cf34:	2b0e      	cmp	r3, #14
 800cf36:	f200 80a4 	bhi.w	800d082 <_dtoa_r+0x442>
 800cf3a:	2c00      	cmp	r4, #0
 800cf3c:	f000 80a1 	beq.w	800d082 <_dtoa_r+0x442>
 800cf40:	2f00      	cmp	r7, #0
 800cf42:	dd33      	ble.n	800cfac <_dtoa_r+0x36c>
 800cf44:	4bad      	ldr	r3, [pc, #692]	@ (800d1fc <_dtoa_r+0x5bc>)
 800cf46:	f007 020f 	and.w	r2, r7, #15
 800cf4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf4e:	ed93 7b00 	vldr	d7, [r3]
 800cf52:	05f8      	lsls	r0, r7, #23
 800cf54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cf58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf5c:	d516      	bpl.n	800cf8c <_dtoa_r+0x34c>
 800cf5e:	4ba8      	ldr	r3, [pc, #672]	@ (800d200 <_dtoa_r+0x5c0>)
 800cf60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf68:	f7f3 fc78 	bl	800085c <__aeabi_ddiv>
 800cf6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf70:	f004 040f 	and.w	r4, r4, #15
 800cf74:	2603      	movs	r6, #3
 800cf76:	4da2      	ldr	r5, [pc, #648]	@ (800d200 <_dtoa_r+0x5c0>)
 800cf78:	b954      	cbnz	r4, 800cf90 <_dtoa_r+0x350>
 800cf7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf82:	f7f3 fc6b 	bl	800085c <__aeabi_ddiv>
 800cf86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf8a:	e028      	b.n	800cfde <_dtoa_r+0x39e>
 800cf8c:	2602      	movs	r6, #2
 800cf8e:	e7f2      	b.n	800cf76 <_dtoa_r+0x336>
 800cf90:	07e1      	lsls	r1, r4, #31
 800cf92:	d508      	bpl.n	800cfa6 <_dtoa_r+0x366>
 800cf94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf9c:	f7f3 fb34 	bl	8000608 <__aeabi_dmul>
 800cfa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfa4:	3601      	adds	r6, #1
 800cfa6:	1064      	asrs	r4, r4, #1
 800cfa8:	3508      	adds	r5, #8
 800cfaa:	e7e5      	b.n	800cf78 <_dtoa_r+0x338>
 800cfac:	f000 80d2 	beq.w	800d154 <_dtoa_r+0x514>
 800cfb0:	427c      	negs	r4, r7
 800cfb2:	4b92      	ldr	r3, [pc, #584]	@ (800d1fc <_dtoa_r+0x5bc>)
 800cfb4:	4d92      	ldr	r5, [pc, #584]	@ (800d200 <_dtoa_r+0x5c0>)
 800cfb6:	f004 020f 	and.w	r2, r4, #15
 800cfba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfc6:	f7f3 fb1f 	bl	8000608 <__aeabi_dmul>
 800cfca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfce:	1124      	asrs	r4, r4, #4
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	2602      	movs	r6, #2
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	f040 80b2 	bne.w	800d13e <_dtoa_r+0x4fe>
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1d3      	bne.n	800cf86 <_dtoa_r+0x346>
 800cfde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cfe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 80b7 	beq.w	800d158 <_dtoa_r+0x518>
 800cfea:	4b86      	ldr	r3, [pc, #536]	@ (800d204 <_dtoa_r+0x5c4>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	4620      	mov	r0, r4
 800cff0:	4629      	mov	r1, r5
 800cff2:	f7f3 fd7b 	bl	8000aec <__aeabi_dcmplt>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	f000 80ae 	beq.w	800d158 <_dtoa_r+0x518>
 800cffc:	9b07      	ldr	r3, [sp, #28]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 80aa 	beq.w	800d158 <_dtoa_r+0x518>
 800d004:	9b00      	ldr	r3, [sp, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	dd37      	ble.n	800d07a <_dtoa_r+0x43a>
 800d00a:	1e7b      	subs	r3, r7, #1
 800d00c:	9304      	str	r3, [sp, #16]
 800d00e:	4620      	mov	r0, r4
 800d010:	4b7d      	ldr	r3, [pc, #500]	@ (800d208 <_dtoa_r+0x5c8>)
 800d012:	2200      	movs	r2, #0
 800d014:	4629      	mov	r1, r5
 800d016:	f7f3 faf7 	bl	8000608 <__aeabi_dmul>
 800d01a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d01e:	9c00      	ldr	r4, [sp, #0]
 800d020:	3601      	adds	r6, #1
 800d022:	4630      	mov	r0, r6
 800d024:	f7f3 fa86 	bl	8000534 <__aeabi_i2d>
 800d028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d02c:	f7f3 faec 	bl	8000608 <__aeabi_dmul>
 800d030:	4b76      	ldr	r3, [pc, #472]	@ (800d20c <_dtoa_r+0x5cc>)
 800d032:	2200      	movs	r2, #0
 800d034:	f7f3 f932 	bl	800029c <__adddf3>
 800d038:	4605      	mov	r5, r0
 800d03a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d03e:	2c00      	cmp	r4, #0
 800d040:	f040 808d 	bne.w	800d15e <_dtoa_r+0x51e>
 800d044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d048:	4b71      	ldr	r3, [pc, #452]	@ (800d210 <_dtoa_r+0x5d0>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	f7f3 f924 	bl	8000298 <__aeabi_dsub>
 800d050:	4602      	mov	r2, r0
 800d052:	460b      	mov	r3, r1
 800d054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d058:	462a      	mov	r2, r5
 800d05a:	4633      	mov	r3, r6
 800d05c:	f7f3 fd64 	bl	8000b28 <__aeabi_dcmpgt>
 800d060:	2800      	cmp	r0, #0
 800d062:	f040 828b 	bne.w	800d57c <_dtoa_r+0x93c>
 800d066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d06a:	462a      	mov	r2, r5
 800d06c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d070:	f7f3 fd3c 	bl	8000aec <__aeabi_dcmplt>
 800d074:	2800      	cmp	r0, #0
 800d076:	f040 8128 	bne.w	800d2ca <_dtoa_r+0x68a>
 800d07a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d07e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d084:	2b00      	cmp	r3, #0
 800d086:	f2c0 815a 	blt.w	800d33e <_dtoa_r+0x6fe>
 800d08a:	2f0e      	cmp	r7, #14
 800d08c:	f300 8157 	bgt.w	800d33e <_dtoa_r+0x6fe>
 800d090:	4b5a      	ldr	r3, [pc, #360]	@ (800d1fc <_dtoa_r+0x5bc>)
 800d092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d096:	ed93 7b00 	vldr	d7, [r3]
 800d09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	ed8d 7b00 	vstr	d7, [sp]
 800d0a2:	da03      	bge.n	800d0ac <_dtoa_r+0x46c>
 800d0a4:	9b07      	ldr	r3, [sp, #28]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f340 8101 	ble.w	800d2ae <_dtoa_r+0x66e>
 800d0ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d0b0:	4656      	mov	r6, sl
 800d0b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 fbcf 	bl	800085c <__aeabi_ddiv>
 800d0be:	f7f3 fd53 	bl	8000b68 <__aeabi_d2iz>
 800d0c2:	4680      	mov	r8, r0
 800d0c4:	f7f3 fa36 	bl	8000534 <__aeabi_i2d>
 800d0c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0cc:	f7f3 fa9c 	bl	8000608 <__aeabi_dmul>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d0dc:	f7f3 f8dc 	bl	8000298 <__aeabi_dsub>
 800d0e0:	f806 4b01 	strb.w	r4, [r6], #1
 800d0e4:	9d07      	ldr	r5, [sp, #28]
 800d0e6:	eba6 040a 	sub.w	r4, r6, sl
 800d0ea:	42a5      	cmp	r5, r4
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	f040 8117 	bne.w	800d322 <_dtoa_r+0x6e2>
 800d0f4:	f7f3 f8d2 	bl	800029c <__adddf3>
 800d0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	460d      	mov	r5, r1
 800d100:	f7f3 fd12 	bl	8000b28 <__aeabi_dcmpgt>
 800d104:	2800      	cmp	r0, #0
 800d106:	f040 80f9 	bne.w	800d2fc <_dtoa_r+0x6bc>
 800d10a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d10e:	4620      	mov	r0, r4
 800d110:	4629      	mov	r1, r5
 800d112:	f7f3 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d116:	b118      	cbz	r0, 800d120 <_dtoa_r+0x4e0>
 800d118:	f018 0f01 	tst.w	r8, #1
 800d11c:	f040 80ee 	bne.w	800d2fc <_dtoa_r+0x6bc>
 800d120:	4649      	mov	r1, r9
 800d122:	4658      	mov	r0, fp
 800d124:	f000 ffdc 	bl	800e0e0 <_Bfree>
 800d128:	2300      	movs	r3, #0
 800d12a:	7033      	strb	r3, [r6, #0]
 800d12c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d12e:	3701      	adds	r7, #1
 800d130:	601f      	str	r7, [r3, #0]
 800d132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 831d 	beq.w	800d774 <_dtoa_r+0xb34>
 800d13a:	601e      	str	r6, [r3, #0]
 800d13c:	e31a      	b.n	800d774 <_dtoa_r+0xb34>
 800d13e:	07e2      	lsls	r2, r4, #31
 800d140:	d505      	bpl.n	800d14e <_dtoa_r+0x50e>
 800d142:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d146:	f7f3 fa5f 	bl	8000608 <__aeabi_dmul>
 800d14a:	3601      	adds	r6, #1
 800d14c:	2301      	movs	r3, #1
 800d14e:	1064      	asrs	r4, r4, #1
 800d150:	3508      	adds	r5, #8
 800d152:	e73f      	b.n	800cfd4 <_dtoa_r+0x394>
 800d154:	2602      	movs	r6, #2
 800d156:	e742      	b.n	800cfde <_dtoa_r+0x39e>
 800d158:	9c07      	ldr	r4, [sp, #28]
 800d15a:	9704      	str	r7, [sp, #16]
 800d15c:	e761      	b.n	800d022 <_dtoa_r+0x3e2>
 800d15e:	4b27      	ldr	r3, [pc, #156]	@ (800d1fc <_dtoa_r+0x5bc>)
 800d160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d16a:	4454      	add	r4, sl
 800d16c:	2900      	cmp	r1, #0
 800d16e:	d053      	beq.n	800d218 <_dtoa_r+0x5d8>
 800d170:	4928      	ldr	r1, [pc, #160]	@ (800d214 <_dtoa_r+0x5d4>)
 800d172:	2000      	movs	r0, #0
 800d174:	f7f3 fb72 	bl	800085c <__aeabi_ddiv>
 800d178:	4633      	mov	r3, r6
 800d17a:	462a      	mov	r2, r5
 800d17c:	f7f3 f88c 	bl	8000298 <__aeabi_dsub>
 800d180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d184:	4656      	mov	r6, sl
 800d186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d18a:	f7f3 fced 	bl	8000b68 <__aeabi_d2iz>
 800d18e:	4605      	mov	r5, r0
 800d190:	f7f3 f9d0 	bl	8000534 <__aeabi_i2d>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d19c:	f7f3 f87c 	bl	8000298 <__aeabi_dsub>
 800d1a0:	3530      	adds	r5, #48	@ 0x30
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1aa:	f806 5b01 	strb.w	r5, [r6], #1
 800d1ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1b2:	f7f3 fc9b 	bl	8000aec <__aeabi_dcmplt>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d171      	bne.n	800d29e <_dtoa_r+0x65e>
 800d1ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1be:	4911      	ldr	r1, [pc, #68]	@ (800d204 <_dtoa_r+0x5c4>)
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	f7f3 f869 	bl	8000298 <__aeabi_dsub>
 800d1c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1ca:	f7f3 fc8f 	bl	8000aec <__aeabi_dcmplt>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	f040 8095 	bne.w	800d2fe <_dtoa_r+0x6be>
 800d1d4:	42a6      	cmp	r6, r4
 800d1d6:	f43f af50 	beq.w	800d07a <_dtoa_r+0x43a>
 800d1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d1de:	4b0a      	ldr	r3, [pc, #40]	@ (800d208 <_dtoa_r+0x5c8>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f7f3 fa11 	bl	8000608 <__aeabi_dmul>
 800d1e6:	4b08      	ldr	r3, [pc, #32]	@ (800d208 <_dtoa_r+0x5c8>)
 800d1e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f2:	f7f3 fa09 	bl	8000608 <__aeabi_dmul>
 800d1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1fa:	e7c4      	b.n	800d186 <_dtoa_r+0x546>
 800d1fc:	08010e68 	.word	0x08010e68
 800d200:	08010e40 	.word	0x08010e40
 800d204:	3ff00000 	.word	0x3ff00000
 800d208:	40240000 	.word	0x40240000
 800d20c:	401c0000 	.word	0x401c0000
 800d210:	40140000 	.word	0x40140000
 800d214:	3fe00000 	.word	0x3fe00000
 800d218:	4631      	mov	r1, r6
 800d21a:	4628      	mov	r0, r5
 800d21c:	f7f3 f9f4 	bl	8000608 <__aeabi_dmul>
 800d220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d224:	9415      	str	r4, [sp, #84]	@ 0x54
 800d226:	4656      	mov	r6, sl
 800d228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d22c:	f7f3 fc9c 	bl	8000b68 <__aeabi_d2iz>
 800d230:	4605      	mov	r5, r0
 800d232:	f7f3 f97f 	bl	8000534 <__aeabi_i2d>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d23e:	f7f3 f82b 	bl	8000298 <__aeabi_dsub>
 800d242:	3530      	adds	r5, #48	@ 0x30
 800d244:	f806 5b01 	strb.w	r5, [r6], #1
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	42a6      	cmp	r6, r4
 800d24e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d252:	f04f 0200 	mov.w	r2, #0
 800d256:	d124      	bne.n	800d2a2 <_dtoa_r+0x662>
 800d258:	4bac      	ldr	r3, [pc, #688]	@ (800d50c <_dtoa_r+0x8cc>)
 800d25a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d25e:	f7f3 f81d 	bl	800029c <__adddf3>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d26a:	f7f3 fc5d 	bl	8000b28 <__aeabi_dcmpgt>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d145      	bne.n	800d2fe <_dtoa_r+0x6be>
 800d272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d276:	49a5      	ldr	r1, [pc, #660]	@ (800d50c <_dtoa_r+0x8cc>)
 800d278:	2000      	movs	r0, #0
 800d27a:	f7f3 f80d 	bl	8000298 <__aeabi_dsub>
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d286:	f7f3 fc31 	bl	8000aec <__aeabi_dcmplt>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f43f aef5 	beq.w	800d07a <_dtoa_r+0x43a>
 800d290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d292:	1e73      	subs	r3, r6, #1
 800d294:	9315      	str	r3, [sp, #84]	@ 0x54
 800d296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d29a:	2b30      	cmp	r3, #48	@ 0x30
 800d29c:	d0f8      	beq.n	800d290 <_dtoa_r+0x650>
 800d29e:	9f04      	ldr	r7, [sp, #16]
 800d2a0:	e73e      	b.n	800d120 <_dtoa_r+0x4e0>
 800d2a2:	4b9b      	ldr	r3, [pc, #620]	@ (800d510 <_dtoa_r+0x8d0>)
 800d2a4:	f7f3 f9b0 	bl	8000608 <__aeabi_dmul>
 800d2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2ac:	e7bc      	b.n	800d228 <_dtoa_r+0x5e8>
 800d2ae:	d10c      	bne.n	800d2ca <_dtoa_r+0x68a>
 800d2b0:	4b98      	ldr	r3, [pc, #608]	@ (800d514 <_dtoa_r+0x8d4>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2b8:	f7f3 f9a6 	bl	8000608 <__aeabi_dmul>
 800d2bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2c0:	f7f3 fc28 	bl	8000b14 <__aeabi_dcmpge>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f000 8157 	beq.w	800d578 <_dtoa_r+0x938>
 800d2ca:	2400      	movs	r4, #0
 800d2cc:	4625      	mov	r5, r4
 800d2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2d0:	43db      	mvns	r3, r3
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	4656      	mov	r6, sl
 800d2d6:	2700      	movs	r7, #0
 800d2d8:	4621      	mov	r1, r4
 800d2da:	4658      	mov	r0, fp
 800d2dc:	f000 ff00 	bl	800e0e0 <_Bfree>
 800d2e0:	2d00      	cmp	r5, #0
 800d2e2:	d0dc      	beq.n	800d29e <_dtoa_r+0x65e>
 800d2e4:	b12f      	cbz	r7, 800d2f2 <_dtoa_r+0x6b2>
 800d2e6:	42af      	cmp	r7, r5
 800d2e8:	d003      	beq.n	800d2f2 <_dtoa_r+0x6b2>
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	4658      	mov	r0, fp
 800d2ee:	f000 fef7 	bl	800e0e0 <_Bfree>
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4658      	mov	r0, fp
 800d2f6:	f000 fef3 	bl	800e0e0 <_Bfree>
 800d2fa:	e7d0      	b.n	800d29e <_dtoa_r+0x65e>
 800d2fc:	9704      	str	r7, [sp, #16]
 800d2fe:	4633      	mov	r3, r6
 800d300:	461e      	mov	r6, r3
 800d302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d306:	2a39      	cmp	r2, #57	@ 0x39
 800d308:	d107      	bne.n	800d31a <_dtoa_r+0x6da>
 800d30a:	459a      	cmp	sl, r3
 800d30c:	d1f8      	bne.n	800d300 <_dtoa_r+0x6c0>
 800d30e:	9a04      	ldr	r2, [sp, #16]
 800d310:	3201      	adds	r2, #1
 800d312:	9204      	str	r2, [sp, #16]
 800d314:	2230      	movs	r2, #48	@ 0x30
 800d316:	f88a 2000 	strb.w	r2, [sl]
 800d31a:	781a      	ldrb	r2, [r3, #0]
 800d31c:	3201      	adds	r2, #1
 800d31e:	701a      	strb	r2, [r3, #0]
 800d320:	e7bd      	b.n	800d29e <_dtoa_r+0x65e>
 800d322:	4b7b      	ldr	r3, [pc, #492]	@ (800d510 <_dtoa_r+0x8d0>)
 800d324:	2200      	movs	r2, #0
 800d326:	f7f3 f96f 	bl	8000608 <__aeabi_dmul>
 800d32a:	2200      	movs	r2, #0
 800d32c:	2300      	movs	r3, #0
 800d32e:	4604      	mov	r4, r0
 800d330:	460d      	mov	r5, r1
 800d332:	f7f3 fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d336:	2800      	cmp	r0, #0
 800d338:	f43f aebb 	beq.w	800d0b2 <_dtoa_r+0x472>
 800d33c:	e6f0      	b.n	800d120 <_dtoa_r+0x4e0>
 800d33e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d340:	2a00      	cmp	r2, #0
 800d342:	f000 80db 	beq.w	800d4fc <_dtoa_r+0x8bc>
 800d346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d348:	2a01      	cmp	r2, #1
 800d34a:	f300 80bf 	bgt.w	800d4cc <_dtoa_r+0x88c>
 800d34e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d350:	2a00      	cmp	r2, #0
 800d352:	f000 80b7 	beq.w	800d4c4 <_dtoa_r+0x884>
 800d356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d35a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d35c:	4646      	mov	r6, r8
 800d35e:	9a08      	ldr	r2, [sp, #32]
 800d360:	2101      	movs	r1, #1
 800d362:	441a      	add	r2, r3
 800d364:	4658      	mov	r0, fp
 800d366:	4498      	add	r8, r3
 800d368:	9208      	str	r2, [sp, #32]
 800d36a:	f000 ffb7 	bl	800e2dc <__i2b>
 800d36e:	4605      	mov	r5, r0
 800d370:	b15e      	cbz	r6, 800d38a <_dtoa_r+0x74a>
 800d372:	9b08      	ldr	r3, [sp, #32]
 800d374:	2b00      	cmp	r3, #0
 800d376:	dd08      	ble.n	800d38a <_dtoa_r+0x74a>
 800d378:	42b3      	cmp	r3, r6
 800d37a:	9a08      	ldr	r2, [sp, #32]
 800d37c:	bfa8      	it	ge
 800d37e:	4633      	movge	r3, r6
 800d380:	eba8 0803 	sub.w	r8, r8, r3
 800d384:	1af6      	subs	r6, r6, r3
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	9308      	str	r3, [sp, #32]
 800d38a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d38c:	b1f3      	cbz	r3, 800d3cc <_dtoa_r+0x78c>
 800d38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 80b7 	beq.w	800d504 <_dtoa_r+0x8c4>
 800d396:	b18c      	cbz	r4, 800d3bc <_dtoa_r+0x77c>
 800d398:	4629      	mov	r1, r5
 800d39a:	4622      	mov	r2, r4
 800d39c:	4658      	mov	r0, fp
 800d39e:	f001 f85d 	bl	800e45c <__pow5mult>
 800d3a2:	464a      	mov	r2, r9
 800d3a4:	4601      	mov	r1, r0
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	4658      	mov	r0, fp
 800d3aa:	f000 ffad 	bl	800e308 <__multiply>
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	9004      	str	r0, [sp, #16]
 800d3b2:	4658      	mov	r0, fp
 800d3b4:	f000 fe94 	bl	800e0e0 <_Bfree>
 800d3b8:	9b04      	ldr	r3, [sp, #16]
 800d3ba:	4699      	mov	r9, r3
 800d3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3be:	1b1a      	subs	r2, r3, r4
 800d3c0:	d004      	beq.n	800d3cc <_dtoa_r+0x78c>
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	f001 f849 	bl	800e45c <__pow5mult>
 800d3ca:	4681      	mov	r9, r0
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	4658      	mov	r0, fp
 800d3d0:	f000 ff84 	bl	800e2dc <__i2b>
 800d3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 81cf 	beq.w	800d77c <_dtoa_r+0xb3c>
 800d3de:	461a      	mov	r2, r3
 800d3e0:	4601      	mov	r1, r0
 800d3e2:	4658      	mov	r0, fp
 800d3e4:	f001 f83a 	bl	800e45c <__pow5mult>
 800d3e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	f300 8095 	bgt.w	800d51c <_dtoa_r+0x8dc>
 800d3f2:	9b02      	ldr	r3, [sp, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f040 8087 	bne.w	800d508 <_dtoa_r+0x8c8>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d400:	2b00      	cmp	r3, #0
 800d402:	f040 8089 	bne.w	800d518 <_dtoa_r+0x8d8>
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d40c:	0d1b      	lsrs	r3, r3, #20
 800d40e:	051b      	lsls	r3, r3, #20
 800d410:	b12b      	cbz	r3, 800d41e <_dtoa_r+0x7de>
 800d412:	9b08      	ldr	r3, [sp, #32]
 800d414:	3301      	adds	r3, #1
 800d416:	9308      	str	r3, [sp, #32]
 800d418:	f108 0801 	add.w	r8, r8, #1
 800d41c:	2301      	movs	r3, #1
 800d41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d422:	2b00      	cmp	r3, #0
 800d424:	f000 81b0 	beq.w	800d788 <_dtoa_r+0xb48>
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d42e:	6918      	ldr	r0, [r3, #16]
 800d430:	f000 ff08 	bl	800e244 <__hi0bits>
 800d434:	f1c0 0020 	rsb	r0, r0, #32
 800d438:	9b08      	ldr	r3, [sp, #32]
 800d43a:	4418      	add	r0, r3
 800d43c:	f010 001f 	ands.w	r0, r0, #31
 800d440:	d077      	beq.n	800d532 <_dtoa_r+0x8f2>
 800d442:	f1c0 0320 	rsb	r3, r0, #32
 800d446:	2b04      	cmp	r3, #4
 800d448:	dd6b      	ble.n	800d522 <_dtoa_r+0x8e2>
 800d44a:	9b08      	ldr	r3, [sp, #32]
 800d44c:	f1c0 001c 	rsb	r0, r0, #28
 800d450:	4403      	add	r3, r0
 800d452:	4480      	add	r8, r0
 800d454:	4406      	add	r6, r0
 800d456:	9308      	str	r3, [sp, #32]
 800d458:	f1b8 0f00 	cmp.w	r8, #0
 800d45c:	dd05      	ble.n	800d46a <_dtoa_r+0x82a>
 800d45e:	4649      	mov	r1, r9
 800d460:	4642      	mov	r2, r8
 800d462:	4658      	mov	r0, fp
 800d464:	f001 f854 	bl	800e510 <__lshift>
 800d468:	4681      	mov	r9, r0
 800d46a:	9b08      	ldr	r3, [sp, #32]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	dd05      	ble.n	800d47c <_dtoa_r+0x83c>
 800d470:	4621      	mov	r1, r4
 800d472:	461a      	mov	r2, r3
 800d474:	4658      	mov	r0, fp
 800d476:	f001 f84b 	bl	800e510 <__lshift>
 800d47a:	4604      	mov	r4, r0
 800d47c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d059      	beq.n	800d536 <_dtoa_r+0x8f6>
 800d482:	4621      	mov	r1, r4
 800d484:	4648      	mov	r0, r9
 800d486:	f001 f8af 	bl	800e5e8 <__mcmp>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	da53      	bge.n	800d536 <_dtoa_r+0x8f6>
 800d48e:	1e7b      	subs	r3, r7, #1
 800d490:	9304      	str	r3, [sp, #16]
 800d492:	4649      	mov	r1, r9
 800d494:	2300      	movs	r3, #0
 800d496:	220a      	movs	r2, #10
 800d498:	4658      	mov	r0, fp
 800d49a:	f000 fe43 	bl	800e124 <__multadd>
 800d49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4a0:	4681      	mov	r9, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 8172 	beq.w	800d78c <_dtoa_r+0xb4c>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	220a      	movs	r2, #10
 800d4ae:	4658      	mov	r0, fp
 800d4b0:	f000 fe38 	bl	800e124 <__multadd>
 800d4b4:	9b00      	ldr	r3, [sp, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	dc67      	bgt.n	800d58c <_dtoa_r+0x94c>
 800d4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	dc41      	bgt.n	800d546 <_dtoa_r+0x906>
 800d4c2:	e063      	b.n	800d58c <_dtoa_r+0x94c>
 800d4c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4ca:	e746      	b.n	800d35a <_dtoa_r+0x71a>
 800d4cc:	9b07      	ldr	r3, [sp, #28]
 800d4ce:	1e5c      	subs	r4, r3, #1
 800d4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4d2:	42a3      	cmp	r3, r4
 800d4d4:	bfbf      	itttt	lt
 800d4d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d4d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d4da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d4dc:	1ae3      	sublt	r3, r4, r3
 800d4de:	bfb4      	ite	lt
 800d4e0:	18d2      	addlt	r2, r2, r3
 800d4e2:	1b1c      	subge	r4, r3, r4
 800d4e4:	9b07      	ldr	r3, [sp, #28]
 800d4e6:	bfbc      	itt	lt
 800d4e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d4ea:	2400      	movlt	r4, #0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfb5      	itete	lt
 800d4f0:	eba8 0603 	sublt.w	r6, r8, r3
 800d4f4:	9b07      	ldrge	r3, [sp, #28]
 800d4f6:	2300      	movlt	r3, #0
 800d4f8:	4646      	movge	r6, r8
 800d4fa:	e730      	b.n	800d35e <_dtoa_r+0x71e>
 800d4fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d4fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d500:	4646      	mov	r6, r8
 800d502:	e735      	b.n	800d370 <_dtoa_r+0x730>
 800d504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d506:	e75c      	b.n	800d3c2 <_dtoa_r+0x782>
 800d508:	2300      	movs	r3, #0
 800d50a:	e788      	b.n	800d41e <_dtoa_r+0x7de>
 800d50c:	3fe00000 	.word	0x3fe00000
 800d510:	40240000 	.word	0x40240000
 800d514:	40140000 	.word	0x40140000
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	e780      	b.n	800d41e <_dtoa_r+0x7de>
 800d51c:	2300      	movs	r3, #0
 800d51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d520:	e782      	b.n	800d428 <_dtoa_r+0x7e8>
 800d522:	d099      	beq.n	800d458 <_dtoa_r+0x818>
 800d524:	9a08      	ldr	r2, [sp, #32]
 800d526:	331c      	adds	r3, #28
 800d528:	441a      	add	r2, r3
 800d52a:	4498      	add	r8, r3
 800d52c:	441e      	add	r6, r3
 800d52e:	9208      	str	r2, [sp, #32]
 800d530:	e792      	b.n	800d458 <_dtoa_r+0x818>
 800d532:	4603      	mov	r3, r0
 800d534:	e7f6      	b.n	800d524 <_dtoa_r+0x8e4>
 800d536:	9b07      	ldr	r3, [sp, #28]
 800d538:	9704      	str	r7, [sp, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	dc20      	bgt.n	800d580 <_dtoa_r+0x940>
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d542:	2b02      	cmp	r3, #2
 800d544:	dd1e      	ble.n	800d584 <_dtoa_r+0x944>
 800d546:	9b00      	ldr	r3, [sp, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f47f aec0 	bne.w	800d2ce <_dtoa_r+0x68e>
 800d54e:	4621      	mov	r1, r4
 800d550:	2205      	movs	r2, #5
 800d552:	4658      	mov	r0, fp
 800d554:	f000 fde6 	bl	800e124 <__multadd>
 800d558:	4601      	mov	r1, r0
 800d55a:	4604      	mov	r4, r0
 800d55c:	4648      	mov	r0, r9
 800d55e:	f001 f843 	bl	800e5e8 <__mcmp>
 800d562:	2800      	cmp	r0, #0
 800d564:	f77f aeb3 	ble.w	800d2ce <_dtoa_r+0x68e>
 800d568:	4656      	mov	r6, sl
 800d56a:	2331      	movs	r3, #49	@ 0x31
 800d56c:	f806 3b01 	strb.w	r3, [r6], #1
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	3301      	adds	r3, #1
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	e6ae      	b.n	800d2d6 <_dtoa_r+0x696>
 800d578:	9c07      	ldr	r4, [sp, #28]
 800d57a:	9704      	str	r7, [sp, #16]
 800d57c:	4625      	mov	r5, r4
 800d57e:	e7f3      	b.n	800d568 <_dtoa_r+0x928>
 800d580:	9b07      	ldr	r3, [sp, #28]
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d586:	2b00      	cmp	r3, #0
 800d588:	f000 8104 	beq.w	800d794 <_dtoa_r+0xb54>
 800d58c:	2e00      	cmp	r6, #0
 800d58e:	dd05      	ble.n	800d59c <_dtoa_r+0x95c>
 800d590:	4629      	mov	r1, r5
 800d592:	4632      	mov	r2, r6
 800d594:	4658      	mov	r0, fp
 800d596:	f000 ffbb 	bl	800e510 <__lshift>
 800d59a:	4605      	mov	r5, r0
 800d59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d05a      	beq.n	800d658 <_dtoa_r+0xa18>
 800d5a2:	6869      	ldr	r1, [r5, #4]
 800d5a4:	4658      	mov	r0, fp
 800d5a6:	f000 fd5b 	bl	800e060 <_Balloc>
 800d5aa:	4606      	mov	r6, r0
 800d5ac:	b928      	cbnz	r0, 800d5ba <_dtoa_r+0x97a>
 800d5ae:	4b84      	ldr	r3, [pc, #528]	@ (800d7c0 <_dtoa_r+0xb80>)
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5b6:	f7ff bb5a 	b.w	800cc6e <_dtoa_r+0x2e>
 800d5ba:	692a      	ldr	r2, [r5, #16]
 800d5bc:	3202      	adds	r2, #2
 800d5be:	0092      	lsls	r2, r2, #2
 800d5c0:	f105 010c 	add.w	r1, r5, #12
 800d5c4:	300c      	adds	r0, #12
 800d5c6:	f7ff fa78 	bl	800caba <memcpy>
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4658      	mov	r0, fp
 800d5d0:	f000 ff9e 	bl	800e510 <__lshift>
 800d5d4:	f10a 0301 	add.w	r3, sl, #1
 800d5d8:	9307      	str	r3, [sp, #28]
 800d5da:	9b00      	ldr	r3, [sp, #0]
 800d5dc:	4453      	add	r3, sl
 800d5de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5e0:	9b02      	ldr	r3, [sp, #8]
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	462f      	mov	r7, r5
 800d5e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	9b07      	ldr	r3, [sp, #28]
 800d5ee:	4621      	mov	r1, r4
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	4648      	mov	r0, r9
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	f7ff fa9b 	bl	800cb30 <quorem>
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	9002      	str	r0, [sp, #8]
 800d5fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d602:	4648      	mov	r0, r9
 800d604:	f000 fff0 	bl	800e5e8 <__mcmp>
 800d608:	462a      	mov	r2, r5
 800d60a:	9008      	str	r0, [sp, #32]
 800d60c:	4621      	mov	r1, r4
 800d60e:	4658      	mov	r0, fp
 800d610:	f001 f806 	bl	800e620 <__mdiff>
 800d614:	68c2      	ldr	r2, [r0, #12]
 800d616:	4606      	mov	r6, r0
 800d618:	bb02      	cbnz	r2, 800d65c <_dtoa_r+0xa1c>
 800d61a:	4601      	mov	r1, r0
 800d61c:	4648      	mov	r0, r9
 800d61e:	f000 ffe3 	bl	800e5e8 <__mcmp>
 800d622:	4602      	mov	r2, r0
 800d624:	4631      	mov	r1, r6
 800d626:	4658      	mov	r0, fp
 800d628:	920e      	str	r2, [sp, #56]	@ 0x38
 800d62a:	f000 fd59 	bl	800e0e0 <_Bfree>
 800d62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d632:	9e07      	ldr	r6, [sp, #28]
 800d634:	ea43 0102 	orr.w	r1, r3, r2
 800d638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d63a:	4319      	orrs	r1, r3
 800d63c:	d110      	bne.n	800d660 <_dtoa_r+0xa20>
 800d63e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d642:	d029      	beq.n	800d698 <_dtoa_r+0xa58>
 800d644:	9b08      	ldr	r3, [sp, #32]
 800d646:	2b00      	cmp	r3, #0
 800d648:	dd02      	ble.n	800d650 <_dtoa_r+0xa10>
 800d64a:	9b02      	ldr	r3, [sp, #8]
 800d64c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d650:	9b00      	ldr	r3, [sp, #0]
 800d652:	f883 8000 	strb.w	r8, [r3]
 800d656:	e63f      	b.n	800d2d8 <_dtoa_r+0x698>
 800d658:	4628      	mov	r0, r5
 800d65a:	e7bb      	b.n	800d5d4 <_dtoa_r+0x994>
 800d65c:	2201      	movs	r2, #1
 800d65e:	e7e1      	b.n	800d624 <_dtoa_r+0x9e4>
 800d660:	9b08      	ldr	r3, [sp, #32]
 800d662:	2b00      	cmp	r3, #0
 800d664:	db04      	blt.n	800d670 <_dtoa_r+0xa30>
 800d666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d668:	430b      	orrs	r3, r1
 800d66a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d66c:	430b      	orrs	r3, r1
 800d66e:	d120      	bne.n	800d6b2 <_dtoa_r+0xa72>
 800d670:	2a00      	cmp	r2, #0
 800d672:	dded      	ble.n	800d650 <_dtoa_r+0xa10>
 800d674:	4649      	mov	r1, r9
 800d676:	2201      	movs	r2, #1
 800d678:	4658      	mov	r0, fp
 800d67a:	f000 ff49 	bl	800e510 <__lshift>
 800d67e:	4621      	mov	r1, r4
 800d680:	4681      	mov	r9, r0
 800d682:	f000 ffb1 	bl	800e5e8 <__mcmp>
 800d686:	2800      	cmp	r0, #0
 800d688:	dc03      	bgt.n	800d692 <_dtoa_r+0xa52>
 800d68a:	d1e1      	bne.n	800d650 <_dtoa_r+0xa10>
 800d68c:	f018 0f01 	tst.w	r8, #1
 800d690:	d0de      	beq.n	800d650 <_dtoa_r+0xa10>
 800d692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d696:	d1d8      	bne.n	800d64a <_dtoa_r+0xa0a>
 800d698:	9a00      	ldr	r2, [sp, #0]
 800d69a:	2339      	movs	r3, #57	@ 0x39
 800d69c:	7013      	strb	r3, [r2, #0]
 800d69e:	4633      	mov	r3, r6
 800d6a0:	461e      	mov	r6, r3
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6a8:	2a39      	cmp	r2, #57	@ 0x39
 800d6aa:	d052      	beq.n	800d752 <_dtoa_r+0xb12>
 800d6ac:	3201      	adds	r2, #1
 800d6ae:	701a      	strb	r2, [r3, #0]
 800d6b0:	e612      	b.n	800d2d8 <_dtoa_r+0x698>
 800d6b2:	2a00      	cmp	r2, #0
 800d6b4:	dd07      	ble.n	800d6c6 <_dtoa_r+0xa86>
 800d6b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6ba:	d0ed      	beq.n	800d698 <_dtoa_r+0xa58>
 800d6bc:	9a00      	ldr	r2, [sp, #0]
 800d6be:	f108 0301 	add.w	r3, r8, #1
 800d6c2:	7013      	strb	r3, [r2, #0]
 800d6c4:	e608      	b.n	800d2d8 <_dtoa_r+0x698>
 800d6c6:	9b07      	ldr	r3, [sp, #28]
 800d6c8:	9a07      	ldr	r2, [sp, #28]
 800d6ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d028      	beq.n	800d726 <_dtoa_r+0xae6>
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	220a      	movs	r2, #10
 800d6da:	4658      	mov	r0, fp
 800d6dc:	f000 fd22 	bl	800e124 <__multadd>
 800d6e0:	42af      	cmp	r7, r5
 800d6e2:	4681      	mov	r9, r0
 800d6e4:	f04f 0300 	mov.w	r3, #0
 800d6e8:	f04f 020a 	mov.w	r2, #10
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	4658      	mov	r0, fp
 800d6f0:	d107      	bne.n	800d702 <_dtoa_r+0xac2>
 800d6f2:	f000 fd17 	bl	800e124 <__multadd>
 800d6f6:	4607      	mov	r7, r0
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	9b07      	ldr	r3, [sp, #28]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	9307      	str	r3, [sp, #28]
 800d700:	e774      	b.n	800d5ec <_dtoa_r+0x9ac>
 800d702:	f000 fd0f 	bl	800e124 <__multadd>
 800d706:	4629      	mov	r1, r5
 800d708:	4607      	mov	r7, r0
 800d70a:	2300      	movs	r3, #0
 800d70c:	220a      	movs	r2, #10
 800d70e:	4658      	mov	r0, fp
 800d710:	f000 fd08 	bl	800e124 <__multadd>
 800d714:	4605      	mov	r5, r0
 800d716:	e7f0      	b.n	800d6fa <_dtoa_r+0xaba>
 800d718:	9b00      	ldr	r3, [sp, #0]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	bfcc      	ite	gt
 800d71e:	461e      	movgt	r6, r3
 800d720:	2601      	movle	r6, #1
 800d722:	4456      	add	r6, sl
 800d724:	2700      	movs	r7, #0
 800d726:	4649      	mov	r1, r9
 800d728:	2201      	movs	r2, #1
 800d72a:	4658      	mov	r0, fp
 800d72c:	f000 fef0 	bl	800e510 <__lshift>
 800d730:	4621      	mov	r1, r4
 800d732:	4681      	mov	r9, r0
 800d734:	f000 ff58 	bl	800e5e8 <__mcmp>
 800d738:	2800      	cmp	r0, #0
 800d73a:	dcb0      	bgt.n	800d69e <_dtoa_r+0xa5e>
 800d73c:	d102      	bne.n	800d744 <_dtoa_r+0xb04>
 800d73e:	f018 0f01 	tst.w	r8, #1
 800d742:	d1ac      	bne.n	800d69e <_dtoa_r+0xa5e>
 800d744:	4633      	mov	r3, r6
 800d746:	461e      	mov	r6, r3
 800d748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d74c:	2a30      	cmp	r2, #48	@ 0x30
 800d74e:	d0fa      	beq.n	800d746 <_dtoa_r+0xb06>
 800d750:	e5c2      	b.n	800d2d8 <_dtoa_r+0x698>
 800d752:	459a      	cmp	sl, r3
 800d754:	d1a4      	bne.n	800d6a0 <_dtoa_r+0xa60>
 800d756:	9b04      	ldr	r3, [sp, #16]
 800d758:	3301      	adds	r3, #1
 800d75a:	9304      	str	r3, [sp, #16]
 800d75c:	2331      	movs	r3, #49	@ 0x31
 800d75e:	f88a 3000 	strb.w	r3, [sl]
 800d762:	e5b9      	b.n	800d2d8 <_dtoa_r+0x698>
 800d764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d7c4 <_dtoa_r+0xb84>
 800d76a:	b11b      	cbz	r3, 800d774 <_dtoa_r+0xb34>
 800d76c:	f10a 0308 	add.w	r3, sl, #8
 800d770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	4650      	mov	r0, sl
 800d776:	b019      	add	sp, #100	@ 0x64
 800d778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d77e:	2b01      	cmp	r3, #1
 800d780:	f77f ae37 	ble.w	800d3f2 <_dtoa_r+0x7b2>
 800d784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d786:	930a      	str	r3, [sp, #40]	@ 0x28
 800d788:	2001      	movs	r0, #1
 800d78a:	e655      	b.n	800d438 <_dtoa_r+0x7f8>
 800d78c:	9b00      	ldr	r3, [sp, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f77f aed6 	ble.w	800d540 <_dtoa_r+0x900>
 800d794:	4656      	mov	r6, sl
 800d796:	4621      	mov	r1, r4
 800d798:	4648      	mov	r0, r9
 800d79a:	f7ff f9c9 	bl	800cb30 <quorem>
 800d79e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d7a2:	f806 8b01 	strb.w	r8, [r6], #1
 800d7a6:	9b00      	ldr	r3, [sp, #0]
 800d7a8:	eba6 020a 	sub.w	r2, r6, sl
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	ddb3      	ble.n	800d718 <_dtoa_r+0xad8>
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	220a      	movs	r2, #10
 800d7b6:	4658      	mov	r0, fp
 800d7b8:	f000 fcb4 	bl	800e124 <__multadd>
 800d7bc:	4681      	mov	r9, r0
 800d7be:	e7ea      	b.n	800d796 <_dtoa_r+0xb56>
 800d7c0:	08010d63 	.word	0x08010d63
 800d7c4:	08010cfe 	.word	0x08010cfe

0800d7c8 <_free_r>:
 800d7c8:	b538      	push	{r3, r4, r5, lr}
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	2900      	cmp	r1, #0
 800d7ce:	d041      	beq.n	800d854 <_free_r+0x8c>
 800d7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d4:	1f0c      	subs	r4, r1, #4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfb8      	it	lt
 800d7da:	18e4      	addlt	r4, r4, r3
 800d7dc:	f000 fc34 	bl	800e048 <__malloc_lock>
 800d7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d858 <_free_r+0x90>)
 800d7e2:	6813      	ldr	r3, [r2, #0]
 800d7e4:	b933      	cbnz	r3, 800d7f4 <_free_r+0x2c>
 800d7e6:	6063      	str	r3, [r4, #4]
 800d7e8:	6014      	str	r4, [r2, #0]
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f0:	f000 bc30 	b.w	800e054 <__malloc_unlock>
 800d7f4:	42a3      	cmp	r3, r4
 800d7f6:	d908      	bls.n	800d80a <_free_r+0x42>
 800d7f8:	6820      	ldr	r0, [r4, #0]
 800d7fa:	1821      	adds	r1, r4, r0
 800d7fc:	428b      	cmp	r3, r1
 800d7fe:	bf01      	itttt	eq
 800d800:	6819      	ldreq	r1, [r3, #0]
 800d802:	685b      	ldreq	r3, [r3, #4]
 800d804:	1809      	addeq	r1, r1, r0
 800d806:	6021      	streq	r1, [r4, #0]
 800d808:	e7ed      	b.n	800d7e6 <_free_r+0x1e>
 800d80a:	461a      	mov	r2, r3
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	b10b      	cbz	r3, 800d814 <_free_r+0x4c>
 800d810:	42a3      	cmp	r3, r4
 800d812:	d9fa      	bls.n	800d80a <_free_r+0x42>
 800d814:	6811      	ldr	r1, [r2, #0]
 800d816:	1850      	adds	r0, r2, r1
 800d818:	42a0      	cmp	r0, r4
 800d81a:	d10b      	bne.n	800d834 <_free_r+0x6c>
 800d81c:	6820      	ldr	r0, [r4, #0]
 800d81e:	4401      	add	r1, r0
 800d820:	1850      	adds	r0, r2, r1
 800d822:	4283      	cmp	r3, r0
 800d824:	6011      	str	r1, [r2, #0]
 800d826:	d1e0      	bne.n	800d7ea <_free_r+0x22>
 800d828:	6818      	ldr	r0, [r3, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	6053      	str	r3, [r2, #4]
 800d82e:	4408      	add	r0, r1
 800d830:	6010      	str	r0, [r2, #0]
 800d832:	e7da      	b.n	800d7ea <_free_r+0x22>
 800d834:	d902      	bls.n	800d83c <_free_r+0x74>
 800d836:	230c      	movs	r3, #12
 800d838:	602b      	str	r3, [r5, #0]
 800d83a:	e7d6      	b.n	800d7ea <_free_r+0x22>
 800d83c:	6820      	ldr	r0, [r4, #0]
 800d83e:	1821      	adds	r1, r4, r0
 800d840:	428b      	cmp	r3, r1
 800d842:	bf04      	itt	eq
 800d844:	6819      	ldreq	r1, [r3, #0]
 800d846:	685b      	ldreq	r3, [r3, #4]
 800d848:	6063      	str	r3, [r4, #4]
 800d84a:	bf04      	itt	eq
 800d84c:	1809      	addeq	r1, r1, r0
 800d84e:	6021      	streq	r1, [r4, #0]
 800d850:	6054      	str	r4, [r2, #4]
 800d852:	e7ca      	b.n	800d7ea <_free_r+0x22>
 800d854:	bd38      	pop	{r3, r4, r5, pc}
 800d856:	bf00      	nop
 800d858:	20000bd4 	.word	0x20000bd4

0800d85c <rshift>:
 800d85c:	6903      	ldr	r3, [r0, #16]
 800d85e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d866:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d86a:	f100 0414 	add.w	r4, r0, #20
 800d86e:	dd45      	ble.n	800d8fc <rshift+0xa0>
 800d870:	f011 011f 	ands.w	r1, r1, #31
 800d874:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d878:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d87c:	d10c      	bne.n	800d898 <rshift+0x3c>
 800d87e:	f100 0710 	add.w	r7, r0, #16
 800d882:	4629      	mov	r1, r5
 800d884:	42b1      	cmp	r1, r6
 800d886:	d334      	bcc.n	800d8f2 <rshift+0x96>
 800d888:	1a9b      	subs	r3, r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	1eea      	subs	r2, r5, #3
 800d88e:	4296      	cmp	r6, r2
 800d890:	bf38      	it	cc
 800d892:	2300      	movcc	r3, #0
 800d894:	4423      	add	r3, r4
 800d896:	e015      	b.n	800d8c4 <rshift+0x68>
 800d898:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d89c:	f1c1 0820 	rsb	r8, r1, #32
 800d8a0:	40cf      	lsrs	r7, r1
 800d8a2:	f105 0e04 	add.w	lr, r5, #4
 800d8a6:	46a1      	mov	r9, r4
 800d8a8:	4576      	cmp	r6, lr
 800d8aa:	46f4      	mov	ip, lr
 800d8ac:	d815      	bhi.n	800d8da <rshift+0x7e>
 800d8ae:	1a9a      	subs	r2, r3, r2
 800d8b0:	0092      	lsls	r2, r2, #2
 800d8b2:	3a04      	subs	r2, #4
 800d8b4:	3501      	adds	r5, #1
 800d8b6:	42ae      	cmp	r6, r5
 800d8b8:	bf38      	it	cc
 800d8ba:	2200      	movcc	r2, #0
 800d8bc:	18a3      	adds	r3, r4, r2
 800d8be:	50a7      	str	r7, [r4, r2]
 800d8c0:	b107      	cbz	r7, 800d8c4 <rshift+0x68>
 800d8c2:	3304      	adds	r3, #4
 800d8c4:	1b1a      	subs	r2, r3, r4
 800d8c6:	42a3      	cmp	r3, r4
 800d8c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8cc:	bf08      	it	eq
 800d8ce:	2300      	moveq	r3, #0
 800d8d0:	6102      	str	r2, [r0, #16]
 800d8d2:	bf08      	it	eq
 800d8d4:	6143      	streq	r3, [r0, #20]
 800d8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8da:	f8dc c000 	ldr.w	ip, [ip]
 800d8de:	fa0c fc08 	lsl.w	ip, ip, r8
 800d8e2:	ea4c 0707 	orr.w	r7, ip, r7
 800d8e6:	f849 7b04 	str.w	r7, [r9], #4
 800d8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8ee:	40cf      	lsrs	r7, r1
 800d8f0:	e7da      	b.n	800d8a8 <rshift+0x4c>
 800d8f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8fa:	e7c3      	b.n	800d884 <rshift+0x28>
 800d8fc:	4623      	mov	r3, r4
 800d8fe:	e7e1      	b.n	800d8c4 <rshift+0x68>

0800d900 <__hexdig_fun>:
 800d900:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d904:	2b09      	cmp	r3, #9
 800d906:	d802      	bhi.n	800d90e <__hexdig_fun+0xe>
 800d908:	3820      	subs	r0, #32
 800d90a:	b2c0      	uxtb	r0, r0
 800d90c:	4770      	bx	lr
 800d90e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d912:	2b05      	cmp	r3, #5
 800d914:	d801      	bhi.n	800d91a <__hexdig_fun+0x1a>
 800d916:	3847      	subs	r0, #71	@ 0x47
 800d918:	e7f7      	b.n	800d90a <__hexdig_fun+0xa>
 800d91a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d91e:	2b05      	cmp	r3, #5
 800d920:	d801      	bhi.n	800d926 <__hexdig_fun+0x26>
 800d922:	3827      	subs	r0, #39	@ 0x27
 800d924:	e7f1      	b.n	800d90a <__hexdig_fun+0xa>
 800d926:	2000      	movs	r0, #0
 800d928:	4770      	bx	lr
	...

0800d92c <__gethex>:
 800d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	b085      	sub	sp, #20
 800d932:	468a      	mov	sl, r1
 800d934:	9302      	str	r3, [sp, #8]
 800d936:	680b      	ldr	r3, [r1, #0]
 800d938:	9001      	str	r0, [sp, #4]
 800d93a:	4690      	mov	r8, r2
 800d93c:	1c9c      	adds	r4, r3, #2
 800d93e:	46a1      	mov	r9, r4
 800d940:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d944:	2830      	cmp	r0, #48	@ 0x30
 800d946:	d0fa      	beq.n	800d93e <__gethex+0x12>
 800d948:	eba9 0303 	sub.w	r3, r9, r3
 800d94c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d950:	f7ff ffd6 	bl	800d900 <__hexdig_fun>
 800d954:	4605      	mov	r5, r0
 800d956:	2800      	cmp	r0, #0
 800d958:	d168      	bne.n	800da2c <__gethex+0x100>
 800d95a:	49a0      	ldr	r1, [pc, #640]	@ (800dbdc <__gethex+0x2b0>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	4648      	mov	r0, r9
 800d960:	f7fe ffc6 	bl	800c8f0 <strncmp>
 800d964:	4607      	mov	r7, r0
 800d966:	2800      	cmp	r0, #0
 800d968:	d167      	bne.n	800da3a <__gethex+0x10e>
 800d96a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d96e:	4626      	mov	r6, r4
 800d970:	f7ff ffc6 	bl	800d900 <__hexdig_fun>
 800d974:	2800      	cmp	r0, #0
 800d976:	d062      	beq.n	800da3e <__gethex+0x112>
 800d978:	4623      	mov	r3, r4
 800d97a:	7818      	ldrb	r0, [r3, #0]
 800d97c:	2830      	cmp	r0, #48	@ 0x30
 800d97e:	4699      	mov	r9, r3
 800d980:	f103 0301 	add.w	r3, r3, #1
 800d984:	d0f9      	beq.n	800d97a <__gethex+0x4e>
 800d986:	f7ff ffbb 	bl	800d900 <__hexdig_fun>
 800d98a:	fab0 f580 	clz	r5, r0
 800d98e:	096d      	lsrs	r5, r5, #5
 800d990:	f04f 0b01 	mov.w	fp, #1
 800d994:	464a      	mov	r2, r9
 800d996:	4616      	mov	r6, r2
 800d998:	3201      	adds	r2, #1
 800d99a:	7830      	ldrb	r0, [r6, #0]
 800d99c:	f7ff ffb0 	bl	800d900 <__hexdig_fun>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d1f8      	bne.n	800d996 <__gethex+0x6a>
 800d9a4:	498d      	ldr	r1, [pc, #564]	@ (800dbdc <__gethex+0x2b0>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f7fe ffa1 	bl	800c8f0 <strncmp>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	d13f      	bne.n	800da32 <__gethex+0x106>
 800d9b2:	b944      	cbnz	r4, 800d9c6 <__gethex+0x9a>
 800d9b4:	1c74      	adds	r4, r6, #1
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	3201      	adds	r2, #1
 800d9bc:	7830      	ldrb	r0, [r6, #0]
 800d9be:	f7ff ff9f 	bl	800d900 <__hexdig_fun>
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d1f8      	bne.n	800d9b8 <__gethex+0x8c>
 800d9c6:	1ba4      	subs	r4, r4, r6
 800d9c8:	00a7      	lsls	r7, r4, #2
 800d9ca:	7833      	ldrb	r3, [r6, #0]
 800d9cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d9d0:	2b50      	cmp	r3, #80	@ 0x50
 800d9d2:	d13e      	bne.n	800da52 <__gethex+0x126>
 800d9d4:	7873      	ldrb	r3, [r6, #1]
 800d9d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800d9d8:	d033      	beq.n	800da42 <__gethex+0x116>
 800d9da:	2b2d      	cmp	r3, #45	@ 0x2d
 800d9dc:	d034      	beq.n	800da48 <__gethex+0x11c>
 800d9de:	1c71      	adds	r1, r6, #1
 800d9e0:	2400      	movs	r4, #0
 800d9e2:	7808      	ldrb	r0, [r1, #0]
 800d9e4:	f7ff ff8c 	bl	800d900 <__hexdig_fun>
 800d9e8:	1e43      	subs	r3, r0, #1
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b18      	cmp	r3, #24
 800d9ee:	d830      	bhi.n	800da52 <__gethex+0x126>
 800d9f0:	f1a0 0210 	sub.w	r2, r0, #16
 800d9f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9f8:	f7ff ff82 	bl	800d900 <__hexdig_fun>
 800d9fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800da00:	fa5f fc8c 	uxtb.w	ip, ip
 800da04:	f1bc 0f18 	cmp.w	ip, #24
 800da08:	f04f 030a 	mov.w	r3, #10
 800da0c:	d91e      	bls.n	800da4c <__gethex+0x120>
 800da0e:	b104      	cbz	r4, 800da12 <__gethex+0xe6>
 800da10:	4252      	negs	r2, r2
 800da12:	4417      	add	r7, r2
 800da14:	f8ca 1000 	str.w	r1, [sl]
 800da18:	b1ed      	cbz	r5, 800da56 <__gethex+0x12a>
 800da1a:	f1bb 0f00 	cmp.w	fp, #0
 800da1e:	bf0c      	ite	eq
 800da20:	2506      	moveq	r5, #6
 800da22:	2500      	movne	r5, #0
 800da24:	4628      	mov	r0, r5
 800da26:	b005      	add	sp, #20
 800da28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2c:	2500      	movs	r5, #0
 800da2e:	462c      	mov	r4, r5
 800da30:	e7b0      	b.n	800d994 <__gethex+0x68>
 800da32:	2c00      	cmp	r4, #0
 800da34:	d1c7      	bne.n	800d9c6 <__gethex+0x9a>
 800da36:	4627      	mov	r7, r4
 800da38:	e7c7      	b.n	800d9ca <__gethex+0x9e>
 800da3a:	464e      	mov	r6, r9
 800da3c:	462f      	mov	r7, r5
 800da3e:	2501      	movs	r5, #1
 800da40:	e7c3      	b.n	800d9ca <__gethex+0x9e>
 800da42:	2400      	movs	r4, #0
 800da44:	1cb1      	adds	r1, r6, #2
 800da46:	e7cc      	b.n	800d9e2 <__gethex+0xb6>
 800da48:	2401      	movs	r4, #1
 800da4a:	e7fb      	b.n	800da44 <__gethex+0x118>
 800da4c:	fb03 0002 	mla	r0, r3, r2, r0
 800da50:	e7ce      	b.n	800d9f0 <__gethex+0xc4>
 800da52:	4631      	mov	r1, r6
 800da54:	e7de      	b.n	800da14 <__gethex+0xe8>
 800da56:	eba6 0309 	sub.w	r3, r6, r9
 800da5a:	3b01      	subs	r3, #1
 800da5c:	4629      	mov	r1, r5
 800da5e:	2b07      	cmp	r3, #7
 800da60:	dc0a      	bgt.n	800da78 <__gethex+0x14c>
 800da62:	9801      	ldr	r0, [sp, #4]
 800da64:	f000 fafc 	bl	800e060 <_Balloc>
 800da68:	4604      	mov	r4, r0
 800da6a:	b940      	cbnz	r0, 800da7e <__gethex+0x152>
 800da6c:	4b5c      	ldr	r3, [pc, #368]	@ (800dbe0 <__gethex+0x2b4>)
 800da6e:	4602      	mov	r2, r0
 800da70:	21e4      	movs	r1, #228	@ 0xe4
 800da72:	485c      	ldr	r0, [pc, #368]	@ (800dbe4 <__gethex+0x2b8>)
 800da74:	f7ff f83e 	bl	800caf4 <__assert_func>
 800da78:	3101      	adds	r1, #1
 800da7a:	105b      	asrs	r3, r3, #1
 800da7c:	e7ef      	b.n	800da5e <__gethex+0x132>
 800da7e:	f100 0a14 	add.w	sl, r0, #20
 800da82:	2300      	movs	r3, #0
 800da84:	4655      	mov	r5, sl
 800da86:	469b      	mov	fp, r3
 800da88:	45b1      	cmp	r9, r6
 800da8a:	d337      	bcc.n	800dafc <__gethex+0x1d0>
 800da8c:	f845 bb04 	str.w	fp, [r5], #4
 800da90:	eba5 050a 	sub.w	r5, r5, sl
 800da94:	10ad      	asrs	r5, r5, #2
 800da96:	6125      	str	r5, [r4, #16]
 800da98:	4658      	mov	r0, fp
 800da9a:	f000 fbd3 	bl	800e244 <__hi0bits>
 800da9e:	016d      	lsls	r5, r5, #5
 800daa0:	f8d8 6000 	ldr.w	r6, [r8]
 800daa4:	1a2d      	subs	r5, r5, r0
 800daa6:	42b5      	cmp	r5, r6
 800daa8:	dd54      	ble.n	800db54 <__gethex+0x228>
 800daaa:	1bad      	subs	r5, r5, r6
 800daac:	4629      	mov	r1, r5
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 ff67 	bl	800e982 <__any_on>
 800dab4:	4681      	mov	r9, r0
 800dab6:	b178      	cbz	r0, 800dad8 <__gethex+0x1ac>
 800dab8:	1e6b      	subs	r3, r5, #1
 800daba:	1159      	asrs	r1, r3, #5
 800dabc:	f003 021f 	and.w	r2, r3, #31
 800dac0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dac4:	f04f 0901 	mov.w	r9, #1
 800dac8:	fa09 f202 	lsl.w	r2, r9, r2
 800dacc:	420a      	tst	r2, r1
 800dace:	d003      	beq.n	800dad8 <__gethex+0x1ac>
 800dad0:	454b      	cmp	r3, r9
 800dad2:	dc36      	bgt.n	800db42 <__gethex+0x216>
 800dad4:	f04f 0902 	mov.w	r9, #2
 800dad8:	4629      	mov	r1, r5
 800dada:	4620      	mov	r0, r4
 800dadc:	f7ff febe 	bl	800d85c <rshift>
 800dae0:	442f      	add	r7, r5
 800dae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dae6:	42bb      	cmp	r3, r7
 800dae8:	da42      	bge.n	800db70 <__gethex+0x244>
 800daea:	9801      	ldr	r0, [sp, #4]
 800daec:	4621      	mov	r1, r4
 800daee:	f000 faf7 	bl	800e0e0 <_Bfree>
 800daf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800daf4:	2300      	movs	r3, #0
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	25a3      	movs	r5, #163	@ 0xa3
 800dafa:	e793      	b.n	800da24 <__gethex+0xf8>
 800dafc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db00:	2a2e      	cmp	r2, #46	@ 0x2e
 800db02:	d012      	beq.n	800db2a <__gethex+0x1fe>
 800db04:	2b20      	cmp	r3, #32
 800db06:	d104      	bne.n	800db12 <__gethex+0x1e6>
 800db08:	f845 bb04 	str.w	fp, [r5], #4
 800db0c:	f04f 0b00 	mov.w	fp, #0
 800db10:	465b      	mov	r3, fp
 800db12:	7830      	ldrb	r0, [r6, #0]
 800db14:	9303      	str	r3, [sp, #12]
 800db16:	f7ff fef3 	bl	800d900 <__hexdig_fun>
 800db1a:	9b03      	ldr	r3, [sp, #12]
 800db1c:	f000 000f 	and.w	r0, r0, #15
 800db20:	4098      	lsls	r0, r3
 800db22:	ea4b 0b00 	orr.w	fp, fp, r0
 800db26:	3304      	adds	r3, #4
 800db28:	e7ae      	b.n	800da88 <__gethex+0x15c>
 800db2a:	45b1      	cmp	r9, r6
 800db2c:	d8ea      	bhi.n	800db04 <__gethex+0x1d8>
 800db2e:	492b      	ldr	r1, [pc, #172]	@ (800dbdc <__gethex+0x2b0>)
 800db30:	9303      	str	r3, [sp, #12]
 800db32:	2201      	movs	r2, #1
 800db34:	4630      	mov	r0, r6
 800db36:	f7fe fedb 	bl	800c8f0 <strncmp>
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d1e1      	bne.n	800db04 <__gethex+0x1d8>
 800db40:	e7a2      	b.n	800da88 <__gethex+0x15c>
 800db42:	1ea9      	subs	r1, r5, #2
 800db44:	4620      	mov	r0, r4
 800db46:	f000 ff1c 	bl	800e982 <__any_on>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d0c2      	beq.n	800dad4 <__gethex+0x1a8>
 800db4e:	f04f 0903 	mov.w	r9, #3
 800db52:	e7c1      	b.n	800dad8 <__gethex+0x1ac>
 800db54:	da09      	bge.n	800db6a <__gethex+0x23e>
 800db56:	1b75      	subs	r5, r6, r5
 800db58:	4621      	mov	r1, r4
 800db5a:	9801      	ldr	r0, [sp, #4]
 800db5c:	462a      	mov	r2, r5
 800db5e:	f000 fcd7 	bl	800e510 <__lshift>
 800db62:	1b7f      	subs	r7, r7, r5
 800db64:	4604      	mov	r4, r0
 800db66:	f100 0a14 	add.w	sl, r0, #20
 800db6a:	f04f 0900 	mov.w	r9, #0
 800db6e:	e7b8      	b.n	800dae2 <__gethex+0x1b6>
 800db70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db74:	42bd      	cmp	r5, r7
 800db76:	dd6f      	ble.n	800dc58 <__gethex+0x32c>
 800db78:	1bed      	subs	r5, r5, r7
 800db7a:	42ae      	cmp	r6, r5
 800db7c:	dc34      	bgt.n	800dbe8 <__gethex+0x2bc>
 800db7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db82:	2b02      	cmp	r3, #2
 800db84:	d022      	beq.n	800dbcc <__gethex+0x2a0>
 800db86:	2b03      	cmp	r3, #3
 800db88:	d024      	beq.n	800dbd4 <__gethex+0x2a8>
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d115      	bne.n	800dbba <__gethex+0x28e>
 800db8e:	42ae      	cmp	r6, r5
 800db90:	d113      	bne.n	800dbba <__gethex+0x28e>
 800db92:	2e01      	cmp	r6, #1
 800db94:	d10b      	bne.n	800dbae <__gethex+0x282>
 800db96:	9a02      	ldr	r2, [sp, #8]
 800db98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	2301      	movs	r3, #1
 800dba0:	6123      	str	r3, [r4, #16]
 800dba2:	f8ca 3000 	str.w	r3, [sl]
 800dba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dba8:	2562      	movs	r5, #98	@ 0x62
 800dbaa:	601c      	str	r4, [r3, #0]
 800dbac:	e73a      	b.n	800da24 <__gethex+0xf8>
 800dbae:	1e71      	subs	r1, r6, #1
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 fee6 	bl	800e982 <__any_on>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d1ed      	bne.n	800db96 <__gethex+0x26a>
 800dbba:	9801      	ldr	r0, [sp, #4]
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	f000 fa8f 	bl	800e0e0 <_Bfree>
 800dbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	2550      	movs	r5, #80	@ 0x50
 800dbca:	e72b      	b.n	800da24 <__gethex+0xf8>
 800dbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1f3      	bne.n	800dbba <__gethex+0x28e>
 800dbd2:	e7e0      	b.n	800db96 <__gethex+0x26a>
 800dbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1dd      	bne.n	800db96 <__gethex+0x26a>
 800dbda:	e7ee      	b.n	800dbba <__gethex+0x28e>
 800dbdc:	08010bb8 	.word	0x08010bb8
 800dbe0:	08010d63 	.word	0x08010d63
 800dbe4:	08010d74 	.word	0x08010d74
 800dbe8:	1e6f      	subs	r7, r5, #1
 800dbea:	f1b9 0f00 	cmp.w	r9, #0
 800dbee:	d130      	bne.n	800dc52 <__gethex+0x326>
 800dbf0:	b127      	cbz	r7, 800dbfc <__gethex+0x2d0>
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 fec4 	bl	800e982 <__any_on>
 800dbfa:	4681      	mov	r9, r0
 800dbfc:	117a      	asrs	r2, r7, #5
 800dbfe:	2301      	movs	r3, #1
 800dc00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc04:	f007 071f 	and.w	r7, r7, #31
 800dc08:	40bb      	lsls	r3, r7
 800dc0a:	4213      	tst	r3, r2
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4620      	mov	r0, r4
 800dc10:	bf18      	it	ne
 800dc12:	f049 0902 	orrne.w	r9, r9, #2
 800dc16:	f7ff fe21 	bl	800d85c <rshift>
 800dc1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dc1e:	1b76      	subs	r6, r6, r5
 800dc20:	2502      	movs	r5, #2
 800dc22:	f1b9 0f00 	cmp.w	r9, #0
 800dc26:	d047      	beq.n	800dcb8 <__gethex+0x38c>
 800dc28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d015      	beq.n	800dc5c <__gethex+0x330>
 800dc30:	2b03      	cmp	r3, #3
 800dc32:	d017      	beq.n	800dc64 <__gethex+0x338>
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d109      	bne.n	800dc4c <__gethex+0x320>
 800dc38:	f019 0f02 	tst.w	r9, #2
 800dc3c:	d006      	beq.n	800dc4c <__gethex+0x320>
 800dc3e:	f8da 3000 	ldr.w	r3, [sl]
 800dc42:	ea49 0903 	orr.w	r9, r9, r3
 800dc46:	f019 0f01 	tst.w	r9, #1
 800dc4a:	d10e      	bne.n	800dc6a <__gethex+0x33e>
 800dc4c:	f045 0510 	orr.w	r5, r5, #16
 800dc50:	e032      	b.n	800dcb8 <__gethex+0x38c>
 800dc52:	f04f 0901 	mov.w	r9, #1
 800dc56:	e7d1      	b.n	800dbfc <__gethex+0x2d0>
 800dc58:	2501      	movs	r5, #1
 800dc5a:	e7e2      	b.n	800dc22 <__gethex+0x2f6>
 800dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5e:	f1c3 0301 	rsb	r3, r3, #1
 800dc62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0f0      	beq.n	800dc4c <__gethex+0x320>
 800dc6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc6e:	f104 0314 	add.w	r3, r4, #20
 800dc72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc7a:	f04f 0c00 	mov.w	ip, #0
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc88:	d01b      	beq.n	800dcc2 <__gethex+0x396>
 800dc8a:	3201      	adds	r2, #1
 800dc8c:	6002      	str	r2, [r0, #0]
 800dc8e:	2d02      	cmp	r5, #2
 800dc90:	f104 0314 	add.w	r3, r4, #20
 800dc94:	d13c      	bne.n	800dd10 <__gethex+0x3e4>
 800dc96:	f8d8 2000 	ldr.w	r2, [r8]
 800dc9a:	3a01      	subs	r2, #1
 800dc9c:	42b2      	cmp	r2, r6
 800dc9e:	d109      	bne.n	800dcb4 <__gethex+0x388>
 800dca0:	1171      	asrs	r1, r6, #5
 800dca2:	2201      	movs	r2, #1
 800dca4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dca8:	f006 061f 	and.w	r6, r6, #31
 800dcac:	fa02 f606 	lsl.w	r6, r2, r6
 800dcb0:	421e      	tst	r6, r3
 800dcb2:	d13a      	bne.n	800dd2a <__gethex+0x3fe>
 800dcb4:	f045 0520 	orr.w	r5, r5, #32
 800dcb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcba:	601c      	str	r4, [r3, #0]
 800dcbc:	9b02      	ldr	r3, [sp, #8]
 800dcbe:	601f      	str	r7, [r3, #0]
 800dcc0:	e6b0      	b.n	800da24 <__gethex+0xf8>
 800dcc2:	4299      	cmp	r1, r3
 800dcc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcc8:	d8d9      	bhi.n	800dc7e <__gethex+0x352>
 800dcca:	68a3      	ldr	r3, [r4, #8]
 800dccc:	459b      	cmp	fp, r3
 800dcce:	db17      	blt.n	800dd00 <__gethex+0x3d4>
 800dcd0:	6861      	ldr	r1, [r4, #4]
 800dcd2:	9801      	ldr	r0, [sp, #4]
 800dcd4:	3101      	adds	r1, #1
 800dcd6:	f000 f9c3 	bl	800e060 <_Balloc>
 800dcda:	4681      	mov	r9, r0
 800dcdc:	b918      	cbnz	r0, 800dce6 <__gethex+0x3ba>
 800dcde:	4b1a      	ldr	r3, [pc, #104]	@ (800dd48 <__gethex+0x41c>)
 800dce0:	4602      	mov	r2, r0
 800dce2:	2184      	movs	r1, #132	@ 0x84
 800dce4:	e6c5      	b.n	800da72 <__gethex+0x146>
 800dce6:	6922      	ldr	r2, [r4, #16]
 800dce8:	3202      	adds	r2, #2
 800dcea:	f104 010c 	add.w	r1, r4, #12
 800dcee:	0092      	lsls	r2, r2, #2
 800dcf0:	300c      	adds	r0, #12
 800dcf2:	f7fe fee2 	bl	800caba <memcpy>
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	9801      	ldr	r0, [sp, #4]
 800dcfa:	f000 f9f1 	bl	800e0e0 <_Bfree>
 800dcfe:	464c      	mov	r4, r9
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd08:	6122      	str	r2, [r4, #16]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	615a      	str	r2, [r3, #20]
 800dd0e:	e7be      	b.n	800dc8e <__gethex+0x362>
 800dd10:	6922      	ldr	r2, [r4, #16]
 800dd12:	455a      	cmp	r2, fp
 800dd14:	dd0b      	ble.n	800dd2e <__gethex+0x402>
 800dd16:	2101      	movs	r1, #1
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f7ff fd9f 	bl	800d85c <rshift>
 800dd1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd22:	3701      	adds	r7, #1
 800dd24:	42bb      	cmp	r3, r7
 800dd26:	f6ff aee0 	blt.w	800daea <__gethex+0x1be>
 800dd2a:	2501      	movs	r5, #1
 800dd2c:	e7c2      	b.n	800dcb4 <__gethex+0x388>
 800dd2e:	f016 061f 	ands.w	r6, r6, #31
 800dd32:	d0fa      	beq.n	800dd2a <__gethex+0x3fe>
 800dd34:	4453      	add	r3, sl
 800dd36:	f1c6 0620 	rsb	r6, r6, #32
 800dd3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd3e:	f000 fa81 	bl	800e244 <__hi0bits>
 800dd42:	42b0      	cmp	r0, r6
 800dd44:	dbe7      	blt.n	800dd16 <__gethex+0x3ea>
 800dd46:	e7f0      	b.n	800dd2a <__gethex+0x3fe>
 800dd48:	08010d63 	.word	0x08010d63

0800dd4c <L_shift>:
 800dd4c:	f1c2 0208 	rsb	r2, r2, #8
 800dd50:	0092      	lsls	r2, r2, #2
 800dd52:	b570      	push	{r4, r5, r6, lr}
 800dd54:	f1c2 0620 	rsb	r6, r2, #32
 800dd58:	6843      	ldr	r3, [r0, #4]
 800dd5a:	6804      	ldr	r4, [r0, #0]
 800dd5c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd60:	432c      	orrs	r4, r5
 800dd62:	40d3      	lsrs	r3, r2
 800dd64:	6004      	str	r4, [r0, #0]
 800dd66:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd6a:	4288      	cmp	r0, r1
 800dd6c:	d3f4      	bcc.n	800dd58 <L_shift+0xc>
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}

0800dd70 <__match>:
 800dd70:	b530      	push	{r4, r5, lr}
 800dd72:	6803      	ldr	r3, [r0, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd7a:	b914      	cbnz	r4, 800dd82 <__match+0x12>
 800dd7c:	6003      	str	r3, [r0, #0]
 800dd7e:	2001      	movs	r0, #1
 800dd80:	bd30      	pop	{r4, r5, pc}
 800dd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd8a:	2d19      	cmp	r5, #25
 800dd8c:	bf98      	it	ls
 800dd8e:	3220      	addls	r2, #32
 800dd90:	42a2      	cmp	r2, r4
 800dd92:	d0f0      	beq.n	800dd76 <__match+0x6>
 800dd94:	2000      	movs	r0, #0
 800dd96:	e7f3      	b.n	800dd80 <__match+0x10>

0800dd98 <__hexnan>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	680b      	ldr	r3, [r1, #0]
 800dd9e:	6801      	ldr	r1, [r0, #0]
 800dda0:	115e      	asrs	r6, r3, #5
 800dda2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dda6:	f013 031f 	ands.w	r3, r3, #31
 800ddaa:	b087      	sub	sp, #28
 800ddac:	bf18      	it	ne
 800ddae:	3604      	addne	r6, #4
 800ddb0:	2500      	movs	r5, #0
 800ddb2:	1f37      	subs	r7, r6, #4
 800ddb4:	4682      	mov	sl, r0
 800ddb6:	4690      	mov	r8, r2
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	f846 5c04 	str.w	r5, [r6, #-4]
 800ddbe:	46b9      	mov	r9, r7
 800ddc0:	463c      	mov	r4, r7
 800ddc2:	9502      	str	r5, [sp, #8]
 800ddc4:	46ab      	mov	fp, r5
 800ddc6:	784a      	ldrb	r2, [r1, #1]
 800ddc8:	1c4b      	adds	r3, r1, #1
 800ddca:	9303      	str	r3, [sp, #12]
 800ddcc:	b342      	cbz	r2, 800de20 <__hexnan+0x88>
 800ddce:	4610      	mov	r0, r2
 800ddd0:	9105      	str	r1, [sp, #20]
 800ddd2:	9204      	str	r2, [sp, #16]
 800ddd4:	f7ff fd94 	bl	800d900 <__hexdig_fun>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d151      	bne.n	800de80 <__hexnan+0xe8>
 800dddc:	9a04      	ldr	r2, [sp, #16]
 800ddde:	9905      	ldr	r1, [sp, #20]
 800dde0:	2a20      	cmp	r2, #32
 800dde2:	d818      	bhi.n	800de16 <__hexnan+0x7e>
 800dde4:	9b02      	ldr	r3, [sp, #8]
 800dde6:	459b      	cmp	fp, r3
 800dde8:	dd13      	ble.n	800de12 <__hexnan+0x7a>
 800ddea:	454c      	cmp	r4, r9
 800ddec:	d206      	bcs.n	800ddfc <__hexnan+0x64>
 800ddee:	2d07      	cmp	r5, #7
 800ddf0:	dc04      	bgt.n	800ddfc <__hexnan+0x64>
 800ddf2:	462a      	mov	r2, r5
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7ff ffa8 	bl	800dd4c <L_shift>
 800ddfc:	4544      	cmp	r4, r8
 800ddfe:	d952      	bls.n	800dea6 <__hexnan+0x10e>
 800de00:	2300      	movs	r3, #0
 800de02:	f1a4 0904 	sub.w	r9, r4, #4
 800de06:	f844 3c04 	str.w	r3, [r4, #-4]
 800de0a:	f8cd b008 	str.w	fp, [sp, #8]
 800de0e:	464c      	mov	r4, r9
 800de10:	461d      	mov	r5, r3
 800de12:	9903      	ldr	r1, [sp, #12]
 800de14:	e7d7      	b.n	800ddc6 <__hexnan+0x2e>
 800de16:	2a29      	cmp	r2, #41	@ 0x29
 800de18:	d157      	bne.n	800deca <__hexnan+0x132>
 800de1a:	3102      	adds	r1, #2
 800de1c:	f8ca 1000 	str.w	r1, [sl]
 800de20:	f1bb 0f00 	cmp.w	fp, #0
 800de24:	d051      	beq.n	800deca <__hexnan+0x132>
 800de26:	454c      	cmp	r4, r9
 800de28:	d206      	bcs.n	800de38 <__hexnan+0xa0>
 800de2a:	2d07      	cmp	r5, #7
 800de2c:	dc04      	bgt.n	800de38 <__hexnan+0xa0>
 800de2e:	462a      	mov	r2, r5
 800de30:	4649      	mov	r1, r9
 800de32:	4620      	mov	r0, r4
 800de34:	f7ff ff8a 	bl	800dd4c <L_shift>
 800de38:	4544      	cmp	r4, r8
 800de3a:	d936      	bls.n	800deaa <__hexnan+0x112>
 800de3c:	f1a8 0204 	sub.w	r2, r8, #4
 800de40:	4623      	mov	r3, r4
 800de42:	f853 1b04 	ldr.w	r1, [r3], #4
 800de46:	f842 1f04 	str.w	r1, [r2, #4]!
 800de4a:	429f      	cmp	r7, r3
 800de4c:	d2f9      	bcs.n	800de42 <__hexnan+0xaa>
 800de4e:	1b3b      	subs	r3, r7, r4
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	3304      	adds	r3, #4
 800de56:	3401      	adds	r4, #1
 800de58:	3e03      	subs	r6, #3
 800de5a:	42b4      	cmp	r4, r6
 800de5c:	bf88      	it	hi
 800de5e:	2304      	movhi	r3, #4
 800de60:	4443      	add	r3, r8
 800de62:	2200      	movs	r2, #0
 800de64:	f843 2b04 	str.w	r2, [r3], #4
 800de68:	429f      	cmp	r7, r3
 800de6a:	d2fb      	bcs.n	800de64 <__hexnan+0xcc>
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	b91b      	cbnz	r3, 800de78 <__hexnan+0xe0>
 800de70:	4547      	cmp	r7, r8
 800de72:	d128      	bne.n	800dec6 <__hexnan+0x12e>
 800de74:	2301      	movs	r3, #1
 800de76:	603b      	str	r3, [r7, #0]
 800de78:	2005      	movs	r0, #5
 800de7a:	b007      	add	sp, #28
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de80:	3501      	adds	r5, #1
 800de82:	2d08      	cmp	r5, #8
 800de84:	f10b 0b01 	add.w	fp, fp, #1
 800de88:	dd06      	ble.n	800de98 <__hexnan+0x100>
 800de8a:	4544      	cmp	r4, r8
 800de8c:	d9c1      	bls.n	800de12 <__hexnan+0x7a>
 800de8e:	2300      	movs	r3, #0
 800de90:	f844 3c04 	str.w	r3, [r4, #-4]
 800de94:	2501      	movs	r5, #1
 800de96:	3c04      	subs	r4, #4
 800de98:	6822      	ldr	r2, [r4, #0]
 800de9a:	f000 000f 	and.w	r0, r0, #15
 800de9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dea2:	6020      	str	r0, [r4, #0]
 800dea4:	e7b5      	b.n	800de12 <__hexnan+0x7a>
 800dea6:	2508      	movs	r5, #8
 800dea8:	e7b3      	b.n	800de12 <__hexnan+0x7a>
 800deaa:	9b01      	ldr	r3, [sp, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d0dd      	beq.n	800de6c <__hexnan+0xd4>
 800deb0:	f1c3 0320 	rsb	r3, r3, #32
 800deb4:	f04f 32ff 	mov.w	r2, #4294967295
 800deb8:	40da      	lsrs	r2, r3
 800deba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800debe:	4013      	ands	r3, r2
 800dec0:	f846 3c04 	str.w	r3, [r6, #-4]
 800dec4:	e7d2      	b.n	800de6c <__hexnan+0xd4>
 800dec6:	3f04      	subs	r7, #4
 800dec8:	e7d0      	b.n	800de6c <__hexnan+0xd4>
 800deca:	2004      	movs	r0, #4
 800decc:	e7d5      	b.n	800de7a <__hexnan+0xe2>
	...

0800ded0 <malloc>:
 800ded0:	4b02      	ldr	r3, [pc, #8]	@ (800dedc <malloc+0xc>)
 800ded2:	4601      	mov	r1, r0
 800ded4:	6818      	ldr	r0, [r3, #0]
 800ded6:	f000 b825 	b.w	800df24 <_malloc_r>
 800deda:	bf00      	nop
 800dedc:	2000018c 	.word	0x2000018c

0800dee0 <sbrk_aligned>:
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	4e0f      	ldr	r6, [pc, #60]	@ (800df20 <sbrk_aligned+0x40>)
 800dee4:	460c      	mov	r4, r1
 800dee6:	6831      	ldr	r1, [r6, #0]
 800dee8:	4605      	mov	r5, r0
 800deea:	b911      	cbnz	r1, 800def2 <sbrk_aligned+0x12>
 800deec:	f001 f9e8 	bl	800f2c0 <_sbrk_r>
 800def0:	6030      	str	r0, [r6, #0]
 800def2:	4621      	mov	r1, r4
 800def4:	4628      	mov	r0, r5
 800def6:	f001 f9e3 	bl	800f2c0 <_sbrk_r>
 800defa:	1c43      	adds	r3, r0, #1
 800defc:	d103      	bne.n	800df06 <sbrk_aligned+0x26>
 800defe:	f04f 34ff 	mov.w	r4, #4294967295
 800df02:	4620      	mov	r0, r4
 800df04:	bd70      	pop	{r4, r5, r6, pc}
 800df06:	1cc4      	adds	r4, r0, #3
 800df08:	f024 0403 	bic.w	r4, r4, #3
 800df0c:	42a0      	cmp	r0, r4
 800df0e:	d0f8      	beq.n	800df02 <sbrk_aligned+0x22>
 800df10:	1a21      	subs	r1, r4, r0
 800df12:	4628      	mov	r0, r5
 800df14:	f001 f9d4 	bl	800f2c0 <_sbrk_r>
 800df18:	3001      	adds	r0, #1
 800df1a:	d1f2      	bne.n	800df02 <sbrk_aligned+0x22>
 800df1c:	e7ef      	b.n	800defe <sbrk_aligned+0x1e>
 800df1e:	bf00      	nop
 800df20:	20000bd0 	.word	0x20000bd0

0800df24 <_malloc_r>:
 800df24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df28:	1ccd      	adds	r5, r1, #3
 800df2a:	f025 0503 	bic.w	r5, r5, #3
 800df2e:	3508      	adds	r5, #8
 800df30:	2d0c      	cmp	r5, #12
 800df32:	bf38      	it	cc
 800df34:	250c      	movcc	r5, #12
 800df36:	2d00      	cmp	r5, #0
 800df38:	4606      	mov	r6, r0
 800df3a:	db01      	blt.n	800df40 <_malloc_r+0x1c>
 800df3c:	42a9      	cmp	r1, r5
 800df3e:	d904      	bls.n	800df4a <_malloc_r+0x26>
 800df40:	230c      	movs	r3, #12
 800df42:	6033      	str	r3, [r6, #0]
 800df44:	2000      	movs	r0, #0
 800df46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e020 <_malloc_r+0xfc>
 800df4e:	f000 f87b 	bl	800e048 <__malloc_lock>
 800df52:	f8d8 3000 	ldr.w	r3, [r8]
 800df56:	461c      	mov	r4, r3
 800df58:	bb44      	cbnz	r4, 800dfac <_malloc_r+0x88>
 800df5a:	4629      	mov	r1, r5
 800df5c:	4630      	mov	r0, r6
 800df5e:	f7ff ffbf 	bl	800dee0 <sbrk_aligned>
 800df62:	1c43      	adds	r3, r0, #1
 800df64:	4604      	mov	r4, r0
 800df66:	d158      	bne.n	800e01a <_malloc_r+0xf6>
 800df68:	f8d8 4000 	ldr.w	r4, [r8]
 800df6c:	4627      	mov	r7, r4
 800df6e:	2f00      	cmp	r7, #0
 800df70:	d143      	bne.n	800dffa <_malloc_r+0xd6>
 800df72:	2c00      	cmp	r4, #0
 800df74:	d04b      	beq.n	800e00e <_malloc_r+0xea>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	4639      	mov	r1, r7
 800df7a:	4630      	mov	r0, r6
 800df7c:	eb04 0903 	add.w	r9, r4, r3
 800df80:	f001 f99e 	bl	800f2c0 <_sbrk_r>
 800df84:	4581      	cmp	r9, r0
 800df86:	d142      	bne.n	800e00e <_malloc_r+0xea>
 800df88:	6821      	ldr	r1, [r4, #0]
 800df8a:	1a6d      	subs	r5, r5, r1
 800df8c:	4629      	mov	r1, r5
 800df8e:	4630      	mov	r0, r6
 800df90:	f7ff ffa6 	bl	800dee0 <sbrk_aligned>
 800df94:	3001      	adds	r0, #1
 800df96:	d03a      	beq.n	800e00e <_malloc_r+0xea>
 800df98:	6823      	ldr	r3, [r4, #0]
 800df9a:	442b      	add	r3, r5
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	f8d8 3000 	ldr.w	r3, [r8]
 800dfa2:	685a      	ldr	r2, [r3, #4]
 800dfa4:	bb62      	cbnz	r2, 800e000 <_malloc_r+0xdc>
 800dfa6:	f8c8 7000 	str.w	r7, [r8]
 800dfaa:	e00f      	b.n	800dfcc <_malloc_r+0xa8>
 800dfac:	6822      	ldr	r2, [r4, #0]
 800dfae:	1b52      	subs	r2, r2, r5
 800dfb0:	d420      	bmi.n	800dff4 <_malloc_r+0xd0>
 800dfb2:	2a0b      	cmp	r2, #11
 800dfb4:	d917      	bls.n	800dfe6 <_malloc_r+0xc2>
 800dfb6:	1961      	adds	r1, r4, r5
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	6025      	str	r5, [r4, #0]
 800dfbc:	bf18      	it	ne
 800dfbe:	6059      	strne	r1, [r3, #4]
 800dfc0:	6863      	ldr	r3, [r4, #4]
 800dfc2:	bf08      	it	eq
 800dfc4:	f8c8 1000 	streq.w	r1, [r8]
 800dfc8:	5162      	str	r2, [r4, r5]
 800dfca:	604b      	str	r3, [r1, #4]
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f000 f841 	bl	800e054 <__malloc_unlock>
 800dfd2:	f104 000b 	add.w	r0, r4, #11
 800dfd6:	1d23      	adds	r3, r4, #4
 800dfd8:	f020 0007 	bic.w	r0, r0, #7
 800dfdc:	1ac2      	subs	r2, r0, r3
 800dfde:	bf1c      	itt	ne
 800dfe0:	1a1b      	subne	r3, r3, r0
 800dfe2:	50a3      	strne	r3, [r4, r2]
 800dfe4:	e7af      	b.n	800df46 <_malloc_r+0x22>
 800dfe6:	6862      	ldr	r2, [r4, #4]
 800dfe8:	42a3      	cmp	r3, r4
 800dfea:	bf0c      	ite	eq
 800dfec:	f8c8 2000 	streq.w	r2, [r8]
 800dff0:	605a      	strne	r2, [r3, #4]
 800dff2:	e7eb      	b.n	800dfcc <_malloc_r+0xa8>
 800dff4:	4623      	mov	r3, r4
 800dff6:	6864      	ldr	r4, [r4, #4]
 800dff8:	e7ae      	b.n	800df58 <_malloc_r+0x34>
 800dffa:	463c      	mov	r4, r7
 800dffc:	687f      	ldr	r7, [r7, #4]
 800dffe:	e7b6      	b.n	800df6e <_malloc_r+0x4a>
 800e000:	461a      	mov	r2, r3
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	42a3      	cmp	r3, r4
 800e006:	d1fb      	bne.n	800e000 <_malloc_r+0xdc>
 800e008:	2300      	movs	r3, #0
 800e00a:	6053      	str	r3, [r2, #4]
 800e00c:	e7de      	b.n	800dfcc <_malloc_r+0xa8>
 800e00e:	230c      	movs	r3, #12
 800e010:	6033      	str	r3, [r6, #0]
 800e012:	4630      	mov	r0, r6
 800e014:	f000 f81e 	bl	800e054 <__malloc_unlock>
 800e018:	e794      	b.n	800df44 <_malloc_r+0x20>
 800e01a:	6005      	str	r5, [r0, #0]
 800e01c:	e7d6      	b.n	800dfcc <_malloc_r+0xa8>
 800e01e:	bf00      	nop
 800e020:	20000bd4 	.word	0x20000bd4

0800e024 <__ascii_mbtowc>:
 800e024:	b082      	sub	sp, #8
 800e026:	b901      	cbnz	r1, 800e02a <__ascii_mbtowc+0x6>
 800e028:	a901      	add	r1, sp, #4
 800e02a:	b142      	cbz	r2, 800e03e <__ascii_mbtowc+0x1a>
 800e02c:	b14b      	cbz	r3, 800e042 <__ascii_mbtowc+0x1e>
 800e02e:	7813      	ldrb	r3, [r2, #0]
 800e030:	600b      	str	r3, [r1, #0]
 800e032:	7812      	ldrb	r2, [r2, #0]
 800e034:	1e10      	subs	r0, r2, #0
 800e036:	bf18      	it	ne
 800e038:	2001      	movne	r0, #1
 800e03a:	b002      	add	sp, #8
 800e03c:	4770      	bx	lr
 800e03e:	4610      	mov	r0, r2
 800e040:	e7fb      	b.n	800e03a <__ascii_mbtowc+0x16>
 800e042:	f06f 0001 	mvn.w	r0, #1
 800e046:	e7f8      	b.n	800e03a <__ascii_mbtowc+0x16>

0800e048 <__malloc_lock>:
 800e048:	4801      	ldr	r0, [pc, #4]	@ (800e050 <__malloc_lock+0x8>)
 800e04a:	f7fe bd34 	b.w	800cab6 <__retarget_lock_acquire_recursive>
 800e04e:	bf00      	nop
 800e050:	20000bcc 	.word	0x20000bcc

0800e054 <__malloc_unlock>:
 800e054:	4801      	ldr	r0, [pc, #4]	@ (800e05c <__malloc_unlock+0x8>)
 800e056:	f7fe bd2f 	b.w	800cab8 <__retarget_lock_release_recursive>
 800e05a:	bf00      	nop
 800e05c:	20000bcc 	.word	0x20000bcc

0800e060 <_Balloc>:
 800e060:	b570      	push	{r4, r5, r6, lr}
 800e062:	69c6      	ldr	r6, [r0, #28]
 800e064:	4604      	mov	r4, r0
 800e066:	460d      	mov	r5, r1
 800e068:	b976      	cbnz	r6, 800e088 <_Balloc+0x28>
 800e06a:	2010      	movs	r0, #16
 800e06c:	f7ff ff30 	bl	800ded0 <malloc>
 800e070:	4602      	mov	r2, r0
 800e072:	61e0      	str	r0, [r4, #28]
 800e074:	b920      	cbnz	r0, 800e080 <_Balloc+0x20>
 800e076:	4b18      	ldr	r3, [pc, #96]	@ (800e0d8 <_Balloc+0x78>)
 800e078:	4818      	ldr	r0, [pc, #96]	@ (800e0dc <_Balloc+0x7c>)
 800e07a:	216b      	movs	r1, #107	@ 0x6b
 800e07c:	f7fe fd3a 	bl	800caf4 <__assert_func>
 800e080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e084:	6006      	str	r6, [r0, #0]
 800e086:	60c6      	str	r6, [r0, #12]
 800e088:	69e6      	ldr	r6, [r4, #28]
 800e08a:	68f3      	ldr	r3, [r6, #12]
 800e08c:	b183      	cbz	r3, 800e0b0 <_Balloc+0x50>
 800e08e:	69e3      	ldr	r3, [r4, #28]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e096:	b9b8      	cbnz	r0, 800e0c8 <_Balloc+0x68>
 800e098:	2101      	movs	r1, #1
 800e09a:	fa01 f605 	lsl.w	r6, r1, r5
 800e09e:	1d72      	adds	r2, r6, #5
 800e0a0:	0092      	lsls	r2, r2, #2
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f001 f923 	bl	800f2ee <_calloc_r>
 800e0a8:	b160      	cbz	r0, 800e0c4 <_Balloc+0x64>
 800e0aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0ae:	e00e      	b.n	800e0ce <_Balloc+0x6e>
 800e0b0:	2221      	movs	r2, #33	@ 0x21
 800e0b2:	2104      	movs	r1, #4
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f001 f91a 	bl	800f2ee <_calloc_r>
 800e0ba:	69e3      	ldr	r3, [r4, #28]
 800e0bc:	60f0      	str	r0, [r6, #12]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1e4      	bne.n	800e08e <_Balloc+0x2e>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	bd70      	pop	{r4, r5, r6, pc}
 800e0c8:	6802      	ldr	r2, [r0, #0]
 800e0ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0d4:	e7f7      	b.n	800e0c6 <_Balloc+0x66>
 800e0d6:	bf00      	nop
 800e0d8:	08010c49 	.word	0x08010c49
 800e0dc:	08010dd4 	.word	0x08010dd4

0800e0e0 <_Bfree>:
 800e0e0:	b570      	push	{r4, r5, r6, lr}
 800e0e2:	69c6      	ldr	r6, [r0, #28]
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	b976      	cbnz	r6, 800e108 <_Bfree+0x28>
 800e0ea:	2010      	movs	r0, #16
 800e0ec:	f7ff fef0 	bl	800ded0 <malloc>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	61e8      	str	r0, [r5, #28]
 800e0f4:	b920      	cbnz	r0, 800e100 <_Bfree+0x20>
 800e0f6:	4b09      	ldr	r3, [pc, #36]	@ (800e11c <_Bfree+0x3c>)
 800e0f8:	4809      	ldr	r0, [pc, #36]	@ (800e120 <_Bfree+0x40>)
 800e0fa:	218f      	movs	r1, #143	@ 0x8f
 800e0fc:	f7fe fcfa 	bl	800caf4 <__assert_func>
 800e100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e104:	6006      	str	r6, [r0, #0]
 800e106:	60c6      	str	r6, [r0, #12]
 800e108:	b13c      	cbz	r4, 800e11a <_Bfree+0x3a>
 800e10a:	69eb      	ldr	r3, [r5, #28]
 800e10c:	6862      	ldr	r2, [r4, #4]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e114:	6021      	str	r1, [r4, #0]
 800e116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	08010c49 	.word	0x08010c49
 800e120:	08010dd4 	.word	0x08010dd4

0800e124 <__multadd>:
 800e124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e128:	690d      	ldr	r5, [r1, #16]
 800e12a:	4607      	mov	r7, r0
 800e12c:	460c      	mov	r4, r1
 800e12e:	461e      	mov	r6, r3
 800e130:	f101 0c14 	add.w	ip, r1, #20
 800e134:	2000      	movs	r0, #0
 800e136:	f8dc 3000 	ldr.w	r3, [ip]
 800e13a:	b299      	uxth	r1, r3
 800e13c:	fb02 6101 	mla	r1, r2, r1, r6
 800e140:	0c1e      	lsrs	r6, r3, #16
 800e142:	0c0b      	lsrs	r3, r1, #16
 800e144:	fb02 3306 	mla	r3, r2, r6, r3
 800e148:	b289      	uxth	r1, r1
 800e14a:	3001      	adds	r0, #1
 800e14c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e150:	4285      	cmp	r5, r0
 800e152:	f84c 1b04 	str.w	r1, [ip], #4
 800e156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e15a:	dcec      	bgt.n	800e136 <__multadd+0x12>
 800e15c:	b30e      	cbz	r6, 800e1a2 <__multadd+0x7e>
 800e15e:	68a3      	ldr	r3, [r4, #8]
 800e160:	42ab      	cmp	r3, r5
 800e162:	dc19      	bgt.n	800e198 <__multadd+0x74>
 800e164:	6861      	ldr	r1, [r4, #4]
 800e166:	4638      	mov	r0, r7
 800e168:	3101      	adds	r1, #1
 800e16a:	f7ff ff79 	bl	800e060 <_Balloc>
 800e16e:	4680      	mov	r8, r0
 800e170:	b928      	cbnz	r0, 800e17e <__multadd+0x5a>
 800e172:	4602      	mov	r2, r0
 800e174:	4b0c      	ldr	r3, [pc, #48]	@ (800e1a8 <__multadd+0x84>)
 800e176:	480d      	ldr	r0, [pc, #52]	@ (800e1ac <__multadd+0x88>)
 800e178:	21ba      	movs	r1, #186	@ 0xba
 800e17a:	f7fe fcbb 	bl	800caf4 <__assert_func>
 800e17e:	6922      	ldr	r2, [r4, #16]
 800e180:	3202      	adds	r2, #2
 800e182:	f104 010c 	add.w	r1, r4, #12
 800e186:	0092      	lsls	r2, r2, #2
 800e188:	300c      	adds	r0, #12
 800e18a:	f7fe fc96 	bl	800caba <memcpy>
 800e18e:	4621      	mov	r1, r4
 800e190:	4638      	mov	r0, r7
 800e192:	f7ff ffa5 	bl	800e0e0 <_Bfree>
 800e196:	4644      	mov	r4, r8
 800e198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e19c:	3501      	adds	r5, #1
 800e19e:	615e      	str	r6, [r3, #20]
 800e1a0:	6125      	str	r5, [r4, #16]
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a8:	08010d63 	.word	0x08010d63
 800e1ac:	08010dd4 	.word	0x08010dd4

0800e1b0 <__s2b>:
 800e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	460c      	mov	r4, r1
 800e1b6:	4615      	mov	r5, r2
 800e1b8:	461f      	mov	r7, r3
 800e1ba:	2209      	movs	r2, #9
 800e1bc:	3308      	adds	r3, #8
 800e1be:	4606      	mov	r6, r0
 800e1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	db09      	blt.n	800e1e0 <__s2b+0x30>
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7ff ff47 	bl	800e060 <_Balloc>
 800e1d2:	b940      	cbnz	r0, 800e1e6 <__s2b+0x36>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	4b19      	ldr	r3, [pc, #100]	@ (800e23c <__s2b+0x8c>)
 800e1d8:	4819      	ldr	r0, [pc, #100]	@ (800e240 <__s2b+0x90>)
 800e1da:	21d3      	movs	r1, #211	@ 0xd3
 800e1dc:	f7fe fc8a 	bl	800caf4 <__assert_func>
 800e1e0:	0052      	lsls	r2, r2, #1
 800e1e2:	3101      	adds	r1, #1
 800e1e4:	e7f0      	b.n	800e1c8 <__s2b+0x18>
 800e1e6:	9b08      	ldr	r3, [sp, #32]
 800e1e8:	6143      	str	r3, [r0, #20]
 800e1ea:	2d09      	cmp	r5, #9
 800e1ec:	f04f 0301 	mov.w	r3, #1
 800e1f0:	6103      	str	r3, [r0, #16]
 800e1f2:	dd16      	ble.n	800e222 <__s2b+0x72>
 800e1f4:	f104 0909 	add.w	r9, r4, #9
 800e1f8:	46c8      	mov	r8, r9
 800e1fa:	442c      	add	r4, r5
 800e1fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e200:	4601      	mov	r1, r0
 800e202:	3b30      	subs	r3, #48	@ 0x30
 800e204:	220a      	movs	r2, #10
 800e206:	4630      	mov	r0, r6
 800e208:	f7ff ff8c 	bl	800e124 <__multadd>
 800e20c:	45a0      	cmp	r8, r4
 800e20e:	d1f5      	bne.n	800e1fc <__s2b+0x4c>
 800e210:	f1a5 0408 	sub.w	r4, r5, #8
 800e214:	444c      	add	r4, r9
 800e216:	1b2d      	subs	r5, r5, r4
 800e218:	1963      	adds	r3, r4, r5
 800e21a:	42bb      	cmp	r3, r7
 800e21c:	db04      	blt.n	800e228 <__s2b+0x78>
 800e21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e222:	340a      	adds	r4, #10
 800e224:	2509      	movs	r5, #9
 800e226:	e7f6      	b.n	800e216 <__s2b+0x66>
 800e228:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e22c:	4601      	mov	r1, r0
 800e22e:	3b30      	subs	r3, #48	@ 0x30
 800e230:	220a      	movs	r2, #10
 800e232:	4630      	mov	r0, r6
 800e234:	f7ff ff76 	bl	800e124 <__multadd>
 800e238:	e7ee      	b.n	800e218 <__s2b+0x68>
 800e23a:	bf00      	nop
 800e23c:	08010d63 	.word	0x08010d63
 800e240:	08010dd4 	.word	0x08010dd4

0800e244 <__hi0bits>:
 800e244:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e248:	4603      	mov	r3, r0
 800e24a:	bf36      	itet	cc
 800e24c:	0403      	lslcc	r3, r0, #16
 800e24e:	2000      	movcs	r0, #0
 800e250:	2010      	movcc	r0, #16
 800e252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e256:	bf3c      	itt	cc
 800e258:	021b      	lslcc	r3, r3, #8
 800e25a:	3008      	addcc	r0, #8
 800e25c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e260:	bf3c      	itt	cc
 800e262:	011b      	lslcc	r3, r3, #4
 800e264:	3004      	addcc	r0, #4
 800e266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e26a:	bf3c      	itt	cc
 800e26c:	009b      	lslcc	r3, r3, #2
 800e26e:	3002      	addcc	r0, #2
 800e270:	2b00      	cmp	r3, #0
 800e272:	db05      	blt.n	800e280 <__hi0bits+0x3c>
 800e274:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e278:	f100 0001 	add.w	r0, r0, #1
 800e27c:	bf08      	it	eq
 800e27e:	2020      	moveq	r0, #32
 800e280:	4770      	bx	lr

0800e282 <__lo0bits>:
 800e282:	6803      	ldr	r3, [r0, #0]
 800e284:	4602      	mov	r2, r0
 800e286:	f013 0007 	ands.w	r0, r3, #7
 800e28a:	d00b      	beq.n	800e2a4 <__lo0bits+0x22>
 800e28c:	07d9      	lsls	r1, r3, #31
 800e28e:	d421      	bmi.n	800e2d4 <__lo0bits+0x52>
 800e290:	0798      	lsls	r0, r3, #30
 800e292:	bf49      	itett	mi
 800e294:	085b      	lsrmi	r3, r3, #1
 800e296:	089b      	lsrpl	r3, r3, #2
 800e298:	2001      	movmi	r0, #1
 800e29a:	6013      	strmi	r3, [r2, #0]
 800e29c:	bf5c      	itt	pl
 800e29e:	6013      	strpl	r3, [r2, #0]
 800e2a0:	2002      	movpl	r0, #2
 800e2a2:	4770      	bx	lr
 800e2a4:	b299      	uxth	r1, r3
 800e2a6:	b909      	cbnz	r1, 800e2ac <__lo0bits+0x2a>
 800e2a8:	0c1b      	lsrs	r3, r3, #16
 800e2aa:	2010      	movs	r0, #16
 800e2ac:	b2d9      	uxtb	r1, r3
 800e2ae:	b909      	cbnz	r1, 800e2b4 <__lo0bits+0x32>
 800e2b0:	3008      	adds	r0, #8
 800e2b2:	0a1b      	lsrs	r3, r3, #8
 800e2b4:	0719      	lsls	r1, r3, #28
 800e2b6:	bf04      	itt	eq
 800e2b8:	091b      	lsreq	r3, r3, #4
 800e2ba:	3004      	addeq	r0, #4
 800e2bc:	0799      	lsls	r1, r3, #30
 800e2be:	bf04      	itt	eq
 800e2c0:	089b      	lsreq	r3, r3, #2
 800e2c2:	3002      	addeq	r0, #2
 800e2c4:	07d9      	lsls	r1, r3, #31
 800e2c6:	d403      	bmi.n	800e2d0 <__lo0bits+0x4e>
 800e2c8:	085b      	lsrs	r3, r3, #1
 800e2ca:	f100 0001 	add.w	r0, r0, #1
 800e2ce:	d003      	beq.n	800e2d8 <__lo0bits+0x56>
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	4770      	bx	lr
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	4770      	bx	lr
 800e2d8:	2020      	movs	r0, #32
 800e2da:	4770      	bx	lr

0800e2dc <__i2b>:
 800e2dc:	b510      	push	{r4, lr}
 800e2de:	460c      	mov	r4, r1
 800e2e0:	2101      	movs	r1, #1
 800e2e2:	f7ff febd 	bl	800e060 <_Balloc>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	b928      	cbnz	r0, 800e2f6 <__i2b+0x1a>
 800e2ea:	4b05      	ldr	r3, [pc, #20]	@ (800e300 <__i2b+0x24>)
 800e2ec:	4805      	ldr	r0, [pc, #20]	@ (800e304 <__i2b+0x28>)
 800e2ee:	f240 1145 	movw	r1, #325	@ 0x145
 800e2f2:	f7fe fbff 	bl	800caf4 <__assert_func>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	6144      	str	r4, [r0, #20]
 800e2fa:	6103      	str	r3, [r0, #16]
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	bf00      	nop
 800e300:	08010d63 	.word	0x08010d63
 800e304:	08010dd4 	.word	0x08010dd4

0800e308 <__multiply>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	4614      	mov	r4, r2
 800e30e:	690a      	ldr	r2, [r1, #16]
 800e310:	6923      	ldr	r3, [r4, #16]
 800e312:	429a      	cmp	r2, r3
 800e314:	bfa8      	it	ge
 800e316:	4623      	movge	r3, r4
 800e318:	460f      	mov	r7, r1
 800e31a:	bfa4      	itt	ge
 800e31c:	460c      	movge	r4, r1
 800e31e:	461f      	movge	r7, r3
 800e320:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e324:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e328:	68a3      	ldr	r3, [r4, #8]
 800e32a:	6861      	ldr	r1, [r4, #4]
 800e32c:	eb0a 0609 	add.w	r6, sl, r9
 800e330:	42b3      	cmp	r3, r6
 800e332:	b085      	sub	sp, #20
 800e334:	bfb8      	it	lt
 800e336:	3101      	addlt	r1, #1
 800e338:	f7ff fe92 	bl	800e060 <_Balloc>
 800e33c:	b930      	cbnz	r0, 800e34c <__multiply+0x44>
 800e33e:	4602      	mov	r2, r0
 800e340:	4b44      	ldr	r3, [pc, #272]	@ (800e454 <__multiply+0x14c>)
 800e342:	4845      	ldr	r0, [pc, #276]	@ (800e458 <__multiply+0x150>)
 800e344:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e348:	f7fe fbd4 	bl	800caf4 <__assert_func>
 800e34c:	f100 0514 	add.w	r5, r0, #20
 800e350:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e354:	462b      	mov	r3, r5
 800e356:	2200      	movs	r2, #0
 800e358:	4543      	cmp	r3, r8
 800e35a:	d321      	bcc.n	800e3a0 <__multiply+0x98>
 800e35c:	f107 0114 	add.w	r1, r7, #20
 800e360:	f104 0214 	add.w	r2, r4, #20
 800e364:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e368:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e36c:	9302      	str	r3, [sp, #8]
 800e36e:	1b13      	subs	r3, r2, r4
 800e370:	3b15      	subs	r3, #21
 800e372:	f023 0303 	bic.w	r3, r3, #3
 800e376:	3304      	adds	r3, #4
 800e378:	f104 0715 	add.w	r7, r4, #21
 800e37c:	42ba      	cmp	r2, r7
 800e37e:	bf38      	it	cc
 800e380:	2304      	movcc	r3, #4
 800e382:	9301      	str	r3, [sp, #4]
 800e384:	9b02      	ldr	r3, [sp, #8]
 800e386:	9103      	str	r1, [sp, #12]
 800e388:	428b      	cmp	r3, r1
 800e38a:	d80c      	bhi.n	800e3a6 <__multiply+0x9e>
 800e38c:	2e00      	cmp	r6, #0
 800e38e:	dd03      	ble.n	800e398 <__multiply+0x90>
 800e390:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e394:	2b00      	cmp	r3, #0
 800e396:	d05b      	beq.n	800e450 <__multiply+0x148>
 800e398:	6106      	str	r6, [r0, #16]
 800e39a:	b005      	add	sp, #20
 800e39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a0:	f843 2b04 	str.w	r2, [r3], #4
 800e3a4:	e7d8      	b.n	800e358 <__multiply+0x50>
 800e3a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e3aa:	f1ba 0f00 	cmp.w	sl, #0
 800e3ae:	d024      	beq.n	800e3fa <__multiply+0xf2>
 800e3b0:	f104 0e14 	add.w	lr, r4, #20
 800e3b4:	46a9      	mov	r9, r5
 800e3b6:	f04f 0c00 	mov.w	ip, #0
 800e3ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3be:	f8d9 3000 	ldr.w	r3, [r9]
 800e3c2:	fa1f fb87 	uxth.w	fp, r7
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e3cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e3d0:	f8d9 7000 	ldr.w	r7, [r9]
 800e3d4:	4463      	add	r3, ip
 800e3d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e3da:	fb0a c70b 	mla	r7, sl, fp, ip
 800e3de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e3e8:	4572      	cmp	r2, lr
 800e3ea:	f849 3b04 	str.w	r3, [r9], #4
 800e3ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e3f2:	d8e2      	bhi.n	800e3ba <__multiply+0xb2>
 800e3f4:	9b01      	ldr	r3, [sp, #4]
 800e3f6:	f845 c003 	str.w	ip, [r5, r3]
 800e3fa:	9b03      	ldr	r3, [sp, #12]
 800e3fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e400:	3104      	adds	r1, #4
 800e402:	f1b9 0f00 	cmp.w	r9, #0
 800e406:	d021      	beq.n	800e44c <__multiply+0x144>
 800e408:	682b      	ldr	r3, [r5, #0]
 800e40a:	f104 0c14 	add.w	ip, r4, #20
 800e40e:	46ae      	mov	lr, r5
 800e410:	f04f 0a00 	mov.w	sl, #0
 800e414:	f8bc b000 	ldrh.w	fp, [ip]
 800e418:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e41c:	fb09 770b 	mla	r7, r9, fp, r7
 800e420:	4457      	add	r7, sl
 800e422:	b29b      	uxth	r3, r3
 800e424:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e428:	f84e 3b04 	str.w	r3, [lr], #4
 800e42c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e434:	f8be 3000 	ldrh.w	r3, [lr]
 800e438:	fb09 330a 	mla	r3, r9, sl, r3
 800e43c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e440:	4562      	cmp	r2, ip
 800e442:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e446:	d8e5      	bhi.n	800e414 <__multiply+0x10c>
 800e448:	9f01      	ldr	r7, [sp, #4]
 800e44a:	51eb      	str	r3, [r5, r7]
 800e44c:	3504      	adds	r5, #4
 800e44e:	e799      	b.n	800e384 <__multiply+0x7c>
 800e450:	3e01      	subs	r6, #1
 800e452:	e79b      	b.n	800e38c <__multiply+0x84>
 800e454:	08010d63 	.word	0x08010d63
 800e458:	08010dd4 	.word	0x08010dd4

0800e45c <__pow5mult>:
 800e45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e460:	4615      	mov	r5, r2
 800e462:	f012 0203 	ands.w	r2, r2, #3
 800e466:	4607      	mov	r7, r0
 800e468:	460e      	mov	r6, r1
 800e46a:	d007      	beq.n	800e47c <__pow5mult+0x20>
 800e46c:	4c25      	ldr	r4, [pc, #148]	@ (800e504 <__pow5mult+0xa8>)
 800e46e:	3a01      	subs	r2, #1
 800e470:	2300      	movs	r3, #0
 800e472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e476:	f7ff fe55 	bl	800e124 <__multadd>
 800e47a:	4606      	mov	r6, r0
 800e47c:	10ad      	asrs	r5, r5, #2
 800e47e:	d03d      	beq.n	800e4fc <__pow5mult+0xa0>
 800e480:	69fc      	ldr	r4, [r7, #28]
 800e482:	b97c      	cbnz	r4, 800e4a4 <__pow5mult+0x48>
 800e484:	2010      	movs	r0, #16
 800e486:	f7ff fd23 	bl	800ded0 <malloc>
 800e48a:	4602      	mov	r2, r0
 800e48c:	61f8      	str	r0, [r7, #28]
 800e48e:	b928      	cbnz	r0, 800e49c <__pow5mult+0x40>
 800e490:	4b1d      	ldr	r3, [pc, #116]	@ (800e508 <__pow5mult+0xac>)
 800e492:	481e      	ldr	r0, [pc, #120]	@ (800e50c <__pow5mult+0xb0>)
 800e494:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e498:	f7fe fb2c 	bl	800caf4 <__assert_func>
 800e49c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4a0:	6004      	str	r4, [r0, #0]
 800e4a2:	60c4      	str	r4, [r0, #12]
 800e4a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e4a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4ac:	b94c      	cbnz	r4, 800e4c2 <__pow5mult+0x66>
 800e4ae:	f240 2171 	movw	r1, #625	@ 0x271
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	f7ff ff12 	bl	800e2dc <__i2b>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4be:	4604      	mov	r4, r0
 800e4c0:	6003      	str	r3, [r0, #0]
 800e4c2:	f04f 0900 	mov.w	r9, #0
 800e4c6:	07eb      	lsls	r3, r5, #31
 800e4c8:	d50a      	bpl.n	800e4e0 <__pow5mult+0x84>
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	f7ff ff1a 	bl	800e308 <__multiply>
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4680      	mov	r8, r0
 800e4d8:	4638      	mov	r0, r7
 800e4da:	f7ff fe01 	bl	800e0e0 <_Bfree>
 800e4de:	4646      	mov	r6, r8
 800e4e0:	106d      	asrs	r5, r5, #1
 800e4e2:	d00b      	beq.n	800e4fc <__pow5mult+0xa0>
 800e4e4:	6820      	ldr	r0, [r4, #0]
 800e4e6:	b938      	cbnz	r0, 800e4f8 <__pow5mult+0x9c>
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	4638      	mov	r0, r7
 800e4ee:	f7ff ff0b 	bl	800e308 <__multiply>
 800e4f2:	6020      	str	r0, [r4, #0]
 800e4f4:	f8c0 9000 	str.w	r9, [r0]
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	e7e4      	b.n	800e4c6 <__pow5mult+0x6a>
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e502:	bf00      	nop
 800e504:	08010e30 	.word	0x08010e30
 800e508:	08010c49 	.word	0x08010c49
 800e50c:	08010dd4 	.word	0x08010dd4

0800e510 <__lshift>:
 800e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e514:	460c      	mov	r4, r1
 800e516:	6849      	ldr	r1, [r1, #4]
 800e518:	6923      	ldr	r3, [r4, #16]
 800e51a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e51e:	68a3      	ldr	r3, [r4, #8]
 800e520:	4607      	mov	r7, r0
 800e522:	4691      	mov	r9, r2
 800e524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e528:	f108 0601 	add.w	r6, r8, #1
 800e52c:	42b3      	cmp	r3, r6
 800e52e:	db0b      	blt.n	800e548 <__lshift+0x38>
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff fd95 	bl	800e060 <_Balloc>
 800e536:	4605      	mov	r5, r0
 800e538:	b948      	cbnz	r0, 800e54e <__lshift+0x3e>
 800e53a:	4602      	mov	r2, r0
 800e53c:	4b28      	ldr	r3, [pc, #160]	@ (800e5e0 <__lshift+0xd0>)
 800e53e:	4829      	ldr	r0, [pc, #164]	@ (800e5e4 <__lshift+0xd4>)
 800e540:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e544:	f7fe fad6 	bl	800caf4 <__assert_func>
 800e548:	3101      	adds	r1, #1
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	e7ee      	b.n	800e52c <__lshift+0x1c>
 800e54e:	2300      	movs	r3, #0
 800e550:	f100 0114 	add.w	r1, r0, #20
 800e554:	f100 0210 	add.w	r2, r0, #16
 800e558:	4618      	mov	r0, r3
 800e55a:	4553      	cmp	r3, sl
 800e55c:	db33      	blt.n	800e5c6 <__lshift+0xb6>
 800e55e:	6920      	ldr	r0, [r4, #16]
 800e560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e564:	f104 0314 	add.w	r3, r4, #20
 800e568:	f019 091f 	ands.w	r9, r9, #31
 800e56c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e574:	d02b      	beq.n	800e5ce <__lshift+0xbe>
 800e576:	f1c9 0e20 	rsb	lr, r9, #32
 800e57a:	468a      	mov	sl, r1
 800e57c:	2200      	movs	r2, #0
 800e57e:	6818      	ldr	r0, [r3, #0]
 800e580:	fa00 f009 	lsl.w	r0, r0, r9
 800e584:	4310      	orrs	r0, r2
 800e586:	f84a 0b04 	str.w	r0, [sl], #4
 800e58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e58e:	459c      	cmp	ip, r3
 800e590:	fa22 f20e 	lsr.w	r2, r2, lr
 800e594:	d8f3      	bhi.n	800e57e <__lshift+0x6e>
 800e596:	ebac 0304 	sub.w	r3, ip, r4
 800e59a:	3b15      	subs	r3, #21
 800e59c:	f023 0303 	bic.w	r3, r3, #3
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	f104 0015 	add.w	r0, r4, #21
 800e5a6:	4584      	cmp	ip, r0
 800e5a8:	bf38      	it	cc
 800e5aa:	2304      	movcc	r3, #4
 800e5ac:	50ca      	str	r2, [r1, r3]
 800e5ae:	b10a      	cbz	r2, 800e5b4 <__lshift+0xa4>
 800e5b0:	f108 0602 	add.w	r6, r8, #2
 800e5b4:	3e01      	subs	r6, #1
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	612e      	str	r6, [r5, #16]
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	f7ff fd90 	bl	800e0e0 <_Bfree>
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	e7c5      	b.n	800e55a <__lshift+0x4a>
 800e5ce:	3904      	subs	r1, #4
 800e5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5d8:	459c      	cmp	ip, r3
 800e5da:	d8f9      	bhi.n	800e5d0 <__lshift+0xc0>
 800e5dc:	e7ea      	b.n	800e5b4 <__lshift+0xa4>
 800e5de:	bf00      	nop
 800e5e0:	08010d63 	.word	0x08010d63
 800e5e4:	08010dd4 	.word	0x08010dd4

0800e5e8 <__mcmp>:
 800e5e8:	690a      	ldr	r2, [r1, #16]
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	6900      	ldr	r0, [r0, #16]
 800e5ee:	1a80      	subs	r0, r0, r2
 800e5f0:	b530      	push	{r4, r5, lr}
 800e5f2:	d10e      	bne.n	800e612 <__mcmp+0x2a>
 800e5f4:	3314      	adds	r3, #20
 800e5f6:	3114      	adds	r1, #20
 800e5f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e5fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e600:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e604:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e608:	4295      	cmp	r5, r2
 800e60a:	d003      	beq.n	800e614 <__mcmp+0x2c>
 800e60c:	d205      	bcs.n	800e61a <__mcmp+0x32>
 800e60e:	f04f 30ff 	mov.w	r0, #4294967295
 800e612:	bd30      	pop	{r4, r5, pc}
 800e614:	42a3      	cmp	r3, r4
 800e616:	d3f3      	bcc.n	800e600 <__mcmp+0x18>
 800e618:	e7fb      	b.n	800e612 <__mcmp+0x2a>
 800e61a:	2001      	movs	r0, #1
 800e61c:	e7f9      	b.n	800e612 <__mcmp+0x2a>
	...

0800e620 <__mdiff>:
 800e620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	4689      	mov	r9, r1
 800e626:	4606      	mov	r6, r0
 800e628:	4611      	mov	r1, r2
 800e62a:	4648      	mov	r0, r9
 800e62c:	4614      	mov	r4, r2
 800e62e:	f7ff ffdb 	bl	800e5e8 <__mcmp>
 800e632:	1e05      	subs	r5, r0, #0
 800e634:	d112      	bne.n	800e65c <__mdiff+0x3c>
 800e636:	4629      	mov	r1, r5
 800e638:	4630      	mov	r0, r6
 800e63a:	f7ff fd11 	bl	800e060 <_Balloc>
 800e63e:	4602      	mov	r2, r0
 800e640:	b928      	cbnz	r0, 800e64e <__mdiff+0x2e>
 800e642:	4b3f      	ldr	r3, [pc, #252]	@ (800e740 <__mdiff+0x120>)
 800e644:	f240 2137 	movw	r1, #567	@ 0x237
 800e648:	483e      	ldr	r0, [pc, #248]	@ (800e744 <__mdiff+0x124>)
 800e64a:	f7fe fa53 	bl	800caf4 <__assert_func>
 800e64e:	2301      	movs	r3, #1
 800e650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e654:	4610      	mov	r0, r2
 800e656:	b003      	add	sp, #12
 800e658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65c:	bfbc      	itt	lt
 800e65e:	464b      	movlt	r3, r9
 800e660:	46a1      	movlt	r9, r4
 800e662:	4630      	mov	r0, r6
 800e664:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e668:	bfba      	itte	lt
 800e66a:	461c      	movlt	r4, r3
 800e66c:	2501      	movlt	r5, #1
 800e66e:	2500      	movge	r5, #0
 800e670:	f7ff fcf6 	bl	800e060 <_Balloc>
 800e674:	4602      	mov	r2, r0
 800e676:	b918      	cbnz	r0, 800e680 <__mdiff+0x60>
 800e678:	4b31      	ldr	r3, [pc, #196]	@ (800e740 <__mdiff+0x120>)
 800e67a:	f240 2145 	movw	r1, #581	@ 0x245
 800e67e:	e7e3      	b.n	800e648 <__mdiff+0x28>
 800e680:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e684:	6926      	ldr	r6, [r4, #16]
 800e686:	60c5      	str	r5, [r0, #12]
 800e688:	f109 0310 	add.w	r3, r9, #16
 800e68c:	f109 0514 	add.w	r5, r9, #20
 800e690:	f104 0e14 	add.w	lr, r4, #20
 800e694:	f100 0b14 	add.w	fp, r0, #20
 800e698:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e69c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6a0:	9301      	str	r3, [sp, #4]
 800e6a2:	46d9      	mov	r9, fp
 800e6a4:	f04f 0c00 	mov.w	ip, #0
 800e6a8:	9b01      	ldr	r3, [sp, #4]
 800e6aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e6ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e6b2:	9301      	str	r3, [sp, #4]
 800e6b4:	fa1f f38a 	uxth.w	r3, sl
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	b283      	uxth	r3, r0
 800e6bc:	1acb      	subs	r3, r1, r3
 800e6be:	0c00      	lsrs	r0, r0, #16
 800e6c0:	4463      	add	r3, ip
 800e6c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e6c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e6d0:	4576      	cmp	r6, lr
 800e6d2:	f849 3b04 	str.w	r3, [r9], #4
 800e6d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6da:	d8e5      	bhi.n	800e6a8 <__mdiff+0x88>
 800e6dc:	1b33      	subs	r3, r6, r4
 800e6de:	3b15      	subs	r3, #21
 800e6e0:	f023 0303 	bic.w	r3, r3, #3
 800e6e4:	3415      	adds	r4, #21
 800e6e6:	3304      	adds	r3, #4
 800e6e8:	42a6      	cmp	r6, r4
 800e6ea:	bf38      	it	cc
 800e6ec:	2304      	movcc	r3, #4
 800e6ee:	441d      	add	r5, r3
 800e6f0:	445b      	add	r3, fp
 800e6f2:	461e      	mov	r6, r3
 800e6f4:	462c      	mov	r4, r5
 800e6f6:	4544      	cmp	r4, r8
 800e6f8:	d30e      	bcc.n	800e718 <__mdiff+0xf8>
 800e6fa:	f108 0103 	add.w	r1, r8, #3
 800e6fe:	1b49      	subs	r1, r1, r5
 800e700:	f021 0103 	bic.w	r1, r1, #3
 800e704:	3d03      	subs	r5, #3
 800e706:	45a8      	cmp	r8, r5
 800e708:	bf38      	it	cc
 800e70a:	2100      	movcc	r1, #0
 800e70c:	440b      	add	r3, r1
 800e70e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e712:	b191      	cbz	r1, 800e73a <__mdiff+0x11a>
 800e714:	6117      	str	r7, [r2, #16]
 800e716:	e79d      	b.n	800e654 <__mdiff+0x34>
 800e718:	f854 1b04 	ldr.w	r1, [r4], #4
 800e71c:	46e6      	mov	lr, ip
 800e71e:	0c08      	lsrs	r0, r1, #16
 800e720:	fa1c fc81 	uxtah	ip, ip, r1
 800e724:	4471      	add	r1, lr
 800e726:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e72a:	b289      	uxth	r1, r1
 800e72c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e730:	f846 1b04 	str.w	r1, [r6], #4
 800e734:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e738:	e7dd      	b.n	800e6f6 <__mdiff+0xd6>
 800e73a:	3f01      	subs	r7, #1
 800e73c:	e7e7      	b.n	800e70e <__mdiff+0xee>
 800e73e:	bf00      	nop
 800e740:	08010d63 	.word	0x08010d63
 800e744:	08010dd4 	.word	0x08010dd4

0800e748 <__ulp>:
 800e748:	b082      	sub	sp, #8
 800e74a:	ed8d 0b00 	vstr	d0, [sp]
 800e74e:	9a01      	ldr	r2, [sp, #4]
 800e750:	4b0f      	ldr	r3, [pc, #60]	@ (800e790 <__ulp+0x48>)
 800e752:	4013      	ands	r3, r2
 800e754:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	dc08      	bgt.n	800e76e <__ulp+0x26>
 800e75c:	425b      	negs	r3, r3
 800e75e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e762:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e766:	da04      	bge.n	800e772 <__ulp+0x2a>
 800e768:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e76c:	4113      	asrs	r3, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	e008      	b.n	800e784 <__ulp+0x3c>
 800e772:	f1a2 0314 	sub.w	r3, r2, #20
 800e776:	2b1e      	cmp	r3, #30
 800e778:	bfda      	itte	le
 800e77a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e77e:	40da      	lsrle	r2, r3
 800e780:	2201      	movgt	r2, #1
 800e782:	2300      	movs	r3, #0
 800e784:	4619      	mov	r1, r3
 800e786:	4610      	mov	r0, r2
 800e788:	ec41 0b10 	vmov	d0, r0, r1
 800e78c:	b002      	add	sp, #8
 800e78e:	4770      	bx	lr
 800e790:	7ff00000 	.word	0x7ff00000

0800e794 <__b2d>:
 800e794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e798:	6906      	ldr	r6, [r0, #16]
 800e79a:	f100 0814 	add.w	r8, r0, #20
 800e79e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e7a2:	1f37      	subs	r7, r6, #4
 800e7a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	f7ff fd4b 	bl	800e244 <__hi0bits>
 800e7ae:	f1c0 0320 	rsb	r3, r0, #32
 800e7b2:	280a      	cmp	r0, #10
 800e7b4:	600b      	str	r3, [r1, #0]
 800e7b6:	491b      	ldr	r1, [pc, #108]	@ (800e824 <__b2d+0x90>)
 800e7b8:	dc15      	bgt.n	800e7e6 <__b2d+0x52>
 800e7ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800e7be:	fa22 f30c 	lsr.w	r3, r2, ip
 800e7c2:	45b8      	cmp	r8, r7
 800e7c4:	ea43 0501 	orr.w	r5, r3, r1
 800e7c8:	bf34      	ite	cc
 800e7ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e7ce:	2300      	movcs	r3, #0
 800e7d0:	3015      	adds	r0, #21
 800e7d2:	fa02 f000 	lsl.w	r0, r2, r0
 800e7d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e7da:	4303      	orrs	r3, r0
 800e7dc:	461c      	mov	r4, r3
 800e7de:	ec45 4b10 	vmov	d0, r4, r5
 800e7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e6:	45b8      	cmp	r8, r7
 800e7e8:	bf3a      	itte	cc
 800e7ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e7ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800e7f2:	2300      	movcs	r3, #0
 800e7f4:	380b      	subs	r0, #11
 800e7f6:	d012      	beq.n	800e81e <__b2d+0x8a>
 800e7f8:	f1c0 0120 	rsb	r1, r0, #32
 800e7fc:	fa23 f401 	lsr.w	r4, r3, r1
 800e800:	4082      	lsls	r2, r0
 800e802:	4322      	orrs	r2, r4
 800e804:	4547      	cmp	r7, r8
 800e806:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e80a:	bf8c      	ite	hi
 800e80c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e810:	2200      	movls	r2, #0
 800e812:	4083      	lsls	r3, r0
 800e814:	40ca      	lsrs	r2, r1
 800e816:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e81a:	4313      	orrs	r3, r2
 800e81c:	e7de      	b.n	800e7dc <__b2d+0x48>
 800e81e:	ea42 0501 	orr.w	r5, r2, r1
 800e822:	e7db      	b.n	800e7dc <__b2d+0x48>
 800e824:	3ff00000 	.word	0x3ff00000

0800e828 <__d2b>:
 800e828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e82c:	460f      	mov	r7, r1
 800e82e:	2101      	movs	r1, #1
 800e830:	ec59 8b10 	vmov	r8, r9, d0
 800e834:	4616      	mov	r6, r2
 800e836:	f7ff fc13 	bl	800e060 <_Balloc>
 800e83a:	4604      	mov	r4, r0
 800e83c:	b930      	cbnz	r0, 800e84c <__d2b+0x24>
 800e83e:	4602      	mov	r2, r0
 800e840:	4b23      	ldr	r3, [pc, #140]	@ (800e8d0 <__d2b+0xa8>)
 800e842:	4824      	ldr	r0, [pc, #144]	@ (800e8d4 <__d2b+0xac>)
 800e844:	f240 310f 	movw	r1, #783	@ 0x30f
 800e848:	f7fe f954 	bl	800caf4 <__assert_func>
 800e84c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e854:	b10d      	cbz	r5, 800e85a <__d2b+0x32>
 800e856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	f1b8 0300 	subs.w	r3, r8, #0
 800e860:	d023      	beq.n	800e8aa <__d2b+0x82>
 800e862:	4668      	mov	r0, sp
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	f7ff fd0c 	bl	800e282 <__lo0bits>
 800e86a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e86e:	b1d0      	cbz	r0, 800e8a6 <__d2b+0x7e>
 800e870:	f1c0 0320 	rsb	r3, r0, #32
 800e874:	fa02 f303 	lsl.w	r3, r2, r3
 800e878:	430b      	orrs	r3, r1
 800e87a:	40c2      	lsrs	r2, r0
 800e87c:	6163      	str	r3, [r4, #20]
 800e87e:	9201      	str	r2, [sp, #4]
 800e880:	9b01      	ldr	r3, [sp, #4]
 800e882:	61a3      	str	r3, [r4, #24]
 800e884:	2b00      	cmp	r3, #0
 800e886:	bf0c      	ite	eq
 800e888:	2201      	moveq	r2, #1
 800e88a:	2202      	movne	r2, #2
 800e88c:	6122      	str	r2, [r4, #16]
 800e88e:	b1a5      	cbz	r5, 800e8ba <__d2b+0x92>
 800e890:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e894:	4405      	add	r5, r0
 800e896:	603d      	str	r5, [r7, #0]
 800e898:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e89c:	6030      	str	r0, [r6, #0]
 800e89e:	4620      	mov	r0, r4
 800e8a0:	b003      	add	sp, #12
 800e8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8a6:	6161      	str	r1, [r4, #20]
 800e8a8:	e7ea      	b.n	800e880 <__d2b+0x58>
 800e8aa:	a801      	add	r0, sp, #4
 800e8ac:	f7ff fce9 	bl	800e282 <__lo0bits>
 800e8b0:	9b01      	ldr	r3, [sp, #4]
 800e8b2:	6163      	str	r3, [r4, #20]
 800e8b4:	3020      	adds	r0, #32
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	e7e8      	b.n	800e88c <__d2b+0x64>
 800e8ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e8c2:	6038      	str	r0, [r7, #0]
 800e8c4:	6918      	ldr	r0, [r3, #16]
 800e8c6:	f7ff fcbd 	bl	800e244 <__hi0bits>
 800e8ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8ce:	e7e5      	b.n	800e89c <__d2b+0x74>
 800e8d0:	08010d63 	.word	0x08010d63
 800e8d4:	08010dd4 	.word	0x08010dd4

0800e8d8 <__ratio>:
 800e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8dc:	b085      	sub	sp, #20
 800e8de:	e9cd 1000 	strd	r1, r0, [sp]
 800e8e2:	a902      	add	r1, sp, #8
 800e8e4:	f7ff ff56 	bl	800e794 <__b2d>
 800e8e8:	9800      	ldr	r0, [sp, #0]
 800e8ea:	a903      	add	r1, sp, #12
 800e8ec:	ec55 4b10 	vmov	r4, r5, d0
 800e8f0:	f7ff ff50 	bl	800e794 <__b2d>
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	6919      	ldr	r1, [r3, #16]
 800e8f8:	9b00      	ldr	r3, [sp, #0]
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	1ac9      	subs	r1, r1, r3
 800e8fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e902:	1a9b      	subs	r3, r3, r2
 800e904:	ec5b ab10 	vmov	sl, fp, d0
 800e908:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	bfce      	itee	gt
 800e910:	462a      	movgt	r2, r5
 800e912:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e916:	465a      	movle	r2, fp
 800e918:	462f      	mov	r7, r5
 800e91a:	46d9      	mov	r9, fp
 800e91c:	bfcc      	ite	gt
 800e91e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e922:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e926:	464b      	mov	r3, r9
 800e928:	4652      	mov	r2, sl
 800e92a:	4620      	mov	r0, r4
 800e92c:	4639      	mov	r1, r7
 800e92e:	f7f1 ff95 	bl	800085c <__aeabi_ddiv>
 800e932:	ec41 0b10 	vmov	d0, r0, r1
 800e936:	b005      	add	sp, #20
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e93c <__copybits>:
 800e93c:	3901      	subs	r1, #1
 800e93e:	b570      	push	{r4, r5, r6, lr}
 800e940:	1149      	asrs	r1, r1, #5
 800e942:	6914      	ldr	r4, [r2, #16]
 800e944:	3101      	adds	r1, #1
 800e946:	f102 0314 	add.w	r3, r2, #20
 800e94a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e94e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e952:	1f05      	subs	r5, r0, #4
 800e954:	42a3      	cmp	r3, r4
 800e956:	d30c      	bcc.n	800e972 <__copybits+0x36>
 800e958:	1aa3      	subs	r3, r4, r2
 800e95a:	3b11      	subs	r3, #17
 800e95c:	f023 0303 	bic.w	r3, r3, #3
 800e960:	3211      	adds	r2, #17
 800e962:	42a2      	cmp	r2, r4
 800e964:	bf88      	it	hi
 800e966:	2300      	movhi	r3, #0
 800e968:	4418      	add	r0, r3
 800e96a:	2300      	movs	r3, #0
 800e96c:	4288      	cmp	r0, r1
 800e96e:	d305      	bcc.n	800e97c <__copybits+0x40>
 800e970:	bd70      	pop	{r4, r5, r6, pc}
 800e972:	f853 6b04 	ldr.w	r6, [r3], #4
 800e976:	f845 6f04 	str.w	r6, [r5, #4]!
 800e97a:	e7eb      	b.n	800e954 <__copybits+0x18>
 800e97c:	f840 3b04 	str.w	r3, [r0], #4
 800e980:	e7f4      	b.n	800e96c <__copybits+0x30>

0800e982 <__any_on>:
 800e982:	f100 0214 	add.w	r2, r0, #20
 800e986:	6900      	ldr	r0, [r0, #16]
 800e988:	114b      	asrs	r3, r1, #5
 800e98a:	4298      	cmp	r0, r3
 800e98c:	b510      	push	{r4, lr}
 800e98e:	db11      	blt.n	800e9b4 <__any_on+0x32>
 800e990:	dd0a      	ble.n	800e9a8 <__any_on+0x26>
 800e992:	f011 011f 	ands.w	r1, r1, #31
 800e996:	d007      	beq.n	800e9a8 <__any_on+0x26>
 800e998:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e99c:	fa24 f001 	lsr.w	r0, r4, r1
 800e9a0:	fa00 f101 	lsl.w	r1, r0, r1
 800e9a4:	428c      	cmp	r4, r1
 800e9a6:	d10b      	bne.n	800e9c0 <__any_on+0x3e>
 800e9a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d803      	bhi.n	800e9b8 <__any_on+0x36>
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	bd10      	pop	{r4, pc}
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	e7f7      	b.n	800e9a8 <__any_on+0x26>
 800e9b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	d0f5      	beq.n	800e9ac <__any_on+0x2a>
 800e9c0:	2001      	movs	r0, #1
 800e9c2:	e7f6      	b.n	800e9b2 <__any_on+0x30>

0800e9c4 <_strtol_l.constprop.0>:
 800e9c4:	2b24      	cmp	r3, #36	@ 0x24
 800e9c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ca:	4686      	mov	lr, r0
 800e9cc:	4690      	mov	r8, r2
 800e9ce:	d801      	bhi.n	800e9d4 <_strtol_l.constprop.0+0x10>
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d106      	bne.n	800e9e2 <_strtol_l.constprop.0+0x1e>
 800e9d4:	f7fe f844 	bl	800ca60 <__errno>
 800e9d8:	2316      	movs	r3, #22
 800e9da:	6003      	str	r3, [r0, #0]
 800e9dc:	2000      	movs	r0, #0
 800e9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e2:	4834      	ldr	r0, [pc, #208]	@ (800eab4 <_strtol_l.constprop.0+0xf0>)
 800e9e4:	460d      	mov	r5, r1
 800e9e6:	462a      	mov	r2, r5
 800e9e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9ec:	5d06      	ldrb	r6, [r0, r4]
 800e9ee:	f016 0608 	ands.w	r6, r6, #8
 800e9f2:	d1f8      	bne.n	800e9e6 <_strtol_l.constprop.0+0x22>
 800e9f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e9f6:	d12d      	bne.n	800ea54 <_strtol_l.constprop.0+0x90>
 800e9f8:	782c      	ldrb	r4, [r5, #0]
 800e9fa:	2601      	movs	r6, #1
 800e9fc:	1c95      	adds	r5, r2, #2
 800e9fe:	f033 0210 	bics.w	r2, r3, #16
 800ea02:	d109      	bne.n	800ea18 <_strtol_l.constprop.0+0x54>
 800ea04:	2c30      	cmp	r4, #48	@ 0x30
 800ea06:	d12a      	bne.n	800ea5e <_strtol_l.constprop.0+0x9a>
 800ea08:	782a      	ldrb	r2, [r5, #0]
 800ea0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea0e:	2a58      	cmp	r2, #88	@ 0x58
 800ea10:	d125      	bne.n	800ea5e <_strtol_l.constprop.0+0x9a>
 800ea12:	786c      	ldrb	r4, [r5, #1]
 800ea14:	2310      	movs	r3, #16
 800ea16:	3502      	adds	r5, #2
 800ea18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ea1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ea20:	2200      	movs	r2, #0
 800ea22:	fbbc f9f3 	udiv	r9, ip, r3
 800ea26:	4610      	mov	r0, r2
 800ea28:	fb03 ca19 	mls	sl, r3, r9, ip
 800ea2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ea30:	2f09      	cmp	r7, #9
 800ea32:	d81b      	bhi.n	800ea6c <_strtol_l.constprop.0+0xa8>
 800ea34:	463c      	mov	r4, r7
 800ea36:	42a3      	cmp	r3, r4
 800ea38:	dd27      	ble.n	800ea8a <_strtol_l.constprop.0+0xc6>
 800ea3a:	1c57      	adds	r7, r2, #1
 800ea3c:	d007      	beq.n	800ea4e <_strtol_l.constprop.0+0x8a>
 800ea3e:	4581      	cmp	r9, r0
 800ea40:	d320      	bcc.n	800ea84 <_strtol_l.constprop.0+0xc0>
 800ea42:	d101      	bne.n	800ea48 <_strtol_l.constprop.0+0x84>
 800ea44:	45a2      	cmp	sl, r4
 800ea46:	db1d      	blt.n	800ea84 <_strtol_l.constprop.0+0xc0>
 800ea48:	fb00 4003 	mla	r0, r0, r3, r4
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea52:	e7eb      	b.n	800ea2c <_strtol_l.constprop.0+0x68>
 800ea54:	2c2b      	cmp	r4, #43	@ 0x2b
 800ea56:	bf04      	itt	eq
 800ea58:	782c      	ldrbeq	r4, [r5, #0]
 800ea5a:	1c95      	addeq	r5, r2, #2
 800ea5c:	e7cf      	b.n	800e9fe <_strtol_l.constprop.0+0x3a>
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1da      	bne.n	800ea18 <_strtol_l.constprop.0+0x54>
 800ea62:	2c30      	cmp	r4, #48	@ 0x30
 800ea64:	bf0c      	ite	eq
 800ea66:	2308      	moveq	r3, #8
 800ea68:	230a      	movne	r3, #10
 800ea6a:	e7d5      	b.n	800ea18 <_strtol_l.constprop.0+0x54>
 800ea6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ea70:	2f19      	cmp	r7, #25
 800ea72:	d801      	bhi.n	800ea78 <_strtol_l.constprop.0+0xb4>
 800ea74:	3c37      	subs	r4, #55	@ 0x37
 800ea76:	e7de      	b.n	800ea36 <_strtol_l.constprop.0+0x72>
 800ea78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ea7c:	2f19      	cmp	r7, #25
 800ea7e:	d804      	bhi.n	800ea8a <_strtol_l.constprop.0+0xc6>
 800ea80:	3c57      	subs	r4, #87	@ 0x57
 800ea82:	e7d8      	b.n	800ea36 <_strtol_l.constprop.0+0x72>
 800ea84:	f04f 32ff 	mov.w	r2, #4294967295
 800ea88:	e7e1      	b.n	800ea4e <_strtol_l.constprop.0+0x8a>
 800ea8a:	1c53      	adds	r3, r2, #1
 800ea8c:	d108      	bne.n	800eaa0 <_strtol_l.constprop.0+0xdc>
 800ea8e:	2322      	movs	r3, #34	@ 0x22
 800ea90:	f8ce 3000 	str.w	r3, [lr]
 800ea94:	4660      	mov	r0, ip
 800ea96:	f1b8 0f00 	cmp.w	r8, #0
 800ea9a:	d0a0      	beq.n	800e9de <_strtol_l.constprop.0+0x1a>
 800ea9c:	1e69      	subs	r1, r5, #1
 800ea9e:	e006      	b.n	800eaae <_strtol_l.constprop.0+0xea>
 800eaa0:	b106      	cbz	r6, 800eaa4 <_strtol_l.constprop.0+0xe0>
 800eaa2:	4240      	negs	r0, r0
 800eaa4:	f1b8 0f00 	cmp.w	r8, #0
 800eaa8:	d099      	beq.n	800e9de <_strtol_l.constprop.0+0x1a>
 800eaaa:	2a00      	cmp	r2, #0
 800eaac:	d1f6      	bne.n	800ea9c <_strtol_l.constprop.0+0xd8>
 800eaae:	f8c8 1000 	str.w	r1, [r8]
 800eab2:	e794      	b.n	800e9de <_strtol_l.constprop.0+0x1a>
 800eab4:	08010f31 	.word	0x08010f31

0800eab8 <_strtol_r>:
 800eab8:	f7ff bf84 	b.w	800e9c4 <_strtol_l.constprop.0>

0800eabc <__ascii_wctomb>:
 800eabc:	4603      	mov	r3, r0
 800eabe:	4608      	mov	r0, r1
 800eac0:	b141      	cbz	r1, 800ead4 <__ascii_wctomb+0x18>
 800eac2:	2aff      	cmp	r2, #255	@ 0xff
 800eac4:	d904      	bls.n	800ead0 <__ascii_wctomb+0x14>
 800eac6:	228a      	movs	r2, #138	@ 0x8a
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	f04f 30ff 	mov.w	r0, #4294967295
 800eace:	4770      	bx	lr
 800ead0:	700a      	strb	r2, [r1, #0]
 800ead2:	2001      	movs	r0, #1
 800ead4:	4770      	bx	lr

0800ead6 <__ssputs_r>:
 800ead6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eada:	688e      	ldr	r6, [r1, #8]
 800eadc:	461f      	mov	r7, r3
 800eade:	42be      	cmp	r6, r7
 800eae0:	680b      	ldr	r3, [r1, #0]
 800eae2:	4682      	mov	sl, r0
 800eae4:	460c      	mov	r4, r1
 800eae6:	4690      	mov	r8, r2
 800eae8:	d82d      	bhi.n	800eb46 <__ssputs_r+0x70>
 800eaea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eaee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eaf2:	d026      	beq.n	800eb42 <__ssputs_r+0x6c>
 800eaf4:	6965      	ldr	r5, [r4, #20]
 800eaf6:	6909      	ldr	r1, [r1, #16]
 800eaf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eafc:	eba3 0901 	sub.w	r9, r3, r1
 800eb00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb04:	1c7b      	adds	r3, r7, #1
 800eb06:	444b      	add	r3, r9
 800eb08:	106d      	asrs	r5, r5, #1
 800eb0a:	429d      	cmp	r5, r3
 800eb0c:	bf38      	it	cc
 800eb0e:	461d      	movcc	r5, r3
 800eb10:	0553      	lsls	r3, r2, #21
 800eb12:	d527      	bpl.n	800eb64 <__ssputs_r+0x8e>
 800eb14:	4629      	mov	r1, r5
 800eb16:	f7ff fa05 	bl	800df24 <_malloc_r>
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	b360      	cbz	r0, 800eb78 <__ssputs_r+0xa2>
 800eb1e:	6921      	ldr	r1, [r4, #16]
 800eb20:	464a      	mov	r2, r9
 800eb22:	f7fd ffca 	bl	800caba <memcpy>
 800eb26:	89a3      	ldrh	r3, [r4, #12]
 800eb28:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb30:	81a3      	strh	r3, [r4, #12]
 800eb32:	6126      	str	r6, [r4, #16]
 800eb34:	6165      	str	r5, [r4, #20]
 800eb36:	444e      	add	r6, r9
 800eb38:	eba5 0509 	sub.w	r5, r5, r9
 800eb3c:	6026      	str	r6, [r4, #0]
 800eb3e:	60a5      	str	r5, [r4, #8]
 800eb40:	463e      	mov	r6, r7
 800eb42:	42be      	cmp	r6, r7
 800eb44:	d900      	bls.n	800eb48 <__ssputs_r+0x72>
 800eb46:	463e      	mov	r6, r7
 800eb48:	6820      	ldr	r0, [r4, #0]
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	4641      	mov	r1, r8
 800eb4e:	f000 fb7b 	bl	800f248 <memmove>
 800eb52:	68a3      	ldr	r3, [r4, #8]
 800eb54:	1b9b      	subs	r3, r3, r6
 800eb56:	60a3      	str	r3, [r4, #8]
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	4433      	add	r3, r6
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb64:	462a      	mov	r2, r5
 800eb66:	f000 fbd6 	bl	800f316 <_realloc_r>
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	2800      	cmp	r0, #0
 800eb6e:	d1e0      	bne.n	800eb32 <__ssputs_r+0x5c>
 800eb70:	6921      	ldr	r1, [r4, #16]
 800eb72:	4650      	mov	r0, sl
 800eb74:	f7fe fe28 	bl	800d7c8 <_free_r>
 800eb78:	230c      	movs	r3, #12
 800eb7a:	f8ca 3000 	str.w	r3, [sl]
 800eb7e:	89a3      	ldrh	r3, [r4, #12]
 800eb80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb84:	81a3      	strh	r3, [r4, #12]
 800eb86:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8a:	e7e9      	b.n	800eb60 <__ssputs_r+0x8a>

0800eb8c <_svfiprintf_r>:
 800eb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	4698      	mov	r8, r3
 800eb92:	898b      	ldrh	r3, [r1, #12]
 800eb94:	061b      	lsls	r3, r3, #24
 800eb96:	b09d      	sub	sp, #116	@ 0x74
 800eb98:	4607      	mov	r7, r0
 800eb9a:	460d      	mov	r5, r1
 800eb9c:	4614      	mov	r4, r2
 800eb9e:	d510      	bpl.n	800ebc2 <_svfiprintf_r+0x36>
 800eba0:	690b      	ldr	r3, [r1, #16]
 800eba2:	b973      	cbnz	r3, 800ebc2 <_svfiprintf_r+0x36>
 800eba4:	2140      	movs	r1, #64	@ 0x40
 800eba6:	f7ff f9bd 	bl	800df24 <_malloc_r>
 800ebaa:	6028      	str	r0, [r5, #0]
 800ebac:	6128      	str	r0, [r5, #16]
 800ebae:	b930      	cbnz	r0, 800ebbe <_svfiprintf_r+0x32>
 800ebb0:	230c      	movs	r3, #12
 800ebb2:	603b      	str	r3, [r7, #0]
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb8:	b01d      	add	sp, #116	@ 0x74
 800ebba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbe:	2340      	movs	r3, #64	@ 0x40
 800ebc0:	616b      	str	r3, [r5, #20]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebc6:	2320      	movs	r3, #32
 800ebc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ebcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebd0:	2330      	movs	r3, #48	@ 0x30
 800ebd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed70 <_svfiprintf_r+0x1e4>
 800ebd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ebda:	f04f 0901 	mov.w	r9, #1
 800ebde:	4623      	mov	r3, r4
 800ebe0:	469a      	mov	sl, r3
 800ebe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebe6:	b10a      	cbz	r2, 800ebec <_svfiprintf_r+0x60>
 800ebe8:	2a25      	cmp	r2, #37	@ 0x25
 800ebea:	d1f9      	bne.n	800ebe0 <_svfiprintf_r+0x54>
 800ebec:	ebba 0b04 	subs.w	fp, sl, r4
 800ebf0:	d00b      	beq.n	800ec0a <_svfiprintf_r+0x7e>
 800ebf2:	465b      	mov	r3, fp
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	f7ff ff6c 	bl	800ead6 <__ssputs_r>
 800ebfe:	3001      	adds	r0, #1
 800ec00:	f000 80a7 	beq.w	800ed52 <_svfiprintf_r+0x1c6>
 800ec04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec06:	445a      	add	r2, fp
 800ec08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 809f 	beq.w	800ed52 <_svfiprintf_r+0x1c6>
 800ec14:	2300      	movs	r3, #0
 800ec16:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec1e:	f10a 0a01 	add.w	sl, sl, #1
 800ec22:	9304      	str	r3, [sp, #16]
 800ec24:	9307      	str	r3, [sp, #28]
 800ec26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec2c:	4654      	mov	r4, sl
 800ec2e:	2205      	movs	r2, #5
 800ec30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec34:	484e      	ldr	r0, [pc, #312]	@ (800ed70 <_svfiprintf_r+0x1e4>)
 800ec36:	f7f1 fad3 	bl	80001e0 <memchr>
 800ec3a:	9a04      	ldr	r2, [sp, #16]
 800ec3c:	b9d8      	cbnz	r0, 800ec76 <_svfiprintf_r+0xea>
 800ec3e:	06d0      	lsls	r0, r2, #27
 800ec40:	bf44      	itt	mi
 800ec42:	2320      	movmi	r3, #32
 800ec44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec48:	0711      	lsls	r1, r2, #28
 800ec4a:	bf44      	itt	mi
 800ec4c:	232b      	movmi	r3, #43	@ 0x2b
 800ec4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec52:	f89a 3000 	ldrb.w	r3, [sl]
 800ec56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec58:	d015      	beq.n	800ec86 <_svfiprintf_r+0xfa>
 800ec5a:	9a07      	ldr	r2, [sp, #28]
 800ec5c:	4654      	mov	r4, sl
 800ec5e:	2000      	movs	r0, #0
 800ec60:	f04f 0c0a 	mov.w	ip, #10
 800ec64:	4621      	mov	r1, r4
 800ec66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec6a:	3b30      	subs	r3, #48	@ 0x30
 800ec6c:	2b09      	cmp	r3, #9
 800ec6e:	d94b      	bls.n	800ed08 <_svfiprintf_r+0x17c>
 800ec70:	b1b0      	cbz	r0, 800eca0 <_svfiprintf_r+0x114>
 800ec72:	9207      	str	r2, [sp, #28]
 800ec74:	e014      	b.n	800eca0 <_svfiprintf_r+0x114>
 800ec76:	eba0 0308 	sub.w	r3, r0, r8
 800ec7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	9304      	str	r3, [sp, #16]
 800ec82:	46a2      	mov	sl, r4
 800ec84:	e7d2      	b.n	800ec2c <_svfiprintf_r+0xa0>
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	1d19      	adds	r1, r3, #4
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	9103      	str	r1, [sp, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfbb      	ittet	lt
 800ec92:	425b      	neglt	r3, r3
 800ec94:	f042 0202 	orrlt.w	r2, r2, #2
 800ec98:	9307      	strge	r3, [sp, #28]
 800ec9a:	9307      	strlt	r3, [sp, #28]
 800ec9c:	bfb8      	it	lt
 800ec9e:	9204      	strlt	r2, [sp, #16]
 800eca0:	7823      	ldrb	r3, [r4, #0]
 800eca2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eca4:	d10a      	bne.n	800ecbc <_svfiprintf_r+0x130>
 800eca6:	7863      	ldrb	r3, [r4, #1]
 800eca8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecaa:	d132      	bne.n	800ed12 <_svfiprintf_r+0x186>
 800ecac:	9b03      	ldr	r3, [sp, #12]
 800ecae:	1d1a      	adds	r2, r3, #4
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	9203      	str	r2, [sp, #12]
 800ecb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecb8:	3402      	adds	r4, #2
 800ecba:	9305      	str	r3, [sp, #20]
 800ecbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ed80 <_svfiprintf_r+0x1f4>
 800ecc0:	7821      	ldrb	r1, [r4, #0]
 800ecc2:	2203      	movs	r2, #3
 800ecc4:	4650      	mov	r0, sl
 800ecc6:	f7f1 fa8b 	bl	80001e0 <memchr>
 800ecca:	b138      	cbz	r0, 800ecdc <_svfiprintf_r+0x150>
 800eccc:	9b04      	ldr	r3, [sp, #16]
 800ecce:	eba0 000a 	sub.w	r0, r0, sl
 800ecd2:	2240      	movs	r2, #64	@ 0x40
 800ecd4:	4082      	lsls	r2, r0
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	3401      	adds	r4, #1
 800ecda:	9304      	str	r3, [sp, #16]
 800ecdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece0:	4824      	ldr	r0, [pc, #144]	@ (800ed74 <_svfiprintf_r+0x1e8>)
 800ece2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ece6:	2206      	movs	r2, #6
 800ece8:	f7f1 fa7a 	bl	80001e0 <memchr>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d036      	beq.n	800ed5e <_svfiprintf_r+0x1d2>
 800ecf0:	4b21      	ldr	r3, [pc, #132]	@ (800ed78 <_svfiprintf_r+0x1ec>)
 800ecf2:	bb1b      	cbnz	r3, 800ed3c <_svfiprintf_r+0x1b0>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	3307      	adds	r3, #7
 800ecf8:	f023 0307 	bic.w	r3, r3, #7
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	9303      	str	r3, [sp, #12]
 800ed00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed02:	4433      	add	r3, r6
 800ed04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed06:	e76a      	b.n	800ebde <_svfiprintf_r+0x52>
 800ed08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	2001      	movs	r0, #1
 800ed10:	e7a8      	b.n	800ec64 <_svfiprintf_r+0xd8>
 800ed12:	2300      	movs	r3, #0
 800ed14:	3401      	adds	r4, #1
 800ed16:	9305      	str	r3, [sp, #20]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	f04f 0c0a 	mov.w	ip, #10
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed24:	3a30      	subs	r2, #48	@ 0x30
 800ed26:	2a09      	cmp	r2, #9
 800ed28:	d903      	bls.n	800ed32 <_svfiprintf_r+0x1a6>
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d0c6      	beq.n	800ecbc <_svfiprintf_r+0x130>
 800ed2e:	9105      	str	r1, [sp, #20]
 800ed30:	e7c4      	b.n	800ecbc <_svfiprintf_r+0x130>
 800ed32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed36:	4604      	mov	r4, r0
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e7f0      	b.n	800ed1e <_svfiprintf_r+0x192>
 800ed3c:	ab03      	add	r3, sp, #12
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	462a      	mov	r2, r5
 800ed42:	4b0e      	ldr	r3, [pc, #56]	@ (800ed7c <_svfiprintf_r+0x1f0>)
 800ed44:	a904      	add	r1, sp, #16
 800ed46:	4638      	mov	r0, r7
 800ed48:	f7fc fdd4 	bl	800b8f4 <_printf_float>
 800ed4c:	1c42      	adds	r2, r0, #1
 800ed4e:	4606      	mov	r6, r0
 800ed50:	d1d6      	bne.n	800ed00 <_svfiprintf_r+0x174>
 800ed52:	89ab      	ldrh	r3, [r5, #12]
 800ed54:	065b      	lsls	r3, r3, #25
 800ed56:	f53f af2d 	bmi.w	800ebb4 <_svfiprintf_r+0x28>
 800ed5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed5c:	e72c      	b.n	800ebb8 <_svfiprintf_r+0x2c>
 800ed5e:	ab03      	add	r3, sp, #12
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	462a      	mov	r2, r5
 800ed64:	4b05      	ldr	r3, [pc, #20]	@ (800ed7c <_svfiprintf_r+0x1f0>)
 800ed66:	a904      	add	r1, sp, #16
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7fd f85b 	bl	800be24 <_printf_i>
 800ed6e:	e7ed      	b.n	800ed4c <_svfiprintf_r+0x1c0>
 800ed70:	08011031 	.word	0x08011031
 800ed74:	0801103b 	.word	0x0801103b
 800ed78:	0800b8f5 	.word	0x0800b8f5
 800ed7c:	0800ead7 	.word	0x0800ead7
 800ed80:	08011037 	.word	0x08011037

0800ed84 <__sfputc_r>:
 800ed84:	6893      	ldr	r3, [r2, #8]
 800ed86:	3b01      	subs	r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	b410      	push	{r4}
 800ed8c:	6093      	str	r3, [r2, #8]
 800ed8e:	da08      	bge.n	800eda2 <__sfputc_r+0x1e>
 800ed90:	6994      	ldr	r4, [r2, #24]
 800ed92:	42a3      	cmp	r3, r4
 800ed94:	db01      	blt.n	800ed9a <__sfputc_r+0x16>
 800ed96:	290a      	cmp	r1, #10
 800ed98:	d103      	bne.n	800eda2 <__sfputc_r+0x1e>
 800ed9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed9e:	f7fd bd0a 	b.w	800c7b6 <__swbuf_r>
 800eda2:	6813      	ldr	r3, [r2, #0]
 800eda4:	1c58      	adds	r0, r3, #1
 800eda6:	6010      	str	r0, [r2, #0]
 800eda8:	7019      	strb	r1, [r3, #0]
 800edaa:	4608      	mov	r0, r1
 800edac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <__sfputs_r>:
 800edb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb4:	4606      	mov	r6, r0
 800edb6:	460f      	mov	r7, r1
 800edb8:	4614      	mov	r4, r2
 800edba:	18d5      	adds	r5, r2, r3
 800edbc:	42ac      	cmp	r4, r5
 800edbe:	d101      	bne.n	800edc4 <__sfputs_r+0x12>
 800edc0:	2000      	movs	r0, #0
 800edc2:	e007      	b.n	800edd4 <__sfputs_r+0x22>
 800edc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edc8:	463a      	mov	r2, r7
 800edca:	4630      	mov	r0, r6
 800edcc:	f7ff ffda 	bl	800ed84 <__sfputc_r>
 800edd0:	1c43      	adds	r3, r0, #1
 800edd2:	d1f3      	bne.n	800edbc <__sfputs_r+0xa>
 800edd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edd8 <_vfiprintf_r>:
 800edd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eddc:	460d      	mov	r5, r1
 800edde:	b09d      	sub	sp, #116	@ 0x74
 800ede0:	4614      	mov	r4, r2
 800ede2:	4698      	mov	r8, r3
 800ede4:	4606      	mov	r6, r0
 800ede6:	b118      	cbz	r0, 800edf0 <_vfiprintf_r+0x18>
 800ede8:	6a03      	ldr	r3, [r0, #32]
 800edea:	b90b      	cbnz	r3, 800edf0 <_vfiprintf_r+0x18>
 800edec:	f7fd fbda 	bl	800c5a4 <__sinit>
 800edf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edf2:	07d9      	lsls	r1, r3, #31
 800edf4:	d405      	bmi.n	800ee02 <_vfiprintf_r+0x2a>
 800edf6:	89ab      	ldrh	r3, [r5, #12]
 800edf8:	059a      	lsls	r2, r3, #22
 800edfa:	d402      	bmi.n	800ee02 <_vfiprintf_r+0x2a>
 800edfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edfe:	f7fd fe5a 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	071b      	lsls	r3, r3, #28
 800ee06:	d501      	bpl.n	800ee0c <_vfiprintf_r+0x34>
 800ee08:	692b      	ldr	r3, [r5, #16]
 800ee0a:	b99b      	cbnz	r3, 800ee34 <_vfiprintf_r+0x5c>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f7fd fd10 	bl	800c834 <__swsetup_r>
 800ee14:	b170      	cbz	r0, 800ee34 <_vfiprintf_r+0x5c>
 800ee16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee18:	07dc      	lsls	r4, r3, #31
 800ee1a:	d504      	bpl.n	800ee26 <_vfiprintf_r+0x4e>
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	b01d      	add	sp, #116	@ 0x74
 800ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee26:	89ab      	ldrh	r3, [r5, #12]
 800ee28:	0598      	lsls	r0, r3, #22
 800ee2a:	d4f7      	bmi.n	800ee1c <_vfiprintf_r+0x44>
 800ee2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee2e:	f7fd fe43 	bl	800cab8 <__retarget_lock_release_recursive>
 800ee32:	e7f3      	b.n	800ee1c <_vfiprintf_r+0x44>
 800ee34:	2300      	movs	r3, #0
 800ee36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee38:	2320      	movs	r3, #32
 800ee3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee42:	2330      	movs	r3, #48	@ 0x30
 800ee44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eff4 <_vfiprintf_r+0x21c>
 800ee48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee4c:	f04f 0901 	mov.w	r9, #1
 800ee50:	4623      	mov	r3, r4
 800ee52:	469a      	mov	sl, r3
 800ee54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee58:	b10a      	cbz	r2, 800ee5e <_vfiprintf_r+0x86>
 800ee5a:	2a25      	cmp	r2, #37	@ 0x25
 800ee5c:	d1f9      	bne.n	800ee52 <_vfiprintf_r+0x7a>
 800ee5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee62:	d00b      	beq.n	800ee7c <_vfiprintf_r+0xa4>
 800ee64:	465b      	mov	r3, fp
 800ee66:	4622      	mov	r2, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f7ff ffa1 	bl	800edb2 <__sfputs_r>
 800ee70:	3001      	adds	r0, #1
 800ee72:	f000 80a7 	beq.w	800efc4 <_vfiprintf_r+0x1ec>
 800ee76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee78:	445a      	add	r2, fp
 800ee7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 809f 	beq.w	800efc4 <_vfiprintf_r+0x1ec>
 800ee86:	2300      	movs	r3, #0
 800ee88:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee90:	f10a 0a01 	add.w	sl, sl, #1
 800ee94:	9304      	str	r3, [sp, #16]
 800ee96:	9307      	str	r3, [sp, #28]
 800ee98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee9e:	4654      	mov	r4, sl
 800eea0:	2205      	movs	r2, #5
 800eea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea6:	4853      	ldr	r0, [pc, #332]	@ (800eff4 <_vfiprintf_r+0x21c>)
 800eea8:	f7f1 f99a 	bl	80001e0 <memchr>
 800eeac:	9a04      	ldr	r2, [sp, #16]
 800eeae:	b9d8      	cbnz	r0, 800eee8 <_vfiprintf_r+0x110>
 800eeb0:	06d1      	lsls	r1, r2, #27
 800eeb2:	bf44      	itt	mi
 800eeb4:	2320      	movmi	r3, #32
 800eeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeba:	0713      	lsls	r3, r2, #28
 800eebc:	bf44      	itt	mi
 800eebe:	232b      	movmi	r3, #43	@ 0x2b
 800eec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eec4:	f89a 3000 	ldrb.w	r3, [sl]
 800eec8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeca:	d015      	beq.n	800eef8 <_vfiprintf_r+0x120>
 800eecc:	9a07      	ldr	r2, [sp, #28]
 800eece:	4654      	mov	r4, sl
 800eed0:	2000      	movs	r0, #0
 800eed2:	f04f 0c0a 	mov.w	ip, #10
 800eed6:	4621      	mov	r1, r4
 800eed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eedc:	3b30      	subs	r3, #48	@ 0x30
 800eede:	2b09      	cmp	r3, #9
 800eee0:	d94b      	bls.n	800ef7a <_vfiprintf_r+0x1a2>
 800eee2:	b1b0      	cbz	r0, 800ef12 <_vfiprintf_r+0x13a>
 800eee4:	9207      	str	r2, [sp, #28]
 800eee6:	e014      	b.n	800ef12 <_vfiprintf_r+0x13a>
 800eee8:	eba0 0308 	sub.w	r3, r0, r8
 800eeec:	fa09 f303 	lsl.w	r3, r9, r3
 800eef0:	4313      	orrs	r3, r2
 800eef2:	9304      	str	r3, [sp, #16]
 800eef4:	46a2      	mov	sl, r4
 800eef6:	e7d2      	b.n	800ee9e <_vfiprintf_r+0xc6>
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	1d19      	adds	r1, r3, #4
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	9103      	str	r1, [sp, #12]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bfbb      	ittet	lt
 800ef04:	425b      	neglt	r3, r3
 800ef06:	f042 0202 	orrlt.w	r2, r2, #2
 800ef0a:	9307      	strge	r3, [sp, #28]
 800ef0c:	9307      	strlt	r3, [sp, #28]
 800ef0e:	bfb8      	it	lt
 800ef10:	9204      	strlt	r2, [sp, #16]
 800ef12:	7823      	ldrb	r3, [r4, #0]
 800ef14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef16:	d10a      	bne.n	800ef2e <_vfiprintf_r+0x156>
 800ef18:	7863      	ldrb	r3, [r4, #1]
 800ef1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef1c:	d132      	bne.n	800ef84 <_vfiprintf_r+0x1ac>
 800ef1e:	9b03      	ldr	r3, [sp, #12]
 800ef20:	1d1a      	adds	r2, r3, #4
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	9203      	str	r2, [sp, #12]
 800ef26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef2a:	3402      	adds	r4, #2
 800ef2c:	9305      	str	r3, [sp, #20]
 800ef2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f004 <_vfiprintf_r+0x22c>
 800ef32:	7821      	ldrb	r1, [r4, #0]
 800ef34:	2203      	movs	r2, #3
 800ef36:	4650      	mov	r0, sl
 800ef38:	f7f1 f952 	bl	80001e0 <memchr>
 800ef3c:	b138      	cbz	r0, 800ef4e <_vfiprintf_r+0x176>
 800ef3e:	9b04      	ldr	r3, [sp, #16]
 800ef40:	eba0 000a 	sub.w	r0, r0, sl
 800ef44:	2240      	movs	r2, #64	@ 0x40
 800ef46:	4082      	lsls	r2, r0
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	3401      	adds	r4, #1
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef52:	4829      	ldr	r0, [pc, #164]	@ (800eff8 <_vfiprintf_r+0x220>)
 800ef54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef58:	2206      	movs	r2, #6
 800ef5a:	f7f1 f941 	bl	80001e0 <memchr>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d03f      	beq.n	800efe2 <_vfiprintf_r+0x20a>
 800ef62:	4b26      	ldr	r3, [pc, #152]	@ (800effc <_vfiprintf_r+0x224>)
 800ef64:	bb1b      	cbnz	r3, 800efae <_vfiprintf_r+0x1d6>
 800ef66:	9b03      	ldr	r3, [sp, #12]
 800ef68:	3307      	adds	r3, #7
 800ef6a:	f023 0307 	bic.w	r3, r3, #7
 800ef6e:	3308      	adds	r3, #8
 800ef70:	9303      	str	r3, [sp, #12]
 800ef72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef74:	443b      	add	r3, r7
 800ef76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef78:	e76a      	b.n	800ee50 <_vfiprintf_r+0x78>
 800ef7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef7e:	460c      	mov	r4, r1
 800ef80:	2001      	movs	r0, #1
 800ef82:	e7a8      	b.n	800eed6 <_vfiprintf_r+0xfe>
 800ef84:	2300      	movs	r3, #0
 800ef86:	3401      	adds	r4, #1
 800ef88:	9305      	str	r3, [sp, #20]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	f04f 0c0a 	mov.w	ip, #10
 800ef90:	4620      	mov	r0, r4
 800ef92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef96:	3a30      	subs	r2, #48	@ 0x30
 800ef98:	2a09      	cmp	r2, #9
 800ef9a:	d903      	bls.n	800efa4 <_vfiprintf_r+0x1cc>
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d0c6      	beq.n	800ef2e <_vfiprintf_r+0x156>
 800efa0:	9105      	str	r1, [sp, #20]
 800efa2:	e7c4      	b.n	800ef2e <_vfiprintf_r+0x156>
 800efa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800efa8:	4604      	mov	r4, r0
 800efaa:	2301      	movs	r3, #1
 800efac:	e7f0      	b.n	800ef90 <_vfiprintf_r+0x1b8>
 800efae:	ab03      	add	r3, sp, #12
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	462a      	mov	r2, r5
 800efb4:	4b12      	ldr	r3, [pc, #72]	@ (800f000 <_vfiprintf_r+0x228>)
 800efb6:	a904      	add	r1, sp, #16
 800efb8:	4630      	mov	r0, r6
 800efba:	f7fc fc9b 	bl	800b8f4 <_printf_float>
 800efbe:	4607      	mov	r7, r0
 800efc0:	1c78      	adds	r0, r7, #1
 800efc2:	d1d6      	bne.n	800ef72 <_vfiprintf_r+0x19a>
 800efc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efc6:	07d9      	lsls	r1, r3, #31
 800efc8:	d405      	bmi.n	800efd6 <_vfiprintf_r+0x1fe>
 800efca:	89ab      	ldrh	r3, [r5, #12]
 800efcc:	059a      	lsls	r2, r3, #22
 800efce:	d402      	bmi.n	800efd6 <_vfiprintf_r+0x1fe>
 800efd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efd2:	f7fd fd71 	bl	800cab8 <__retarget_lock_release_recursive>
 800efd6:	89ab      	ldrh	r3, [r5, #12]
 800efd8:	065b      	lsls	r3, r3, #25
 800efda:	f53f af1f 	bmi.w	800ee1c <_vfiprintf_r+0x44>
 800efde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efe0:	e71e      	b.n	800ee20 <_vfiprintf_r+0x48>
 800efe2:	ab03      	add	r3, sp, #12
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	462a      	mov	r2, r5
 800efe8:	4b05      	ldr	r3, [pc, #20]	@ (800f000 <_vfiprintf_r+0x228>)
 800efea:	a904      	add	r1, sp, #16
 800efec:	4630      	mov	r0, r6
 800efee:	f7fc ff19 	bl	800be24 <_printf_i>
 800eff2:	e7e4      	b.n	800efbe <_vfiprintf_r+0x1e6>
 800eff4:	08011031 	.word	0x08011031
 800eff8:	0801103b 	.word	0x0801103b
 800effc:	0800b8f5 	.word	0x0800b8f5
 800f000:	0800edb3 	.word	0x0800edb3
 800f004:	08011037 	.word	0x08011037

0800f008 <__sflush_r>:
 800f008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f010:	0716      	lsls	r6, r2, #28
 800f012:	4605      	mov	r5, r0
 800f014:	460c      	mov	r4, r1
 800f016:	d454      	bmi.n	800f0c2 <__sflush_r+0xba>
 800f018:	684b      	ldr	r3, [r1, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	dc02      	bgt.n	800f024 <__sflush_r+0x1c>
 800f01e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd48      	ble.n	800f0b6 <__sflush_r+0xae>
 800f024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f026:	2e00      	cmp	r6, #0
 800f028:	d045      	beq.n	800f0b6 <__sflush_r+0xae>
 800f02a:	2300      	movs	r3, #0
 800f02c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f030:	682f      	ldr	r7, [r5, #0]
 800f032:	6a21      	ldr	r1, [r4, #32]
 800f034:	602b      	str	r3, [r5, #0]
 800f036:	d030      	beq.n	800f09a <__sflush_r+0x92>
 800f038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	0759      	lsls	r1, r3, #29
 800f03e:	d505      	bpl.n	800f04c <__sflush_r+0x44>
 800f040:	6863      	ldr	r3, [r4, #4]
 800f042:	1ad2      	subs	r2, r2, r3
 800f044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f046:	b10b      	cbz	r3, 800f04c <__sflush_r+0x44>
 800f048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f04a:	1ad2      	subs	r2, r2, r3
 800f04c:	2300      	movs	r3, #0
 800f04e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f050:	6a21      	ldr	r1, [r4, #32]
 800f052:	4628      	mov	r0, r5
 800f054:	47b0      	blx	r6
 800f056:	1c43      	adds	r3, r0, #1
 800f058:	89a3      	ldrh	r3, [r4, #12]
 800f05a:	d106      	bne.n	800f06a <__sflush_r+0x62>
 800f05c:	6829      	ldr	r1, [r5, #0]
 800f05e:	291d      	cmp	r1, #29
 800f060:	d82b      	bhi.n	800f0ba <__sflush_r+0xb2>
 800f062:	4a2a      	ldr	r2, [pc, #168]	@ (800f10c <__sflush_r+0x104>)
 800f064:	410a      	asrs	r2, r1
 800f066:	07d6      	lsls	r6, r2, #31
 800f068:	d427      	bmi.n	800f0ba <__sflush_r+0xb2>
 800f06a:	2200      	movs	r2, #0
 800f06c:	6062      	str	r2, [r4, #4]
 800f06e:	04d9      	lsls	r1, r3, #19
 800f070:	6922      	ldr	r2, [r4, #16]
 800f072:	6022      	str	r2, [r4, #0]
 800f074:	d504      	bpl.n	800f080 <__sflush_r+0x78>
 800f076:	1c42      	adds	r2, r0, #1
 800f078:	d101      	bne.n	800f07e <__sflush_r+0x76>
 800f07a:	682b      	ldr	r3, [r5, #0]
 800f07c:	b903      	cbnz	r3, 800f080 <__sflush_r+0x78>
 800f07e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f082:	602f      	str	r7, [r5, #0]
 800f084:	b1b9      	cbz	r1, 800f0b6 <__sflush_r+0xae>
 800f086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f08a:	4299      	cmp	r1, r3
 800f08c:	d002      	beq.n	800f094 <__sflush_r+0x8c>
 800f08e:	4628      	mov	r0, r5
 800f090:	f7fe fb9a 	bl	800d7c8 <_free_r>
 800f094:	2300      	movs	r3, #0
 800f096:	6363      	str	r3, [r4, #52]	@ 0x34
 800f098:	e00d      	b.n	800f0b6 <__sflush_r+0xae>
 800f09a:	2301      	movs	r3, #1
 800f09c:	4628      	mov	r0, r5
 800f09e:	47b0      	blx	r6
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	1c50      	adds	r0, r2, #1
 800f0a4:	d1c9      	bne.n	800f03a <__sflush_r+0x32>
 800f0a6:	682b      	ldr	r3, [r5, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0c6      	beq.n	800f03a <__sflush_r+0x32>
 800f0ac:	2b1d      	cmp	r3, #29
 800f0ae:	d001      	beq.n	800f0b4 <__sflush_r+0xac>
 800f0b0:	2b16      	cmp	r3, #22
 800f0b2:	d11e      	bne.n	800f0f2 <__sflush_r+0xea>
 800f0b4:	602f      	str	r7, [r5, #0]
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	e022      	b.n	800f100 <__sflush_r+0xf8>
 800f0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0be:	b21b      	sxth	r3, r3
 800f0c0:	e01b      	b.n	800f0fa <__sflush_r+0xf2>
 800f0c2:	690f      	ldr	r7, [r1, #16]
 800f0c4:	2f00      	cmp	r7, #0
 800f0c6:	d0f6      	beq.n	800f0b6 <__sflush_r+0xae>
 800f0c8:	0793      	lsls	r3, r2, #30
 800f0ca:	680e      	ldr	r6, [r1, #0]
 800f0cc:	bf08      	it	eq
 800f0ce:	694b      	ldreq	r3, [r1, #20]
 800f0d0:	600f      	str	r7, [r1, #0]
 800f0d2:	bf18      	it	ne
 800f0d4:	2300      	movne	r3, #0
 800f0d6:	eba6 0807 	sub.w	r8, r6, r7
 800f0da:	608b      	str	r3, [r1, #8]
 800f0dc:	f1b8 0f00 	cmp.w	r8, #0
 800f0e0:	dde9      	ble.n	800f0b6 <__sflush_r+0xae>
 800f0e2:	6a21      	ldr	r1, [r4, #32]
 800f0e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f0e6:	4643      	mov	r3, r8
 800f0e8:	463a      	mov	r2, r7
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	47b0      	blx	r6
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	dc08      	bgt.n	800f104 <__sflush_r+0xfc>
 800f0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0fa:	81a3      	strh	r3, [r4, #12]
 800f0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f104:	4407      	add	r7, r0
 800f106:	eba8 0800 	sub.w	r8, r8, r0
 800f10a:	e7e7      	b.n	800f0dc <__sflush_r+0xd4>
 800f10c:	dfbffffe 	.word	0xdfbffffe

0800f110 <_fflush_r>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	690b      	ldr	r3, [r1, #16]
 800f114:	4605      	mov	r5, r0
 800f116:	460c      	mov	r4, r1
 800f118:	b913      	cbnz	r3, 800f120 <_fflush_r+0x10>
 800f11a:	2500      	movs	r5, #0
 800f11c:	4628      	mov	r0, r5
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	b118      	cbz	r0, 800f12a <_fflush_r+0x1a>
 800f122:	6a03      	ldr	r3, [r0, #32]
 800f124:	b90b      	cbnz	r3, 800f12a <_fflush_r+0x1a>
 800f126:	f7fd fa3d 	bl	800c5a4 <__sinit>
 800f12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d0f3      	beq.n	800f11a <_fflush_r+0xa>
 800f132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f134:	07d0      	lsls	r0, r2, #31
 800f136:	d404      	bmi.n	800f142 <_fflush_r+0x32>
 800f138:	0599      	lsls	r1, r3, #22
 800f13a:	d402      	bmi.n	800f142 <_fflush_r+0x32>
 800f13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f13e:	f7fd fcba 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800f142:	4628      	mov	r0, r5
 800f144:	4621      	mov	r1, r4
 800f146:	f7ff ff5f 	bl	800f008 <__sflush_r>
 800f14a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f14c:	07da      	lsls	r2, r3, #31
 800f14e:	4605      	mov	r5, r0
 800f150:	d4e4      	bmi.n	800f11c <_fflush_r+0xc>
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	059b      	lsls	r3, r3, #22
 800f156:	d4e1      	bmi.n	800f11c <_fflush_r+0xc>
 800f158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f15a:	f7fd fcad 	bl	800cab8 <__retarget_lock_release_recursive>
 800f15e:	e7dd      	b.n	800f11c <_fflush_r+0xc>

0800f160 <fiprintf>:
 800f160:	b40e      	push	{r1, r2, r3}
 800f162:	b503      	push	{r0, r1, lr}
 800f164:	4601      	mov	r1, r0
 800f166:	ab03      	add	r3, sp, #12
 800f168:	4805      	ldr	r0, [pc, #20]	@ (800f180 <fiprintf+0x20>)
 800f16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f16e:	6800      	ldr	r0, [r0, #0]
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	f7ff fe31 	bl	800edd8 <_vfiprintf_r>
 800f176:	b002      	add	sp, #8
 800f178:	f85d eb04 	ldr.w	lr, [sp], #4
 800f17c:	b003      	add	sp, #12
 800f17e:	4770      	bx	lr
 800f180:	2000018c 	.word	0x2000018c

0800f184 <__swhatbuf_r>:
 800f184:	b570      	push	{r4, r5, r6, lr}
 800f186:	460c      	mov	r4, r1
 800f188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f18c:	2900      	cmp	r1, #0
 800f18e:	b096      	sub	sp, #88	@ 0x58
 800f190:	4615      	mov	r5, r2
 800f192:	461e      	mov	r6, r3
 800f194:	da0d      	bge.n	800f1b2 <__swhatbuf_r+0x2e>
 800f196:	89a3      	ldrh	r3, [r4, #12]
 800f198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f19c:	f04f 0100 	mov.w	r1, #0
 800f1a0:	bf14      	ite	ne
 800f1a2:	2340      	movne	r3, #64	@ 0x40
 800f1a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	6031      	str	r1, [r6, #0]
 800f1ac:	602b      	str	r3, [r5, #0]
 800f1ae:	b016      	add	sp, #88	@ 0x58
 800f1b0:	bd70      	pop	{r4, r5, r6, pc}
 800f1b2:	466a      	mov	r2, sp
 800f1b4:	f000 f862 	bl	800f27c <_fstat_r>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	dbec      	blt.n	800f196 <__swhatbuf_r+0x12>
 800f1bc:	9901      	ldr	r1, [sp, #4]
 800f1be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f1c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f1c6:	4259      	negs	r1, r3
 800f1c8:	4159      	adcs	r1, r3
 800f1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f1ce:	e7eb      	b.n	800f1a8 <__swhatbuf_r+0x24>

0800f1d0 <__smakebuf_r>:
 800f1d0:	898b      	ldrh	r3, [r1, #12]
 800f1d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1d4:	079d      	lsls	r5, r3, #30
 800f1d6:	4606      	mov	r6, r0
 800f1d8:	460c      	mov	r4, r1
 800f1da:	d507      	bpl.n	800f1ec <__smakebuf_r+0x1c>
 800f1dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	6123      	str	r3, [r4, #16]
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	6163      	str	r3, [r4, #20]
 800f1e8:	b003      	add	sp, #12
 800f1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ec:	ab01      	add	r3, sp, #4
 800f1ee:	466a      	mov	r2, sp
 800f1f0:	f7ff ffc8 	bl	800f184 <__swhatbuf_r>
 800f1f4:	9f00      	ldr	r7, [sp, #0]
 800f1f6:	4605      	mov	r5, r0
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f7fe fe92 	bl	800df24 <_malloc_r>
 800f200:	b948      	cbnz	r0, 800f216 <__smakebuf_r+0x46>
 800f202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f206:	059a      	lsls	r2, r3, #22
 800f208:	d4ee      	bmi.n	800f1e8 <__smakebuf_r+0x18>
 800f20a:	f023 0303 	bic.w	r3, r3, #3
 800f20e:	f043 0302 	orr.w	r3, r3, #2
 800f212:	81a3      	strh	r3, [r4, #12]
 800f214:	e7e2      	b.n	800f1dc <__smakebuf_r+0xc>
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	6020      	str	r0, [r4, #0]
 800f21a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f21e:	81a3      	strh	r3, [r4, #12]
 800f220:	9b01      	ldr	r3, [sp, #4]
 800f222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f226:	b15b      	cbz	r3, 800f240 <__smakebuf_r+0x70>
 800f228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f22c:	4630      	mov	r0, r6
 800f22e:	f000 f837 	bl	800f2a0 <_isatty_r>
 800f232:	b128      	cbz	r0, 800f240 <__smakebuf_r+0x70>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f023 0303 	bic.w	r3, r3, #3
 800f23a:	f043 0301 	orr.w	r3, r3, #1
 800f23e:	81a3      	strh	r3, [r4, #12]
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	431d      	orrs	r5, r3
 800f244:	81a5      	strh	r5, [r4, #12]
 800f246:	e7cf      	b.n	800f1e8 <__smakebuf_r+0x18>

0800f248 <memmove>:
 800f248:	4288      	cmp	r0, r1
 800f24a:	b510      	push	{r4, lr}
 800f24c:	eb01 0402 	add.w	r4, r1, r2
 800f250:	d902      	bls.n	800f258 <memmove+0x10>
 800f252:	4284      	cmp	r4, r0
 800f254:	4623      	mov	r3, r4
 800f256:	d807      	bhi.n	800f268 <memmove+0x20>
 800f258:	1e43      	subs	r3, r0, #1
 800f25a:	42a1      	cmp	r1, r4
 800f25c:	d008      	beq.n	800f270 <memmove+0x28>
 800f25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f262:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f266:	e7f8      	b.n	800f25a <memmove+0x12>
 800f268:	4402      	add	r2, r0
 800f26a:	4601      	mov	r1, r0
 800f26c:	428a      	cmp	r2, r1
 800f26e:	d100      	bne.n	800f272 <memmove+0x2a>
 800f270:	bd10      	pop	{r4, pc}
 800f272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f27a:	e7f7      	b.n	800f26c <memmove+0x24>

0800f27c <_fstat_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	@ (800f29c <_fstat_r+0x20>)
 800f280:	2300      	movs	r3, #0
 800f282:	4604      	mov	r4, r0
 800f284:	4608      	mov	r0, r1
 800f286:	4611      	mov	r1, r2
 800f288:	602b      	str	r3, [r5, #0]
 800f28a:	f7f3 fc53 	bl	8002b34 <_fstat>
 800f28e:	1c43      	adds	r3, r0, #1
 800f290:	d102      	bne.n	800f298 <_fstat_r+0x1c>
 800f292:	682b      	ldr	r3, [r5, #0]
 800f294:	b103      	cbz	r3, 800f298 <_fstat_r+0x1c>
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	bd38      	pop	{r3, r4, r5, pc}
 800f29a:	bf00      	nop
 800f29c:	20000bc8 	.word	0x20000bc8

0800f2a0 <_isatty_r>:
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4d06      	ldr	r5, [pc, #24]	@ (800f2bc <_isatty_r+0x1c>)
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	602b      	str	r3, [r5, #0]
 800f2ac:	f7f3 fc52 	bl	8002b54 <_isatty>
 800f2b0:	1c43      	adds	r3, r0, #1
 800f2b2:	d102      	bne.n	800f2ba <_isatty_r+0x1a>
 800f2b4:	682b      	ldr	r3, [r5, #0]
 800f2b6:	b103      	cbz	r3, 800f2ba <_isatty_r+0x1a>
 800f2b8:	6023      	str	r3, [r4, #0]
 800f2ba:	bd38      	pop	{r3, r4, r5, pc}
 800f2bc:	20000bc8 	.word	0x20000bc8

0800f2c0 <_sbrk_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d06      	ldr	r5, [pc, #24]	@ (800f2dc <_sbrk_r+0x1c>)
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	602b      	str	r3, [r5, #0]
 800f2cc:	f7f3 fc5a 	bl	8002b84 <_sbrk>
 800f2d0:	1c43      	adds	r3, r0, #1
 800f2d2:	d102      	bne.n	800f2da <_sbrk_r+0x1a>
 800f2d4:	682b      	ldr	r3, [r5, #0]
 800f2d6:	b103      	cbz	r3, 800f2da <_sbrk_r+0x1a>
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
 800f2dc:	20000bc8 	.word	0x20000bc8

0800f2e0 <abort>:
 800f2e0:	b508      	push	{r3, lr}
 800f2e2:	2006      	movs	r0, #6
 800f2e4:	f000 f86e 	bl	800f3c4 <raise>
 800f2e8:	2001      	movs	r0, #1
 800f2ea:	f7f3 fbd3 	bl	8002a94 <_exit>

0800f2ee <_calloc_r>:
 800f2ee:	b570      	push	{r4, r5, r6, lr}
 800f2f0:	fba1 5402 	umull	r5, r4, r1, r2
 800f2f4:	b93c      	cbnz	r4, 800f306 <_calloc_r+0x18>
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f7fe fe14 	bl	800df24 <_malloc_r>
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	b928      	cbnz	r0, 800f30c <_calloc_r+0x1e>
 800f300:	2600      	movs	r6, #0
 800f302:	4630      	mov	r0, r6
 800f304:	bd70      	pop	{r4, r5, r6, pc}
 800f306:	220c      	movs	r2, #12
 800f308:	6002      	str	r2, [r0, #0]
 800f30a:	e7f9      	b.n	800f300 <_calloc_r+0x12>
 800f30c:	462a      	mov	r2, r5
 800f30e:	4621      	mov	r1, r4
 800f310:	f7fd fae6 	bl	800c8e0 <memset>
 800f314:	e7f5      	b.n	800f302 <_calloc_r+0x14>

0800f316 <_realloc_r>:
 800f316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31a:	4680      	mov	r8, r0
 800f31c:	4615      	mov	r5, r2
 800f31e:	460c      	mov	r4, r1
 800f320:	b921      	cbnz	r1, 800f32c <_realloc_r+0x16>
 800f322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f326:	4611      	mov	r1, r2
 800f328:	f7fe bdfc 	b.w	800df24 <_malloc_r>
 800f32c:	b92a      	cbnz	r2, 800f33a <_realloc_r+0x24>
 800f32e:	f7fe fa4b 	bl	800d7c8 <_free_r>
 800f332:	2400      	movs	r4, #0
 800f334:	4620      	mov	r0, r4
 800f336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f33a:	f000 f85f 	bl	800f3fc <_malloc_usable_size_r>
 800f33e:	4285      	cmp	r5, r0
 800f340:	4606      	mov	r6, r0
 800f342:	d802      	bhi.n	800f34a <_realloc_r+0x34>
 800f344:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f348:	d8f4      	bhi.n	800f334 <_realloc_r+0x1e>
 800f34a:	4629      	mov	r1, r5
 800f34c:	4640      	mov	r0, r8
 800f34e:	f7fe fde9 	bl	800df24 <_malloc_r>
 800f352:	4607      	mov	r7, r0
 800f354:	2800      	cmp	r0, #0
 800f356:	d0ec      	beq.n	800f332 <_realloc_r+0x1c>
 800f358:	42b5      	cmp	r5, r6
 800f35a:	462a      	mov	r2, r5
 800f35c:	4621      	mov	r1, r4
 800f35e:	bf28      	it	cs
 800f360:	4632      	movcs	r2, r6
 800f362:	f7fd fbaa 	bl	800caba <memcpy>
 800f366:	4621      	mov	r1, r4
 800f368:	4640      	mov	r0, r8
 800f36a:	f7fe fa2d 	bl	800d7c8 <_free_r>
 800f36e:	463c      	mov	r4, r7
 800f370:	e7e0      	b.n	800f334 <_realloc_r+0x1e>

0800f372 <_raise_r>:
 800f372:	291f      	cmp	r1, #31
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4605      	mov	r5, r0
 800f378:	460c      	mov	r4, r1
 800f37a:	d904      	bls.n	800f386 <_raise_r+0x14>
 800f37c:	2316      	movs	r3, #22
 800f37e:	6003      	str	r3, [r0, #0]
 800f380:	f04f 30ff 	mov.w	r0, #4294967295
 800f384:	bd38      	pop	{r3, r4, r5, pc}
 800f386:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f388:	b112      	cbz	r2, 800f390 <_raise_r+0x1e>
 800f38a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f38e:	b94b      	cbnz	r3, 800f3a4 <_raise_r+0x32>
 800f390:	4628      	mov	r0, r5
 800f392:	f000 f831 	bl	800f3f8 <_getpid_r>
 800f396:	4622      	mov	r2, r4
 800f398:	4601      	mov	r1, r0
 800f39a:	4628      	mov	r0, r5
 800f39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3a0:	f000 b818 	b.w	800f3d4 <_kill_r>
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d00a      	beq.n	800f3be <_raise_r+0x4c>
 800f3a8:	1c59      	adds	r1, r3, #1
 800f3aa:	d103      	bne.n	800f3b4 <_raise_r+0x42>
 800f3ac:	2316      	movs	r3, #22
 800f3ae:	6003      	str	r3, [r0, #0]
 800f3b0:	2001      	movs	r0, #1
 800f3b2:	e7e7      	b.n	800f384 <_raise_r+0x12>
 800f3b4:	2100      	movs	r1, #0
 800f3b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	4798      	blx	r3
 800f3be:	2000      	movs	r0, #0
 800f3c0:	e7e0      	b.n	800f384 <_raise_r+0x12>
	...

0800f3c4 <raise>:
 800f3c4:	4b02      	ldr	r3, [pc, #8]	@ (800f3d0 <raise+0xc>)
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	6818      	ldr	r0, [r3, #0]
 800f3ca:	f7ff bfd2 	b.w	800f372 <_raise_r>
 800f3ce:	bf00      	nop
 800f3d0:	2000018c 	.word	0x2000018c

0800f3d4 <_kill_r>:
 800f3d4:	b538      	push	{r3, r4, r5, lr}
 800f3d6:	4d07      	ldr	r5, [pc, #28]	@ (800f3f4 <_kill_r+0x20>)
 800f3d8:	2300      	movs	r3, #0
 800f3da:	4604      	mov	r4, r0
 800f3dc:	4608      	mov	r0, r1
 800f3de:	4611      	mov	r1, r2
 800f3e0:	602b      	str	r3, [r5, #0]
 800f3e2:	f7f3 fb47 	bl	8002a74 <_kill>
 800f3e6:	1c43      	adds	r3, r0, #1
 800f3e8:	d102      	bne.n	800f3f0 <_kill_r+0x1c>
 800f3ea:	682b      	ldr	r3, [r5, #0]
 800f3ec:	b103      	cbz	r3, 800f3f0 <_kill_r+0x1c>
 800f3ee:	6023      	str	r3, [r4, #0]
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20000bc8 	.word	0x20000bc8

0800f3f8 <_getpid_r>:
 800f3f8:	f7f3 bb34 	b.w	8002a64 <_getpid>

0800f3fc <_malloc_usable_size_r>:
 800f3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f400:	1f18      	subs	r0, r3, #4
 800f402:	2b00      	cmp	r3, #0
 800f404:	bfbc      	itt	lt
 800f406:	580b      	ldrlt	r3, [r1, r0]
 800f408:	18c0      	addlt	r0, r0, r3
 800f40a:	4770      	bx	lr

0800f40c <sqrt>:
 800f40c:	b538      	push	{r3, r4, r5, lr}
 800f40e:	ed2d 8b02 	vpush	{d8}
 800f412:	ec55 4b10 	vmov	r4, r5, d0
 800f416:	f000 f8cf 	bl	800f5b8 <__ieee754_sqrt>
 800f41a:	4622      	mov	r2, r4
 800f41c:	462b      	mov	r3, r5
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	eeb0 8a40 	vmov.f32	s16, s0
 800f426:	eef0 8a60 	vmov.f32	s17, s1
 800f42a:	f7f1 fb87 	bl	8000b3c <__aeabi_dcmpun>
 800f42e:	b990      	cbnz	r0, 800f456 <sqrt+0x4a>
 800f430:	2200      	movs	r2, #0
 800f432:	2300      	movs	r3, #0
 800f434:	4620      	mov	r0, r4
 800f436:	4629      	mov	r1, r5
 800f438:	f7f1 fb58 	bl	8000aec <__aeabi_dcmplt>
 800f43c:	b158      	cbz	r0, 800f456 <sqrt+0x4a>
 800f43e:	f7fd fb0f 	bl	800ca60 <__errno>
 800f442:	2321      	movs	r3, #33	@ 0x21
 800f444:	6003      	str	r3, [r0, #0]
 800f446:	2200      	movs	r2, #0
 800f448:	2300      	movs	r3, #0
 800f44a:	4610      	mov	r0, r2
 800f44c:	4619      	mov	r1, r3
 800f44e:	f7f1 fa05 	bl	800085c <__aeabi_ddiv>
 800f452:	ec41 0b18 	vmov	d8, r0, r1
 800f456:	eeb0 0a48 	vmov.f32	s0, s16
 800f45a:	eef0 0a68 	vmov.f32	s1, s17
 800f45e:	ecbd 8b02 	vpop	{d8}
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	0000      	movs	r0, r0
	...

0800f468 <cos>:
 800f468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f46a:	ec53 2b10 	vmov	r2, r3, d0
 800f46e:	4826      	ldr	r0, [pc, #152]	@ (800f508 <cos+0xa0>)
 800f470:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f474:	4281      	cmp	r1, r0
 800f476:	d806      	bhi.n	800f486 <cos+0x1e>
 800f478:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f500 <cos+0x98>
 800f47c:	b005      	add	sp, #20
 800f47e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f482:	f000 b975 	b.w	800f770 <__kernel_cos>
 800f486:	4821      	ldr	r0, [pc, #132]	@ (800f50c <cos+0xa4>)
 800f488:	4281      	cmp	r1, r0
 800f48a:	d908      	bls.n	800f49e <cos+0x36>
 800f48c:	4610      	mov	r0, r2
 800f48e:	4619      	mov	r1, r3
 800f490:	f7f0 ff02 	bl	8000298 <__aeabi_dsub>
 800f494:	ec41 0b10 	vmov	d0, r0, r1
 800f498:	b005      	add	sp, #20
 800f49a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f49e:	4668      	mov	r0, sp
 800f4a0:	f000 faea 	bl	800fa78 <__ieee754_rem_pio2>
 800f4a4:	f000 0003 	and.w	r0, r0, #3
 800f4a8:	2801      	cmp	r0, #1
 800f4aa:	d00b      	beq.n	800f4c4 <cos+0x5c>
 800f4ac:	2802      	cmp	r0, #2
 800f4ae:	d015      	beq.n	800f4dc <cos+0x74>
 800f4b0:	b9d8      	cbnz	r0, 800f4ea <cos+0x82>
 800f4b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4b6:	ed9d 0b00 	vldr	d0, [sp]
 800f4ba:	f000 f959 	bl	800f770 <__kernel_cos>
 800f4be:	ec51 0b10 	vmov	r0, r1, d0
 800f4c2:	e7e7      	b.n	800f494 <cos+0x2c>
 800f4c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4c8:	ed9d 0b00 	vldr	d0, [sp]
 800f4cc:	f000 fa18 	bl	800f900 <__kernel_sin>
 800f4d0:	ec53 2b10 	vmov	r2, r3, d0
 800f4d4:	4610      	mov	r0, r2
 800f4d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f4da:	e7db      	b.n	800f494 <cos+0x2c>
 800f4dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4e0:	ed9d 0b00 	vldr	d0, [sp]
 800f4e4:	f000 f944 	bl	800f770 <__kernel_cos>
 800f4e8:	e7f2      	b.n	800f4d0 <cos+0x68>
 800f4ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4ee:	ed9d 0b00 	vldr	d0, [sp]
 800f4f2:	2001      	movs	r0, #1
 800f4f4:	f000 fa04 	bl	800f900 <__kernel_sin>
 800f4f8:	e7e1      	b.n	800f4be <cos+0x56>
 800f4fa:	bf00      	nop
 800f4fc:	f3af 8000 	nop.w
	...
 800f508:	3fe921fb 	.word	0x3fe921fb
 800f50c:	7fefffff 	.word	0x7fefffff

0800f510 <sin>:
 800f510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f512:	ec53 2b10 	vmov	r2, r3, d0
 800f516:	4826      	ldr	r0, [pc, #152]	@ (800f5b0 <sin+0xa0>)
 800f518:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f51c:	4281      	cmp	r1, r0
 800f51e:	d807      	bhi.n	800f530 <sin+0x20>
 800f520:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800f5a8 <sin+0x98>
 800f524:	2000      	movs	r0, #0
 800f526:	b005      	add	sp, #20
 800f528:	f85d eb04 	ldr.w	lr, [sp], #4
 800f52c:	f000 b9e8 	b.w	800f900 <__kernel_sin>
 800f530:	4820      	ldr	r0, [pc, #128]	@ (800f5b4 <sin+0xa4>)
 800f532:	4281      	cmp	r1, r0
 800f534:	d908      	bls.n	800f548 <sin+0x38>
 800f536:	4610      	mov	r0, r2
 800f538:	4619      	mov	r1, r3
 800f53a:	f7f0 fead 	bl	8000298 <__aeabi_dsub>
 800f53e:	ec41 0b10 	vmov	d0, r0, r1
 800f542:	b005      	add	sp, #20
 800f544:	f85d fb04 	ldr.w	pc, [sp], #4
 800f548:	4668      	mov	r0, sp
 800f54a:	f000 fa95 	bl	800fa78 <__ieee754_rem_pio2>
 800f54e:	f000 0003 	and.w	r0, r0, #3
 800f552:	2801      	cmp	r0, #1
 800f554:	d00c      	beq.n	800f570 <sin+0x60>
 800f556:	2802      	cmp	r0, #2
 800f558:	d011      	beq.n	800f57e <sin+0x6e>
 800f55a:	b9e8      	cbnz	r0, 800f598 <sin+0x88>
 800f55c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f560:	ed9d 0b00 	vldr	d0, [sp]
 800f564:	2001      	movs	r0, #1
 800f566:	f000 f9cb 	bl	800f900 <__kernel_sin>
 800f56a:	ec51 0b10 	vmov	r0, r1, d0
 800f56e:	e7e6      	b.n	800f53e <sin+0x2e>
 800f570:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f574:	ed9d 0b00 	vldr	d0, [sp]
 800f578:	f000 f8fa 	bl	800f770 <__kernel_cos>
 800f57c:	e7f5      	b.n	800f56a <sin+0x5a>
 800f57e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f582:	ed9d 0b00 	vldr	d0, [sp]
 800f586:	2001      	movs	r0, #1
 800f588:	f000 f9ba 	bl	800f900 <__kernel_sin>
 800f58c:	ec53 2b10 	vmov	r2, r3, d0
 800f590:	4610      	mov	r0, r2
 800f592:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f596:	e7d2      	b.n	800f53e <sin+0x2e>
 800f598:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f59c:	ed9d 0b00 	vldr	d0, [sp]
 800f5a0:	f000 f8e6 	bl	800f770 <__kernel_cos>
 800f5a4:	e7f2      	b.n	800f58c <sin+0x7c>
 800f5a6:	bf00      	nop
	...
 800f5b0:	3fe921fb 	.word	0x3fe921fb
 800f5b4:	7fefffff 	.word	0x7fefffff

0800f5b8 <__ieee754_sqrt>:
 800f5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	4a68      	ldr	r2, [pc, #416]	@ (800f760 <__ieee754_sqrt+0x1a8>)
 800f5be:	ec55 4b10 	vmov	r4, r5, d0
 800f5c2:	43aa      	bics	r2, r5
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	d110      	bne.n	800f5ec <__ieee754_sqrt+0x34>
 800f5ca:	4622      	mov	r2, r4
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f7f1 f81a 	bl	8000608 <__aeabi_dmul>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	4620      	mov	r0, r4
 800f5da:	4629      	mov	r1, r5
 800f5dc:	f7f0 fe5e 	bl	800029c <__adddf3>
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	460d      	mov	r5, r1
 800f5e4:	ec45 4b10 	vmov	d0, r4, r5
 800f5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ec:	2d00      	cmp	r5, #0
 800f5ee:	dc0e      	bgt.n	800f60e <__ieee754_sqrt+0x56>
 800f5f0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f5f4:	4322      	orrs	r2, r4
 800f5f6:	d0f5      	beq.n	800f5e4 <__ieee754_sqrt+0x2c>
 800f5f8:	b19d      	cbz	r5, 800f622 <__ieee754_sqrt+0x6a>
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f0 fe4a 	bl	8000298 <__aeabi_dsub>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	f7f1 f928 	bl	800085c <__aeabi_ddiv>
 800f60c:	e7e8      	b.n	800f5e0 <__ieee754_sqrt+0x28>
 800f60e:	152a      	asrs	r2, r5, #20
 800f610:	d115      	bne.n	800f63e <__ieee754_sqrt+0x86>
 800f612:	2000      	movs	r0, #0
 800f614:	e009      	b.n	800f62a <__ieee754_sqrt+0x72>
 800f616:	0acb      	lsrs	r3, r1, #11
 800f618:	3a15      	subs	r2, #21
 800f61a:	0549      	lsls	r1, r1, #21
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d0fa      	beq.n	800f616 <__ieee754_sqrt+0x5e>
 800f620:	e7f7      	b.n	800f612 <__ieee754_sqrt+0x5a>
 800f622:	462a      	mov	r2, r5
 800f624:	e7fa      	b.n	800f61c <__ieee754_sqrt+0x64>
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	3001      	adds	r0, #1
 800f62a:	02dc      	lsls	r4, r3, #11
 800f62c:	d5fb      	bpl.n	800f626 <__ieee754_sqrt+0x6e>
 800f62e:	1e44      	subs	r4, r0, #1
 800f630:	1b12      	subs	r2, r2, r4
 800f632:	f1c0 0420 	rsb	r4, r0, #32
 800f636:	fa21 f404 	lsr.w	r4, r1, r4
 800f63a:	4323      	orrs	r3, r4
 800f63c:	4081      	lsls	r1, r0
 800f63e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f642:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f64a:	07d2      	lsls	r2, r2, #31
 800f64c:	bf5c      	itt	pl
 800f64e:	005b      	lslpl	r3, r3, #1
 800f650:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f658:	bf58      	it	pl
 800f65a:	0049      	lslpl	r1, r1, #1
 800f65c:	2600      	movs	r6, #0
 800f65e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f662:	106d      	asrs	r5, r5, #1
 800f664:	0049      	lsls	r1, r1, #1
 800f666:	2016      	movs	r0, #22
 800f668:	4632      	mov	r2, r6
 800f66a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f66e:	1917      	adds	r7, r2, r4
 800f670:	429f      	cmp	r7, r3
 800f672:	bfde      	ittt	le
 800f674:	193a      	addle	r2, r7, r4
 800f676:	1bdb      	suble	r3, r3, r7
 800f678:	1936      	addle	r6, r6, r4
 800f67a:	0fcf      	lsrs	r7, r1, #31
 800f67c:	3801      	subs	r0, #1
 800f67e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f682:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f686:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f68a:	d1f0      	bne.n	800f66e <__ieee754_sqrt+0xb6>
 800f68c:	4604      	mov	r4, r0
 800f68e:	2720      	movs	r7, #32
 800f690:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f694:	429a      	cmp	r2, r3
 800f696:	eb00 0e0c 	add.w	lr, r0, ip
 800f69a:	db02      	blt.n	800f6a2 <__ieee754_sqrt+0xea>
 800f69c:	d113      	bne.n	800f6c6 <__ieee754_sqrt+0x10e>
 800f69e:	458e      	cmp	lr, r1
 800f6a0:	d811      	bhi.n	800f6c6 <__ieee754_sqrt+0x10e>
 800f6a2:	f1be 0f00 	cmp.w	lr, #0
 800f6a6:	eb0e 000c 	add.w	r0, lr, ip
 800f6aa:	da42      	bge.n	800f732 <__ieee754_sqrt+0x17a>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	db40      	blt.n	800f732 <__ieee754_sqrt+0x17a>
 800f6b0:	f102 0801 	add.w	r8, r2, #1
 800f6b4:	1a9b      	subs	r3, r3, r2
 800f6b6:	458e      	cmp	lr, r1
 800f6b8:	bf88      	it	hi
 800f6ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f6be:	eba1 010e 	sub.w	r1, r1, lr
 800f6c2:	4464      	add	r4, ip
 800f6c4:	4642      	mov	r2, r8
 800f6c6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f6ca:	3f01      	subs	r7, #1
 800f6cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f6d0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f6d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f6d8:	d1dc      	bne.n	800f694 <__ieee754_sqrt+0xdc>
 800f6da:	4319      	orrs	r1, r3
 800f6dc:	d01b      	beq.n	800f716 <__ieee754_sqrt+0x15e>
 800f6de:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f764 <__ieee754_sqrt+0x1ac>
 800f6e2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f768 <__ieee754_sqrt+0x1b0>
 800f6e6:	e9da 0100 	ldrd	r0, r1, [sl]
 800f6ea:	e9db 2300 	ldrd	r2, r3, [fp]
 800f6ee:	f7f0 fdd3 	bl	8000298 <__aeabi_dsub>
 800f6f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	4640      	mov	r0, r8
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	f7f1 f9ff 	bl	8000b00 <__aeabi_dcmple>
 800f702:	b140      	cbz	r0, 800f716 <__ieee754_sqrt+0x15e>
 800f704:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f708:	e9da 0100 	ldrd	r0, r1, [sl]
 800f70c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f710:	d111      	bne.n	800f736 <__ieee754_sqrt+0x17e>
 800f712:	3601      	adds	r6, #1
 800f714:	463c      	mov	r4, r7
 800f716:	1072      	asrs	r2, r6, #1
 800f718:	0863      	lsrs	r3, r4, #1
 800f71a:	07f1      	lsls	r1, r6, #31
 800f71c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f720:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f724:	bf48      	it	mi
 800f726:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f72a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f72e:	4618      	mov	r0, r3
 800f730:	e756      	b.n	800f5e0 <__ieee754_sqrt+0x28>
 800f732:	4690      	mov	r8, r2
 800f734:	e7be      	b.n	800f6b4 <__ieee754_sqrt+0xfc>
 800f736:	f7f0 fdb1 	bl	800029c <__adddf3>
 800f73a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f73e:	4602      	mov	r2, r0
 800f740:	460b      	mov	r3, r1
 800f742:	4640      	mov	r0, r8
 800f744:	4649      	mov	r1, r9
 800f746:	f7f1 f9d1 	bl	8000aec <__aeabi_dcmplt>
 800f74a:	b120      	cbz	r0, 800f756 <__ieee754_sqrt+0x19e>
 800f74c:	1ca0      	adds	r0, r4, #2
 800f74e:	bf08      	it	eq
 800f750:	3601      	addeq	r6, #1
 800f752:	3402      	adds	r4, #2
 800f754:	e7df      	b.n	800f716 <__ieee754_sqrt+0x15e>
 800f756:	1c63      	adds	r3, r4, #1
 800f758:	f023 0401 	bic.w	r4, r3, #1
 800f75c:	e7db      	b.n	800f716 <__ieee754_sqrt+0x15e>
 800f75e:	bf00      	nop
 800f760:	7ff00000 	.word	0x7ff00000
 800f764:	200001e8 	.word	0x200001e8
 800f768:	200001e0 	.word	0x200001e0
 800f76c:	00000000 	.word	0x00000000

0800f770 <__kernel_cos>:
 800f770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	ec57 6b10 	vmov	r6, r7, d0
 800f778:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f77c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800f780:	ed8d 1b00 	vstr	d1, [sp]
 800f784:	d206      	bcs.n	800f794 <__kernel_cos+0x24>
 800f786:	4630      	mov	r0, r6
 800f788:	4639      	mov	r1, r7
 800f78a:	f7f1 f9ed 	bl	8000b68 <__aeabi_d2iz>
 800f78e:	2800      	cmp	r0, #0
 800f790:	f000 8088 	beq.w	800f8a4 <__kernel_cos+0x134>
 800f794:	4632      	mov	r2, r6
 800f796:	463b      	mov	r3, r7
 800f798:	4630      	mov	r0, r6
 800f79a:	4639      	mov	r1, r7
 800f79c:	f7f0 ff34 	bl	8000608 <__aeabi_dmul>
 800f7a0:	4b51      	ldr	r3, [pc, #324]	@ (800f8e8 <__kernel_cos+0x178>)
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	460d      	mov	r5, r1
 800f7a8:	f7f0 ff2e 	bl	8000608 <__aeabi_dmul>
 800f7ac:	a340      	add	r3, pc, #256	@ (adr r3, 800f8b0 <__kernel_cos+0x140>)
 800f7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b2:	4682      	mov	sl, r0
 800f7b4:	468b      	mov	fp, r1
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	f7f0 ff25 	bl	8000608 <__aeabi_dmul>
 800f7be:	a33e      	add	r3, pc, #248	@ (adr r3, 800f8b8 <__kernel_cos+0x148>)
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	f7f0 fd6a 	bl	800029c <__adddf3>
 800f7c8:	4622      	mov	r2, r4
 800f7ca:	462b      	mov	r3, r5
 800f7cc:	f7f0 ff1c 	bl	8000608 <__aeabi_dmul>
 800f7d0:	a33b      	add	r3, pc, #236	@ (adr r3, 800f8c0 <__kernel_cos+0x150>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f0 fd5f 	bl	8000298 <__aeabi_dsub>
 800f7da:	4622      	mov	r2, r4
 800f7dc:	462b      	mov	r3, r5
 800f7de:	f7f0 ff13 	bl	8000608 <__aeabi_dmul>
 800f7e2:	a339      	add	r3, pc, #228	@ (adr r3, 800f8c8 <__kernel_cos+0x158>)
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	f7f0 fd58 	bl	800029c <__adddf3>
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	462b      	mov	r3, r5
 800f7f0:	f7f0 ff0a 	bl	8000608 <__aeabi_dmul>
 800f7f4:	a336      	add	r3, pc, #216	@ (adr r3, 800f8d0 <__kernel_cos+0x160>)
 800f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fa:	f7f0 fd4d 	bl	8000298 <__aeabi_dsub>
 800f7fe:	4622      	mov	r2, r4
 800f800:	462b      	mov	r3, r5
 800f802:	f7f0 ff01 	bl	8000608 <__aeabi_dmul>
 800f806:	a334      	add	r3, pc, #208	@ (adr r3, 800f8d8 <__kernel_cos+0x168>)
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	f7f0 fd46 	bl	800029c <__adddf3>
 800f810:	4622      	mov	r2, r4
 800f812:	462b      	mov	r3, r5
 800f814:	f7f0 fef8 	bl	8000608 <__aeabi_dmul>
 800f818:	4622      	mov	r2, r4
 800f81a:	462b      	mov	r3, r5
 800f81c:	f7f0 fef4 	bl	8000608 <__aeabi_dmul>
 800f820:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f824:	4604      	mov	r4, r0
 800f826:	460d      	mov	r5, r1
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f0 feec 	bl	8000608 <__aeabi_dmul>
 800f830:	460b      	mov	r3, r1
 800f832:	4602      	mov	r2, r0
 800f834:	4629      	mov	r1, r5
 800f836:	4620      	mov	r0, r4
 800f838:	f7f0 fd2e 	bl	8000298 <__aeabi_dsub>
 800f83c:	4b2b      	ldr	r3, [pc, #172]	@ (800f8ec <__kernel_cos+0x17c>)
 800f83e:	4598      	cmp	r8, r3
 800f840:	4606      	mov	r6, r0
 800f842:	460f      	mov	r7, r1
 800f844:	d810      	bhi.n	800f868 <__kernel_cos+0xf8>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	4650      	mov	r0, sl
 800f84c:	4659      	mov	r1, fp
 800f84e:	f7f0 fd23 	bl	8000298 <__aeabi_dsub>
 800f852:	460b      	mov	r3, r1
 800f854:	4926      	ldr	r1, [pc, #152]	@ (800f8f0 <__kernel_cos+0x180>)
 800f856:	4602      	mov	r2, r0
 800f858:	2000      	movs	r0, #0
 800f85a:	f7f0 fd1d 	bl	8000298 <__aeabi_dsub>
 800f85e:	ec41 0b10 	vmov	d0, r0, r1
 800f862:	b003      	add	sp, #12
 800f864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f868:	4b22      	ldr	r3, [pc, #136]	@ (800f8f4 <__kernel_cos+0x184>)
 800f86a:	4921      	ldr	r1, [pc, #132]	@ (800f8f0 <__kernel_cos+0x180>)
 800f86c:	4598      	cmp	r8, r3
 800f86e:	bf8c      	ite	hi
 800f870:	4d21      	ldrhi	r5, [pc, #132]	@ (800f8f8 <__kernel_cos+0x188>)
 800f872:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800f876:	2400      	movs	r4, #0
 800f878:	4622      	mov	r2, r4
 800f87a:	462b      	mov	r3, r5
 800f87c:	2000      	movs	r0, #0
 800f87e:	f7f0 fd0b 	bl	8000298 <__aeabi_dsub>
 800f882:	4622      	mov	r2, r4
 800f884:	4680      	mov	r8, r0
 800f886:	4689      	mov	r9, r1
 800f888:	462b      	mov	r3, r5
 800f88a:	4650      	mov	r0, sl
 800f88c:	4659      	mov	r1, fp
 800f88e:	f7f0 fd03 	bl	8000298 <__aeabi_dsub>
 800f892:	4632      	mov	r2, r6
 800f894:	463b      	mov	r3, r7
 800f896:	f7f0 fcff 	bl	8000298 <__aeabi_dsub>
 800f89a:	4602      	mov	r2, r0
 800f89c:	460b      	mov	r3, r1
 800f89e:	4640      	mov	r0, r8
 800f8a0:	4649      	mov	r1, r9
 800f8a2:	e7da      	b.n	800f85a <__kernel_cos+0xea>
 800f8a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800f8e0 <__kernel_cos+0x170>
 800f8a8:	e7db      	b.n	800f862 <__kernel_cos+0xf2>
 800f8aa:	bf00      	nop
 800f8ac:	f3af 8000 	nop.w
 800f8b0:	be8838d4 	.word	0xbe8838d4
 800f8b4:	bda8fae9 	.word	0xbda8fae9
 800f8b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f8bc:	3e21ee9e 	.word	0x3e21ee9e
 800f8c0:	809c52ad 	.word	0x809c52ad
 800f8c4:	3e927e4f 	.word	0x3e927e4f
 800f8c8:	19cb1590 	.word	0x19cb1590
 800f8cc:	3efa01a0 	.word	0x3efa01a0
 800f8d0:	16c15177 	.word	0x16c15177
 800f8d4:	3f56c16c 	.word	0x3f56c16c
 800f8d8:	5555554c 	.word	0x5555554c
 800f8dc:	3fa55555 	.word	0x3fa55555
 800f8e0:	00000000 	.word	0x00000000
 800f8e4:	3ff00000 	.word	0x3ff00000
 800f8e8:	3fe00000 	.word	0x3fe00000
 800f8ec:	3fd33332 	.word	0x3fd33332
 800f8f0:	3ff00000 	.word	0x3ff00000
 800f8f4:	3fe90000 	.word	0x3fe90000
 800f8f8:	3fd20000 	.word	0x3fd20000
 800f8fc:	00000000 	.word	0x00000000

0800f900 <__kernel_sin>:
 800f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f904:	ec55 4b10 	vmov	r4, r5, d0
 800f908:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f90c:	b085      	sub	sp, #20
 800f90e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800f912:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f916:	4680      	mov	r8, r0
 800f918:	d205      	bcs.n	800f926 <__kernel_sin+0x26>
 800f91a:	4620      	mov	r0, r4
 800f91c:	4629      	mov	r1, r5
 800f91e:	f7f1 f923 	bl	8000b68 <__aeabi_d2iz>
 800f922:	2800      	cmp	r0, #0
 800f924:	d052      	beq.n	800f9cc <__kernel_sin+0xcc>
 800f926:	4622      	mov	r2, r4
 800f928:	462b      	mov	r3, r5
 800f92a:	4620      	mov	r0, r4
 800f92c:	4629      	mov	r1, r5
 800f92e:	f7f0 fe6b 	bl	8000608 <__aeabi_dmul>
 800f932:	4682      	mov	sl, r0
 800f934:	468b      	mov	fp, r1
 800f936:	4602      	mov	r2, r0
 800f938:	460b      	mov	r3, r1
 800f93a:	4620      	mov	r0, r4
 800f93c:	4629      	mov	r1, r5
 800f93e:	f7f0 fe63 	bl	8000608 <__aeabi_dmul>
 800f942:	a342      	add	r3, pc, #264	@ (adr r3, 800fa4c <__kernel_sin+0x14c>)
 800f944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f948:	e9cd 0100 	strd	r0, r1, [sp]
 800f94c:	4650      	mov	r0, sl
 800f94e:	4659      	mov	r1, fp
 800f950:	f7f0 fe5a 	bl	8000608 <__aeabi_dmul>
 800f954:	a33f      	add	r3, pc, #252	@ (adr r3, 800fa54 <__kernel_sin+0x154>)
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	f7f0 fc9d 	bl	8000298 <__aeabi_dsub>
 800f95e:	4652      	mov	r2, sl
 800f960:	465b      	mov	r3, fp
 800f962:	f7f0 fe51 	bl	8000608 <__aeabi_dmul>
 800f966:	a33d      	add	r3, pc, #244	@ (adr r3, 800fa5c <__kernel_sin+0x15c>)
 800f968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96c:	f7f0 fc96 	bl	800029c <__adddf3>
 800f970:	4652      	mov	r2, sl
 800f972:	465b      	mov	r3, fp
 800f974:	f7f0 fe48 	bl	8000608 <__aeabi_dmul>
 800f978:	a33a      	add	r3, pc, #232	@ (adr r3, 800fa64 <__kernel_sin+0x164>)
 800f97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97e:	f7f0 fc8b 	bl	8000298 <__aeabi_dsub>
 800f982:	4652      	mov	r2, sl
 800f984:	465b      	mov	r3, fp
 800f986:	f7f0 fe3f 	bl	8000608 <__aeabi_dmul>
 800f98a:	a338      	add	r3, pc, #224	@ (adr r3, 800fa6c <__kernel_sin+0x16c>)
 800f98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f990:	f7f0 fc84 	bl	800029c <__adddf3>
 800f994:	4606      	mov	r6, r0
 800f996:	460f      	mov	r7, r1
 800f998:	f1b8 0f00 	cmp.w	r8, #0
 800f99c:	d11b      	bne.n	800f9d6 <__kernel_sin+0xd6>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4650      	mov	r0, sl
 800f9a4:	4659      	mov	r1, fp
 800f9a6:	f7f0 fe2f 	bl	8000608 <__aeabi_dmul>
 800f9aa:	a325      	add	r3, pc, #148	@ (adr r3, 800fa40 <__kernel_sin+0x140>)
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	f7f0 fc72 	bl	8000298 <__aeabi_dsub>
 800f9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9b8:	f7f0 fe26 	bl	8000608 <__aeabi_dmul>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	460b      	mov	r3, r1
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	f7f0 fc6a 	bl	800029c <__adddf3>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	460d      	mov	r5, r1
 800f9cc:	ec45 4b10 	vmov	d0, r4, r5
 800f9d0:	b005      	add	sp, #20
 800f9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9da:	4b1b      	ldr	r3, [pc, #108]	@ (800fa48 <__kernel_sin+0x148>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f7f0 fe13 	bl	8000608 <__aeabi_dmul>
 800f9e2:	4632      	mov	r2, r6
 800f9e4:	4680      	mov	r8, r0
 800f9e6:	4689      	mov	r9, r1
 800f9e8:	463b      	mov	r3, r7
 800f9ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9ee:	f7f0 fe0b 	bl	8000608 <__aeabi_dmul>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	f7f0 fc4d 	bl	8000298 <__aeabi_dsub>
 800f9fe:	4652      	mov	r2, sl
 800fa00:	465b      	mov	r3, fp
 800fa02:	f7f0 fe01 	bl	8000608 <__aeabi_dmul>
 800fa06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa0a:	f7f0 fc45 	bl	8000298 <__aeabi_dsub>
 800fa0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800fa40 <__kernel_sin+0x140>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	4606      	mov	r6, r0
 800fa16:	460f      	mov	r7, r1
 800fa18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa1c:	f7f0 fdf4 	bl	8000608 <__aeabi_dmul>
 800fa20:	4602      	mov	r2, r0
 800fa22:	460b      	mov	r3, r1
 800fa24:	4630      	mov	r0, r6
 800fa26:	4639      	mov	r1, r7
 800fa28:	f7f0 fc38 	bl	800029c <__adddf3>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4620      	mov	r0, r4
 800fa32:	4629      	mov	r1, r5
 800fa34:	f7f0 fc30 	bl	8000298 <__aeabi_dsub>
 800fa38:	e7c6      	b.n	800f9c8 <__kernel_sin+0xc8>
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w
 800fa40:	55555549 	.word	0x55555549
 800fa44:	3fc55555 	.word	0x3fc55555
 800fa48:	3fe00000 	.word	0x3fe00000
 800fa4c:	5acfd57c 	.word	0x5acfd57c
 800fa50:	3de5d93a 	.word	0x3de5d93a
 800fa54:	8a2b9ceb 	.word	0x8a2b9ceb
 800fa58:	3e5ae5e6 	.word	0x3e5ae5e6
 800fa5c:	57b1fe7d 	.word	0x57b1fe7d
 800fa60:	3ec71de3 	.word	0x3ec71de3
 800fa64:	19c161d5 	.word	0x19c161d5
 800fa68:	3f2a01a0 	.word	0x3f2a01a0
 800fa6c:	1110f8a6 	.word	0x1110f8a6
 800fa70:	3f811111 	.word	0x3f811111
 800fa74:	00000000 	.word	0x00000000

0800fa78 <__ieee754_rem_pio2>:
 800fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	ec57 6b10 	vmov	r6, r7, d0
 800fa80:	4bc5      	ldr	r3, [pc, #788]	@ (800fd98 <__ieee754_rem_pio2+0x320>)
 800fa82:	b08d      	sub	sp, #52	@ 0x34
 800fa84:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800fa88:	4598      	cmp	r8, r3
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	9704      	str	r7, [sp, #16]
 800fa8e:	d807      	bhi.n	800faa0 <__ieee754_rem_pio2+0x28>
 800fa90:	2200      	movs	r2, #0
 800fa92:	2300      	movs	r3, #0
 800fa94:	ed80 0b00 	vstr	d0, [r0]
 800fa98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fa9c:	2500      	movs	r5, #0
 800fa9e:	e028      	b.n	800faf2 <__ieee754_rem_pio2+0x7a>
 800faa0:	4bbe      	ldr	r3, [pc, #760]	@ (800fd9c <__ieee754_rem_pio2+0x324>)
 800faa2:	4598      	cmp	r8, r3
 800faa4:	d878      	bhi.n	800fb98 <__ieee754_rem_pio2+0x120>
 800faa6:	9b04      	ldr	r3, [sp, #16]
 800faa8:	4dbd      	ldr	r5, [pc, #756]	@ (800fda0 <__ieee754_rem_pio2+0x328>)
 800faaa:	2b00      	cmp	r3, #0
 800faac:	4630      	mov	r0, r6
 800faae:	a3ac      	add	r3, pc, #688	@ (adr r3, 800fd60 <__ieee754_rem_pio2+0x2e8>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	4639      	mov	r1, r7
 800fab6:	dd38      	ble.n	800fb2a <__ieee754_rem_pio2+0xb2>
 800fab8:	f7f0 fbee 	bl	8000298 <__aeabi_dsub>
 800fabc:	45a8      	cmp	r8, r5
 800fabe:	4606      	mov	r6, r0
 800fac0:	460f      	mov	r7, r1
 800fac2:	d01a      	beq.n	800fafa <__ieee754_rem_pio2+0x82>
 800fac4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800fd68 <__ieee754_rem_pio2+0x2f0>)
 800fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faca:	f7f0 fbe5 	bl	8000298 <__aeabi_dsub>
 800face:	4602      	mov	r2, r0
 800fad0:	460b      	mov	r3, r1
 800fad2:	4680      	mov	r8, r0
 800fad4:	4689      	mov	r9, r1
 800fad6:	4630      	mov	r0, r6
 800fad8:	4639      	mov	r1, r7
 800fada:	f7f0 fbdd 	bl	8000298 <__aeabi_dsub>
 800fade:	a3a2      	add	r3, pc, #648	@ (adr r3, 800fd68 <__ieee754_rem_pio2+0x2f0>)
 800fae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae4:	f7f0 fbd8 	bl	8000298 <__aeabi_dsub>
 800fae8:	e9c4 8900 	strd	r8, r9, [r4]
 800faec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800faf0:	2501      	movs	r5, #1
 800faf2:	4628      	mov	r0, r5
 800faf4:	b00d      	add	sp, #52	@ 0x34
 800faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafa:	a39d      	add	r3, pc, #628	@ (adr r3, 800fd70 <__ieee754_rem_pio2+0x2f8>)
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	f7f0 fbca 	bl	8000298 <__aeabi_dsub>
 800fb04:	a39c      	add	r3, pc, #624	@ (adr r3, 800fd78 <__ieee754_rem_pio2+0x300>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	460f      	mov	r7, r1
 800fb0e:	f7f0 fbc3 	bl	8000298 <__aeabi_dsub>
 800fb12:	4602      	mov	r2, r0
 800fb14:	460b      	mov	r3, r1
 800fb16:	4680      	mov	r8, r0
 800fb18:	4689      	mov	r9, r1
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	4639      	mov	r1, r7
 800fb1e:	f7f0 fbbb 	bl	8000298 <__aeabi_dsub>
 800fb22:	a395      	add	r3, pc, #596	@ (adr r3, 800fd78 <__ieee754_rem_pio2+0x300>)
 800fb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb28:	e7dc      	b.n	800fae4 <__ieee754_rem_pio2+0x6c>
 800fb2a:	f7f0 fbb7 	bl	800029c <__adddf3>
 800fb2e:	45a8      	cmp	r8, r5
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	d018      	beq.n	800fb68 <__ieee754_rem_pio2+0xf0>
 800fb36:	a38c      	add	r3, pc, #560	@ (adr r3, 800fd68 <__ieee754_rem_pio2+0x2f0>)
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	f7f0 fbae 	bl	800029c <__adddf3>
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	4680      	mov	r8, r0
 800fb46:	4689      	mov	r9, r1
 800fb48:	4630      	mov	r0, r6
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	f7f0 fba4 	bl	8000298 <__aeabi_dsub>
 800fb50:	a385      	add	r3, pc, #532	@ (adr r3, 800fd68 <__ieee754_rem_pio2+0x2f0>)
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	f7f0 fba1 	bl	800029c <__adddf3>
 800fb5a:	f04f 35ff 	mov.w	r5, #4294967295
 800fb5e:	e9c4 8900 	strd	r8, r9, [r4]
 800fb62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fb66:	e7c4      	b.n	800faf2 <__ieee754_rem_pio2+0x7a>
 800fb68:	a381      	add	r3, pc, #516	@ (adr r3, 800fd70 <__ieee754_rem_pio2+0x2f8>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	f7f0 fb95 	bl	800029c <__adddf3>
 800fb72:	a381      	add	r3, pc, #516	@ (adr r3, 800fd78 <__ieee754_rem_pio2+0x300>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	4606      	mov	r6, r0
 800fb7a:	460f      	mov	r7, r1
 800fb7c:	f7f0 fb8e 	bl	800029c <__adddf3>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	4680      	mov	r8, r0
 800fb86:	4689      	mov	r9, r1
 800fb88:	4630      	mov	r0, r6
 800fb8a:	4639      	mov	r1, r7
 800fb8c:	f7f0 fb84 	bl	8000298 <__aeabi_dsub>
 800fb90:	a379      	add	r3, pc, #484	@ (adr r3, 800fd78 <__ieee754_rem_pio2+0x300>)
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	e7de      	b.n	800fb56 <__ieee754_rem_pio2+0xde>
 800fb98:	4b82      	ldr	r3, [pc, #520]	@ (800fda4 <__ieee754_rem_pio2+0x32c>)
 800fb9a:	4598      	cmp	r8, r3
 800fb9c:	f200 80d1 	bhi.w	800fd42 <__ieee754_rem_pio2+0x2ca>
 800fba0:	f000 f966 	bl	800fe70 <fabs>
 800fba4:	ec57 6b10 	vmov	r6, r7, d0
 800fba8:	a375      	add	r3, pc, #468	@ (adr r3, 800fd80 <__ieee754_rem_pio2+0x308>)
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	4630      	mov	r0, r6
 800fbb0:	4639      	mov	r1, r7
 800fbb2:	f7f0 fd29 	bl	8000608 <__aeabi_dmul>
 800fbb6:	4b7c      	ldr	r3, [pc, #496]	@ (800fda8 <__ieee754_rem_pio2+0x330>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f7f0 fb6f 	bl	800029c <__adddf3>
 800fbbe:	f7f0 ffd3 	bl	8000b68 <__aeabi_d2iz>
 800fbc2:	4605      	mov	r5, r0
 800fbc4:	f7f0 fcb6 	bl	8000534 <__aeabi_i2d>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	460b      	mov	r3, r1
 800fbcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbd0:	a363      	add	r3, pc, #396	@ (adr r3, 800fd60 <__ieee754_rem_pio2+0x2e8>)
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	f7f0 fd17 	bl	8000608 <__aeabi_dmul>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	460b      	mov	r3, r1
 800fbde:	4630      	mov	r0, r6
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	f7f0 fb59 	bl	8000298 <__aeabi_dsub>
 800fbe6:	a360      	add	r3, pc, #384	@ (adr r3, 800fd68 <__ieee754_rem_pio2+0x2f0>)
 800fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbec:	4682      	mov	sl, r0
 800fbee:	468b      	mov	fp, r1
 800fbf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbf4:	f7f0 fd08 	bl	8000608 <__aeabi_dmul>
 800fbf8:	2d1f      	cmp	r5, #31
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	460f      	mov	r7, r1
 800fbfe:	dc0c      	bgt.n	800fc1a <__ieee754_rem_pio2+0x1a2>
 800fc00:	4b6a      	ldr	r3, [pc, #424]	@ (800fdac <__ieee754_rem_pio2+0x334>)
 800fc02:	1e6a      	subs	r2, r5, #1
 800fc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc08:	4543      	cmp	r3, r8
 800fc0a:	d006      	beq.n	800fc1a <__ieee754_rem_pio2+0x1a2>
 800fc0c:	4632      	mov	r2, r6
 800fc0e:	463b      	mov	r3, r7
 800fc10:	4650      	mov	r0, sl
 800fc12:	4659      	mov	r1, fp
 800fc14:	f7f0 fb40 	bl	8000298 <__aeabi_dsub>
 800fc18:	e00e      	b.n	800fc38 <__ieee754_rem_pio2+0x1c0>
 800fc1a:	463b      	mov	r3, r7
 800fc1c:	4632      	mov	r2, r6
 800fc1e:	4650      	mov	r0, sl
 800fc20:	4659      	mov	r1, fp
 800fc22:	f7f0 fb39 	bl	8000298 <__aeabi_dsub>
 800fc26:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fc2a:	9305      	str	r3, [sp, #20]
 800fc2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc30:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800fc34:	2b10      	cmp	r3, #16
 800fc36:	dc02      	bgt.n	800fc3e <__ieee754_rem_pio2+0x1c6>
 800fc38:	e9c4 0100 	strd	r0, r1, [r4]
 800fc3c:	e039      	b.n	800fcb2 <__ieee754_rem_pio2+0x23a>
 800fc3e:	a34c      	add	r3, pc, #304	@ (adr r3, 800fd70 <__ieee754_rem_pio2+0x2f8>)
 800fc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc48:	f7f0 fcde 	bl	8000608 <__aeabi_dmul>
 800fc4c:	4606      	mov	r6, r0
 800fc4e:	460f      	mov	r7, r1
 800fc50:	4602      	mov	r2, r0
 800fc52:	460b      	mov	r3, r1
 800fc54:	4650      	mov	r0, sl
 800fc56:	4659      	mov	r1, fp
 800fc58:	f7f0 fb1e 	bl	8000298 <__aeabi_dsub>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	4680      	mov	r8, r0
 800fc62:	4689      	mov	r9, r1
 800fc64:	4650      	mov	r0, sl
 800fc66:	4659      	mov	r1, fp
 800fc68:	f7f0 fb16 	bl	8000298 <__aeabi_dsub>
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	463b      	mov	r3, r7
 800fc70:	f7f0 fb12 	bl	8000298 <__aeabi_dsub>
 800fc74:	a340      	add	r3, pc, #256	@ (adr r3, 800fd78 <__ieee754_rem_pio2+0x300>)
 800fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	460f      	mov	r7, r1
 800fc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc82:	f7f0 fcc1 	bl	8000608 <__aeabi_dmul>
 800fc86:	4632      	mov	r2, r6
 800fc88:	463b      	mov	r3, r7
 800fc8a:	f7f0 fb05 	bl	8000298 <__aeabi_dsub>
 800fc8e:	4602      	mov	r2, r0
 800fc90:	460b      	mov	r3, r1
 800fc92:	4606      	mov	r6, r0
 800fc94:	460f      	mov	r7, r1
 800fc96:	4640      	mov	r0, r8
 800fc98:	4649      	mov	r1, r9
 800fc9a:	f7f0 fafd 	bl	8000298 <__aeabi_dsub>
 800fc9e:	9a05      	ldr	r2, [sp, #20]
 800fca0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	2b31      	cmp	r3, #49	@ 0x31
 800fca8:	dc20      	bgt.n	800fcec <__ieee754_rem_pio2+0x274>
 800fcaa:	e9c4 0100 	strd	r0, r1, [r4]
 800fcae:	46c2      	mov	sl, r8
 800fcb0:	46cb      	mov	fp, r9
 800fcb2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fcb6:	4650      	mov	r0, sl
 800fcb8:	4642      	mov	r2, r8
 800fcba:	464b      	mov	r3, r9
 800fcbc:	4659      	mov	r1, fp
 800fcbe:	f7f0 faeb 	bl	8000298 <__aeabi_dsub>
 800fcc2:	463b      	mov	r3, r7
 800fcc4:	4632      	mov	r2, r6
 800fcc6:	f7f0 fae7 	bl	8000298 <__aeabi_dsub>
 800fcca:	9b04      	ldr	r3, [sp, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fcd2:	f6bf af0e 	bge.w	800faf2 <__ieee754_rem_pio2+0x7a>
 800fcd6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fcda:	6063      	str	r3, [r4, #4]
 800fcdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fce0:	f8c4 8000 	str.w	r8, [r4]
 800fce4:	60a0      	str	r0, [r4, #8]
 800fce6:	60e3      	str	r3, [r4, #12]
 800fce8:	426d      	negs	r5, r5
 800fcea:	e702      	b.n	800faf2 <__ieee754_rem_pio2+0x7a>
 800fcec:	a326      	add	r3, pc, #152	@ (adr r3, 800fd88 <__ieee754_rem_pio2+0x310>)
 800fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcf6:	f7f0 fc87 	bl	8000608 <__aeabi_dmul>
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	460f      	mov	r7, r1
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	4640      	mov	r0, r8
 800fd04:	4649      	mov	r1, r9
 800fd06:	f7f0 fac7 	bl	8000298 <__aeabi_dsub>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	4682      	mov	sl, r0
 800fd10:	468b      	mov	fp, r1
 800fd12:	4640      	mov	r0, r8
 800fd14:	4649      	mov	r1, r9
 800fd16:	f7f0 fabf 	bl	8000298 <__aeabi_dsub>
 800fd1a:	4632      	mov	r2, r6
 800fd1c:	463b      	mov	r3, r7
 800fd1e:	f7f0 fabb 	bl	8000298 <__aeabi_dsub>
 800fd22:	a31b      	add	r3, pc, #108	@ (adr r3, 800fd90 <__ieee754_rem_pio2+0x318>)
 800fd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd28:	4606      	mov	r6, r0
 800fd2a:	460f      	mov	r7, r1
 800fd2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd30:	f7f0 fc6a 	bl	8000608 <__aeabi_dmul>
 800fd34:	4632      	mov	r2, r6
 800fd36:	463b      	mov	r3, r7
 800fd38:	f7f0 faae 	bl	8000298 <__aeabi_dsub>
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	460f      	mov	r7, r1
 800fd40:	e764      	b.n	800fc0c <__ieee754_rem_pio2+0x194>
 800fd42:	4b1b      	ldr	r3, [pc, #108]	@ (800fdb0 <__ieee754_rem_pio2+0x338>)
 800fd44:	4598      	cmp	r8, r3
 800fd46:	d935      	bls.n	800fdb4 <__ieee754_rem_pio2+0x33c>
 800fd48:	4632      	mov	r2, r6
 800fd4a:	463b      	mov	r3, r7
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	4639      	mov	r1, r7
 800fd50:	f7f0 faa2 	bl	8000298 <__aeabi_dsub>
 800fd54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fd58:	e9c4 0100 	strd	r0, r1, [r4]
 800fd5c:	e69e      	b.n	800fa9c <__ieee754_rem_pio2+0x24>
 800fd5e:	bf00      	nop
 800fd60:	54400000 	.word	0x54400000
 800fd64:	3ff921fb 	.word	0x3ff921fb
 800fd68:	1a626331 	.word	0x1a626331
 800fd6c:	3dd0b461 	.word	0x3dd0b461
 800fd70:	1a600000 	.word	0x1a600000
 800fd74:	3dd0b461 	.word	0x3dd0b461
 800fd78:	2e037073 	.word	0x2e037073
 800fd7c:	3ba3198a 	.word	0x3ba3198a
 800fd80:	6dc9c883 	.word	0x6dc9c883
 800fd84:	3fe45f30 	.word	0x3fe45f30
 800fd88:	2e000000 	.word	0x2e000000
 800fd8c:	3ba3198a 	.word	0x3ba3198a
 800fd90:	252049c1 	.word	0x252049c1
 800fd94:	397b839a 	.word	0x397b839a
 800fd98:	3fe921fb 	.word	0x3fe921fb
 800fd9c:	4002d97b 	.word	0x4002d97b
 800fda0:	3ff921fb 	.word	0x3ff921fb
 800fda4:	413921fb 	.word	0x413921fb
 800fda8:	3fe00000 	.word	0x3fe00000
 800fdac:	08011044 	.word	0x08011044
 800fdb0:	7fefffff 	.word	0x7fefffff
 800fdb4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800fdb8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800fdbc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	f7f0 fed0 	bl	8000b68 <__aeabi_d2iz>
 800fdc8:	f7f0 fbb4 	bl	8000534 <__aeabi_i2d>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	460b      	mov	r3, r1
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	4639      	mov	r1, r7
 800fdd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fdd8:	f7f0 fa5e 	bl	8000298 <__aeabi_dsub>
 800fddc:	4b22      	ldr	r3, [pc, #136]	@ (800fe68 <__ieee754_rem_pio2+0x3f0>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	f7f0 fc12 	bl	8000608 <__aeabi_dmul>
 800fde4:	460f      	mov	r7, r1
 800fde6:	4606      	mov	r6, r0
 800fde8:	f7f0 febe 	bl	8000b68 <__aeabi_d2iz>
 800fdec:	f7f0 fba2 	bl	8000534 <__aeabi_i2d>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	4639      	mov	r1, r7
 800fdf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fdfc:	f7f0 fa4c 	bl	8000298 <__aeabi_dsub>
 800fe00:	4b19      	ldr	r3, [pc, #100]	@ (800fe68 <__ieee754_rem_pio2+0x3f0>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	f7f0 fc00 	bl	8000608 <__aeabi_dmul>
 800fe08:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800fe0c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800fe10:	f04f 0803 	mov.w	r8, #3
 800fe14:	2600      	movs	r6, #0
 800fe16:	2700      	movs	r7, #0
 800fe18:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	463b      	mov	r3, r7
 800fe20:	46c2      	mov	sl, r8
 800fe22:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe26:	f7f0 fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d1f4      	bne.n	800fe18 <__ieee754_rem_pio2+0x3a0>
 800fe2e:	4b0f      	ldr	r3, [pc, #60]	@ (800fe6c <__ieee754_rem_pio2+0x3f4>)
 800fe30:	9301      	str	r3, [sp, #4]
 800fe32:	2302      	movs	r3, #2
 800fe34:	9300      	str	r3, [sp, #0]
 800fe36:	462a      	mov	r2, r5
 800fe38:	4653      	mov	r3, sl
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	a806      	add	r0, sp, #24
 800fe3e:	f000 f81f 	bl	800fe80 <__kernel_rem_pio2>
 800fe42:	9b04      	ldr	r3, [sp, #16]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	4605      	mov	r5, r0
 800fe48:	f6bf ae53 	bge.w	800faf2 <__ieee754_rem_pio2+0x7a>
 800fe4c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800fe50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe54:	e9c4 2300 	strd	r2, r3, [r4]
 800fe58:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800fe5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fe60:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fe64:	e740      	b.n	800fce8 <__ieee754_rem_pio2+0x270>
 800fe66:	bf00      	nop
 800fe68:	41700000 	.word	0x41700000
 800fe6c:	080110c4 	.word	0x080110c4

0800fe70 <fabs>:
 800fe70:	ec51 0b10 	vmov	r0, r1, d0
 800fe74:	4602      	mov	r2, r0
 800fe76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe7a:	ec43 2b10 	vmov	d0, r2, r3
 800fe7e:	4770      	bx	lr

0800fe80 <__kernel_rem_pio2>:
 800fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe84:	ed2d 8b02 	vpush	{d8}
 800fe88:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800fe8c:	f112 0f14 	cmn.w	r2, #20
 800fe90:	9306      	str	r3, [sp, #24]
 800fe92:	9104      	str	r1, [sp, #16]
 800fe94:	4bbe      	ldr	r3, [pc, #760]	@ (8010190 <__kernel_rem_pio2+0x310>)
 800fe96:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800fe98:	9008      	str	r0, [sp, #32]
 800fe9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	9b06      	ldr	r3, [sp, #24]
 800fea2:	f103 33ff 	add.w	r3, r3, #4294967295
 800fea6:	bfa8      	it	ge
 800fea8:	1ed4      	subge	r4, r2, #3
 800feaa:	9305      	str	r3, [sp, #20]
 800feac:	bfb2      	itee	lt
 800feae:	2400      	movlt	r4, #0
 800feb0:	2318      	movge	r3, #24
 800feb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800feb6:	f06f 0317 	mvn.w	r3, #23
 800feba:	fb04 3303 	mla	r3, r4, r3, r3
 800febe:	eb03 0b02 	add.w	fp, r3, r2
 800fec2:	9b00      	ldr	r3, [sp, #0]
 800fec4:	9a05      	ldr	r2, [sp, #20]
 800fec6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8010180 <__kernel_rem_pio2+0x300>
 800feca:	eb03 0802 	add.w	r8, r3, r2
 800fece:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fed0:	1aa7      	subs	r7, r4, r2
 800fed2:	ae20      	add	r6, sp, #128	@ 0x80
 800fed4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fed8:	2500      	movs	r5, #0
 800feda:	4545      	cmp	r5, r8
 800fedc:	dd13      	ble.n	800ff06 <__kernel_rem_pio2+0x86>
 800fede:	9b06      	ldr	r3, [sp, #24]
 800fee0:	aa20      	add	r2, sp, #128	@ 0x80
 800fee2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fee6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800feea:	f04f 0800 	mov.w	r8, #0
 800feee:	9b00      	ldr	r3, [sp, #0]
 800fef0:	4598      	cmp	r8, r3
 800fef2:	dc31      	bgt.n	800ff58 <__kernel_rem_pio2+0xd8>
 800fef4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8010180 <__kernel_rem_pio2+0x300>
 800fef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fefc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff00:	462f      	mov	r7, r5
 800ff02:	2600      	movs	r6, #0
 800ff04:	e01b      	b.n	800ff3e <__kernel_rem_pio2+0xbe>
 800ff06:	42ef      	cmn	r7, r5
 800ff08:	d407      	bmi.n	800ff1a <__kernel_rem_pio2+0x9a>
 800ff0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ff0e:	f7f0 fb11 	bl	8000534 <__aeabi_i2d>
 800ff12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ff16:	3501      	adds	r5, #1
 800ff18:	e7df      	b.n	800feda <__kernel_rem_pio2+0x5a>
 800ff1a:	ec51 0b18 	vmov	r0, r1, d8
 800ff1e:	e7f8      	b.n	800ff12 <__kernel_rem_pio2+0x92>
 800ff20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ff28:	f7f0 fb6e 	bl	8000608 <__aeabi_dmul>
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	460b      	mov	r3, r1
 800ff30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff34:	f7f0 f9b2 	bl	800029c <__adddf3>
 800ff38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff3c:	3601      	adds	r6, #1
 800ff3e:	9b05      	ldr	r3, [sp, #20]
 800ff40:	429e      	cmp	r6, r3
 800ff42:	f1a7 0708 	sub.w	r7, r7, #8
 800ff46:	ddeb      	ble.n	800ff20 <__kernel_rem_pio2+0xa0>
 800ff48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff4c:	f108 0801 	add.w	r8, r8, #1
 800ff50:	ecaa 7b02 	vstmia	sl!, {d7}
 800ff54:	3508      	adds	r5, #8
 800ff56:	e7ca      	b.n	800feee <__kernel_rem_pio2+0x6e>
 800ff58:	9b00      	ldr	r3, [sp, #0]
 800ff5a:	f8dd 8000 	ldr.w	r8, [sp]
 800ff5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ff60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff64:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ff68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ff6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ff72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff74:	ab98      	add	r3, sp, #608	@ 0x260
 800ff76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ff7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ff7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff82:	ac0c      	add	r4, sp, #48	@ 0x30
 800ff84:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ff86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ff8a:	46a1      	mov	r9, r4
 800ff8c:	46c2      	mov	sl, r8
 800ff8e:	f1ba 0f00 	cmp.w	sl, #0
 800ff92:	f1a5 0508 	sub.w	r5, r5, #8
 800ff96:	dc77      	bgt.n	8010088 <__kernel_rem_pio2+0x208>
 800ff98:	4658      	mov	r0, fp
 800ff9a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ff9e:	f000 fac7 	bl	8010530 <scalbn>
 800ffa2:	ec57 6b10 	vmov	r6, r7, d0
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f7f0 fb2a 	bl	8000608 <__aeabi_dmul>
 800ffb4:	ec41 0b10 	vmov	d0, r0, r1
 800ffb8:	f000 fb3a 	bl	8010630 <floor>
 800ffbc:	4b75      	ldr	r3, [pc, #468]	@ (8010194 <__kernel_rem_pio2+0x314>)
 800ffbe:	ec51 0b10 	vmov	r0, r1, d0
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f7f0 fb20 	bl	8000608 <__aeabi_dmul>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	460b      	mov	r3, r1
 800ffcc:	4630      	mov	r0, r6
 800ffce:	4639      	mov	r1, r7
 800ffd0:	f7f0 f962 	bl	8000298 <__aeabi_dsub>
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	f7f0 fdc6 	bl	8000b68 <__aeabi_d2iz>
 800ffdc:	9002      	str	r0, [sp, #8]
 800ffde:	f7f0 faa9 	bl	8000534 <__aeabi_i2d>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	4639      	mov	r1, r7
 800ffea:	f7f0 f955 	bl	8000298 <__aeabi_dsub>
 800ffee:	f1bb 0f00 	cmp.w	fp, #0
 800fff2:	4606      	mov	r6, r0
 800fff4:	460f      	mov	r7, r1
 800fff6:	dd6c      	ble.n	80100d2 <__kernel_rem_pio2+0x252>
 800fff8:	f108 31ff 	add.w	r1, r8, #4294967295
 800fffc:	ab0c      	add	r3, sp, #48	@ 0x30
 800fffe:	9d02      	ldr	r5, [sp, #8]
 8010000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010004:	f1cb 0018 	rsb	r0, fp, #24
 8010008:	fa43 f200 	asr.w	r2, r3, r0
 801000c:	4415      	add	r5, r2
 801000e:	4082      	lsls	r2, r0
 8010010:	1a9b      	subs	r3, r3, r2
 8010012:	aa0c      	add	r2, sp, #48	@ 0x30
 8010014:	9502      	str	r5, [sp, #8]
 8010016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801001a:	f1cb 0217 	rsb	r2, fp, #23
 801001e:	fa43 f902 	asr.w	r9, r3, r2
 8010022:	f1b9 0f00 	cmp.w	r9, #0
 8010026:	dd64      	ble.n	80100f2 <__kernel_rem_pio2+0x272>
 8010028:	9b02      	ldr	r3, [sp, #8]
 801002a:	2200      	movs	r2, #0
 801002c:	3301      	adds	r3, #1
 801002e:	9302      	str	r3, [sp, #8]
 8010030:	4615      	mov	r5, r2
 8010032:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8010036:	4590      	cmp	r8, r2
 8010038:	f300 80b8 	bgt.w	80101ac <__kernel_rem_pio2+0x32c>
 801003c:	f1bb 0f00 	cmp.w	fp, #0
 8010040:	dd07      	ble.n	8010052 <__kernel_rem_pio2+0x1d2>
 8010042:	f1bb 0f01 	cmp.w	fp, #1
 8010046:	f000 80bf 	beq.w	80101c8 <__kernel_rem_pio2+0x348>
 801004a:	f1bb 0f02 	cmp.w	fp, #2
 801004e:	f000 80c6 	beq.w	80101de <__kernel_rem_pio2+0x35e>
 8010052:	f1b9 0f02 	cmp.w	r9, #2
 8010056:	d14c      	bne.n	80100f2 <__kernel_rem_pio2+0x272>
 8010058:	4632      	mov	r2, r6
 801005a:	463b      	mov	r3, r7
 801005c:	494e      	ldr	r1, [pc, #312]	@ (8010198 <__kernel_rem_pio2+0x318>)
 801005e:	2000      	movs	r0, #0
 8010060:	f7f0 f91a 	bl	8000298 <__aeabi_dsub>
 8010064:	4606      	mov	r6, r0
 8010066:	460f      	mov	r7, r1
 8010068:	2d00      	cmp	r5, #0
 801006a:	d042      	beq.n	80100f2 <__kernel_rem_pio2+0x272>
 801006c:	4658      	mov	r0, fp
 801006e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8010188 <__kernel_rem_pio2+0x308>
 8010072:	f000 fa5d 	bl	8010530 <scalbn>
 8010076:	4630      	mov	r0, r6
 8010078:	4639      	mov	r1, r7
 801007a:	ec53 2b10 	vmov	r2, r3, d0
 801007e:	f7f0 f90b 	bl	8000298 <__aeabi_dsub>
 8010082:	4606      	mov	r6, r0
 8010084:	460f      	mov	r7, r1
 8010086:	e034      	b.n	80100f2 <__kernel_rem_pio2+0x272>
 8010088:	4b44      	ldr	r3, [pc, #272]	@ (801019c <__kernel_rem_pio2+0x31c>)
 801008a:	2200      	movs	r2, #0
 801008c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010090:	f7f0 faba 	bl	8000608 <__aeabi_dmul>
 8010094:	f7f0 fd68 	bl	8000b68 <__aeabi_d2iz>
 8010098:	f7f0 fa4c 	bl	8000534 <__aeabi_i2d>
 801009c:	4b40      	ldr	r3, [pc, #256]	@ (80101a0 <__kernel_rem_pio2+0x320>)
 801009e:	2200      	movs	r2, #0
 80100a0:	4606      	mov	r6, r0
 80100a2:	460f      	mov	r7, r1
 80100a4:	f7f0 fab0 	bl	8000608 <__aeabi_dmul>
 80100a8:	4602      	mov	r2, r0
 80100aa:	460b      	mov	r3, r1
 80100ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100b0:	f7f0 f8f2 	bl	8000298 <__aeabi_dsub>
 80100b4:	f7f0 fd58 	bl	8000b68 <__aeabi_d2iz>
 80100b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100bc:	f849 0b04 	str.w	r0, [r9], #4
 80100c0:	4639      	mov	r1, r7
 80100c2:	4630      	mov	r0, r6
 80100c4:	f7f0 f8ea 	bl	800029c <__adddf3>
 80100c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100d0:	e75d      	b.n	800ff8e <__kernel_rem_pio2+0x10e>
 80100d2:	d107      	bne.n	80100e4 <__kernel_rem_pio2+0x264>
 80100d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80100d8:	aa0c      	add	r2, sp, #48	@ 0x30
 80100da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100de:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80100e2:	e79e      	b.n	8010022 <__kernel_rem_pio2+0x1a2>
 80100e4:	4b2f      	ldr	r3, [pc, #188]	@ (80101a4 <__kernel_rem_pio2+0x324>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	f7f0 fd14 	bl	8000b14 <__aeabi_dcmpge>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	d143      	bne.n	8010178 <__kernel_rem_pio2+0x2f8>
 80100f0:	4681      	mov	r9, r0
 80100f2:	2200      	movs	r2, #0
 80100f4:	2300      	movs	r3, #0
 80100f6:	4630      	mov	r0, r6
 80100f8:	4639      	mov	r1, r7
 80100fa:	f7f0 fced 	bl	8000ad8 <__aeabi_dcmpeq>
 80100fe:	2800      	cmp	r0, #0
 8010100:	f000 80bf 	beq.w	8010282 <__kernel_rem_pio2+0x402>
 8010104:	f108 33ff 	add.w	r3, r8, #4294967295
 8010108:	2200      	movs	r2, #0
 801010a:	9900      	ldr	r1, [sp, #0]
 801010c:	428b      	cmp	r3, r1
 801010e:	da6e      	bge.n	80101ee <__kernel_rem_pio2+0x36e>
 8010110:	2a00      	cmp	r2, #0
 8010112:	f000 8089 	beq.w	8010228 <__kernel_rem_pio2+0x3a8>
 8010116:	f108 38ff 	add.w	r8, r8, #4294967295
 801011a:	ab0c      	add	r3, sp, #48	@ 0x30
 801011c:	f1ab 0b18 	sub.w	fp, fp, #24
 8010120:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d0f6      	beq.n	8010116 <__kernel_rem_pio2+0x296>
 8010128:	4658      	mov	r0, fp
 801012a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8010188 <__kernel_rem_pio2+0x308>
 801012e:	f000 f9ff 	bl	8010530 <scalbn>
 8010132:	f108 0301 	add.w	r3, r8, #1
 8010136:	00da      	lsls	r2, r3, #3
 8010138:	9205      	str	r2, [sp, #20]
 801013a:	ec55 4b10 	vmov	r4, r5, d0
 801013e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8010140:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801019c <__kernel_rem_pio2+0x31c>
 8010144:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8010148:	4646      	mov	r6, r8
 801014a:	f04f 0a00 	mov.w	sl, #0
 801014e:	2e00      	cmp	r6, #0
 8010150:	f280 80cf 	bge.w	80102f2 <__kernel_rem_pio2+0x472>
 8010154:	4644      	mov	r4, r8
 8010156:	2c00      	cmp	r4, #0
 8010158:	f2c0 80fd 	blt.w	8010356 <__kernel_rem_pio2+0x4d6>
 801015c:	4b12      	ldr	r3, [pc, #72]	@ (80101a8 <__kernel_rem_pio2+0x328>)
 801015e:	461f      	mov	r7, r3
 8010160:	ab70      	add	r3, sp, #448	@ 0x1c0
 8010162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010166:	9306      	str	r3, [sp, #24]
 8010168:	f04f 0a00 	mov.w	sl, #0
 801016c:	f04f 0b00 	mov.w	fp, #0
 8010170:	2600      	movs	r6, #0
 8010172:	eba8 0504 	sub.w	r5, r8, r4
 8010176:	e0e2      	b.n	801033e <__kernel_rem_pio2+0x4be>
 8010178:	f04f 0902 	mov.w	r9, #2
 801017c:	e754      	b.n	8010028 <__kernel_rem_pio2+0x1a8>
 801017e:	bf00      	nop
	...
 801018c:	3ff00000 	.word	0x3ff00000
 8010190:	08011210 	.word	0x08011210
 8010194:	40200000 	.word	0x40200000
 8010198:	3ff00000 	.word	0x3ff00000
 801019c:	3e700000 	.word	0x3e700000
 80101a0:	41700000 	.word	0x41700000
 80101a4:	3fe00000 	.word	0x3fe00000
 80101a8:	080111d0 	.word	0x080111d0
 80101ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80101b0:	b945      	cbnz	r5, 80101c4 <__kernel_rem_pio2+0x344>
 80101b2:	b123      	cbz	r3, 80101be <__kernel_rem_pio2+0x33e>
 80101b4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80101b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80101bc:	2301      	movs	r3, #1
 80101be:	3201      	adds	r2, #1
 80101c0:	461d      	mov	r5, r3
 80101c2:	e738      	b.n	8010036 <__kernel_rem_pio2+0x1b6>
 80101c4:	1acb      	subs	r3, r1, r3
 80101c6:	e7f7      	b.n	80101b8 <__kernel_rem_pio2+0x338>
 80101c8:	f108 32ff 	add.w	r2, r8, #4294967295
 80101cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80101ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80101d6:	a90c      	add	r1, sp, #48	@ 0x30
 80101d8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80101dc:	e739      	b.n	8010052 <__kernel_rem_pio2+0x1d2>
 80101de:	f108 32ff 	add.w	r2, r8, #4294967295
 80101e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80101e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80101ec:	e7f3      	b.n	80101d6 <__kernel_rem_pio2+0x356>
 80101ee:	a90c      	add	r1, sp, #48	@ 0x30
 80101f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80101f4:	3b01      	subs	r3, #1
 80101f6:	430a      	orrs	r2, r1
 80101f8:	e787      	b.n	801010a <__kernel_rem_pio2+0x28a>
 80101fa:	3401      	adds	r4, #1
 80101fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010200:	2a00      	cmp	r2, #0
 8010202:	d0fa      	beq.n	80101fa <__kernel_rem_pio2+0x37a>
 8010204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010206:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801020a:	eb0d 0503 	add.w	r5, sp, r3
 801020e:	9b06      	ldr	r3, [sp, #24]
 8010210:	aa20      	add	r2, sp, #128	@ 0x80
 8010212:	4443      	add	r3, r8
 8010214:	f108 0701 	add.w	r7, r8, #1
 8010218:	3d98      	subs	r5, #152	@ 0x98
 801021a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801021e:	4444      	add	r4, r8
 8010220:	42bc      	cmp	r4, r7
 8010222:	da04      	bge.n	801022e <__kernel_rem_pio2+0x3ae>
 8010224:	46a0      	mov	r8, r4
 8010226:	e6a2      	b.n	800ff6e <__kernel_rem_pio2+0xee>
 8010228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801022a:	2401      	movs	r4, #1
 801022c:	e7e6      	b.n	80101fc <__kernel_rem_pio2+0x37c>
 801022e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010230:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8010234:	f7f0 f97e 	bl	8000534 <__aeabi_i2d>
 8010238:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8010500 <__kernel_rem_pio2+0x680>
 801023c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010240:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010248:	46b2      	mov	sl, r6
 801024a:	f04f 0800 	mov.w	r8, #0
 801024e:	9b05      	ldr	r3, [sp, #20]
 8010250:	4598      	cmp	r8, r3
 8010252:	dd05      	ble.n	8010260 <__kernel_rem_pio2+0x3e0>
 8010254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010258:	3701      	adds	r7, #1
 801025a:	eca5 7b02 	vstmia	r5!, {d7}
 801025e:	e7df      	b.n	8010220 <__kernel_rem_pio2+0x3a0>
 8010260:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8010264:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010268:	f7f0 f9ce 	bl	8000608 <__aeabi_dmul>
 801026c:	4602      	mov	r2, r0
 801026e:	460b      	mov	r3, r1
 8010270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010274:	f7f0 f812 	bl	800029c <__adddf3>
 8010278:	f108 0801 	add.w	r8, r8, #1
 801027c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010280:	e7e5      	b.n	801024e <__kernel_rem_pio2+0x3ce>
 8010282:	f1cb 0000 	rsb	r0, fp, #0
 8010286:	ec47 6b10 	vmov	d0, r6, r7
 801028a:	f000 f951 	bl	8010530 <scalbn>
 801028e:	ec55 4b10 	vmov	r4, r5, d0
 8010292:	4b9d      	ldr	r3, [pc, #628]	@ (8010508 <__kernel_rem_pio2+0x688>)
 8010294:	2200      	movs	r2, #0
 8010296:	4620      	mov	r0, r4
 8010298:	4629      	mov	r1, r5
 801029a:	f7f0 fc3b 	bl	8000b14 <__aeabi_dcmpge>
 801029e:	b300      	cbz	r0, 80102e2 <__kernel_rem_pio2+0x462>
 80102a0:	4b9a      	ldr	r3, [pc, #616]	@ (801050c <__kernel_rem_pio2+0x68c>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	4620      	mov	r0, r4
 80102a6:	4629      	mov	r1, r5
 80102a8:	f7f0 f9ae 	bl	8000608 <__aeabi_dmul>
 80102ac:	f7f0 fc5c 	bl	8000b68 <__aeabi_d2iz>
 80102b0:	4606      	mov	r6, r0
 80102b2:	f7f0 f93f 	bl	8000534 <__aeabi_i2d>
 80102b6:	4b94      	ldr	r3, [pc, #592]	@ (8010508 <__kernel_rem_pio2+0x688>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	f7f0 f9a5 	bl	8000608 <__aeabi_dmul>
 80102be:	460b      	mov	r3, r1
 80102c0:	4602      	mov	r2, r0
 80102c2:	4629      	mov	r1, r5
 80102c4:	4620      	mov	r0, r4
 80102c6:	f7ef ffe7 	bl	8000298 <__aeabi_dsub>
 80102ca:	f7f0 fc4d 	bl	8000b68 <__aeabi_d2iz>
 80102ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80102d0:	f10b 0b18 	add.w	fp, fp, #24
 80102d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80102d8:	f108 0801 	add.w	r8, r8, #1
 80102dc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80102e0:	e722      	b.n	8010128 <__kernel_rem_pio2+0x2a8>
 80102e2:	4620      	mov	r0, r4
 80102e4:	4629      	mov	r1, r5
 80102e6:	f7f0 fc3f 	bl	8000b68 <__aeabi_d2iz>
 80102ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80102ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80102f0:	e71a      	b.n	8010128 <__kernel_rem_pio2+0x2a8>
 80102f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80102f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80102f8:	f7f0 f91c 	bl	8000534 <__aeabi_i2d>
 80102fc:	4622      	mov	r2, r4
 80102fe:	462b      	mov	r3, r5
 8010300:	f7f0 f982 	bl	8000608 <__aeabi_dmul>
 8010304:	4652      	mov	r2, sl
 8010306:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801030a:	465b      	mov	r3, fp
 801030c:	4620      	mov	r0, r4
 801030e:	4629      	mov	r1, r5
 8010310:	f7f0 f97a 	bl	8000608 <__aeabi_dmul>
 8010314:	3e01      	subs	r6, #1
 8010316:	4604      	mov	r4, r0
 8010318:	460d      	mov	r5, r1
 801031a:	e718      	b.n	801014e <__kernel_rem_pio2+0x2ce>
 801031c:	9906      	ldr	r1, [sp, #24]
 801031e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8010322:	9106      	str	r1, [sp, #24]
 8010324:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8010328:	f7f0 f96e 	bl	8000608 <__aeabi_dmul>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	4650      	mov	r0, sl
 8010332:	4659      	mov	r1, fp
 8010334:	f7ef ffb2 	bl	800029c <__adddf3>
 8010338:	3601      	adds	r6, #1
 801033a:	4682      	mov	sl, r0
 801033c:	468b      	mov	fp, r1
 801033e:	9b00      	ldr	r3, [sp, #0]
 8010340:	429e      	cmp	r6, r3
 8010342:	dc01      	bgt.n	8010348 <__kernel_rem_pio2+0x4c8>
 8010344:	42b5      	cmp	r5, r6
 8010346:	dae9      	bge.n	801031c <__kernel_rem_pio2+0x49c>
 8010348:	ab48      	add	r3, sp, #288	@ 0x120
 801034a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801034e:	e9c5 ab00 	strd	sl, fp, [r5]
 8010352:	3c01      	subs	r4, #1
 8010354:	e6ff      	b.n	8010156 <__kernel_rem_pio2+0x2d6>
 8010356:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010358:	2b02      	cmp	r3, #2
 801035a:	dc0b      	bgt.n	8010374 <__kernel_rem_pio2+0x4f4>
 801035c:	2b00      	cmp	r3, #0
 801035e:	dc39      	bgt.n	80103d4 <__kernel_rem_pio2+0x554>
 8010360:	d05d      	beq.n	801041e <__kernel_rem_pio2+0x59e>
 8010362:	9b02      	ldr	r3, [sp, #8]
 8010364:	f003 0007 	and.w	r0, r3, #7
 8010368:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801036c:	ecbd 8b02 	vpop	{d8}
 8010370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010374:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8010376:	2b03      	cmp	r3, #3
 8010378:	d1f3      	bne.n	8010362 <__kernel_rem_pio2+0x4e2>
 801037a:	9b05      	ldr	r3, [sp, #20]
 801037c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010380:	eb0d 0403 	add.w	r4, sp, r3
 8010384:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8010388:	4625      	mov	r5, r4
 801038a:	46c2      	mov	sl, r8
 801038c:	f1ba 0f00 	cmp.w	sl, #0
 8010390:	f1a5 0508 	sub.w	r5, r5, #8
 8010394:	dc6b      	bgt.n	801046e <__kernel_rem_pio2+0x5ee>
 8010396:	4645      	mov	r5, r8
 8010398:	2d01      	cmp	r5, #1
 801039a:	f1a4 0408 	sub.w	r4, r4, #8
 801039e:	f300 8087 	bgt.w	80104b0 <__kernel_rem_pio2+0x630>
 80103a2:	9c05      	ldr	r4, [sp, #20]
 80103a4:	ab48      	add	r3, sp, #288	@ 0x120
 80103a6:	441c      	add	r4, r3
 80103a8:	2000      	movs	r0, #0
 80103aa:	2100      	movs	r1, #0
 80103ac:	f1b8 0f01 	cmp.w	r8, #1
 80103b0:	f300 809c 	bgt.w	80104ec <__kernel_rem_pio2+0x66c>
 80103b4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80103b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80103bc:	f1b9 0f00 	cmp.w	r9, #0
 80103c0:	f040 80a6 	bne.w	8010510 <__kernel_rem_pio2+0x690>
 80103c4:	9b04      	ldr	r3, [sp, #16]
 80103c6:	e9c3 7800 	strd	r7, r8, [r3]
 80103ca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80103ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80103d2:	e7c6      	b.n	8010362 <__kernel_rem_pio2+0x4e2>
 80103d4:	9d05      	ldr	r5, [sp, #20]
 80103d6:	ab48      	add	r3, sp, #288	@ 0x120
 80103d8:	441d      	add	r5, r3
 80103da:	4644      	mov	r4, r8
 80103dc:	2000      	movs	r0, #0
 80103de:	2100      	movs	r1, #0
 80103e0:	2c00      	cmp	r4, #0
 80103e2:	da35      	bge.n	8010450 <__kernel_rem_pio2+0x5d0>
 80103e4:	f1b9 0f00 	cmp.w	r9, #0
 80103e8:	d038      	beq.n	801045c <__kernel_rem_pio2+0x5dc>
 80103ea:	4602      	mov	r2, r0
 80103ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80103f0:	9c04      	ldr	r4, [sp, #16]
 80103f2:	e9c4 2300 	strd	r2, r3, [r4]
 80103f6:	4602      	mov	r2, r0
 80103f8:	460b      	mov	r3, r1
 80103fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80103fe:	f7ef ff4b 	bl	8000298 <__aeabi_dsub>
 8010402:	ad4a      	add	r5, sp, #296	@ 0x128
 8010404:	2401      	movs	r4, #1
 8010406:	45a0      	cmp	r8, r4
 8010408:	da2b      	bge.n	8010462 <__kernel_rem_pio2+0x5e2>
 801040a:	f1b9 0f00 	cmp.w	r9, #0
 801040e:	d002      	beq.n	8010416 <__kernel_rem_pio2+0x596>
 8010410:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010414:	4619      	mov	r1, r3
 8010416:	9b04      	ldr	r3, [sp, #16]
 8010418:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801041c:	e7a1      	b.n	8010362 <__kernel_rem_pio2+0x4e2>
 801041e:	9c05      	ldr	r4, [sp, #20]
 8010420:	ab48      	add	r3, sp, #288	@ 0x120
 8010422:	441c      	add	r4, r3
 8010424:	2000      	movs	r0, #0
 8010426:	2100      	movs	r1, #0
 8010428:	f1b8 0f00 	cmp.w	r8, #0
 801042c:	da09      	bge.n	8010442 <__kernel_rem_pio2+0x5c2>
 801042e:	f1b9 0f00 	cmp.w	r9, #0
 8010432:	d002      	beq.n	801043a <__kernel_rem_pio2+0x5ba>
 8010434:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010438:	4619      	mov	r1, r3
 801043a:	9b04      	ldr	r3, [sp, #16]
 801043c:	e9c3 0100 	strd	r0, r1, [r3]
 8010440:	e78f      	b.n	8010362 <__kernel_rem_pio2+0x4e2>
 8010442:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010446:	f7ef ff29 	bl	800029c <__adddf3>
 801044a:	f108 38ff 	add.w	r8, r8, #4294967295
 801044e:	e7eb      	b.n	8010428 <__kernel_rem_pio2+0x5a8>
 8010450:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8010454:	f7ef ff22 	bl	800029c <__adddf3>
 8010458:	3c01      	subs	r4, #1
 801045a:	e7c1      	b.n	80103e0 <__kernel_rem_pio2+0x560>
 801045c:	4602      	mov	r2, r0
 801045e:	460b      	mov	r3, r1
 8010460:	e7c6      	b.n	80103f0 <__kernel_rem_pio2+0x570>
 8010462:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010466:	f7ef ff19 	bl	800029c <__adddf3>
 801046a:	3401      	adds	r4, #1
 801046c:	e7cb      	b.n	8010406 <__kernel_rem_pio2+0x586>
 801046e:	ed95 7b00 	vldr	d7, [r5]
 8010472:	ed8d 7b00 	vstr	d7, [sp]
 8010476:	ed95 7b02 	vldr	d7, [r5, #8]
 801047a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801047e:	ec53 2b17 	vmov	r2, r3, d7
 8010482:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010486:	f7ef ff09 	bl	800029c <__adddf3>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	4606      	mov	r6, r0
 8010490:	460f      	mov	r7, r1
 8010492:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010496:	f7ef feff 	bl	8000298 <__aeabi_dsub>
 801049a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801049e:	f7ef fefd 	bl	800029c <__adddf3>
 80104a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80104aa:	e9c5 6700 	strd	r6, r7, [r5]
 80104ae:	e76d      	b.n	801038c <__kernel_rem_pio2+0x50c>
 80104b0:	ed94 7b00 	vldr	d7, [r4]
 80104b4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80104b8:	ec51 0b17 	vmov	r0, r1, d7
 80104bc:	4652      	mov	r2, sl
 80104be:	465b      	mov	r3, fp
 80104c0:	ed8d 7b00 	vstr	d7, [sp]
 80104c4:	f7ef feea 	bl	800029c <__adddf3>
 80104c8:	4602      	mov	r2, r0
 80104ca:	460b      	mov	r3, r1
 80104cc:	4606      	mov	r6, r0
 80104ce:	460f      	mov	r7, r1
 80104d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104d4:	f7ef fee0 	bl	8000298 <__aeabi_dsub>
 80104d8:	4652      	mov	r2, sl
 80104da:	465b      	mov	r3, fp
 80104dc:	f7ef fede 	bl	800029c <__adddf3>
 80104e0:	3d01      	subs	r5, #1
 80104e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80104e6:	e9c4 6700 	strd	r6, r7, [r4]
 80104ea:	e755      	b.n	8010398 <__kernel_rem_pio2+0x518>
 80104ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80104f0:	f7ef fed4 	bl	800029c <__adddf3>
 80104f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80104f8:	e758      	b.n	80103ac <__kernel_rem_pio2+0x52c>
 80104fa:	bf00      	nop
 80104fc:	f3af 8000 	nop.w
	...
 8010508:	41700000 	.word	0x41700000
 801050c:	3e700000 	.word	0x3e700000
 8010510:	9b04      	ldr	r3, [sp, #16]
 8010512:	9a04      	ldr	r2, [sp, #16]
 8010514:	601f      	str	r7, [r3, #0]
 8010516:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801051a:	605c      	str	r4, [r3, #4]
 801051c:	609d      	str	r5, [r3, #8]
 801051e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010522:	60d3      	str	r3, [r2, #12]
 8010524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010528:	6110      	str	r0, [r2, #16]
 801052a:	6153      	str	r3, [r2, #20]
 801052c:	e719      	b.n	8010362 <__kernel_rem_pio2+0x4e2>
 801052e:	bf00      	nop

08010530 <scalbn>:
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	ec55 4b10 	vmov	r4, r5, d0
 8010536:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801053a:	4606      	mov	r6, r0
 801053c:	462b      	mov	r3, r5
 801053e:	b991      	cbnz	r1, 8010566 <scalbn+0x36>
 8010540:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010544:	4323      	orrs	r3, r4
 8010546:	d03d      	beq.n	80105c4 <scalbn+0x94>
 8010548:	4b35      	ldr	r3, [pc, #212]	@ (8010620 <scalbn+0xf0>)
 801054a:	4620      	mov	r0, r4
 801054c:	4629      	mov	r1, r5
 801054e:	2200      	movs	r2, #0
 8010550:	f7f0 f85a 	bl	8000608 <__aeabi_dmul>
 8010554:	4b33      	ldr	r3, [pc, #204]	@ (8010624 <scalbn+0xf4>)
 8010556:	429e      	cmp	r6, r3
 8010558:	4604      	mov	r4, r0
 801055a:	460d      	mov	r5, r1
 801055c:	da0f      	bge.n	801057e <scalbn+0x4e>
 801055e:	a328      	add	r3, pc, #160	@ (adr r3, 8010600 <scalbn+0xd0>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	e01e      	b.n	80105a4 <scalbn+0x74>
 8010566:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801056a:	4291      	cmp	r1, r2
 801056c:	d10b      	bne.n	8010586 <scalbn+0x56>
 801056e:	4622      	mov	r2, r4
 8010570:	4620      	mov	r0, r4
 8010572:	4629      	mov	r1, r5
 8010574:	f7ef fe92 	bl	800029c <__adddf3>
 8010578:	4604      	mov	r4, r0
 801057a:	460d      	mov	r5, r1
 801057c:	e022      	b.n	80105c4 <scalbn+0x94>
 801057e:	460b      	mov	r3, r1
 8010580:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010584:	3936      	subs	r1, #54	@ 0x36
 8010586:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801058a:	4296      	cmp	r6, r2
 801058c:	dd0d      	ble.n	80105aa <scalbn+0x7a>
 801058e:	2d00      	cmp	r5, #0
 8010590:	a11d      	add	r1, pc, #116	@ (adr r1, 8010608 <scalbn+0xd8>)
 8010592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010596:	da02      	bge.n	801059e <scalbn+0x6e>
 8010598:	a11d      	add	r1, pc, #116	@ (adr r1, 8010610 <scalbn+0xe0>)
 801059a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801059e:	a31a      	add	r3, pc, #104	@ (adr r3, 8010608 <scalbn+0xd8>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	f7f0 f830 	bl	8000608 <__aeabi_dmul>
 80105a8:	e7e6      	b.n	8010578 <scalbn+0x48>
 80105aa:	1872      	adds	r2, r6, r1
 80105ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80105b0:	428a      	cmp	r2, r1
 80105b2:	dcec      	bgt.n	801058e <scalbn+0x5e>
 80105b4:	2a00      	cmp	r2, #0
 80105b6:	dd08      	ble.n	80105ca <scalbn+0x9a>
 80105b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80105bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80105c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105c4:	ec45 4b10 	vmov	d0, r4, r5
 80105c8:	bd70      	pop	{r4, r5, r6, pc}
 80105ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80105ce:	da08      	bge.n	80105e2 <scalbn+0xb2>
 80105d0:	2d00      	cmp	r5, #0
 80105d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8010600 <scalbn+0xd0>)
 80105d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105d8:	dac1      	bge.n	801055e <scalbn+0x2e>
 80105da:	a10f      	add	r1, pc, #60	@ (adr r1, 8010618 <scalbn+0xe8>)
 80105dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105e0:	e7bd      	b.n	801055e <scalbn+0x2e>
 80105e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80105e6:	3236      	adds	r2, #54	@ 0x36
 80105e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80105ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105f0:	4620      	mov	r0, r4
 80105f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010628 <scalbn+0xf8>)
 80105f4:	4629      	mov	r1, r5
 80105f6:	2200      	movs	r2, #0
 80105f8:	e7d4      	b.n	80105a4 <scalbn+0x74>
 80105fa:	bf00      	nop
 80105fc:	f3af 8000 	nop.w
 8010600:	c2f8f359 	.word	0xc2f8f359
 8010604:	01a56e1f 	.word	0x01a56e1f
 8010608:	8800759c 	.word	0x8800759c
 801060c:	7e37e43c 	.word	0x7e37e43c
 8010610:	8800759c 	.word	0x8800759c
 8010614:	fe37e43c 	.word	0xfe37e43c
 8010618:	c2f8f359 	.word	0xc2f8f359
 801061c:	81a56e1f 	.word	0x81a56e1f
 8010620:	43500000 	.word	0x43500000
 8010624:	ffff3cb0 	.word	0xffff3cb0
 8010628:	3c900000 	.word	0x3c900000
 801062c:	00000000 	.word	0x00000000

08010630 <floor>:
 8010630:	ec51 0b10 	vmov	r0, r1, d0
 8010634:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010640:	2e13      	cmp	r6, #19
 8010642:	460c      	mov	r4, r1
 8010644:	4605      	mov	r5, r0
 8010646:	4680      	mov	r8, r0
 8010648:	dc34      	bgt.n	80106b4 <floor+0x84>
 801064a:	2e00      	cmp	r6, #0
 801064c:	da17      	bge.n	801067e <floor+0x4e>
 801064e:	a332      	add	r3, pc, #200	@ (adr r3, 8010718 <floor+0xe8>)
 8010650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010654:	f7ef fe22 	bl	800029c <__adddf3>
 8010658:	2200      	movs	r2, #0
 801065a:	2300      	movs	r3, #0
 801065c:	f7f0 fa64 	bl	8000b28 <__aeabi_dcmpgt>
 8010660:	b150      	cbz	r0, 8010678 <floor+0x48>
 8010662:	2c00      	cmp	r4, #0
 8010664:	da55      	bge.n	8010712 <floor+0xe2>
 8010666:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801066a:	432c      	orrs	r4, r5
 801066c:	2500      	movs	r5, #0
 801066e:	42ac      	cmp	r4, r5
 8010670:	4c2b      	ldr	r4, [pc, #172]	@ (8010720 <floor+0xf0>)
 8010672:	bf08      	it	eq
 8010674:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010678:	4621      	mov	r1, r4
 801067a:	4628      	mov	r0, r5
 801067c:	e023      	b.n	80106c6 <floor+0x96>
 801067e:	4f29      	ldr	r7, [pc, #164]	@ (8010724 <floor+0xf4>)
 8010680:	4137      	asrs	r7, r6
 8010682:	ea01 0307 	and.w	r3, r1, r7
 8010686:	4303      	orrs	r3, r0
 8010688:	d01d      	beq.n	80106c6 <floor+0x96>
 801068a:	a323      	add	r3, pc, #140	@ (adr r3, 8010718 <floor+0xe8>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fe04 	bl	800029c <__adddf3>
 8010694:	2200      	movs	r2, #0
 8010696:	2300      	movs	r3, #0
 8010698:	f7f0 fa46 	bl	8000b28 <__aeabi_dcmpgt>
 801069c:	2800      	cmp	r0, #0
 801069e:	d0eb      	beq.n	8010678 <floor+0x48>
 80106a0:	2c00      	cmp	r4, #0
 80106a2:	bfbe      	ittt	lt
 80106a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80106a8:	4133      	asrlt	r3, r6
 80106aa:	18e4      	addlt	r4, r4, r3
 80106ac:	ea24 0407 	bic.w	r4, r4, r7
 80106b0:	2500      	movs	r5, #0
 80106b2:	e7e1      	b.n	8010678 <floor+0x48>
 80106b4:	2e33      	cmp	r6, #51	@ 0x33
 80106b6:	dd0a      	ble.n	80106ce <floor+0x9e>
 80106b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80106bc:	d103      	bne.n	80106c6 <floor+0x96>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	f7ef fdeb 	bl	800029c <__adddf3>
 80106c6:	ec41 0b10 	vmov	d0, r0, r1
 80106ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80106d2:	f04f 37ff 	mov.w	r7, #4294967295
 80106d6:	40df      	lsrs	r7, r3
 80106d8:	4207      	tst	r7, r0
 80106da:	d0f4      	beq.n	80106c6 <floor+0x96>
 80106dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010718 <floor+0xe8>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef fddb 	bl	800029c <__adddf3>
 80106e6:	2200      	movs	r2, #0
 80106e8:	2300      	movs	r3, #0
 80106ea:	f7f0 fa1d 	bl	8000b28 <__aeabi_dcmpgt>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d0c2      	beq.n	8010678 <floor+0x48>
 80106f2:	2c00      	cmp	r4, #0
 80106f4:	da0a      	bge.n	801070c <floor+0xdc>
 80106f6:	2e14      	cmp	r6, #20
 80106f8:	d101      	bne.n	80106fe <floor+0xce>
 80106fa:	3401      	adds	r4, #1
 80106fc:	e006      	b.n	801070c <floor+0xdc>
 80106fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010702:	2301      	movs	r3, #1
 8010704:	40b3      	lsls	r3, r6
 8010706:	441d      	add	r5, r3
 8010708:	4545      	cmp	r5, r8
 801070a:	d3f6      	bcc.n	80106fa <floor+0xca>
 801070c:	ea25 0507 	bic.w	r5, r5, r7
 8010710:	e7b2      	b.n	8010678 <floor+0x48>
 8010712:	2500      	movs	r5, #0
 8010714:	462c      	mov	r4, r5
 8010716:	e7af      	b.n	8010678 <floor+0x48>
 8010718:	8800759c 	.word	0x8800759c
 801071c:	7e37e43c 	.word	0x7e37e43c
 8010720:	bff00000 	.word	0xbff00000
 8010724:	000fffff 	.word	0x000fffff

08010728 <_init>:
 8010728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072a:	bf00      	nop
 801072c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072e:	bc08      	pop	{r3}
 8010730:	469e      	mov	lr, r3
 8010732:	4770      	bx	lr

08010734 <_fini>:
 8010734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010736:	bf00      	nop
 8010738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801073a:	bc08      	pop	{r3}
 801073c:	469e      	mov	lr, r3
 801073e:	4770      	bx	lr
