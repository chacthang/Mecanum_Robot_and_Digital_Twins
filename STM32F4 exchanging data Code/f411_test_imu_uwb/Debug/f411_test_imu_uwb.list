
f411_test_imu_uwb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b410  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  0800b5b0  0800b5b0  0000c5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcc4  0800bcc4  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bccc  0800bccc  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bccc  0800bccc  0000cccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd0  0800bcd0  0000ccd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bcd4  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  200001f0  0800bec4  0000d1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  0800bec4  0000d758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001119e  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f7  00000000  00000000  0001e3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000207b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7a  00000000  00000000  000218c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180ab  00000000  00000000  0002263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139dd  00000000  00000000  0003a6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009446d  00000000  00000000  0004e0c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e252f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fec  00000000  00000000  000e2574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000e8560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b598 	.word	0x0800b598

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b598 	.word	0x0800b598

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <bno055_assignI2C+0x1c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000020c 	.word	0x2000020c

08001014 <bno055_delay>:

void bno055_delay(int time) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fdc6 	bl	8002bb0 <HAL_Delay>
#endif
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	733b      	strb	r3, [r7, #12]
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001044:	4b5a      	ldr	r3, [pc, #360]	@ (80011b0 <bno055_writeData+0x184>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	230a      	movs	r3, #10
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2302      	movs	r3, #2
 8001052:	2150      	movs	r1, #80	@ 0x50
 8001054:	f002 fa56 	bl	8003504 <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80a0 	beq.w	80011a4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d103      	bne.n	8001072 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800106a:	4852      	ldr	r0, [pc, #328]	@ (80011b4 <bno055_writeData+0x188>)
 800106c:	f007 faf8 	bl	8008660 <puts>
 8001070:	e012      	b.n	8001098 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	2b03      	cmp	r3, #3
 8001076:	d103      	bne.n	8001080 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001078:	484f      	ldr	r0, [pc, #316]	@ (80011b8 <bno055_writeData+0x18c>)
 800107a:	f007 faf1 	bl	8008660 <puts>
 800107e:	e00b      	b.n	8001098 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d103      	bne.n	800108e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001086:	484d      	ldr	r0, [pc, #308]	@ (80011bc <bno055_writeData+0x190>)
 8001088:	f007 faea 	bl	8008660 <puts>
 800108c:	e004      	b.n	8001098 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	4619      	mov	r1, r3
 8001092:	484b      	ldr	r0, [pc, #300]	@ (80011c0 <bno055_writeData+0x194>)
 8001094:	f007 fa7c 	bl	8008590 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001098:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <bno055_writeData+0x184>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fd6f 	bl	8003b80 <HAL_I2C_GetError>
 80010a2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d07e      	beq.n	80011a8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d103      	bne.n	80010b8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80010b0:	4844      	ldr	r0, [pc, #272]	@ (80011c4 <bno055_writeData+0x198>)
 80010b2:	f007 fad5 	bl	8008660 <puts>
 80010b6:	e021      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d103      	bne.n	80010c6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80010be:	4842      	ldr	r0, [pc, #264]	@ (80011c8 <bno055_writeData+0x19c>)
 80010c0:	f007 face 	bl	8008660 <puts>
 80010c4:	e01a      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d103      	bne.n	80010d4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80010cc:	483f      	ldr	r0, [pc, #252]	@ (80011cc <bno055_writeData+0x1a0>)
 80010ce:	f007 fac7 	bl	8008660 <puts>
 80010d2:	e013      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d103      	bne.n	80010e2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80010da:	483d      	ldr	r0, [pc, #244]	@ (80011d0 <bno055_writeData+0x1a4>)
 80010dc:	f007 fac0 	bl	8008660 <puts>
 80010e0:	e00c      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d103      	bne.n	80010f0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80010e8:	483a      	ldr	r0, [pc, #232]	@ (80011d4 <bno055_writeData+0x1a8>)
 80010ea:	f007 fab9 	bl	8008660 <puts>
 80010ee:	e005      	b.n	80010fc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d102      	bne.n	80010fc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80010f6:	4838      	ldr	r0, [pc, #224]	@ (80011d8 <bno055_writeData+0x1ac>)
 80010f8:	f007 fab2 	bl	8008660 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <bno055_writeData+0x184>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fd2f 	bl	8003b64 <HAL_I2C_GetState>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001110:	4832      	ldr	r0, [pc, #200]	@ (80011dc <bno055_writeData+0x1b0>)
 8001112:	f007 faa5 	bl	8008660 <puts>
 8001116:	e048      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b20      	cmp	r3, #32
 800111c:	d103      	bne.n	8001126 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800111e:	482f      	ldr	r0, [pc, #188]	@ (80011dc <bno055_writeData+0x1b0>)
 8001120:	f007 fa9e 	bl	8008660 <puts>
 8001124:	e041      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b24      	cmp	r3, #36	@ 0x24
 800112a:	d103      	bne.n	8001134 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800112c:	482c      	ldr	r0, [pc, #176]	@ (80011e0 <bno055_writeData+0x1b4>)
 800112e:	f007 fa97 	bl	8008660 <puts>
 8001132:	e03a      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b21      	cmp	r3, #33	@ 0x21
 8001138:	d103      	bne.n	8001142 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800113a:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <bno055_writeData+0x1b8>)
 800113c:	f007 fa90 	bl	8008660 <puts>
 8001140:	e033      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b22      	cmp	r3, #34	@ 0x22
 8001146:	d103      	bne.n	8001150 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001148:	4827      	ldr	r0, [pc, #156]	@ (80011e8 <bno055_writeData+0x1bc>)
 800114a:	f007 fa89 	bl	8008660 <puts>
 800114e:	e02c      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b28      	cmp	r3, #40	@ 0x28
 8001154:	d103      	bne.n	800115e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001156:	4825      	ldr	r0, [pc, #148]	@ (80011ec <bno055_writeData+0x1c0>)
 8001158:	f007 fa82 	bl	8008660 <puts>
 800115c:	e025      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b29      	cmp	r3, #41	@ 0x29
 8001162:	d103      	bne.n	800116c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001164:	4822      	ldr	r0, [pc, #136]	@ (80011f0 <bno055_writeData+0x1c4>)
 8001166:	f007 fa7b 	bl	8008660 <puts>
 800116a:	e01e      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001170:	d103      	bne.n	800117a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001172:	4820      	ldr	r0, [pc, #128]	@ (80011f4 <bno055_writeData+0x1c8>)
 8001174:	f007 fa74 	bl	8008660 <puts>
 8001178:	e017      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b60      	cmp	r3, #96	@ 0x60
 800117e:	d103      	bne.n	8001188 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001180:	481d      	ldr	r0, [pc, #116]	@ (80011f8 <bno055_writeData+0x1cc>)
 8001182:	f007 fa6d 	bl	8008660 <puts>
 8001186:	e010      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2ba0      	cmp	r3, #160	@ 0xa0
 800118c:	d103      	bne.n	8001196 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800118e:	481b      	ldr	r0, [pc, #108]	@ (80011fc <bno055_writeData+0x1d0>)
 8001190:	f007 fa66 	bl	8008660 <puts>
 8001194:	e009      	b.n	80011aa <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2be0      	cmp	r3, #224	@ 0xe0
 800119a:	d106      	bne.n	80011aa <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 800119c:	4818      	ldr	r0, [pc, #96]	@ (8001200 <bno055_writeData+0x1d4>)
 800119e:	f007 fa5f 	bl	8008660 <puts>
 80011a2:	e002      	b.n	80011aa <bno055_writeData+0x17e>
    return;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <bno055_writeData+0x17e>
    return;
 80011a8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000020c 	.word	0x2000020c
 80011b4:	0800b5b0 	.word	0x0800b5b0
 80011b8:	0800b5d4 	.word	0x0800b5d4
 80011bc:	0800b5fc 	.word	0x0800b5fc
 80011c0:	0800b620 	.word	0x0800b620
 80011c4:	0800b638 	.word	0x0800b638
 80011c8:	0800b64c 	.word	0x0800b64c
 80011cc:	0800b660 	.word	0x0800b660
 80011d0:	0800b674 	.word	0x0800b674
 80011d4:	0800b688 	.word	0x0800b688
 80011d8:	0800b69c 	.word	0x0800b69c
 80011dc:	0800b6b4 	.word	0x0800b6b4
 80011e0:	0800b6cc 	.word	0x0800b6cc
 80011e4:	0800b6e0 	.word	0x0800b6e0
 80011e8:	0800b6f8 	.word	0x0800b6f8
 80011ec:	0800b710 	.word	0x0800b710
 80011f0:	0800b728 	.word	0x0800b728
 80011f4:	0800b748 	.word	0x0800b748
 80011f8:	0800b768 	.word	0x0800b768
 80011fc:	0800b780 	.word	0x0800b780
 8001200:	0800b798 	.word	0x0800b798

08001204 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <bno055_readData+0x40>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	1dfa      	adds	r2, r7, #7
 800121a:	2364      	movs	r3, #100	@ 0x64
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	2150      	movs	r1, #80	@ 0x50
 8001222:	f002 f96f 	bl	8003504 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001226:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <bno055_readData+0x40>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	b29b      	uxth	r3, r3
 800122e:	2264      	movs	r2, #100	@ 0x64
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	2150      	movs	r1, #80	@ 0x50
 8001236:	f002 fa63 	bl	8003700 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000020c 	.word	0x2000020c

08001248 <pos_xy>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void pos_xy(float da, float db)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001252:	edc7 0a00 	vstr	s1, [r7]
	a = db*db - h*h;
 8001256:	edd7 7a00 	vldr	s15, [r7]
 800125a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800125e:	ee17 0a90 	vmov	r0, s15
 8001262:	f7ff f979 	bl	8000558 <__aeabi_f2d>
 8001266:	a370      	add	r3, pc, #448	@ (adr r3, 8001428 <pos_xy+0x1e0>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f814 	bl	8000298 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fcbe 	bl	8000bf8 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4a6c      	ldr	r2, [pc, #432]	@ (8001430 <pos_xy+0x1e8>)
 8001280:	6013      	str	r3, [r2, #0]
	a = sqrt(a);
 8001282:	4b6b      	ldr	r3, [pc, #428]	@ (8001430 <pos_xy+0x1e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f966 	bl	8000558 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	ec43 2b10 	vmov	d0, r2, r3
 8001294:	f00a f87a 	bl	800b38c <sqrt>
 8001298:	ec53 2b10 	vmov	r2, r3, d0
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fcaa 	bl	8000bf8 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a62      	ldr	r2, [pc, #392]	@ (8001430 <pos_xy+0x1e8>)
 80012a8:	6013      	str	r3, [r2, #0]
	b = da*da - h*h;
 80012aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f94f 	bl	8000558 <__aeabi_f2d>
 80012ba:	a35b      	add	r3, pc, #364	@ (adr r3, 8001428 <pos_xy+0x1e0>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7fe ffea 	bl	8000298 <__aeabi_dsub>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc94 	bl	8000bf8 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a58      	ldr	r2, [pc, #352]	@ (8001434 <pos_xy+0x1ec>)
 80012d4:	6013      	str	r3, [r2, #0]
	b = sqrt(b);
 80012d6:	4b57      	ldr	r3, [pc, #348]	@ (8001434 <pos_xy+0x1ec>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93c 	bl	8000558 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	ec43 2b10 	vmov	d0, r2, r3
 80012e8:	f00a f850 	bl	800b38c <sqrt>
 80012ec:	ec53 2b10 	vmov	r2, r3, d0
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc80 	bl	8000bf8 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <pos_xy+0x1ec>)
 80012fc:	6013      	str	r3, [r2, #0]

	cos_a = (b*b + c*c - a*a) / (2*b*c);
 80012fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001434 <pos_xy+0x1ec>)
 8001300:	ed93 7a00 	vldr	s14, [r3]
 8001304:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <pos_xy+0x1ec>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	ee17 0a90 	vmov	r0, s15
 8001312:	f7ff f921 	bl	8000558 <__aeabi_f2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <pos_xy+0x1f0>)
 800131c:	f7fe ffbe 	bl	800029c <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <pos_xy+0x1e8>)
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <pos_xy+0x1e8>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	ee17 0a90 	vmov	r0, s15
 800133c:	f7ff f90c 	bl	8000558 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7fe ffa6 	bl	8000298 <__aeabi_dsub>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4614      	mov	r4, r2
 8001352:	461d      	mov	r5, r3
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <pos_xy+0x1ec>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800135e:	ee17 0a90 	vmov	r0, s15
 8001362:	f7ff f8f9 	bl	8000558 <__aeabi_f2d>
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4b34      	ldr	r3, [pc, #208]	@ (800143c <pos_xy+0x1f4>)
 800136c:	f7ff f94c 	bl	8000608 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7ff fa70 	bl	800085c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	4a2d      	ldr	r2, [pc, #180]	@ (8001440 <pos_xy+0x1f8>)
 800138c:	6013      	str	r3, [r2, #0]
	x_p = b*cos_a;
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <pos_xy+0x1ec>)
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <pos_xy+0x1f8>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <pos_xy+0x1fc>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	if((1 - cos_a*cos_a) >= 0)
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <pos_xy+0x1f8>)
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	4b25      	ldr	r3, [pc, #148]	@ (8001440 <pos_xy+0x1f8>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	da00      	bge.n	80013c8 <pos_xy+0x180>
	{
	  y_p = b*sqrt(1 - cos_a*cos_a);
	}
}
 80013c6:	e02b      	b.n	8001420 <pos_xy+0x1d8>
	  y_p = b*sqrt(1 - cos_a*cos_a);
 80013c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <pos_xy+0x1ec>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8c3 	bl	8000558 <__aeabi_f2d>
 80013d2:	4604      	mov	r4, r0
 80013d4:	460d      	mov	r5, r1
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <pos_xy+0x1f8>)
 80013d8:	ed93 7a00 	vldr	s14, [r3]
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <pos_xy+0x1f8>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	ee17 0a90 	vmov	r0, s15
 80013f2:	f7ff f8b1 	bl	8000558 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	ec43 2b10 	vmov	d0, r2, r3
 80013fe:	f009 ffc5 	bl	800b38c <sqrt>
 8001402:	ec53 2b10 	vmov	r2, r3, d0
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f7ff f8fd 	bl	8000608 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbef 	bl	8000bf8 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <pos_xy+0x200>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bdb0      	pop	{r4, r5, r7, pc}
 8001428:	70a3d70a 	.word	0x70a3d70a
 800142c:	3fb70a3d 	.word	0x3fb70a3d
 8001430:	200002e0 	.word	0x200002e0
 8001434:	200002e4 	.word	0x200002e4
 8001438:	40220000 	.word	0x40220000
 800143c:	40080000 	.word	0x40080000
 8001440:	200002dc 	.word	0x200002dc
 8001444:	200002cc 	.word	0x200002cc
 8001448:	200002d0 	.word	0x200002d0
 800144c:	00000000 	.word	0x00000000

08001450 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001454:	b098      	sub	sp, #96	@ 0x60
 8001456:	af0e      	add	r7, sp, #56	@ 0x38
 8001458:	6278      	str	r0, [r7, #36]	@ 0x24
	if(htim->Instance == TIM9)
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a92      	ldr	r2, [pc, #584]	@ (80016a8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001460:	4293      	cmp	r3, r2
 8001462:	f040 820c 	bne.w	800187e <HAL_TIM_PeriodElapsedCallback+0x42e>
	{
		cnt4 = __HAL_TIM_GET_COUNTER(&htim1);
 8001466:	4b91      	ldr	r3, [pc, #580]	@ (80016ac <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b90      	ldr	r3, [pc, #576]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001470:	801a      	strh	r2, [r3, #0]
		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001472:	4b90      	ldr	r3, [pc, #576]	@ (80016b4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b8f      	ldr	r3, [pc, #572]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800147c:	801a      	strh	r2, [r3, #0]
		cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 800147e:	4b8f      	ldr	r3, [pc, #572]	@ (80016bc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b8e      	ldr	r3, [pc, #568]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001488:	801a      	strh	r2, [r3, #0]
		cnt2 = __HAL_TIM_GET_COUNTER(&htim4);
 800148a:	4b8e      	ldr	r3, [pc, #568]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b8d      	ldr	r3, [pc, #564]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001494:	801a      	strh	r2, [r3, #0]
		rate1 = ((float)(cnt1 - cnt_pre1)*60*15)/(60*990*0.1);
 8001496:	4b88      	ldr	r3, [pc, #544]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	b21b      	sxth	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4b8b      	ldr	r3, [pc, #556]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>
 80014b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	ee17 0a90 	vmov	r0, s15
 80014c2:	f7ff f849 	bl	8000558 <__aeabi_f2d>
 80014c6:	a374      	add	r3, pc, #464	@ (adr r3, 8001698 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f9c6 	bl	800085c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb8e 	bl	8000bf8 <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a7d      	ldr	r2, [pc, #500]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80014e0:	6013      	str	r3, [r2, #0]
		rate2 = ((float)(cnt2 - cnt_pre2)*60*15)/(60*990*0.1);
 80014e2:	4b79      	ldr	r3, [pc, #484]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b7b      	ldr	r3, [pc, #492]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fa:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>
 80014fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001502:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	ee17 0a90 	vmov	r0, s15
 800150e:	f7ff f823 	bl	8000558 <__aeabi_f2d>
 8001512:	a361      	add	r3, pc, #388	@ (adr r3, 8001698 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f9a0 	bl	800085c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb68 	bl	8000bf8 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4a6c      	ldr	r2, [pc, #432]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800152c:	6013      	str	r3, [r2, #0]
		rate3 = ((float)(cnt3 - cnt_pre3)*60*15)/(60*990*0.1);
 800152e:	4b64      	ldr	r3, [pc, #400]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b21b      	sxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4b6a      	ldr	r3, [pc, #424]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b21b      	sxth	r3, r3
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001546:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe fffd 	bl	8000558 <__aeabi_f2d>
 800155e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001698 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f97a 	bl	800085c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb42 	bl	8000bf8 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	4a5b      	ldr	r2, [pc, #364]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001578:	6013      	str	r3, [r2, #0]
		rate4 = ((float)(cnt4 - cnt_pre4)*60*15)/(60*990*0.1);
 800157a:	4b4d      	ldr	r3, [pc, #308]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b21b      	sxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	4b59      	ldr	r3, [pc, #356]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b21b      	sxth	r3, r3
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001592:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80016d0 <HAL_TIM_PeriodElapsedCallback+0x280>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800159e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a2:	ee17 0a90 	vmov	r0, s15
 80015a6:	f7fe ffd7 	bl	8000558 <__aeabi_f2d>
 80015aa:	a33b      	add	r3, pc, #236	@ (adr r3, 8001698 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f954 	bl	800085c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a4a      	ldr	r2, [pc, #296]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015c4:	6013      	str	r3, [r2, #0]
		cnt_pre1 = cnt1;
 80015c6:	4b3c      	ldr	r3, [pc, #240]	@ (80016b8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	4b3f      	ldr	r3, [pc, #252]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80015ce:	801a      	strh	r2, [r3, #0]
		cnt_pre2 = cnt2;
 80015d0:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80015d8:	801a      	strh	r2, [r3, #0]
		cnt_pre3 = cnt3;
 80015da:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b3f      	ldr	r3, [pc, #252]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80015e2:	801a      	strh	r2, [r3, #0]
		cnt_pre4 = cnt4;
 80015e4:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b3f      	ldr	r3, [pc, #252]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015ec:	801a      	strh	r2, [r3, #0]

		v = bno055_getVectorEuler();
 80015ee:	f005 fa47 	bl	8006a80 <bno055_getVectorEuler>
 80015f2:	eeb0 4a40 	vmov.f32	s8, s0
 80015f6:	eef0 4a60 	vmov.f32	s9, s1
 80015fa:	eeb0 5a41 	vmov.f32	s10, s2
 80015fe:	eef0 5a61 	vmov.f32	s11, s3
 8001602:	eeb0 6a42 	vmov.f32	s12, s4
 8001606:	eef0 6a62 	vmov.f32	s13, s5
 800160a:	eeb0 7a43 	vmov.f32	s14, s6
 800160e:	eef0 7a63 	vmov.f32	s15, s7
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001614:	ed83 4b00 	vstr	d4, [r3]
 8001618:	ed83 5b02 	vstr	d5, [r3, #8]
 800161c:	ed83 6b04 	vstr	d6, [r3, #16]
 8001620:	ed83 7b06 	vstr	d7, [r3, #24]
		yaw = v.x;
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001626:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fae3 	bl	8000bf8 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001636:	6013      	str	r3, [r2, #0]
		//yaw = (yaw/360)*2*3.1416;
		if ((yaw >= 0) && (yaw < 180))
 8001638:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	db5b      	blt.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8001648:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80016f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8001652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d551      	bpl.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x2b0>
		{
			yaw = -(yaw/360)*2*3.1416;
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800165e:	ed93 7a00 	vldr	s14, [r3]
 8001662:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80016fc <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8001666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166a:	eef1 7a67 	vneg.f32	s15, s15
 800166e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff6f 	bl	8000558 <__aeabi_f2d>
 800167a:	a309      	add	r3, pc, #36	@ (adr r3, 80016a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffc2 	bl	8000608 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fab4 	bl	8000bf8 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e058      	b.n	800174a <HAL_TIM_PeriodElapsedCallback+0x2fa>
 8001698:	00000000 	.word	0x00000000
 800169c:	40b73400 	.word	0x40b73400
 80016a0:	2e48e8a7 	.word	0x2e48e8a7
 80016a4:	400921ff 	.word	0x400921ff
 80016a8:	40014000 	.word	0x40014000
 80016ac:	200003c4 	.word	0x200003c4
 80016b0:	200002fc 	.word	0x200002fc
 80016b4:	2000040c 	.word	0x2000040c
 80016b8:	200002f0 	.word	0x200002f0
 80016bc:	20000454 	.word	0x20000454
 80016c0:	200002f8 	.word	0x200002f8
 80016c4:	2000049c 	.word	0x2000049c
 80016c8:	200002f4 	.word	0x200002f4
 80016cc:	200002f2 	.word	0x200002f2
 80016d0:	42700000 	.word	0x42700000
 80016d4:	20000300 	.word	0x20000300
 80016d8:	200002f6 	.word	0x200002f6
 80016dc:	20000304 	.word	0x20000304
 80016e0:	200002fa 	.word	0x200002fa
 80016e4:	20000308 	.word	0x20000308
 80016e8:	200002fe 	.word	0x200002fe
 80016ec:	2000030c 	.word	0x2000030c
 80016f0:	20000350 	.word	0x20000350
 80016f4:	20000344 	.word	0x20000344
 80016f8:	43340000 	.word	0x43340000
 80016fc:	43b40000 	.word	0x43b40000

		}
		else
		{
			yaw = 360-yaw;
 8001700:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800189c <HAL_TIM_PeriodElapsedCallback+0x44c>
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	4b62      	ldr	r3, [pc, #392]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
			yaw = (yaw/360)*2*3.1416;
 8001714:	4b60      	ldr	r3, [pc, #384]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800189c <HAL_TIM_PeriodElapsedCallback+0x44c>
 800171e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001722:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001726:	ee17 0a90 	vmov	r0, s15
 800172a:	f7fe ff15 	bl	8000558 <__aeabi_f2d>
 800172e:	a356      	add	r3, pc, #344	@ (adr r3, 8001888 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff68 	bl	8000608 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fa5a 	bl	8000bf8 <__aeabi_d2f>
 8001744:	4603      	mov	r3, r0
 8001746:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001748:	6013      	str	r3, [r2, #0]

		}
		zq = (0.048/(4*0.6))*(-rate1 + rate2 + rate3 - rate4)*2*3.1416/60;
 800174a:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x450>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b54      	ldr	r3, [pc, #336]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee37 7a67 	vsub.f32	s14, s14, s15
 800175a:	4b53      	ldr	r3, [pc, #332]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001764:	4b51      	ldr	r3, [pc, #324]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176e:	ee17 0a90 	vmov	r0, s15
 8001772:	f7fe fef1 	bl	8000558 <__aeabi_f2d>
 8001776:	a346      	add	r3, pc, #280	@ (adr r3, 8001890 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff44 	bl	8000608 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	f7fe fd86 	bl	800029c <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a33b      	add	r3, pc, #236	@ (adr r3, 8001888 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff33 	bl	8000608 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b40      	ldr	r3, [pc, #256]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80017b0:	f7ff f854 	bl	800085c <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa1c 	bl	8000bf8 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a3c      	ldr	r2, [pc, #240]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80017c4:	6013      	str	r3, [r2, #0]

		//v2 = bno055_getVectorGyroscope();
		//zq = v2.z;
		//zq = (zq/360)*2*3.1416;

		sprintf(position,"E=%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f\r\n",rate1,rate2,rate3,rate4,x_p,y_p,yaw,zq);
 80017c6:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x454>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80017d4:	4b32      	ldr	r3, [pc, #200]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x450>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4682      	mov	sl, r0
 80017e0:	468b      	mov	fp, r1
 80017e2:	4b31      	ldr	r3, [pc, #196]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe feb6 	bl	8000558 <__aeabi_f2d>
 80017ec:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe feaf 	bl	8000558 <__aeabi_f2d>
 80017fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017fe:	4b2e      	ldr	r3, [pc, #184]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fea8 	bl	8000558 <__aeabi_f2d>
 8001808:	e9c7 0100 	strd	r0, r1, [r7]
 800180c:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fea1 	bl	8000558 <__aeabi_f2d>
 8001816:	4680      	mov	r8, r0
 8001818:	4689      	mov	r9, r1
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe9a 	bl	8000558 <__aeabi_f2d>
 8001824:	4604      	mov	r4, r0
 8001826:	460d      	mov	r5, r1
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe93 	bl	8000558 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800183a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800183e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001842:	ed97 7b00 	vldr	d7, [r7]
 8001846:	ed8d 7b06 	vstr	d7, [sp, #24]
 800184a:	ed97 7b02 	vldr	d7, [r7, #8]
 800184e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001852:	ed97 7b04 	vldr	d7, [r7, #16]
 8001856:	ed8d 7b02 	vstr	d7, [sp, #8]
 800185a:	e9cd ab00 	strd	sl, fp, [sp]
 800185e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001862:	4917      	ldr	r1, [pc, #92]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001864:	4817      	ldr	r0, [pc, #92]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001866:	f006 ff03 	bl	8008670 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)position, strlen(position),100);
 800186a:	4816      	ldr	r0, [pc, #88]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800186c:	f7fe fd08 	bl	8000280 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	2364      	movs	r3, #100	@ 0x64
 8001876:	4913      	ldr	r1, [pc, #76]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001878:	4813      	ldr	r0, [pc, #76]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800187a:	f003 ff4f 	bl	800571c <HAL_UART_Transmit>
        //if (position[0] == 'E' && position[1] == '=')
        //{
        //    HAL_UART_Transmit(&huart2, (uint8_t *)position, strlen(position), 100);
        //}
	}
}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001888:	2e48e8a7 	.word	0x2e48e8a7
 800188c:	400921ff 	.word	0x400921ff
 8001890:	47ae147b 	.word	0x47ae147b
 8001894:	3f947ae1 	.word	0x3f947ae1
 8001898:	20000344 	.word	0x20000344
 800189c:	43b40000 	.word	0x43b40000
 80018a0:	20000304 	.word	0x20000304
 80018a4:	20000300 	.word	0x20000300
 80018a8:	20000308 	.word	0x20000308
 80018ac:	2000030c 	.word	0x2000030c
 80018b0:	404e0000 	.word	0x404e0000
 80018b4:	20000348 	.word	0x20000348
 80018b8:	200002cc 	.word	0x200002cc
 80018bc:	200002d0 	.word	0x200002d0
 80018c0:	0800b7b0 	.word	0x0800b7b0
 80018c4:	20000310 	.word	0x20000310
 80018c8:	20000574 	.word	0x20000574
 80018cc:	00000000 	.word	0x00000000

080018d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001b48 <HAL_UART_RxCpltCallback+0x278>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d131      	bne.n	8001948 <HAL_UART_RxCpltCallback+0x78>
	{
        if (rx_data_1[0] == '\n')
 80018e4:	4b99      	ldr	r3, [pc, #612]	@ (8001b4c <HAL_UART_RxCpltCallback+0x27c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b0a      	cmp	r3, #10
 80018ea:	d11d      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x58>
        {
            rx_buffer[rx_index] = '\n';
 80018ec:	4b98      	ldr	r3, [pc, #608]	@ (8001b50 <HAL_UART_RxCpltCallback+0x280>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b98      	ldr	r3, [pc, #608]	@ (8001b54 <HAL_UART_RxCpltCallback+0x284>)
 80018f4:	210a      	movs	r1, #10
 80018f6:	5499      	strb	r1, [r3, r2]
            //command_1 = rx_buffer[0];
            HAL_UART_Transmit(&huart6, (uint8_t *)rx_buffer, strlen(rx_buffer), 100);
 80018f8:	4896      	ldr	r0, [pc, #600]	@ (8001b54 <HAL_UART_RxCpltCallback+0x284>)
 80018fa:	f7fe fcc1 	bl	8000280 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	2364      	movs	r3, #100	@ 0x64
 8001904:	4993      	ldr	r1, [pc, #588]	@ (8001b54 <HAL_UART_RxCpltCallback+0x284>)
 8001906:	4894      	ldr	r0, [pc, #592]	@ (8001b58 <HAL_UART_RxCpltCallback+0x288>)
 8001908:	f003 ff08 	bl	800571c <HAL_UART_Transmit>
            //HAL_UART_Transmit_DMA(&huart6, (uint8_t *)rx_buffer, strlen(rx_buffer));
	        memset(rx_buffer, 0, 100);
 800190c:	2264      	movs	r2, #100	@ 0x64
 800190e:	2100      	movs	r1, #0
 8001910:	4890      	ldr	r0, [pc, #576]	@ (8001b54 <HAL_UART_RxCpltCallback+0x284>)
 8001912:	f006 ffa5 	bl	8008860 <memset>
            rx_index = 0;
 8001916:	4b8e      	ldr	r3, [pc, #568]	@ (8001b50 <HAL_UART_RxCpltCallback+0x280>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	498b      	ldr	r1, [pc, #556]	@ (8001b4c <HAL_UART_RxCpltCallback+0x27c>)
 8001920:	4889      	ldr	r0, [pc, #548]	@ (8001b48 <HAL_UART_RxCpltCallback+0x278>)
 8001922:	f003 ff86 	bl	8005832 <HAL_UART_Receive_IT>
 8001926:	e00f      	b.n	8001948 <HAL_UART_RxCpltCallback+0x78>
        }
        else
        {
            rx_buffer[rx_index++] = rx_data_1[0];
 8001928:	4b89      	ldr	r3, [pc, #548]	@ (8001b50 <HAL_UART_RxCpltCallback+0x280>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	b2d1      	uxtb	r1, r2
 8001930:	4a87      	ldr	r2, [pc, #540]	@ (8001b50 <HAL_UART_RxCpltCallback+0x280>)
 8001932:	7011      	strb	r1, [r2, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b85      	ldr	r3, [pc, #532]	@ (8001b4c <HAL_UART_RxCpltCallback+0x27c>)
 8001938:	7819      	ldrb	r1, [r3, #0]
 800193a:	4b86      	ldr	r3, [pc, #536]	@ (8001b54 <HAL_UART_RxCpltCallback+0x284>)
 800193c:	5499      	strb	r1, [r3, r2]
            HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 800193e:	2201      	movs	r2, #1
 8001940:	4982      	ldr	r1, [pc, #520]	@ (8001b4c <HAL_UART_RxCpltCallback+0x27c>)
 8001942:	4881      	ldr	r0, [pc, #516]	@ (8001b48 <HAL_UART_RxCpltCallback+0x278>)
 8001944:	f003 ff75 	bl	8005832 <HAL_UART_Receive_IT>
        }
	}

	if(huart->Instance == huart1.Instance)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b83      	ldr	r3, [pc, #524]	@ (8001b5c <HAL_UART_RxCpltCallback+0x28c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 80eb 	bne.w	8001b2c <HAL_UART_RxCpltCallback+0x25c>
	{
		if (gpsData[0] == '\n')
 8001956:	4b82      	ldr	r3, [pc, #520]	@ (8001b60 <HAL_UART_RxCpltCallback+0x290>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b0a      	cmp	r3, #10
 800195c:	f040 80d6 	bne.w	8001b0c <HAL_UART_RxCpltCallback+0x23c>
		{
			//gps_buffer[gps_index] = '\n';
			if (gps_buffer[0] == 'A')
 8001960:	4b80      	ldr	r3, [pc, #512]	@ (8001b64 <HAL_UART_RxCpltCallback+0x294>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b41      	cmp	r3, #65	@ 0x41
 8001966:	d159      	bne.n	8001a1c <HAL_UART_RxCpltCallback+0x14c>
			{
				token1 = strtok((char*) gps_buffer, "A");
 8001968:	497f      	ldr	r1, [pc, #508]	@ (8001b68 <HAL_UART_RxCpltCallback+0x298>)
 800196a:	487e      	ldr	r0, [pc, #504]	@ (8001b64 <HAL_UART_RxCpltCallback+0x294>)
 800196c:	f006 ff92 	bl	8008894 <strtok>
 8001970:	4603      	mov	r3, r0
 8001972:	4a7e      	ldr	r2, [pc, #504]	@ (8001b6c <HAL_UART_RxCpltCallback+0x29c>)
 8001974:	6013      	str	r3, [r2, #0]
				d1_pre = atof(token1);
 8001976:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <HAL_UART_RxCpltCallback+0x29c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f005 f8c3 	bl	8006b06 <atof>
 8001980:	ec53 2b10 	vmov	r2, r3, d0
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f936 	bl	8000bf8 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	4a78      	ldr	r2, [pc, #480]	@ (8001b70 <HAL_UART_RxCpltCallback+0x2a0>)
 8001990:	6013      	str	r3, [r2, #0]
				if (d1_flag == 0)
 8001992:	4b78      	ldr	r3, [pc, #480]	@ (8001b74 <HAL_UART_RxCpltCallback+0x2a4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d110      	bne.n	80019bc <HAL_UART_RxCpltCallback+0xec>
				{
					d1 = atof(token1);
 800199a:	4b74      	ldr	r3, [pc, #464]	@ (8001b6c <HAL_UART_RxCpltCallback+0x29c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 f8b1 	bl	8006b06 <atof>
 80019a4:	ec53 2b10 	vmov	r2, r3, d0
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f924 	bl	8000bf8 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a71      	ldr	r2, [pc, #452]	@ (8001b78 <HAL_UART_RxCpltCallback+0x2a8>)
 80019b4:	6013      	str	r3, [r2, #0]
					d1_flag = 1;
 80019b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b74 <HAL_UART_RxCpltCallback+0x2a4>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
				}
				if (fabs(d1-d1_pre)<2 && d1_pre != 0)
 80019bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001b78 <HAL_UART_RxCpltCallback+0x2a8>)
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b70 <HAL_UART_RxCpltCallback+0x2a0>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019cc:	eef0 7ae7 	vabs.f32	s15, s15
 80019d0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80019d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	d51e      	bpl.n	8001a1c <HAL_UART_RxCpltCallback+0x14c>
 80019de:	4b64      	ldr	r3, [pc, #400]	@ (8001b70 <HAL_UART_RxCpltCallback+0x2a0>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d016      	beq.n	8001a1c <HAL_UART_RxCpltCallback+0x14c>
				{
					d1 = d1_pre;
 80019ee:	4b60      	ldr	r3, [pc, #384]	@ (8001b70 <HAL_UART_RxCpltCallback+0x2a0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a61      	ldr	r2, [pc, #388]	@ (8001b78 <HAL_UART_RxCpltCallback+0x2a8>)
 80019f4:	6013      	str	r3, [r2, #0]
					d1_calib = d1 - 0.496;
 80019f6:	4b60      	ldr	r3, [pc, #384]	@ (8001b78 <HAL_UART_RxCpltCallback+0x2a8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	a34d      	add	r3, pc, #308	@ (adr r3, 8001b38 <HAL_UART_RxCpltCallback+0x268>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fc47 	bl	8000298 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8f1 	bl	8000bf8 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <HAL_UART_RxCpltCallback+0x2ac>)
 8001a1a:	6013      	str	r3, [r2, #0]
					//d1_pre = 0;
				}
			}

			if (gps_buffer[0] == 'B')
 8001a1c:	4b51      	ldr	r3, [pc, #324]	@ (8001b64 <HAL_UART_RxCpltCallback+0x294>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b42      	cmp	r3, #66	@ 0x42
 8001a22:	d159      	bne.n	8001ad8 <HAL_UART_RxCpltCallback+0x208>
			{
				token2 = strtok((char*) gps_buffer, "B");
 8001a24:	4956      	ldr	r1, [pc, #344]	@ (8001b80 <HAL_UART_RxCpltCallback+0x2b0>)
 8001a26:	484f      	ldr	r0, [pc, #316]	@ (8001b64 <HAL_UART_RxCpltCallback+0x294>)
 8001a28:	f006 ff34 	bl	8008894 <strtok>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a55      	ldr	r2, [pc, #340]	@ (8001b84 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a30:	6013      	str	r3, [r2, #0]
				d2_pre = atof(token2);
 8001a32:	4b54      	ldr	r3, [pc, #336]	@ (8001b84 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f005 f865 	bl	8006b06 <atof>
 8001a3c:	ec53 2b10 	vmov	r2, r3, d0
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f8d8 	bl	8000bf8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a4f      	ldr	r2, [pc, #316]	@ (8001b88 <HAL_UART_RxCpltCallback+0x2b8>)
 8001a4c:	6013      	str	r3, [r2, #0]
				if (d2_flag == 0)
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b8c <HAL_UART_RxCpltCallback+0x2bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d110      	bne.n	8001a78 <HAL_UART_RxCpltCallback+0x1a8>
				{
					d2 = atof(token2);
 8001a56:	4b4b      	ldr	r3, [pc, #300]	@ (8001b84 <HAL_UART_RxCpltCallback+0x2b4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 f853 	bl	8006b06 <atof>
 8001a60:	ec53 2b10 	vmov	r2, r3, d0
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f8c6 	bl	8000bf8 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a70:	6013      	str	r3, [r2, #0]
					d2_flag = 1;
 8001a72:	4b46      	ldr	r3, [pc, #280]	@ (8001b8c <HAL_UART_RxCpltCallback+0x2bc>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
				}
				if (fabs(d2-d2_pre) < 10 && d2_pre != 0)
 8001a78:	4b45      	ldr	r3, [pc, #276]	@ (8001b90 <HAL_UART_RxCpltCallback+0x2c0>)
 8001a7a:	ed93 7a00 	vldr	s14, [r3]
 8001a7e:	4b42      	ldr	r3, [pc, #264]	@ (8001b88 <HAL_UART_RxCpltCallback+0x2b8>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	eef0 7ae7 	vabs.f32	s15, s15
 8001a8c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a98:	d51e      	bpl.n	8001ad8 <HAL_UART_RxCpltCallback+0x208>
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_UART_RxCpltCallback+0x2b8>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d016      	beq.n	8001ad8 <HAL_UART_RxCpltCallback+0x208>
				{
					d2 = d2_pre;
 8001aaa:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <HAL_UART_RxCpltCallback+0x2b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <HAL_UART_RxCpltCallback+0x2c0>)
 8001ab0:	6013      	str	r3, [r2, #0]
					d2_calib = d2 - 0.776;
 8001ab2:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <HAL_UART_RxCpltCallback+0x2c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd4e 	bl	8000558 <__aeabi_f2d>
 8001abc:	a320      	add	r3, pc, #128	@ (adr r3, 8001b40 <HAL_UART_RxCpltCallback+0x270>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fbe9 	bl	8000298 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f893 	bl	8000bf8 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b94 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ad6:	6013      	str	r3, [r2, #0]
					//d2_pre = 0;
				}
			}

			pos_xy(d1_calib, d2_calib);
 8001ad8:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <HAL_UART_RxCpltCallback+0x2ac>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <HAL_UART_RxCpltCallback+0x2c4>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	eef0 0a47 	vmov.f32	s1, s14
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	f7ff fbac 	bl	8001248 <pos_xy>
			memset(gps_buffer, 0, 50);
 8001af0:	2232      	movs	r2, #50	@ 0x32
 8001af2:	2100      	movs	r1, #0
 8001af4:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <HAL_UART_RxCpltCallback+0x294>)
 8001af6:	f006 feb3 	bl	8008860 <memset>
			gps_index = 0;
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <HAL_UART_RxCpltCallback+0x2c8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, gpsData, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	4917      	ldr	r1, [pc, #92]	@ (8001b60 <HAL_UART_RxCpltCallback+0x290>)
 8001b04:	4815      	ldr	r0, [pc, #84]	@ (8001b5c <HAL_UART_RxCpltCallback+0x28c>)
 8001b06:	f003 fe94 	bl	8005832 <HAL_UART_Receive_IT>
		{
			gps_buffer[gps_index++] = gpsData[0];
			HAL_UART_Receive_IT(&huart1, gpsData, 1);
		}
	}
}
 8001b0a:	e00f      	b.n	8001b2c <HAL_UART_RxCpltCallback+0x25c>
			gps_buffer[gps_index++] = gpsData[0];
 8001b0c:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <HAL_UART_RxCpltCallback+0x2c8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	b2d1      	uxtb	r1, r2
 8001b14:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_UART_RxCpltCallback+0x2c8>)
 8001b16:	7011      	strb	r1, [r2, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <HAL_UART_RxCpltCallback+0x290>)
 8001b1c:	7819      	ldrb	r1, [r3, #0]
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_UART_RxCpltCallback+0x294>)
 8001b20:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, gpsData, 1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <HAL_UART_RxCpltCallback+0x290>)
 8001b26:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <HAL_UART_RxCpltCallback+0x28c>)
 8001b28:	f003 fe83 	bl	8005832 <HAL_UART_Receive_IT>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	f3af 8000 	nop.w
 8001b38:	c8b43958 	.word	0xc8b43958
 8001b3c:	3fdfbe76 	.word	0x3fdfbe76
 8001b40:	f3b645a2 	.word	0xf3b645a2
 8001b44:	3fe8d4fd 	.word	0x3fe8d4fd
 8001b48:	20000574 	.word	0x20000574
 8001b4c:	20000278 	.word	0x20000278
 8001b50:	20000274 	.word	0x20000274
 8001b54:	20000210 	.word	0x20000210
 8001b58:	200005bc 	.word	0x200005bc
 8001b5c:	2000052c 	.word	0x2000052c
 8001b60:	2000027c 	.word	0x2000027c
 8001b64:	20000280 	.word	0x20000280
 8001b68:	0800b7dc 	.word	0x0800b7dc
 8001b6c:	200002e8 	.word	0x200002e8
 8001b70:	200002b4 	.word	0x200002b4
 8001b74:	200002c4 	.word	0x200002c4
 8001b78:	200002bc 	.word	0x200002bc
 8001b7c:	200002d4 	.word	0x200002d4
 8001b80:	0800b7e0 	.word	0x0800b7e0
 8001b84:	200002ec 	.word	0x200002ec
 8001b88:	200002b8 	.word	0x200002b8
 8001b8c:	200002c8 	.word	0x200002c8
 8001b90:	200002c0 	.word	0x200002c0
 8001b94:	200002d8 	.word	0x200002d8
 8001b98:	2000027d 	.word	0x2000027d

08001b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba0:	f000 ff94 	bl	8002acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba4:	f000 f878 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba8:	f000 fb18 	bl	80021dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001bac:	f000 f90a 	bl	8001dc4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001bb0:	f000 fac0 	bl	8002134 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001bb4:	f000 f95e 	bl	8001e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bb8:	f000 f9b0 	bl	8001f1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bbc:	f000 fa02 	bl	8001fc4 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001bc0:	f000 fae2 	bl	8002188 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8001bc4:	f000 fa8c 	bl	80020e0 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8001bc8:	f000 f8ce 	bl	8001d68 <MX_I2C3_Init>
  MX_TIM9_Init();
 8001bcc:	f000 fa4e 	bl	800206c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bd6:	4825      	ldr	r0, [pc, #148]	@ (8001c6c <main+0xd0>)
 8001bd8:	f001 fb36 	bl	8003248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001be2:	4822      	ldr	r0, [pc, #136]	@ (8001c6c <main+0xd0>)
 8001be4:	f001 fb30 	bl	8003248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bee:	481f      	ldr	r0, [pc, #124]	@ (8001c6c <main+0xd0>)
 8001bf0:	f001 fb2a 	bl	8003248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bfa:	481c      	ldr	r0, [pc, #112]	@ (8001c6c <main+0xd0>)
 8001bfc:	f001 fb24 	bl	8003248 <HAL_GPIO_WritePin>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001c00:	2100      	movs	r1, #0
 8001c02:	481b      	ldr	r0, [pc, #108]	@ (8001c70 <main+0xd4>)
 8001c04:	f003 f8fe 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8001c08:	2104      	movs	r1, #4
 8001c0a:	4819      	ldr	r0, [pc, #100]	@ (8001c70 <main+0xd4>)
 8001c0c:	f003 f8fa 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8001c10:	2100      	movs	r1, #0
 8001c12:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <main+0xd8>)
 8001c14:	f003 f8f6 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001c18:	2104      	movs	r1, #4
 8001c1a:	4816      	ldr	r0, [pc, #88]	@ (8001c74 <main+0xd8>)
 8001c1c:	f003 f8f2 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8001c20:	2100      	movs	r1, #0
 8001c22:	4815      	ldr	r0, [pc, #84]	@ (8001c78 <main+0xdc>)
 8001c24:	f003 f8ee 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4813      	ldr	r0, [pc, #76]	@ (8001c78 <main+0xdc>)
 8001c2c:	f003 f8ea 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001c30:	2100      	movs	r1, #0
 8001c32:	4812      	ldr	r0, [pc, #72]	@ (8001c7c <main+0xe0>)
 8001c34:	f003 f8e6 	bl	8004e04 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4810      	ldr	r0, [pc, #64]	@ (8001c7c <main+0xe0>)
 8001c3c:	f003 f8e2 	bl	8004e04 <HAL_TIM_Encoder_Start>

  HAL_UART_Receive_IT(&huart1, gpsData, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	490f      	ldr	r1, [pc, #60]	@ (8001c80 <main+0xe4>)
 8001c44:	480f      	ldr	r0, [pc, #60]	@ (8001c84 <main+0xe8>)
 8001c46:	f003 fdf4 	bl	8005832 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rx_data_1, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	490e      	ldr	r1, [pc, #56]	@ (8001c88 <main+0xec>)
 8001c4e:	480f      	ldr	r0, [pc, #60]	@ (8001c8c <main+0xf0>)
 8001c50:	f003 fdef 	bl	8005832 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim9);
 8001c54:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <main+0xf4>)
 8001c56:	f002 ffcd 	bl	8004bf4 <HAL_TIM_Base_Start_IT>

  bno055_assignI2C(&hi2c3);
 8001c5a:	480e      	ldr	r0, [pc, #56]	@ (8001c94 <main+0xf8>)
 8001c5c:	f7ff f9ca 	bl	8000ff4 <bno055_assignI2C>
  bno055_setup();
 8001c60:	f004 fda2 	bl	80067a8 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001c64:	f004 fd8d 	bl	8006782 <bno055_setOperationModeNDOF>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <main+0xcc>
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	200003c4 	.word	0x200003c4
 8001c74:	2000040c 	.word	0x2000040c
 8001c78:	20000454 	.word	0x20000454
 8001c7c:	2000049c 	.word	0x2000049c
 8001c80:	2000027c 	.word	0x2000027c
 8001c84:	2000052c 	.word	0x2000052c
 8001c88:	20000278 	.word	0x20000278
 8001c8c:	20000574 	.word	0x20000574
 8001c90:	200004e4 	.word	0x200004e4
 8001c94:	20000370 	.word	0x20000370

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	@ 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	@ 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 fdda 	bl	8008860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <SystemClock_Config+0xc8>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	4a26      	ldr	r2, [pc, #152]	@ (8001d60 <SystemClock_Config+0xc8>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <SystemClock_Config+0xc8>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <SystemClock_Config+0xcc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <SystemClock_Config+0xcc>)
 8001ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <SystemClock_Config+0xcc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d00:	2302      	movs	r3, #2
 8001d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d0c:	2360      	movs	r3, #96	@ 0x60
 8001d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d14:	2304      	movs	r3, #4
 8001d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fac1 	bl	80042a4 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d28:	f000 faea 	bl	8002300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2103      	movs	r1, #3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 fd23 	bl	8004794 <HAL_RCC_ClockConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d54:	f000 fad4 	bl	8002300 <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3750      	adds	r7, #80	@ 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <MX_I2C3_Init+0x54>)
 8001d70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <MX_I2C3_Init+0x58>)
 8001d76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <MX_I2C3_Init+0x50>)
 8001da6:	f001 fa69 	bl	800327c <HAL_I2C_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001db0:	f000 faa6 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000370 	.word	0x20000370
 8001dbc:	40005c00 	.word	0x40005c00
 8001dc0:	000186a0 	.word	0x000186a0

08001dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f006 fd44 	bl	8008860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001de2:	4a23      	ldr	r2, [pc, #140]	@ (8001e70 <MX_TIM1_Init+0xac>)
 8001de4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001df8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e14:	2301      	movs	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e24:	2301      	movs	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001e38:	f002 ff3e 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e42:	f000 fa5d 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4806      	ldr	r0, [pc, #24]	@ (8001e6c <MX_TIM1_Init+0xa8>)
 8001e54:	f003 fb90 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e5e:	f000 fa4f 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	3730      	adds	r7, #48	@ 0x30
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200003c4 	.word	0x200003c4
 8001e70:	40010000 	.word	0x40010000

08001e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	@ 0x30
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2224      	movs	r2, #36	@ 0x24
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 fcec 	bl	8008860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001ee4:	f002 fee8 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eee:	f000 fa07 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <MX_TIM2_Init+0xa4>)
 8001f00:	f003 fb3a 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f0a:	f000 f9f9 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3730      	adds	r7, #48	@ 0x30
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000040c 	.word	0x2000040c

08001f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2224      	movs	r2, #36	@ 0x24
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f006 fc98 	bl	8008860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f3a:	4a21      	ldr	r2, [pc, #132]	@ (8001fc0 <MX_TIM3_Init+0xa4>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f66:	2301      	movs	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f76:	2301      	movs	r3, #1
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001f8a:	f002 fe95 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f94:	f000 f9b4 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <MX_TIM3_Init+0xa0>)
 8001fa6:	f003 fae7 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fb0:	f000 f9a6 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	@ 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000454 	.word	0x20000454
 8001fc0:	40000400 	.word	0x40000400

08001fc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2224      	movs	r2, #36	@ 0x24
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f006 fc44 	bl	8008860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8001fe2:	4a21      	ldr	r2, [pc, #132]	@ (8002068 <MX_TIM4_Init+0xa4>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8001ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002006:	2303      	movs	r3, #3
 8002008:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800200e:	2301      	movs	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4619      	mov	r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <MX_TIM4_Init+0xa0>)
 8002032:	f002 fe41 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800203c:	f000 f960 	bl	8002300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_TIM4_Init+0xa0>)
 800204e:	f003 fa93 	bl	8005578 <HAL_TIMEx_MasterConfigSynchronization>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002058:	f000 f952 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000049c 	.word	0x2000049c
 8002068:	40000800 	.word	0x40000800

0800206c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800207e:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 8002080:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <MX_TIM9_Init+0x70>)
 8002082:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 959;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 8002086:	f240 32bf 	movw	r2, #959	@ 0x3bf
 800208a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 8002094:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002098:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80020a6:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 80020a8:	f002 fd54 	bl	8004b54 <HAL_TIM_Base_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80020b2:	f000 f925 	bl	8002300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_TIM9_Init+0x6c>)
 80020c2:	f003 f81d 	bl	8005100 <HAL_TIM_ConfigClockSource>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80020cc:	f000 f918 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200004e4 	.word	0x200004e4
 80020dc:	40014000 	.word	0x40014000

080020e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <MX_USART1_UART_Init+0x50>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <MX_USART1_UART_Init+0x4c>)
 8002118:	f003 fab0 	bl	800567c <HAL_UART_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002122:	f000 f8ed 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000052c 	.word	0x2000052c
 8002130:	40011000 	.word	0x40011000

08002134 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <MX_USART2_UART_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	@ (8002180 <MX_USART2_UART_Init+0x4c>)
 800216c:	f003 fa86 	bl	800567c <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002176:	f000 f8c3 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000574 	.word	0x20000574
 8002184:	40004400 	.word	0x40004400

08002188 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <MX_USART6_UART_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <MX_USART6_UART_Init+0x4c>)
 80021c0:	f003 fa5c 	bl	800567c <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021ca:	f000 f899 	bl	8002300 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200005bc 	.word	0x200005bc
 80021d8:	40011400 	.word	0x40011400

080021dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	@ 0x30
 80021e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <MX_GPIO_Init+0x118>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	4a3e      	ldr	r2, [pc, #248]	@ (80022f4 <MX_GPIO_Init+0x118>)
 80021fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002200:	6313      	str	r3, [r2, #48]	@ 0x30
 8002202:	4b3c      	ldr	r3, [pc, #240]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	4b38      	ldr	r3, [pc, #224]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	4a37      	ldr	r2, [pc, #220]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	@ 0x30
 800221e:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002234:	f043 0310 	orr.w	r3, r3, #16
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <MX_GPIO_Init+0x118>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <MX_GPIO_Init+0x118>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <MX_GPIO_Init+0x118>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <MX_GPIO_Init+0x118>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2110      	movs	r1, #16
 800229e:	4816      	ldr	r0, [pc, #88]	@ (80022f8 <MX_GPIO_Init+0x11c>)
 80022a0:	f000 ffd2 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80022aa:	4814      	ldr	r0, [pc, #80]	@ (80022fc <MX_GPIO_Init+0x120>)
 80022ac:	f000 ffcc 	bl	8003248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022b0:	2310      	movs	r3, #16
 80022b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	4619      	mov	r1, r3
 80022c6:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <MX_GPIO_Init+0x11c>)
 80022c8:	f000 fe3a 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022cc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	@ (80022fc <MX_GPIO_Init+0x120>)
 80022e6:	f000 fe2b 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ea:	bf00      	nop
 80022ec:	3730      	adds	r7, #48	@ 0x30
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020c00 	.word	0x40020c00

08002300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <Error_Handler+0x8>

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <HAL_MspInit+0x4c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	4a0f      	ldr	r2, [pc, #60]	@ (8002358 <HAL_MspInit+0x4c>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002320:	6453      	str	r3, [r2, #68]	@ 0x44
 8002322:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_MspInit+0x4c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_MspInit+0x4c>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <HAL_MspInit+0x4c>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	@ 0x40
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_MspInit+0x4c>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a29      	ldr	r2, [pc, #164]	@ (8002420 <HAL_I2C_MspInit+0xc4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d14b      	bne.n	8002416 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a27      	ldr	r2, [pc, #156]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a20      	ldr	r2, [pc, #128]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023bc:	2312      	movs	r3, #18
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023c8:	2304      	movs	r3, #4
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4815      	ldr	r0, [pc, #84]	@ (8002428 <HAL_I2C_MspInit+0xcc>)
 80023d4:	f000 fdb4 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023de:	2312      	movs	r3, #18
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023ea:	2304      	movs	r3, #4
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	480d      	ldr	r0, [pc, #52]	@ (800242c <HAL_I2C_MspInit+0xd0>)
 80023f6:	f000 fda3 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 8002404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_I2C_MspInit+0xc8>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3728      	adds	r7, #40	@ 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40005c00 	.word	0x40005c00
 8002424:	40023800 	.word	0x40023800
 8002428:	40020800 	.word	0x40020800
 800242c:	40020000 	.word	0x40020000

08002430 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b090      	sub	sp, #64	@ 0x40
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a68      	ldr	r2, [pc, #416]	@ (80025f0 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d135      	bne.n	80024be <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002456:	4b67      	ldr	r3, [pc, #412]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	4a66      	ldr	r2, [pc, #408]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6453      	str	r3, [r2, #68]	@ 0x44
 8002462:	4b64      	ldr	r3, [pc, #400]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
 8002472:	4b60      	ldr	r3, [pc, #384]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a5f      	ldr	r2, [pc, #380]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002478:	f043 0310 	orr.w	r3, r3, #16
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800248a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800249c:	2301      	movs	r3, #1
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4854      	ldr	r0, [pc, #336]	@ (80025f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80024a8:	f000 fd4a 	bl	8002f40 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	2018      	movs	r0, #24
 80024b2:	f000 fc7c 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024b6:	2018      	movs	r0, #24
 80024b8:	f000 fc95 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024bc:	e094      	b.n	80025e8 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c6:	d12c      	bne.n	8002522 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	4a48      	ldr	r2, [pc, #288]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d8:	4b46      	ldr	r3, [pc, #280]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	4b42      	ldr	r3, [pc, #264]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	4a41      	ldr	r2, [pc, #260]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f4:	4b3f      	ldr	r3, [pc, #252]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002500:	2322      	movs	r3, #34	@ 0x22
 8002502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002510:	2301      	movs	r3, #1
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	4838      	ldr	r0, [pc, #224]	@ (80025fc <HAL_TIM_Encoder_MspInit+0x1cc>)
 800251c:	f000 fd10 	bl	8002f40 <HAL_GPIO_Init>
}
 8002520:	e062      	b.n	80025e8 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM3)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a36      	ldr	r2, [pc, #216]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d12c      	bne.n	8002586 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4a2f      	ldr	r2, [pc, #188]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	6413      	str	r3, [r2, #64]	@ 0x40
 800253c:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	4a28      	ldr	r2, [pc, #160]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	6313      	str	r3, [r2, #48]	@ 0x30
 8002558:	4b26      	ldr	r3, [pc, #152]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002564:	2330      	movs	r3, #48	@ 0x30
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002574:	2302      	movs	r3, #2
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	4821      	ldr	r0, [pc, #132]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002580:	f000 fcde 	bl	8002f40 <HAL_GPIO_Init>
}
 8002584:	e030      	b.n	80025e8 <HAL_TIM_Encoder_MspInit+0x1b8>
  else if(htim_encoder->Instance==TIM4)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	@ (8002608 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d12b      	bne.n	80025e8 <HAL_TIM_Encoder_MspInit+0x1b8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	4a16      	ldr	r2, [pc, #88]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	4a0f      	ldr	r2, [pc, #60]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80025bc:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c8:	23c0      	movs	r3, #192	@ 0xc0
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025d8:	2302      	movs	r3, #2
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4808      	ldr	r0, [pc, #32]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025e4:	f000 fcac 	bl	8002f40 <HAL_GPIO_Init>
}
 80025e8:	bf00      	nop
 80025ea:	3740      	adds	r7, #64	@ 0x40
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40010000 	.word	0x40010000
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40020000 	.word	0x40020000
 8002600:	40000400 	.word	0x40000400
 8002604:	40020400 	.word	0x40020400
 8002608:	40000800 	.word	0x40000800

0800260c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0e      	ldr	r2, [pc, #56]	@ (8002654 <HAL_TIM_Base_MspInit+0x48>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d115      	bne.n	800264a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <HAL_TIM_Base_MspInit+0x4c>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a0c      	ldr	r2, [pc, #48]	@ (8002658 <HAL_TIM_Base_MspInit+0x4c>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_TIM_Base_MspInit+0x4c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2102      	movs	r1, #2
 800263e:	2018      	movs	r0, #24
 8002640:	f000 fbb5 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002644:	2018      	movs	r0, #24
 8002646:	f000 fbce 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40014000 	.word	0x40014000
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08e      	sub	sp, #56	@ 0x38
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	@ (8002804 <HAL_UART_MspInit+0x1a8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d153      	bne.n	8002726 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a60      	ldr	r2, [pc, #384]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002688:	f043 0310 	orr.w	r3, r3, #16
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	4b5a      	ldr	r3, [pc, #360]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a59      	ldr	r2, [pc, #356]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b57      	ldr	r3, [pc, #348]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a52      	ldr	r2, [pc, #328]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b50      	ldr	r3, [pc, #320]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e0:	2303      	movs	r3, #3
 80026e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e4:	2307      	movs	r3, #7
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ec:	4619      	mov	r1, r3
 80026ee:	4847      	ldr	r0, [pc, #284]	@ (800280c <HAL_UART_MspInit+0x1b0>)
 80026f0:	f000 fc26 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026f4:	2308      	movs	r3, #8
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002704:	2307      	movs	r3, #7
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	4840      	ldr	r0, [pc, #256]	@ (8002810 <HAL_UART_MspInit+0x1b4>)
 8002710:	f000 fc16 	bl	8002f40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002714:	2200      	movs	r2, #0
 8002716:	2100      	movs	r1, #0
 8002718:	2025      	movs	r0, #37	@ 0x25
 800271a:	f000 fb48 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800271e:	2025      	movs	r0, #37	@ 0x25
 8002720:	f000 fb61 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002724:	e06a      	b.n	80027fc <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a3a      	ldr	r2, [pc, #232]	@ (8002814 <HAL_UART_MspInit+0x1b8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d134      	bne.n	800279a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	4b34      	ldr	r3, [pc, #208]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	4a33      	ldr	r2, [pc, #204]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002740:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	4a2c      	ldr	r2, [pc, #176]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	6313      	str	r3, [r2, #48]	@ 0x30
 800275c:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002768:	2360      	movs	r3, #96	@ 0x60
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002778:	2307      	movs	r3, #7
 800277a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	4619      	mov	r1, r3
 8002782:	4825      	ldr	r0, [pc, #148]	@ (8002818 <HAL_UART_MspInit+0x1bc>)
 8002784:	f000 fbdc 	bl	8002f40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2101      	movs	r1, #1
 800278c:	2026      	movs	r0, #38	@ 0x26
 800278e:	f000 fb0e 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002792:	2026      	movs	r0, #38	@ 0x26
 8002794:	f000 fb27 	bl	8002de6 <HAL_NVIC_EnableIRQ>
}
 8002798:	e030      	b.n	80027fc <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART6)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <HAL_UART_MspInit+0x1c0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d12b      	bne.n	80027fc <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80027aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ac:	4a16      	ldr	r2, [pc, #88]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_UART_MspInit+0x1ac>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027dc:	23c0      	movs	r3, #192	@ 0xc0
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027ec:	2308      	movs	r3, #8
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	480a      	ldr	r0, [pc, #40]	@ (8002820 <HAL_UART_MspInit+0x1c4>)
 80027f8:	f000 fba2 	bl	8002f40 <HAL_GPIO_Init>
}
 80027fc:	bf00      	nop
 80027fe:	3738      	adds	r7, #56	@ 0x38
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40011000 	.word	0x40011000
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40004400 	.word	0x40004400
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40011400 	.word	0x40011400
 8002820:	40020800 	.word	0x40020800

08002824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <NMI_Handler+0x4>

0800282c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <HardFault_Handler+0x4>

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <MemManage_Handler+0x4>

0800283c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <BusFault_Handler+0x4>

08002844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <UsageFault_Handler+0x4>

0800284c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800287a:	f000 f979 	bl	8002b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800288a:	f002 fb49 	bl	8004f20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800288e:	4803      	ldr	r0, [pc, #12]	@ (800289c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002890:	f002 fb46 	bl	8004f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200003c4 	.word	0x200003c4
 800289c:	200004e4 	.word	0x200004e4

080028a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <USART1_IRQHandler+0x10>)
 80028a6:	f002 ffe9 	bl	800587c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000052c 	.word	0x2000052c

080028b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028b8:	4802      	ldr	r0, [pc, #8]	@ (80028c4 <USART2_IRQHandler+0x10>)
 80028ba:	f002 ffdf 	bl	800587c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000574 	.word	0x20000574

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:

int _kill(int pid, int sig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028e2:	f006 f87d 	bl	80089e0 <__errno>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2216      	movs	r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
  return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:

void _exit (int status)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <_exit+0x12>

0800290e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e00a      	b.n	8002936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002920:	f3af 8000 	nop.w
 8002924:	4601      	mov	r1, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	60ba      	str	r2, [r7, #8]
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3301      	adds	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	dbf0      	blt.n	8002920 <_read+0x12>
  }

  return len;
 800293e:	687b      	ldr	r3, [r7, #4]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e009      	b.n	800296e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	60ba      	str	r2, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	dbf1      	blt.n	800295a <_write+0x12>
  }
  return len;
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <_close>:

int _close(int file)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a8:	605a      	str	r2, [r3, #4]
  return 0;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_isatty>:

int _isatty(int file)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029c0:	2301      	movs	r3, #1
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f005 ffe2 	bl	80089e0 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20020000 	.word	0x20020000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	20000604 	.word	0x20000604
 8002a50:	20000758 	.word	0x20000758

08002a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <SystemInit+0x20>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5e:	4a05      	ldr	r2, [pc, #20]	@ (8002a74 <SystemInit+0x20>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ab0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a7c:	f7ff ffea 	bl	8002a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a80:	480c      	ldr	r0, [pc, #48]	@ (8002ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a82:	490d      	ldr	r1, [pc, #52]	@ (8002ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a84:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a88:	e002      	b.n	8002a90 <LoopCopyDataInit>

08002a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8e:	3304      	adds	r3, #4

08002a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a94:	d3f9      	bcc.n	8002a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a98:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a9c:	e001      	b.n	8002aa2 <LoopFillZerobss>

08002a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa0:	3204      	adds	r2, #4

08002aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa4:	d3fb      	bcc.n	8002a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa6:	f005 ffa1 	bl	80089ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aaa:	f7ff f877 	bl	8001b9c <main>
  bx  lr    
 8002aae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002abc:	0800bcd4 	.word	0x0800bcd4
  ldr r2, =_sbss
 8002ac0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002ac4:	20000758 	.word	0x20000758

08002ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac8:	e7fe      	b.n	8002ac8 <ADC_IRQHandler>
	...

08002acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <HAL_Init+0x40>)
 8002ad6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <HAL_Init+0x40>)
 8002ae2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a07      	ldr	r2, [pc, #28]	@ (8002b0c <HAL_Init+0x40>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f000 f94f 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f000 f808 	bl	8002b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b00:	f7ff fc04 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00

08002b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_InitTick+0x54>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_InitTick+0x58>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f967 	bl	8002e02 <HAL_SYSTICK_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00e      	b.n	8002b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d80a      	bhi.n	8002b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b44:	2200      	movs	r2, #0
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f000 f92f 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b50:	4a06      	ldr	r2, [pc, #24]	@ (8002b6c <HAL_InitTick+0x5c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000000 	.word	0x20000000
 8002b68:	20000008 	.word	0x20000008
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	@ (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000008 	.word	0x20000008
 8002b94:	20000608 	.word	0x20000608

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	@ (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000608 	.word	0x20000608

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000008 	.word	0x20000008

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	@ (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	@ (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	@ 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	@ 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff29 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff3e 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff31 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e28:	f7ff feb6 	bl	8002b98 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d008      	beq.n	8002e4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2280      	movs	r2, #128	@ 0x80
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e052      	b.n	8002ef2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0216 	bic.w	r2, r2, #22
 8002e5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d103      	bne.n	8002e7c <HAL_DMA_Abort+0x62>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0208 	bic.w	r2, r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9c:	e013      	b.n	8002ec6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9e:	f7ff fe7b 	bl	8002b98 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d90c      	bls.n	8002ec6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e015      	b.n	8002ef2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e4      	bne.n	8002e9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed8:	223f      	movs	r2, #63	@ 0x3f
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d004      	beq.n	8002f18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2280      	movs	r2, #128	@ 0x80
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00c      	b.n	8002f32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e159      	b.n	8003210 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 8148 	bne.w	800320a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d005      	beq.n	8002f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d130      	bne.n	8002ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 0201 	and.w	r2, r3, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d017      	beq.n	8003030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d123      	bne.n	8003084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a2 	beq.w	800320a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b57      	ldr	r3, [pc, #348]	@ (8003228 <HAL_GPIO_Init+0x2e8>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	4a56      	ldr	r2, [pc, #344]	@ (8003228 <HAL_GPIO_Init+0x2e8>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d6:	4b54      	ldr	r3, [pc, #336]	@ (8003228 <HAL_GPIO_Init+0x2e8>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e2:	4a52      	ldr	r2, [pc, #328]	@ (800322c <HAL_GPIO_Init+0x2ec>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a49      	ldr	r2, [pc, #292]	@ (8003230 <HAL_GPIO_Init+0x2f0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0x202>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a48      	ldr	r2, [pc, #288]	@ (8003234 <HAL_GPIO_Init+0x2f4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_GPIO_Init+0x1fe>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a47      	ldr	r2, [pc, #284]	@ (8003238 <HAL_GPIO_Init+0x2f8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00d      	beq.n	800313a <HAL_GPIO_Init+0x1fa>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a46      	ldr	r2, [pc, #280]	@ (800323c <HAL_GPIO_Init+0x2fc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <HAL_GPIO_Init+0x1f6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a45      	ldr	r2, [pc, #276]	@ (8003240 <HAL_GPIO_Init+0x300>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_GPIO_Init+0x1f2>
 800312e:	2304      	movs	r3, #4
 8003130:	e008      	b.n	8003144 <HAL_GPIO_Init+0x204>
 8003132:	2307      	movs	r3, #7
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x204>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_Init+0x204>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_Init+0x204>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_Init+0x204>
 8003142:	2300      	movs	r3, #0
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003154:	4935      	ldr	r1, [pc, #212]	@ (800322c <HAL_GPIO_Init+0x2ec>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <HAL_GPIO_Init+0x304>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a2f      	ldr	r2, [pc, #188]	@ (8003244 <HAL_GPIO_Init+0x304>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_GPIO_Init+0x304>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a24      	ldr	r2, [pc, #144]	@ (8003244 <HAL_GPIO_Init+0x304>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b6:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <HAL_GPIO_Init+0x304>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031da:	4a1a      	ldr	r2, [pc, #104]	@ (8003244 <HAL_GPIO_Init+0x304>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e0:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_GPIO_Init+0x304>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003204:	4a0f      	ldr	r2, [pc, #60]	@ (8003244 <HAL_GPIO_Init+0x304>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	f67f aea2 	bls.w	8002f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40013800 	.word	0x40013800
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40013c00 	.word	0x40013c00

08003248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
 8003254:	4613      	mov	r3, r2
 8003256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003258:	787b      	ldrb	r3, [r7, #1]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003264:	e003      	b.n	800326e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	041a      	lsls	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	619a      	str	r2, [r3, #24]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e12b      	b.n	80034e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f85a 	bl	800235c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	@ 0x24
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032e0:	f001 fc10 	bl	8004b04 <HAL_RCC_GetPCLK1Freq>
 80032e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4a81      	ldr	r2, [pc, #516]	@ (80034f0 <HAL_I2C_Init+0x274>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d807      	bhi.n	8003300 <HAL_I2C_Init+0x84>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a80      	ldr	r2, [pc, #512]	@ (80034f4 <HAL_I2C_Init+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	bf94      	ite	ls
 80032f8:	2301      	movls	r3, #1
 80032fa:	2300      	movhi	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e006      	b.n	800330e <HAL_I2C_Init+0x92>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a7d      	ldr	r2, [pc, #500]	@ (80034f8 <HAL_I2C_Init+0x27c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0e7      	b.n	80034e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a78      	ldr	r2, [pc, #480]	@ (80034fc <HAL_I2C_Init+0x280>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0c9b      	lsrs	r3, r3, #18
 8003320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a6a      	ldr	r2, [pc, #424]	@ (80034f0 <HAL_I2C_Init+0x274>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d802      	bhi.n	8003350 <HAL_I2C_Init+0xd4>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3301      	adds	r3, #1
 800334e:	e009      	b.n	8003364 <HAL_I2C_Init+0xe8>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	4a69      	ldr	r2, [pc, #420]	@ (8003500 <HAL_I2C_Init+0x284>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	3301      	adds	r3, #1
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	430b      	orrs	r3, r1
 800336a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003376:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	495c      	ldr	r1, [pc, #368]	@ (80034f0 <HAL_I2C_Init+0x274>)
 8003380:	428b      	cmp	r3, r1
 8003382:	d819      	bhi.n	80033b8 <HAL_I2C_Init+0x13c>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e59      	subs	r1, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003398:	400b      	ands	r3, r1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_I2C_Init+0x138>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e59      	subs	r1, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b2:	e051      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 80033b4:	2304      	movs	r3, #4
 80033b6:	e04f      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d111      	bne.n	80033e4 <HAL_I2C_Init+0x168>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e012      	b.n	800340a <HAL_I2C_Init+0x18e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Init+0x196>
 800340e:	2301      	movs	r3, #1
 8003410:	e022      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <HAL_I2C_Init+0x1bc>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e58      	subs	r0, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	440b      	add	r3, r1
 8003428:	fbb0 f3f3 	udiv	r3, r0, r3
 800342c:	3301      	adds	r3, #1
 800342e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003436:	e00f      	b.n	8003458 <HAL_I2C_Init+0x1dc>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e58      	subs	r0, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	0099      	lsls	r1, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6809      	ldr	r1, [r1, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6911      	ldr	r1, [r2, #16]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	4311      	orrs	r1, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	000186a0 	.word	0x000186a0
 80034f4:	001e847f 	.word	0x001e847f
 80034f8:	003d08ff 	.word	0x003d08ff
 80034fc:	431bde83 	.word	0x431bde83
 8003500:	10624dd3 	.word	0x10624dd3

08003504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	461a      	mov	r2, r3
 8003510:	460b      	mov	r3, r1
 8003512:	817b      	strh	r3, [r7, #10]
 8003514:	4613      	mov	r3, r2
 8003516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff fb3e 	bl	8002b98 <HAL_GetTick>
 800351c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	f040 80e0 	bne.w	80036ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	4970      	ldr	r1, [pc, #448]	@ (80036f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fc7e 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	e0d3      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2C_Master_Transmit+0x50>
 8003550:	2302      	movs	r3, #2
 8003552:	e0cc      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d007      	beq.n	800357a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2221      	movs	r2, #33	@ 0x21
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2210      	movs	r2, #16
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	893a      	ldrh	r2, [r7, #8]
 80035aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a50      	ldr	r2, [pc, #320]	@ (80036fc <HAL_I2C_Master_Transmit+0x1f8>)
 80035ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035bc:	8979      	ldrh	r1, [r7, #10]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fae8 	bl	8003b98 <I2C_MasterRequestWrite>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e08d      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035e8:	e066      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	6a39      	ldr	r1, [r7, #32]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fd3c 	bl	800406c <I2C_WaitOnTXEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d107      	bne.n	8003612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e06b      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d11b      	bne.n	800368c <HAL_I2C_Master_Transmit+0x188>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d017      	beq.n	800368c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	781a      	ldrb	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	6a39      	ldr	r1, [r7, #32]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fd33 	bl	80040fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d107      	bne.n	80036b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e01a      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d194      	bne.n	80035ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00100002 	.word	0x00100002
 80036fc:	ffff0000 	.word	0xffff0000

08003700 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	@ 0x30
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	460b      	mov	r3, r1
 800370e:	817b      	strh	r3, [r7, #10]
 8003710:	4613      	mov	r3, r2
 8003712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff fa40 	bl	8002b98 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 8217 	bne.w	8003b56 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2319      	movs	r3, #25
 800372e:	2201      	movs	r2, #1
 8003730:	497c      	ldr	r1, [pc, #496]	@ (8003924 <HAL_I2C_Master_Receive+0x224>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fb80 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	e20a      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_I2C_Master_Receive+0x50>
 800374c:	2302      	movs	r3, #2
 800374e:	e203      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d007      	beq.n	8003776 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2222      	movs	r2, #34	@ 0x22
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2210      	movs	r2, #16
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	893a      	ldrh	r2, [r7, #8]
 80037a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003928 <HAL_I2C_Master_Receive+0x228>)
 80037b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037b8:	8979      	ldrh	r1, [r7, #10]
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa6c 	bl	8003c9c <I2C_MasterRequestRead>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1c4      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d113      	bne.n	80037fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	623b      	str	r3, [r7, #32]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e198      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	2b01      	cmp	r3, #1
 8003804:	d11b      	bne.n	800383e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e178      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	2b02      	cmp	r3, #2
 8003844:	d11b      	bne.n	800387e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	e158      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800388c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038a4:	e144      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	f200 80f1 	bhi.w	8003a92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d123      	bne.n	8003900 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fc65 	bl	800418c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e145      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038fe:	e117      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003904:	2b02      	cmp	r3, #2
 8003906:	d14e      	bne.n	80039a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	2200      	movs	r2, #0
 8003910:	4906      	ldr	r1, [pc, #24]	@ (800392c <HAL_I2C_Master_Receive+0x22c>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa90 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e11a      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000
 800392c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039a4:	e0c4      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	2200      	movs	r2, #0
 80039ae:	496c      	ldr	r1, [pc, #432]	@ (8003b60 <HAL_I2C_Master_Receive+0x460>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa41 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0cb      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4955      	ldr	r1, [pc, #340]	@ (8003b60 <HAL_I2C_Master_Receive+0x460>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fa13 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e09d      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a90:	e04e      	b.n	8003b30 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fb78 	bl	800418c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e058      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d124      	bne.n	8003b30 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f aeb6 	bne.w	80038a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	@ 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	00010004 	.word	0x00010004

08003b64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b72:	b2db      	uxtb	r3, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d006      	beq.n	8003bc2 <I2C_MasterRequestWrite+0x2a>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d003      	beq.n	8003bc2 <I2C_MasterRequestWrite+0x2a>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bc0:	d108      	bne.n	8003bd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e00b      	b.n	8003bec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd8:	2b12      	cmp	r3, #18
 8003bda:	d107      	bne.n	8003bec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f91d 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	d103      	bne.n	8003c1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e035      	b.n	8003c8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c28:	d108      	bne.n	8003c3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	e01b      	b.n	8003c74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c3c:	897b      	ldrh	r3, [r7, #10]
 8003c3e:	11db      	asrs	r3, r3, #7
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0306 	and.w	r3, r3, #6
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f063 030f 	orn	r3, r3, #15
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	490e      	ldr	r1, [pc, #56]	@ (8003c94 <I2C_MasterRequestWrite+0xfc>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f966 	bl	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e010      	b.n	8003c8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c6a:	897b      	ldrh	r3, [r7, #10]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4907      	ldr	r1, [pc, #28]	@ (8003c98 <I2C_MasterRequestWrite+0x100>)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f956 	bl	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	00010008 	.word	0x00010008
 8003c98:	00010002 	.word	0x00010002

08003c9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d006      	beq.n	8003cd6 <I2C_MasterRequestRead+0x3a>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d003      	beq.n	8003cd6 <I2C_MasterRequestRead+0x3a>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cd4:	d108      	bne.n	8003ce8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e00b      	b.n	8003d00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	2b11      	cmp	r3, #17
 8003cee:	d107      	bne.n	8003d00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f893 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d26:	d103      	bne.n	8003d30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e079      	b.n	8003e28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d3c:	d108      	bne.n	8003d50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	e05f      	b.n	8003e10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d50:	897b      	ldrh	r3, [r7, #10]
 8003d52:	11db      	asrs	r3, r3, #7
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0306 	and.w	r3, r3, #6
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f063 030f 	orn	r3, r3, #15
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4930      	ldr	r1, [pc, #192]	@ (8003e30 <I2C_MasterRequestRead+0x194>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f8dc 	bl	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e054      	b.n	8003e28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4929      	ldr	r1, [pc, #164]	@ (8003e34 <I2C_MasterRequestRead+0x198>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f8cc 	bl	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e044      	b.n	8003e28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f831 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	d103      	bne.n	8003df4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e017      	b.n	8003e28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	11db      	asrs	r3, r3, #7
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f003 0306 	and.w	r3, r3, #6
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f063 030e 	orn	r3, r3, #14
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4907      	ldr	r1, [pc, #28]	@ (8003e34 <I2C_MasterRequestRead+0x198>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f888 	bl	8003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	00010008 	.word	0x00010008
 8003e34:	00010002 	.word	0x00010002

08003e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e48:	e048      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d044      	beq.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe fea1 	bl	8002b98 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d139      	bne.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10d      	bne.n	8003e8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	e00c      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d116      	bne.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e023      	b.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d10d      	bne.n	8003f02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	43da      	mvns	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	e00c      	b.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	43da      	mvns	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf0c      	ite	eq
 8003f14:	2301      	moveq	r3, #1
 8003f16:	2300      	movne	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d093      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f3a:	e071      	b.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4a:	d123      	bne.n	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f043 0204 	orr.w	r2, r3, #4
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e067      	b.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d041      	beq.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9c:	f7fe fdfc 	bl	8002b98 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d136      	bne.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10c      	bne.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	e00b      	b.n	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e021      	b.n	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b01      	cmp	r3, #1
 8004028:	d10c      	bne.n	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	43da      	mvns	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e00b      	b.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f af6d 	bne.w	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004078:	e034      	b.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8e3 	bl	8004246 <I2C_IsAcknowledgeFailed>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e034      	b.n	80040f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d028      	beq.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fe fd81 	bl	8002b98 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11d      	bne.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b80      	cmp	r3, #128	@ 0x80
 80040b4:	d016      	beq.n	80040e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e007      	b.n	80040f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b80      	cmp	r3, #128	@ 0x80
 80040f0:	d1c3      	bne.n	800407a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004108:	e034      	b.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f89b 	bl	8004246 <I2C_IsAcknowledgeFailed>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e034      	b.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d028      	beq.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fe fd39 	bl	8002b98 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11d      	bne.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b04      	cmp	r3, #4
 8004144:	d016      	beq.n	8004174 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e007      	b.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d1c3      	bne.n	800410a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004198:	e049      	b.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d119      	bne.n	80041dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0210 	mvn.w	r2, #16
 80041b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e030      	b.n	800423e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041dc:	f7fe fcdc 	bl	8002b98 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11d      	bne.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d016      	beq.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e007      	b.n	800423e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d1ae      	bne.n	800419a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425c:	d11b      	bne.n	8004296 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004266:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e267      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d075      	beq.n	80043ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c2:	4b88      	ldr	r3, [pc, #544]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d00c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b85      	ldr	r3, [pc, #532]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d112      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b82      	ldr	r3, [pc, #520]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e6:	d10b      	bne.n	8004300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	4b7e      	ldr	r3, [pc, #504]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d05b      	beq.n	80043ac <HAL_RCC_OscConfig+0x108>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d157      	bne.n	80043ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e242      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004308:	d106      	bne.n	8004318 <HAL_RCC_OscConfig+0x74>
 800430a:	4b76      	ldr	r3, [pc, #472]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a75      	ldr	r2, [pc, #468]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e01d      	b.n	8004354 <HAL_RCC_OscConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004320:	d10c      	bne.n	800433c <HAL_RCC_OscConfig+0x98>
 8004322:	4b70      	ldr	r3, [pc, #448]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6f      	ldr	r2, [pc, #444]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b6d      	ldr	r3, [pc, #436]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6c      	ldr	r2, [pc, #432]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e00b      	b.n	8004354 <HAL_RCC_OscConfig+0xb0>
 800433c:	4b69      	ldr	r3, [pc, #420]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a68      	ldr	r2, [pc, #416]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b66      	ldr	r3, [pc, #408]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a65      	ldr	r2, [pc, #404]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 800434e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d013      	beq.n	8004384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fe fc1c 	bl	8002b98 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fe fc18 	bl	8002b98 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	@ 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e207      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b5b      	ldr	r3, [pc, #364]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0xc0>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fc08 	bl	8002b98 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438c:	f7fe fc04 	bl	8002b98 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1f3      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439e:	4b51      	ldr	r3, [pc, #324]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0xe8>
 80043aa:	e000      	b.n	80043ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ba:	4b4a      	ldr	r3, [pc, #296]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11c      	bne.n	800440c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b44      	ldr	r3, [pc, #272]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043de:	4b41      	ldr	r3, [pc, #260]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCC_OscConfig+0x152>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1c7      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4937      	ldr	r1, [pc, #220]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440a:	e03a      	b.n	8004482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004414:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <HAL_RCC_OscConfig+0x244>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fe fbbd 	bl	8002b98 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004422:	f7fe fbb9 	bl	8002b98 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1a8      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004434:	4b2b      	ldr	r3, [pc, #172]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0f0      	beq.n	8004422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004440:	4b28      	ldr	r3, [pc, #160]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4925      	ldr	r1, [pc, #148]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004450:	4313      	orrs	r3, r2
 8004452:	600b      	str	r3, [r1, #0]
 8004454:	e015      	b.n	8004482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_RCC_OscConfig+0x244>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe fb9c 	bl	8002b98 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004464:	f7fe fb98 	bl	8002b98 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e187      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d036      	beq.n	80044fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_RCC_OscConfig+0x248>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fe fb7c 	bl	8002b98 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fe fb78 	bl	8002b98 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e167      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x200>
 80044c2:	e01b      	b.n	80044fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <HAL_RCC_OscConfig+0x248>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ca:	f7fe fb65 	bl	8002b98 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	e00e      	b.n	80044f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fe fb61 	bl	8002b98 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d907      	bls.n	80044f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e150      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
 80044e4:	40023800 	.word	0x40023800
 80044e8:	42470000 	.word	0x42470000
 80044ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	4b88      	ldr	r3, [pc, #544]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1ea      	bne.n	80044d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8097 	beq.w	8004638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b81      	ldr	r3, [pc, #516]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	4b7d      	ldr	r3, [pc, #500]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	4a7c      	ldr	r2, [pc, #496]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	@ 0x40
 800452a:	4b7a      	ldr	r3, [pc, #488]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004536:	2301      	movs	r3, #1
 8004538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b77      	ldr	r3, [pc, #476]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d118      	bne.n	8004578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004546:	4b74      	ldr	r3, [pc, #464]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a73      	ldr	r2, [pc, #460]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fe fb21 	bl	8002b98 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455a:	f7fe fb1d 	bl	8002b98 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e10c      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456c:	4b6a      	ldr	r3, [pc, #424]	@ (8004718 <HAL_RCC_OscConfig+0x474>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x2ea>
 8004580:	4b64      	ldr	r3, [pc, #400]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a63      	ldr	r2, [pc, #396]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x324>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b05      	cmp	r3, #5
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x30c>
 8004596:	4b5f      	ldr	r3, [pc, #380]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a5e      	ldr	r2, [pc, #376]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800459c:	f043 0304 	orr.w	r3, r3, #4
 80045a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0x324>
 80045b0:	4b58      	ldr	r3, [pc, #352]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	4a57      	ldr	r2, [pc, #348]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a54      	ldr	r2, [pc, #336]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 0304 	bic.w	r3, r3, #4
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fe fae2 	bl	8002b98 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe fade 	bl	8002b98 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e0cb      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	4b49      	ldr	r3, [pc, #292]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <HAL_RCC_OscConfig+0x334>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7fe facc 	bl	8002b98 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	e00a      	b.n	800461a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fe fac8 	bl	8002b98 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0b5      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461a:	4b3e      	ldr	r3, [pc, #248]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ee      	bne.n	8004604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462c:	4b39      	ldr	r3, [pc, #228]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	4a38      	ldr	r2, [pc, #224]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80a1 	beq.w	8004784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004642:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b08      	cmp	r3, #8
 800464c:	d05c      	beq.n	8004708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d141      	bne.n	80046da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b31      	ldr	r3, [pc, #196]	@ (800471c <HAL_RCC_OscConfig+0x478>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7fe fa9c 	bl	8002b98 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fa98 	bl	8002b98 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e087      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b27      	ldr	r3, [pc, #156]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	491b      	ldr	r1, [pc, #108]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ac:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCC_OscConfig+0x478>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fe fa71 	bl	8002b98 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fe fa6d 	bl	8002b98 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e05c      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046cc:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x416>
 80046d8:	e054      	b.n	8004784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b10      	ldr	r3, [pc, #64]	@ (800471c <HAL_RCC_OscConfig+0x478>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe fa5a 	bl	8002b98 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fe fa56 	bl	8002b98 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e045      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_RCC_OscConfig+0x470>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x444>
 8004706:	e03d      	b.n	8004784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e038      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000
 800471c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004720:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x4ec>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d028      	beq.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d121      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d11a      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	4293      	cmp	r3, r2
 800475a:	d111      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0cc      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a8:	4b68      	ldr	r3, [pc, #416]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90c      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b65      	ldr	r3, [pc, #404]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b63      	ldr	r3, [pc, #396]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0b8      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e8:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a58      	ldr	r2, [pc, #352]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004800:	4b53      	ldr	r3, [pc, #332]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a52      	ldr	r2, [pc, #328]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800480a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b50      	ldr	r3, [pc, #320]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	494d      	ldr	r1, [pc, #308]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d044      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b47      	ldr	r3, [pc, #284]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d119      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d003      	beq.n	8004852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	2b03      	cmp	r3, #3
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004852:	4b3f      	ldr	r3, [pc, #252]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e06f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b3b      	ldr	r3, [pc, #236]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e067      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004872:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 0203 	bic.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4934      	ldr	r1, [pc, #208]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004884:	f7fe f988 	bl	8002b98 <HAL_GetTick>
 8004888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488c:	f7fe f984 	bl	8002b98 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489a:	4293      	cmp	r3, r2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e04f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 020c 	and.w	r2, r3, #12
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1eb      	bne.n	800488c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b4:	4b25      	ldr	r3, [pc, #148]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20c      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b22      	ldr	r3, [pc, #136]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e032      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e8:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4916      	ldr	r1, [pc, #88]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004906:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	490e      	ldr	r1, [pc, #56]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491a:	f000 f821 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 800491e:	4602      	mov	r2, r0
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	490a      	ldr	r1, [pc, #40]	@ (8004954 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	5ccb      	ldrb	r3, [r1, r3]
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a09      	ldr	r2, [pc, #36]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 8004934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004936:	4b09      	ldr	r3, [pc, #36]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe f8e8 	bl	8002b10 <HAL_InitTick>

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023c00 	.word	0x40023c00
 8004950:	40023800 	.word	0x40023800
 8004954:	0800b820 	.word	0x0800b820
 8004958:	20000000 	.word	0x20000000
 800495c:	20000004 	.word	0x20000004

08004960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b090      	sub	sp, #64	@ 0x40
 8004966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	637b      	str	r3, [r7, #52]	@ 0x34
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004970:	2300      	movs	r3, #0
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004978:	4b59      	ldr	r3, [pc, #356]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b08      	cmp	r3, #8
 8004982:	d00d      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004984:	2b08      	cmp	r3, #8
 8004986:	f200 80a1 	bhi.w	8004acc <HAL_RCC_GetSysClockFreq+0x16c>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x34>
 800498e:	2b04      	cmp	r3, #4
 8004990:	d003      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x3a>
 8004992:	e09b      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004996:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004998:	e09b      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499a:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 800499c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800499e:	e098      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049aa:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	2200      	movs	r2, #0
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049c8:	2100      	movs	r1, #0
 80049ca:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049cc:	fb03 f201 	mul.w	r2, r3, r1
 80049d0:	2300      	movs	r3, #0
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	4a43      	ldr	r2, [pc, #268]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049da:	fba0 1202 	umull	r1, r2, r0, r2
 80049de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e0:	460a      	mov	r2, r1
 80049e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e6:	4413      	add	r3, r2
 80049e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ec:	2200      	movs	r2, #0
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	61fa      	str	r2, [r7, #28]
 80049f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049fa:	f7fc f94d 	bl	8000c98 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4613      	mov	r3, r2
 8004a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a06:	e053      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a08:	4b35      	ldr	r3, [pc, #212]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	2200      	movs	r2, #0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	617a      	str	r2, [r7, #20]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a1a:	f04f 0b00 	mov.w	fp, #0
 8004a1e:	4652      	mov	r2, sl
 8004a20:	465b      	mov	r3, fp
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	0159      	lsls	r1, r3, #5
 8004a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a30:	0150      	lsls	r0, r2, #5
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	ebb2 080a 	subs.w	r8, r2, sl
 8004a3a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a52:	ebb2 0408 	subs.w	r4, r2, r8
 8004a56:	eb63 0509 	sbc.w	r5, r3, r9
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	00eb      	lsls	r3, r5, #3
 8004a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a68:	00e2      	lsls	r2, r4, #3
 8004a6a:	4614      	mov	r4, r2
 8004a6c:	461d      	mov	r5, r3
 8004a6e:	eb14 030a 	adds.w	r3, r4, sl
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	eb45 030b 	adc.w	r3, r5, fp
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a86:	4629      	mov	r1, r5
 8004a88:	028b      	lsls	r3, r1, #10
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a90:	4621      	mov	r1, r4
 8004a92:	028a      	lsls	r2, r1, #10
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa4:	f7fc f8f8 	bl	8000c98 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4613      	mov	r3, r2
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	3301      	adds	r3, #1
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004ac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004aca:	e002      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004acc:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ace:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3740      	adds	r7, #64	@ 0x40
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	00f42400 	.word	0x00f42400
 8004ae8:	017d7840 	.word	0x017d7840

08004aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af0:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000000 	.word	0x20000000

08004b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b08:	f7ff fff0 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	0a9b      	lsrs	r3, r3, #10
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	4903      	ldr	r1, [pc, #12]	@ (8004b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40023800 	.word	0x40023800
 8004b28:	0800b830 	.word	0x0800b830

08004b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b30:	f7ff ffdc 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b34:	4602      	mov	r2, r0
 8004b36:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	0b5b      	lsrs	r3, r3, #13
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	4903      	ldr	r1, [pc, #12]	@ (8004b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	0800b830 	.word	0x0800b830

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fd46 	bl	800260c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fba4 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d001      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e044      	b.n	8004c96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d018      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x6c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c36:	d013      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x6c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00e      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x6c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <HAL_TIM_Base_Start_IT+0xb8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x6c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a17      	ldr	r2, [pc, #92]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d004      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x6c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d010      	beq.n	8004c94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	e007      	b.n	8004c94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40014000 	.word	0x40014000

08004cb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e097      	b.n	8004dfc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fd fba5 	bl	8002430 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cfc:	f023 0307 	bic.w	r3, r3, #7
 8004d00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f000 fae7 	bl	80052e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d58:	f023 030c 	bic.w	r3, r3, #12
 8004d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	4313      	orrs	r3, r2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	011a      	lsls	r2, r3, #4
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	031b      	lsls	r3, r3, #12
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4313      	orrs	r3, r2
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d110      	bne.n	8004e56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e3a:	7b7b      	ldrb	r3, [r7, #13]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d001      	beq.n	8004e44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e069      	b.n	8004f18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e54:	e031      	b.n	8004eba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d110      	bne.n	8004e7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e5c:	7bbb      	ldrb	r3, [r7, #14]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d102      	bne.n	8004e68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e62:	7b3b      	ldrb	r3, [r7, #12]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e055      	b.n	8004f18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e7c:	e01d      	b.n	8004eba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d108      	bne.n	8004e96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e84:	7bbb      	ldrb	r3, [r7, #14]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e8a:	7b7b      	ldrb	r3, [r7, #13]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d102      	bne.n	8004e96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e90:	7b3b      	ldrb	r3, [r7, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d001      	beq.n	8004e9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e03e      	b.n	8004f18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_TIM_Encoder_Start+0xc4>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d008      	beq.n	8004ed8 <HAL_TIM_Encoder_Start+0xd4>
 8004ec6:	e00f      	b.n	8004ee8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	2100      	movs	r1, #0
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fb2b 	bl	800552c <TIM_CCxChannelCmd>
      break;
 8004ed6:	e016      	b.n	8004f06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2201      	movs	r2, #1
 8004ede:	2104      	movs	r1, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fb23 	bl	800552c <TIM_CCxChannelCmd>
      break;
 8004ee6:	e00e      	b.n	8004f06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2201      	movs	r2, #1
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fb1b 	bl	800552c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	2104      	movs	r1, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fb14 	bl	800552c <TIM_CCxChannelCmd>
      break;
 8004f04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0202 	mvn.w	r2, #2
 8004f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f999 	bl	80052a2 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f98b 	bl	800528e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f99c 	bl	80052b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d020      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0204 	mvn.w	r2, #4
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f973 	bl	80052a2 <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f965 	bl	800528e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f976 	bl	80052b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d020      	beq.n	800501c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0208 	mvn.w	r2, #8
 8004fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f94d 	bl	80052a2 <HAL_TIM_IC_CaptureCallback>
 8005008:	e005      	b.n	8005016 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f93f 	bl	800528e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f950 	bl	80052b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d020      	beq.n	8005068 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01b      	beq.n	8005068 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0210 	mvn.w	r2, #16
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2208      	movs	r2, #8
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f927 	bl	80052a2 <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f919 	bl	800528e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f92a 	bl	80052b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0201 	mvn.w	r2, #1
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fc f9e2 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00c      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fadc 	bl	8005668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00c      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8fb 	bl	80052ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0220 	mvn.w	r2, #32
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 faae 	bl	8005654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIM_ConfigClockSource+0x1c>
 8005118:	2302      	movs	r3, #2
 800511a:	e0b4      	b.n	8005286 <HAL_TIM_ConfigClockSource+0x186>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800513a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005154:	d03e      	beq.n	80051d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800515a:	f200 8087 	bhi.w	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005162:	f000 8086 	beq.w	8005272 <HAL_TIM_ConfigClockSource+0x172>
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516a:	d87f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800516c:	2b70      	cmp	r3, #112	@ 0x70
 800516e:	d01a      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005170:	2b70      	cmp	r3, #112	@ 0x70
 8005172:	d87b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 8005174:	2b60      	cmp	r3, #96	@ 0x60
 8005176:	d050      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x11a>
 8005178:	2b60      	cmp	r3, #96	@ 0x60
 800517a:	d877      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800517c:	2b50      	cmp	r3, #80	@ 0x50
 800517e:	d03c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0xfa>
 8005180:	2b50      	cmp	r3, #80	@ 0x50
 8005182:	d873      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 8005184:	2b40      	cmp	r3, #64	@ 0x40
 8005186:	d058      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x13a>
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	d86f      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800518c:	2b30      	cmp	r3, #48	@ 0x30
 800518e:	d064      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 8005190:	2b30      	cmp	r3, #48	@ 0x30
 8005192:	d86b      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 8005194:	2b20      	cmp	r3, #32
 8005196:	d060      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d867      	bhi.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d05a      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x15a>
 80051a4:	e062      	b.n	800526c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051b6:	f000 f999 	bl	80054ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	609a      	str	r2, [r3, #8]
      break;
 80051d2:	e04f      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e4:	f000 f982 	bl	80054ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051f6:	609a      	str	r2, [r3, #8]
      break;
 80051f8:	e03c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	461a      	mov	r2, r3
 8005208:	f000 f8f6 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2150      	movs	r1, #80	@ 0x50
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f94f 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005218:	e02c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 f915 	bl	8005456 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2160      	movs	r1, #96	@ 0x60
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f93f 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005238:	e01c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005246:	461a      	mov	r2, r3
 8005248:	f000 f8d6 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2140      	movs	r1, #64	@ 0x40
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f92f 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 8005258:	e00c      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f000 f926 	bl	80054b6 <TIM_ITRx_SetConfig>
      break;
 800526a:	e003      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      break;
 8005270:	e000      	b.n	8005274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	@ (80053dc <TIM_Base_SetConfig+0xfc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00f      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fe:	d00b      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a37      	ldr	r2, [pc, #220]	@ (80053e0 <TIM_Base_SetConfig+0x100>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a36      	ldr	r2, [pc, #216]	@ (80053e4 <TIM_Base_SetConfig+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_Base_SetConfig+0x38>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a35      	ldr	r2, [pc, #212]	@ (80053e8 <TIM_Base_SetConfig+0x108>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d108      	bne.n	800532a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2b      	ldr	r2, [pc, #172]	@ (80053dc <TIM_Base_SetConfig+0xfc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01b      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005338:	d017      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <TIM_Base_SetConfig+0x100>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a27      	ldr	r2, [pc, #156]	@ (80053e4 <TIM_Base_SetConfig+0x104>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00f      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	@ (80053e8 <TIM_Base_SetConfig+0x108>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00b      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a25      	ldr	r2, [pc, #148]	@ (80053ec <TIM_Base_SetConfig+0x10c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a24      	ldr	r2, [pc, #144]	@ (80053f0 <TIM_Base_SetConfig+0x110>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d003      	beq.n	800536a <TIM_Base_SetConfig+0x8a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a23      	ldr	r2, [pc, #140]	@ (80053f4 <TIM_Base_SetConfig+0x114>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d108      	bne.n	800537c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4313      	orrs	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0e      	ldr	r2, [pc, #56]	@ (80053dc <TIM_Base_SetConfig+0xfc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d103      	bne.n	80053b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]
  }
}
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005456:	b480      	push	{r7}
 8005458:	b087      	sub	sp, #28
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 0210 	bic.w	r2, r3, #16
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005492:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f043 0307 	orr.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	431a      	orrs	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2201      	movs	r2, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	43db      	mvns	r3, r3
 800554e:	401a      	ands	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1a      	ldr	r2, [r3, #32]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800558c:	2302      	movs	r3, #2
 800558e:	e050      	b.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d018      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d013      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a18      	ldr	r2, [pc, #96]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00e      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a16      	ldr	r2, [pc, #88]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a15      	ldr	r2, [pc, #84]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a13      	ldr	r2, [pc, #76]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d10c      	bne.n	8005620 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800560c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	4313      	orrs	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40014000 	.word	0x40014000

08005654 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e042      	b.n	8005714 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fc ffda 	bl	800265c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2224      	movs	r2, #36	@ 0x24
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fdbd 	bl	8006240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	@ 0x28
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	d175      	bne.n	8005828 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_UART_Transmit+0x2c>
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e06e      	b.n	800582a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2221      	movs	r2, #33	@ 0x21
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575a:	f7fd fa1d 	bl	8002b98 <HAL_GetTick>
 800575e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005774:	d108      	bne.n	8005788 <HAL_UART_Transmit+0x6c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e003      	b.n	8005790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005790:	e02e      	b.n	80057f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2180      	movs	r1, #128	@ 0x80
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fb1f 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e03a      	b.n	800582a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3302      	adds	r3, #2
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e007      	b.n	80057e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	3301      	adds	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1cb      	bne.n	8005792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	2140      	movs	r1, #64	@ 0x40
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 faeb 	bl	8005de0 <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	e000      	b.n	800582a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	4613      	mov	r3, r2
 800583e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b20      	cmp	r3, #32
 800584a:	d112      	bne.n	8005872 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_UART_Receive_IT+0x26>
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e00b      	b.n	8005874 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	461a      	mov	r2, r3
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fb12 	bl	8005e92 <UART_Start_Receive_IT>
 800586e:	4603      	mov	r3, r0
 8005870:	e000      	b.n	8005874 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005872:	2302      	movs	r3, #2
  }
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b0ba      	sub	sp, #232	@ 0xe8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10f      	bne.n	80058e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_UART_IRQHandler+0x66>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fbf2 	bl	80060c4 <UART_Receive_IT>
      return;
 80058e0:	e25b      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80de 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x22c>
 80058ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80d1 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <HAL_UART_IRQHandler+0xae>
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xd2>
 8005936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	f043 0202 	orr.w	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_UART_IRQHandler+0xf6>
 800595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	f043 0204 	orr.w	r2, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <HAL_UART_IRQHandler+0x126>
 800597e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800598a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599a:	f043 0208 	orr.w	r2, r3, #8
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 81f2 	beq.w	8005d90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_UART_IRQHandler+0x14e>
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fb7d 	bl	80060c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d4:	2b40      	cmp	r3, #64	@ 0x40
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <HAL_UART_IRQHandler+0x17a>
 80059ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d04f      	beq.n	8005a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa85 	bl	8005f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a06:	2b40      	cmp	r3, #64	@ 0x40
 8005a08:	d141      	bne.n	8005a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d9      	bne.n	8005a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d013      	beq.n	8005a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a62:	4a7e      	ldr	r2, [pc, #504]	@ (8005c5c <HAL_UART_IRQHandler+0x3e0>)
 8005a64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fd fa45 	bl	8002efa <HAL_DMA_Abort_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d016      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a80:	4610      	mov	r0, r2
 8005a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e00e      	b.n	8005aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f994 	bl	8005db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e00a      	b.n	8005aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f990 	bl	8005db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e006      	b.n	8005aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f98c 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005aa2:	e175      	b.n	8005d90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa4:	bf00      	nop
    return;
 8005aa6:	e173      	b.n	8005d90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 814f 	bne.w	8005d50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8148 	beq.w	8005d50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8141 	beq.w	8005d50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b40      	cmp	r3, #64	@ 0x40
 8005af0:	f040 80b6 	bne.w	8005c60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8145 	beq.w	8005d94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f080 813e 	bcs.w	8005d94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b2a:	f000 8088 	beq.w	8005c3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1d9      	bne.n	8005b2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3314      	adds	r3, #20
 8005b80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3314      	adds	r3, #20
 8005b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e1      	bne.n	8005b7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3314      	adds	r3, #20
 8005bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005be0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e3      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c0e:	f023 0310 	bic.w	r3, r3, #16
 8005c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e3      	bne.n	8005bfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fd f8ee 	bl	8002e1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	4619      	mov	r1, r3
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8b7 	bl	8005dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c5a:	e09b      	b.n	8005d94 <HAL_UART_IRQHandler+0x518>
 8005c5c:	08005fcd 	.word	0x08005fcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 808e 	beq.w	8005d98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8089 	beq.w	8005d98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005caa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3314      	adds	r3, #20
 8005cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ce2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e3      	bne.n	8005cbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0310 	bic.w	r3, r3, #16
 8005d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d28:	61fa      	str	r2, [r7, #28]
 8005d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	617b      	str	r3, [r7, #20]
   return(result);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e3      	bne.n	8005d04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f83d 	bl	8005dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d4e:	e023      	b.n	8005d98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <HAL_UART_IRQHandler+0x4f4>
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f943 	bl	8005ff4 <UART_Transmit_IT>
    return;
 8005d6e:	e014      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00e      	beq.n	8005d9a <HAL_UART_IRQHandler+0x51e>
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f983 	bl	8006094 <UART_EndTransmit_IT>
    return;
 8005d8e:	e004      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
    return;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d98:	bf00      	nop
  }
}
 8005d9a:	37e8      	adds	r7, #232	@ 0xe8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df0:	e03b      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d037      	beq.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fc fecd 	bl	8002b98 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	6a3a      	ldr	r2, [r7, #32]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e03a      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d023      	beq.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b80      	cmp	r3, #128	@ 0x80
 8005e26:	d020      	beq.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b40      	cmp	r3, #64	@ 0x40
 8005e2c:	d01d      	beq.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d116      	bne.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 f857 	bl	8005f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e00f      	b.n	8005e8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d0b4      	beq.n	8005df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	88fa      	ldrh	r2, [r7, #6]
 8005eaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2222      	movs	r2, #34	@ 0x22
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0220 	orr.w	r2, r2, #32
 8005ef6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b095      	sub	sp, #84	@ 0x54
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3314      	adds	r3, #20
 8005f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d119      	bne.n	8005fb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f9e:	61ba      	str	r2, [r7, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fc0:	bf00      	nop
 8005fc2:	3754      	adds	r7, #84	@ 0x54
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff fee4 	bl	8005db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b21      	cmp	r3, #33	@ 0x21
 8006006:	d13e      	bne.n	8006086 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006010:	d114      	bne.n	800603c <UART_Transmit_IT+0x48>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d110      	bne.n	800603c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]
 800603a:	e008      	b.n	800604e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6211      	str	r1, [r2, #32]
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4619      	mov	r1, r3
 800605c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006070:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006080:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fe73 	bl	8005da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08c      	sub	sp, #48	@ 0x30
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b22      	cmp	r3, #34	@ 0x22
 80060d6:	f040 80ae 	bne.w	8006236 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e2:	d117      	bne.n	8006114 <UART_Receive_IT+0x50>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d113      	bne.n	8006114 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	b29a      	uxth	r2, r3
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	629a      	str	r2, [r3, #40]	@ 0x28
 8006112:	e026      	b.n	8006162 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006126:	d007      	beq.n	8006138 <UART_Receive_IT+0x74>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <UART_Receive_IT+0x82>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	e008      	b.n	8006158 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29b      	uxth	r3, r3
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	4619      	mov	r1, r3
 8006170:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006172:	2b00      	cmp	r3, #0
 8006174:	d15d      	bne.n	8006232 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0220 	bic.w	r2, r2, #32
 8006184:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006194:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d135      	bne.n	8006228 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	613b      	str	r3, [r7, #16]
   return(result);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f023 0310 	bic.w	r3, r3, #16
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e2:	623a      	str	r2, [r7, #32]
 80061e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e5      	bne.n	80061c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b10      	cmp	r3, #16
 8006202:	d10a      	bne.n	800621a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fdd1 	bl	8005dc8 <HAL_UARTEx_RxEventCallback>
 8006226:	e002      	b.n	800622e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fb fb51 	bl	80018d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e002      	b.n	8006238 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006236:	2302      	movs	r3, #2
  }
}
 8006238:	4618      	mov	r0, r3
 800623a:	3730      	adds	r7, #48	@ 0x30
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006244:	b0c0      	sub	sp, #256	@ 0x100
 8006246:	af00      	add	r7, sp, #0
 8006248:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625c:	68d9      	ldr	r1, [r3, #12]
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	ea40 0301 	orr.w	r3, r0, r1
 8006268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	431a      	orrs	r2, r3
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	431a      	orrs	r2, r3
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006298:	f021 010c 	bic.w	r1, r1, #12
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062a6:	430b      	orrs	r3, r1
 80062a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ba:	6999      	ldr	r1, [r3, #24]
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	ea40 0301 	orr.w	r3, r0, r1
 80062c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	4b8f      	ldr	r3, [pc, #572]	@ (800650c <UART_SetConfig+0x2cc>)
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d005      	beq.n	80062e0 <UART_SetConfig+0xa0>
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b8d      	ldr	r3, [pc, #564]	@ (8006510 <UART_SetConfig+0x2d0>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	d104      	bne.n	80062ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062e0:	f7fe fc24 	bl	8004b2c <HAL_RCC_GetPCLK2Freq>
 80062e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062e8:	e003      	b.n	80062f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ea:	f7fe fc0b 	bl	8004b04 <HAL_RCC_GetPCLK1Freq>
 80062ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fc:	f040 810c 	bne.w	8006518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006304:	2200      	movs	r2, #0
 8006306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800630a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800630e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006312:	4622      	mov	r2, r4
 8006314:	462b      	mov	r3, r5
 8006316:	1891      	adds	r1, r2, r2
 8006318:	65b9      	str	r1, [r7, #88]	@ 0x58
 800631a:	415b      	adcs	r3, r3
 800631c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800631e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006322:	4621      	mov	r1, r4
 8006324:	eb12 0801 	adds.w	r8, r2, r1
 8006328:	4629      	mov	r1, r5
 800632a:	eb43 0901 	adc.w	r9, r3, r1
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800633a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800633e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006342:	4690      	mov	r8, r2
 8006344:	4699      	mov	r9, r3
 8006346:	4623      	mov	r3, r4
 8006348:	eb18 0303 	adds.w	r3, r8, r3
 800634c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006350:	462b      	mov	r3, r5
 8006352:	eb49 0303 	adc.w	r3, r9, r3
 8006356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006366:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800636a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800636e:	460b      	mov	r3, r1
 8006370:	18db      	adds	r3, r3, r3
 8006372:	653b      	str	r3, [r7, #80]	@ 0x50
 8006374:	4613      	mov	r3, r2
 8006376:	eb42 0303 	adc.w	r3, r2, r3
 800637a:	657b      	str	r3, [r7, #84]	@ 0x54
 800637c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006384:	f7fa fc88 	bl	8000c98 <__aeabi_uldivmod>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4b61      	ldr	r3, [pc, #388]	@ (8006514 <UART_SetConfig+0x2d4>)
 800638e:	fba3 2302 	umull	r2, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	011c      	lsls	r4, r3, #4
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063a8:	4642      	mov	r2, r8
 80063aa:	464b      	mov	r3, r9
 80063ac:	1891      	adds	r1, r2, r2
 80063ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063b0:	415b      	adcs	r3, r3
 80063b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063b8:	4641      	mov	r1, r8
 80063ba:	eb12 0a01 	adds.w	sl, r2, r1
 80063be:	4649      	mov	r1, r9
 80063c0:	eb43 0b01 	adc.w	fp, r3, r1
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d8:	4692      	mov	sl, r2
 80063da:	469b      	mov	fp, r3
 80063dc:	4643      	mov	r3, r8
 80063de:	eb1a 0303 	adds.w	r3, sl, r3
 80063e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063e6:	464b      	mov	r3, r9
 80063e8:	eb4b 0303 	adc.w	r3, fp, r3
 80063ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006404:	460b      	mov	r3, r1
 8006406:	18db      	adds	r3, r3, r3
 8006408:	643b      	str	r3, [r7, #64]	@ 0x40
 800640a:	4613      	mov	r3, r2
 800640c:	eb42 0303 	adc.w	r3, r2, r3
 8006410:	647b      	str	r3, [r7, #68]	@ 0x44
 8006412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800641a:	f7fa fc3d 	bl	8000c98 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4611      	mov	r1, r2
 8006424:	4b3b      	ldr	r3, [pc, #236]	@ (8006514 <UART_SetConfig+0x2d4>)
 8006426:	fba3 2301 	umull	r2, r3, r3, r1
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2264      	movs	r2, #100	@ 0x64
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	1acb      	subs	r3, r1, r3
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800643a:	4b36      	ldr	r3, [pc, #216]	@ (8006514 <UART_SetConfig+0x2d4>)
 800643c:	fba3 2302 	umull	r2, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006448:	441c      	add	r4, r3
 800644a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644e:	2200      	movs	r2, #0
 8006450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006454:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	1891      	adds	r1, r2, r2
 8006462:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006464:	415b      	adcs	r3, r3
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800646c:	4641      	mov	r1, r8
 800646e:	1851      	adds	r1, r2, r1
 8006470:	6339      	str	r1, [r7, #48]	@ 0x30
 8006472:	4649      	mov	r1, r9
 8006474:	414b      	adcs	r3, r1
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006484:	4659      	mov	r1, fp
 8006486:	00cb      	lsls	r3, r1, #3
 8006488:	4651      	mov	r1, sl
 800648a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800648e:	4651      	mov	r1, sl
 8006490:	00ca      	lsls	r2, r1, #3
 8006492:	4610      	mov	r0, r2
 8006494:	4619      	mov	r1, r3
 8006496:	4603      	mov	r3, r0
 8006498:	4642      	mov	r2, r8
 800649a:	189b      	adds	r3, r3, r2
 800649c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064a0:	464b      	mov	r3, r9
 80064a2:	460a      	mov	r2, r1
 80064a4:	eb42 0303 	adc.w	r3, r2, r3
 80064a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064c0:	460b      	mov	r3, r1
 80064c2:	18db      	adds	r3, r3, r3
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c6:	4613      	mov	r3, r2
 80064c8:	eb42 0303 	adc.w	r3, r2, r3
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064d6:	f7fa fbdf 	bl	8000c98 <__aeabi_uldivmod>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <UART_SetConfig+0x2d4>)
 80064e0:	fba3 1302 	umull	r1, r3, r3, r2
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	2164      	movs	r1, #100	@ 0x64
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	3332      	adds	r3, #50	@ 0x32
 80064f2:	4a08      	ldr	r2, [pc, #32]	@ (8006514 <UART_SetConfig+0x2d4>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	f003 0207 	and.w	r2, r3, #7
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4422      	add	r2, r4
 8006506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006508:	e106      	b.n	8006718 <UART_SetConfig+0x4d8>
 800650a:	bf00      	nop
 800650c:	40011000 	.word	0x40011000
 8006510:	40011400 	.word	0x40011400
 8006514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800651c:	2200      	movs	r2, #0
 800651e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006522:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800652a:	4642      	mov	r2, r8
 800652c:	464b      	mov	r3, r9
 800652e:	1891      	adds	r1, r2, r2
 8006530:	6239      	str	r1, [r7, #32]
 8006532:	415b      	adcs	r3, r3
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
 8006536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800653a:	4641      	mov	r1, r8
 800653c:	1854      	adds	r4, r2, r1
 800653e:	4649      	mov	r1, r9
 8006540:	eb43 0501 	adc.w	r5, r3, r1
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	00eb      	lsls	r3, r5, #3
 800654e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006552:	00e2      	lsls	r2, r4, #3
 8006554:	4614      	mov	r4, r2
 8006556:	461d      	mov	r5, r3
 8006558:	4643      	mov	r3, r8
 800655a:	18e3      	adds	r3, r4, r3
 800655c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006560:	464b      	mov	r3, r9
 8006562:	eb45 0303 	adc.w	r3, r5, r3
 8006566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006586:	4629      	mov	r1, r5
 8006588:	008b      	lsls	r3, r1, #2
 800658a:	4621      	mov	r1, r4
 800658c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006590:	4621      	mov	r1, r4
 8006592:	008a      	lsls	r2, r1, #2
 8006594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006598:	f7fa fb7e 	bl	8000c98 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4b60      	ldr	r3, [pc, #384]	@ (8006724 <UART_SetConfig+0x4e4>)
 80065a2:	fba3 2302 	umull	r2, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	011c      	lsls	r4, r3, #4
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	1891      	adds	r1, r2, r2
 80065c2:	61b9      	str	r1, [r7, #24]
 80065c4:	415b      	adcs	r3, r3
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065cc:	4641      	mov	r1, r8
 80065ce:	1851      	adds	r1, r2, r1
 80065d0:	6139      	str	r1, [r7, #16]
 80065d2:	4649      	mov	r1, r9
 80065d4:	414b      	adcs	r3, r1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065e4:	4659      	mov	r1, fp
 80065e6:	00cb      	lsls	r3, r1, #3
 80065e8:	4651      	mov	r1, sl
 80065ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ee:	4651      	mov	r1, sl
 80065f0:	00ca      	lsls	r2, r1, #3
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	4642      	mov	r2, r8
 80065fa:	189b      	adds	r3, r3, r2
 80065fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006600:	464b      	mov	r3, r9
 8006602:	460a      	mov	r2, r1
 8006604:	eb42 0303 	adc.w	r3, r2, r3
 8006608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006616:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006624:	4649      	mov	r1, r9
 8006626:	008b      	lsls	r3, r1, #2
 8006628:	4641      	mov	r1, r8
 800662a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662e:	4641      	mov	r1, r8
 8006630:	008a      	lsls	r2, r1, #2
 8006632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006636:	f7fa fb2f 	bl	8000c98 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4611      	mov	r1, r2
 8006640:	4b38      	ldr	r3, [pc, #224]	@ (8006724 <UART_SetConfig+0x4e4>)
 8006642:	fba3 2301 	umull	r2, r3, r3, r1
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	2264      	movs	r2, #100	@ 0x64
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	1acb      	subs	r3, r1, r3
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	3332      	adds	r3, #50	@ 0x32
 8006654:	4a33      	ldr	r2, [pc, #204]	@ (8006724 <UART_SetConfig+0x4e4>)
 8006656:	fba2 2303 	umull	r2, r3, r2, r3
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006660:	441c      	add	r4, r3
 8006662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006666:	2200      	movs	r2, #0
 8006668:	673b      	str	r3, [r7, #112]	@ 0x70
 800666a:	677a      	str	r2, [r7, #116]	@ 0x74
 800666c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	1891      	adds	r1, r2, r2
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	415b      	adcs	r3, r3
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006680:	4641      	mov	r1, r8
 8006682:	1851      	adds	r1, r2, r1
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	4649      	mov	r1, r9
 8006688:	414b      	adcs	r3, r1
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006698:	4659      	mov	r1, fp
 800669a:	00cb      	lsls	r3, r1, #3
 800669c:	4651      	mov	r1, sl
 800669e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066a2:	4651      	mov	r1, sl
 80066a4:	00ca      	lsls	r2, r1, #3
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	4642      	mov	r2, r8
 80066ae:	189b      	adds	r3, r3, r2
 80066b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066b2:	464b      	mov	r3, r9
 80066b4:	460a      	mov	r2, r1
 80066b6:	eb42 0303 	adc.w	r3, r2, r3
 80066ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80066c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066d4:	4649      	mov	r1, r9
 80066d6:	008b      	lsls	r3, r1, #2
 80066d8:	4641      	mov	r1, r8
 80066da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066de:	4641      	mov	r1, r8
 80066e0:	008a      	lsls	r2, r1, #2
 80066e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066e6:	f7fa fad7 	bl	8000c98 <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <UART_SetConfig+0x4e4>)
 80066f0:	fba3 1302 	umull	r1, r3, r3, r2
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	2164      	movs	r1, #100	@ 0x64
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	3332      	adds	r3, #50	@ 0x32
 8006702:	4a08      	ldr	r2, [pc, #32]	@ (8006724 <UART_SetConfig+0x4e4>)
 8006704:	fba2 2303 	umull	r2, r3, r2, r3
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	f003 020f 	and.w	r2, r3, #15
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4422      	add	r2, r4
 8006716:	609a      	str	r2, [r3, #8]
}
 8006718:	bf00      	nop
 800671a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800671e:	46bd      	mov	sp, r7
 8006720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006724:	51eb851f 	.word	0x51eb851f

08006728 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	4619      	mov	r1, r3
 8006736:	2007      	movs	r0, #7
 8006738:	f7fa fc78 	bl	800102c <bno055_writeData>
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	4619      	mov	r1, r3
 8006752:	203d      	movs	r0, #61	@ 0x3d
 8006754:	f7fa fc6a 	bl	800102c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800675e:	2013      	movs	r0, #19
 8006760:	f7fa fc58 	bl	8001014 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8006764:	e002      	b.n	800676c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8006766:	2007      	movs	r0, #7
 8006768:	f7fa fc54 	bl	8001014 <bno055_delay>
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8006778:	2000      	movs	r0, #0
 800677a:	f7ff ffe3 	bl	8006744 <bno055_setOperationMode>
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}

08006782 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8006782:	b580      	push	{r7, lr}
 8006784:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8006786:	200c      	movs	r0, #12
 8006788:	f7ff ffdc 	bl	8006744 <bno055_setOperationMode>
}
 800678c:	bf00      	nop
 800678e:	bd80      	pop	{r7, pc}

08006790 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8006794:	2120      	movs	r1, #32
 8006796:	203f      	movs	r0, #63	@ 0x3f
 8006798:	f7fa fc48 	bl	800102c <bno055_writeData>
  bno055_delay(700);
 800679c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80067a0:	f7fa fc38 	bl	8001014 <bno055_delay>
}
 80067a4:	bf00      	nop
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
  bno055_reset();
 80067ae:	f7ff ffef 	bl	8006790 <bno055_reset>

  uint8_t id = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80067b6:	1dfb      	adds	r3, r7, #7
 80067b8:	2201      	movs	r2, #1
 80067ba:	4619      	mov	r1, r3
 80067bc:	2000      	movs	r0, #0
 80067be:	f7fa fd21 	bl	8001204 <bno055_readData>
  if (id != BNO055_ID) {
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80067c6:	d004      	beq.n	80067d2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	4619      	mov	r1, r3
 80067cc:	4809      	ldr	r0, [pc, #36]	@ (80067f4 <bno055_setup+0x4c>)
 80067ce:	f001 fedf 	bl	8008590 <iprintf>
  }
  bno055_setPage(0);
 80067d2:	2000      	movs	r0, #0
 80067d4:	f7ff ffa8 	bl	8006728 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80067d8:	2100      	movs	r1, #0
 80067da:	203f      	movs	r0, #63	@ 0x3f
 80067dc:	f7fa fc26 	bl	800102c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80067e0:	f7ff ffc8 	bl	8006774 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80067e4:	200a      	movs	r0, #10
 80067e6:	f7fa fc15 	bl	8001014 <bno055_delay>
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	0800b7e4 	.word	0x0800b7e4

080067f8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80067f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067fc:	b09e      	sub	sp, #120	@ 0x78
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8006806:	2000      	movs	r0, #0
 8006808:	f7ff ff8e 	bl	8006728 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800680c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006810:	2b20      	cmp	r3, #32
 8006812:	d108      	bne.n	8006826 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8006814:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8006818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800681c:	2208      	movs	r2, #8
 800681e:	4618      	mov	r0, r3
 8006820:	f7fa fcf0 	bl	8001204 <bno055_readData>
 8006824:	e007      	b.n	8006836 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8006826:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800682a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800682e:	2206      	movs	r2, #6
 8006830:	4618      	mov	r0, r3
 8006832:	f7fa fce7 	bl	8001204 <bno055_readData>

  double scale = 1;
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	4b8b      	ldr	r3, [pc, #556]	@ (8006a68 <bno055_getVector+0x270>)
 800683c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006844:	2b0e      	cmp	r3, #14
 8006846:	d109      	bne.n	800685c <bno055_getVector+0x64>
    scale = magScale;
 8006848:	4b88      	ldr	r3, [pc, #544]	@ (8006a6c <bno055_getVector+0x274>)
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f7f9 fe61 	bl	8000514 <__aeabi_ui2d>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800685a:	e03e      	b.n	80068da <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800685c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006860:	2b08      	cmp	r3, #8
 8006862:	d007      	beq.n	8006874 <bno055_getVector+0x7c>
 8006864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006868:	2b28      	cmp	r3, #40	@ 0x28
 800686a:	d003      	beq.n	8006874 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800686c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006870:	2b2e      	cmp	r3, #46	@ 0x2e
 8006872:	d109      	bne.n	8006888 <bno055_getVector+0x90>
    scale = accelScale;
 8006874:	4b7e      	ldr	r3, [pc, #504]	@ (8006a70 <bno055_getVector+0x278>)
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7f9 fe4b 	bl	8000514 <__aeabi_ui2d>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8006886:	e028      	b.n	80068da <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8006888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800688c:	2b14      	cmp	r3, #20
 800688e:	d109      	bne.n	80068a4 <bno055_getVector+0xac>
    scale = angularRateScale;
 8006890:	4b78      	ldr	r3, [pc, #480]	@ (8006a74 <bno055_getVector+0x27c>)
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f7f9 fe3d 	bl	8000514 <__aeabi_ui2d>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80068a2:	e01a      	b.n	80068da <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80068a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068a8:	2b1a      	cmp	r3, #26
 80068aa:	d109      	bne.n	80068c0 <bno055_getVector+0xc8>
    scale = eulerScale;
 80068ac:	4b72      	ldr	r3, [pc, #456]	@ (8006a78 <bno055_getVector+0x280>)
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7f9 fe2f 	bl	8000514 <__aeabi_ui2d>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 80068be:	e00c      	b.n	80068da <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80068c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d108      	bne.n	80068da <bno055_getVector+0xe2>
    scale = quaScale;
 80068c8:	4b6c      	ldr	r3, [pc, #432]	@ (8006a7c <bno055_getVector+0x284>)
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7f9 fe21 	bl	8000514 <__aeabi_ui2d>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80068da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80068de:	2220      	movs	r2, #32
 80068e0:	2100      	movs	r1, #0
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 ffbc 	bl	8008860 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80068e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d150      	bne.n	8006992 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80068f0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	b21a      	sxth	r2, r3
 80068f8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80068fc:	b21b      	sxth	r3, r3
 80068fe:	4313      	orrs	r3, r2
 8006900:	b21b      	sxth	r3, r3
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fe16 	bl	8000534 <__aeabi_i2d>
 8006908:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800690c:	f7f9 ffa6 	bl	800085c <__aeabi_ddiv>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8006918:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	b21a      	sxth	r2, r3
 8006920:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006924:	b21b      	sxth	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b21b      	sxth	r3, r3
 800692a:	4618      	mov	r0, r3
 800692c:	f7f9 fe02 	bl	8000534 <__aeabi_i2d>
 8006930:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006934:	f7f9 ff92 	bl	800085c <__aeabi_ddiv>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8006940:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	b21a      	sxth	r2, r3
 8006948:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800694c:	b21b      	sxth	r3, r3
 800694e:	4313      	orrs	r3, r2
 8006950:	b21b      	sxth	r3, r3
 8006952:	4618      	mov	r0, r3
 8006954:	f7f9 fdee 	bl	8000534 <__aeabi_i2d>
 8006958:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800695c:	f7f9 ff7e 	bl	800085c <__aeabi_ddiv>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8006968:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	b21a      	sxth	r2, r3
 8006970:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8006974:	b21b      	sxth	r3, r3
 8006976:	4313      	orrs	r3, r2
 8006978:	b21b      	sxth	r3, r3
 800697a:	4618      	mov	r0, r3
 800697c:	f7f9 fdda 	bl	8000534 <__aeabi_i2d>
 8006980:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006984:	f7f9 ff6a 	bl	800085c <__aeabi_ddiv>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8006990:	e03b      	b.n	8006a0a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8006992:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	b21a      	sxth	r2, r3
 800699a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800699e:	b21b      	sxth	r3, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7f9 fdc5 	bl	8000534 <__aeabi_i2d>
 80069aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80069ae:	f7f9 ff55 	bl	800085c <__aeabi_ddiv>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80069ba:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	b21a      	sxth	r2, r3
 80069c2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80069c6:	b21b      	sxth	r3, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b21b      	sxth	r3, r3
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7f9 fdb1 	bl	8000534 <__aeabi_i2d>
 80069d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80069d6:	f7f9 ff41 	bl	800085c <__aeabi_ddiv>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80069e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	b21a      	sxth	r2, r3
 80069ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80069ee:	b21b      	sxth	r3, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b21b      	sxth	r3, r3
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7f9 fd9d 	bl	8000534 <__aeabi_i2d>
 80069fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80069fe:	f7f9 ff2d 	bl	800085c <__aeabi_ddiv>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8006a0a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8006a0e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8006a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006a1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006a22:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8006a26:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8006a2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006a2e:	ec49 8b14 	vmov	d4, r8, r9
 8006a32:	ec45 4b15 	vmov	d5, r4, r5
 8006a36:	ec41 0b16 	vmov	d6, r0, r1
 8006a3a:	ec43 2b17 	vmov	d7, r2, r3
}
 8006a3e:	eeb0 0a44 	vmov.f32	s0, s8
 8006a42:	eef0 0a64 	vmov.f32	s1, s9
 8006a46:	eeb0 1a45 	vmov.f32	s2, s10
 8006a4a:	eef0 1a65 	vmov.f32	s3, s11
 8006a4e:	eeb0 2a46 	vmov.f32	s4, s12
 8006a52:	eef0 2a66 	vmov.f32	s5, s13
 8006a56:	eeb0 3a47 	vmov.f32	s6, s14
 8006a5a:	eef0 3a67 	vmov.f32	s7, s15
 8006a5e:	3778      	adds	r7, #120	@ 0x78
 8006a60:	46bd      	mov	sp, r7
 8006a62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a66:	bf00      	nop
 8006a68:	3ff00000 	.word	0x3ff00000
 8006a6c:	20000010 	.word	0x20000010
 8006a70:	2000000a 	.word	0x2000000a
 8006a74:	2000000c 	.word	0x2000000c
 8006a78:	2000000e 	.word	0x2000000e
 8006a7c:	20000012 	.word	0x20000012

08006a80 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8006a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a84:	b090      	sub	sp, #64	@ 0x40
 8006a86:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8006a88:	201a      	movs	r0, #26
 8006a8a:	f7ff feb5 	bl	80067f8 <bno055_getVector>
 8006a8e:	eeb0 4a40 	vmov.f32	s8, s0
 8006a92:	eef0 4a60 	vmov.f32	s9, s1
 8006a96:	eeb0 5a41 	vmov.f32	s10, s2
 8006a9a:	eef0 5a61 	vmov.f32	s11, s3
 8006a9e:	eeb0 6a42 	vmov.f32	s12, s4
 8006aa2:	eef0 6a62 	vmov.f32	s13, s5
 8006aa6:	eeb0 7a43 	vmov.f32	s14, s6
 8006aaa:	eef0 7a63 	vmov.f32	s15, s7
 8006aae:	ed87 4b08 	vstr	d4, [r7, #32]
 8006ab2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8006ab6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8006aba:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8006abe:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ac2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8006ac6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006aca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ace:	ec49 8b14 	vmov	d4, r8, r9
 8006ad2:	ec45 4b15 	vmov	d5, r4, r5
 8006ad6:	ec41 0b16 	vmov	d6, r0, r1
 8006ada:	ec43 2b17 	vmov	d7, r2, r3
}
 8006ade:	eeb0 0a44 	vmov.f32	s0, s8
 8006ae2:	eef0 0a64 	vmov.f32	s1, s9
 8006ae6:	eeb0 1a45 	vmov.f32	s2, s10
 8006aea:	eef0 1a65 	vmov.f32	s3, s11
 8006aee:	eeb0 2a46 	vmov.f32	s4, s12
 8006af2:	eef0 2a66 	vmov.f32	s5, s13
 8006af6:	eeb0 3a47 	vmov.f32	s6, s14
 8006afa:	eef0 3a67 	vmov.f32	s7, s15
 8006afe:	3740      	adds	r7, #64	@ 0x40
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08006b06 <atof>:
 8006b06:	2100      	movs	r1, #0
 8006b08:	f000 be08 	b.w	800771c <strtod>

08006b0c <sulp>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4604      	mov	r4, r0
 8006b10:	460d      	mov	r5, r1
 8006b12:	ec45 4b10 	vmov	d0, r4, r5
 8006b16:	4616      	mov	r6, r2
 8006b18:	f003 fdd6 	bl	800a6c8 <__ulp>
 8006b1c:	ec51 0b10 	vmov	r0, r1, d0
 8006b20:	b17e      	cbz	r6, 8006b42 <sulp+0x36>
 8006b22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd09      	ble.n	8006b42 <sulp+0x36>
 8006b2e:	051b      	lsls	r3, r3, #20
 8006b30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b34:	2400      	movs	r4, #0
 8006b36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f7f9 fd63 	bl	8000608 <__aeabi_dmul>
 8006b42:	ec41 0b10 	vmov	d0, r0, r1
 8006b46:	bd70      	pop	{r4, r5, r6, pc}

08006b48 <_strtod_l>:
 8006b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	b09f      	sub	sp, #124	@ 0x7c
 8006b4e:	460c      	mov	r4, r1
 8006b50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b52:	2200      	movs	r2, #0
 8006b54:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b56:	9005      	str	r0, [sp, #20]
 8006b58:	f04f 0a00 	mov.w	sl, #0
 8006b5c:	f04f 0b00 	mov.w	fp, #0
 8006b60:	460a      	mov	r2, r1
 8006b62:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b64:	7811      	ldrb	r1, [r2, #0]
 8006b66:	292b      	cmp	r1, #43	@ 0x2b
 8006b68:	d04a      	beq.n	8006c00 <_strtod_l+0xb8>
 8006b6a:	d838      	bhi.n	8006bde <_strtod_l+0x96>
 8006b6c:	290d      	cmp	r1, #13
 8006b6e:	d832      	bhi.n	8006bd6 <_strtod_l+0x8e>
 8006b70:	2908      	cmp	r1, #8
 8006b72:	d832      	bhi.n	8006bda <_strtod_l+0x92>
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d03b      	beq.n	8006bf0 <_strtod_l+0xa8>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b7e:	782a      	ldrb	r2, [r5, #0]
 8006b80:	2a30      	cmp	r2, #48	@ 0x30
 8006b82:	f040 80b3 	bne.w	8006cec <_strtod_l+0x1a4>
 8006b86:	786a      	ldrb	r2, [r5, #1]
 8006b88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b8c:	2a58      	cmp	r2, #88	@ 0x58
 8006b8e:	d16e      	bne.n	8006c6e <_strtod_l+0x126>
 8006b90:	9302      	str	r3, [sp, #8]
 8006b92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4a8e      	ldr	r2, [pc, #568]	@ (8006dd4 <_strtod_l+0x28c>)
 8006b9c:	9805      	ldr	r0, [sp, #20]
 8006b9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006ba0:	a919      	add	r1, sp, #100	@ 0x64
 8006ba2:	f002 fe83 	bl	80098ac <__gethex>
 8006ba6:	f010 060f 	ands.w	r6, r0, #15
 8006baa:	4604      	mov	r4, r0
 8006bac:	d005      	beq.n	8006bba <_strtod_l+0x72>
 8006bae:	2e06      	cmp	r6, #6
 8006bb0:	d128      	bne.n	8006c04 <_strtod_l+0xbc>
 8006bb2:	3501      	adds	r5, #1
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 858e 	bne.w	80076de <_strtod_l+0xb96>
 8006bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc4:	b1cb      	cbz	r3, 8006bfa <_strtod_l+0xb2>
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006bcc:	ec43 2b10 	vmov	d0, r2, r3
 8006bd0:	b01f      	add	sp, #124	@ 0x7c
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	2920      	cmp	r1, #32
 8006bd8:	d1ce      	bne.n	8006b78 <_strtod_l+0x30>
 8006bda:	3201      	adds	r2, #1
 8006bdc:	e7c1      	b.n	8006b62 <_strtod_l+0x1a>
 8006bde:	292d      	cmp	r1, #45	@ 0x2d
 8006be0:	d1ca      	bne.n	8006b78 <_strtod_l+0x30>
 8006be2:	2101      	movs	r1, #1
 8006be4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006be6:	1c51      	adds	r1, r2, #1
 8006be8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006bea:	7852      	ldrb	r2, [r2, #1]
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d1c5      	bne.n	8006b7c <_strtod_l+0x34>
 8006bf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bf2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8570 	bne.w	80076da <_strtod_l+0xb92>
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	e7e5      	b.n	8006bcc <_strtod_l+0x84>
 8006c00:	2100      	movs	r1, #0
 8006c02:	e7ef      	b.n	8006be4 <_strtod_l+0x9c>
 8006c04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c06:	b13a      	cbz	r2, 8006c18 <_strtod_l+0xd0>
 8006c08:	2135      	movs	r1, #53	@ 0x35
 8006c0a:	a81c      	add	r0, sp, #112	@ 0x70
 8006c0c:	f003 fe56 	bl	800a8bc <__copybits>
 8006c10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c12:	9805      	ldr	r0, [sp, #20]
 8006c14:	f003 fa24 	bl	800a060 <_Bfree>
 8006c18:	3e01      	subs	r6, #1
 8006c1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c1c:	2e04      	cmp	r6, #4
 8006c1e:	d806      	bhi.n	8006c2e <_strtod_l+0xe6>
 8006c20:	e8df f006 	tbb	[pc, r6]
 8006c24:	201d0314 	.word	0x201d0314
 8006c28:	14          	.byte	0x14
 8006c29:	00          	.byte	0x00
 8006c2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c2e:	05e1      	lsls	r1, r4, #23
 8006c30:	bf48      	it	mi
 8006c32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c3a:	0d1b      	lsrs	r3, r3, #20
 8006c3c:	051b      	lsls	r3, r3, #20
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1bb      	bne.n	8006bba <_strtod_l+0x72>
 8006c42:	f001 fecd 	bl	80089e0 <__errno>
 8006c46:	2322      	movs	r3, #34	@ 0x22
 8006c48:	6003      	str	r3, [r0, #0]
 8006c4a:	e7b6      	b.n	8006bba <_strtod_l+0x72>
 8006c4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c5c:	e7e7      	b.n	8006c2e <_strtod_l+0xe6>
 8006c5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006ddc <_strtod_l+0x294>
 8006c62:	e7e4      	b.n	8006c2e <_strtod_l+0xe6>
 8006c64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c68:	f04f 3aff 	mov.w	sl, #4294967295
 8006c6c:	e7df      	b.n	8006c2e <_strtod_l+0xe6>
 8006c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b30      	cmp	r3, #48	@ 0x30
 8006c78:	d0f9      	beq.n	8006c6e <_strtod_l+0x126>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d09d      	beq.n	8006bba <_strtod_l+0x72>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c86:	2300      	movs	r3, #0
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c8c:	461f      	mov	r7, r3
 8006c8e:	220a      	movs	r2, #10
 8006c90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c92:	7805      	ldrb	r5, [r0, #0]
 8006c94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c98:	b2d9      	uxtb	r1, r3
 8006c9a:	2909      	cmp	r1, #9
 8006c9c:	d928      	bls.n	8006cf0 <_strtod_l+0x1a8>
 8006c9e:	494e      	ldr	r1, [pc, #312]	@ (8006dd8 <_strtod_l+0x290>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f001 fde5 	bl	8008870 <strncmp>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d032      	beq.n	8006d10 <_strtod_l+0x1c8>
 8006caa:	2000      	movs	r0, #0
 8006cac:	462a      	mov	r2, r5
 8006cae:	4681      	mov	r9, r0
 8006cb0:	463d      	mov	r5, r7
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2a65      	cmp	r2, #101	@ 0x65
 8006cb6:	d001      	beq.n	8006cbc <_strtod_l+0x174>
 8006cb8:	2a45      	cmp	r2, #69	@ 0x45
 8006cba:	d114      	bne.n	8006ce6 <_strtod_l+0x19e>
 8006cbc:	b91d      	cbnz	r5, 8006cc6 <_strtod_l+0x17e>
 8006cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc0:	4302      	orrs	r2, r0
 8006cc2:	d095      	beq.n	8006bf0 <_strtod_l+0xa8>
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006cc8:	1c62      	adds	r2, r4, #1
 8006cca:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ccc:	7862      	ldrb	r2, [r4, #1]
 8006cce:	2a2b      	cmp	r2, #43	@ 0x2b
 8006cd0:	d077      	beq.n	8006dc2 <_strtod_l+0x27a>
 8006cd2:	2a2d      	cmp	r2, #45	@ 0x2d
 8006cd4:	d07b      	beq.n	8006dce <_strtod_l+0x286>
 8006cd6:	f04f 0c00 	mov.w	ip, #0
 8006cda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006cde:	2909      	cmp	r1, #9
 8006ce0:	f240 8082 	bls.w	8006de8 <_strtod_l+0x2a0>
 8006ce4:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ce6:	f04f 0800 	mov.w	r8, #0
 8006cea:	e0a2      	b.n	8006e32 <_strtod_l+0x2ea>
 8006cec:	2300      	movs	r3, #0
 8006cee:	e7c7      	b.n	8006c80 <_strtod_l+0x138>
 8006cf0:	2f08      	cmp	r7, #8
 8006cf2:	bfd5      	itete	le
 8006cf4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006cf6:	9908      	ldrgt	r1, [sp, #32]
 8006cf8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cfc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d00:	f100 0001 	add.w	r0, r0, #1
 8006d04:	bfd4      	ite	le
 8006d06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d08:	9308      	strgt	r3, [sp, #32]
 8006d0a:	3701      	adds	r7, #1
 8006d0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d0e:	e7bf      	b.n	8006c90 <_strtod_l+0x148>
 8006d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d16:	785a      	ldrb	r2, [r3, #1]
 8006d18:	b37f      	cbz	r7, 8006d7a <_strtod_l+0x232>
 8006d1a:	4681      	mov	r9, r0
 8006d1c:	463d      	mov	r5, r7
 8006d1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d22:	2b09      	cmp	r3, #9
 8006d24:	d912      	bls.n	8006d4c <_strtod_l+0x204>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e7c4      	b.n	8006cb4 <_strtod_l+0x16c>
 8006d2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d30:	785a      	ldrb	r2, [r3, #1]
 8006d32:	3001      	adds	r0, #1
 8006d34:	2a30      	cmp	r2, #48	@ 0x30
 8006d36:	d0f8      	beq.n	8006d2a <_strtod_l+0x1e2>
 8006d38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	f200 84d3 	bhi.w	80076e8 <_strtod_l+0xba0>
 8006d42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d44:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d46:	4681      	mov	r9, r0
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	3a30      	subs	r2, #48	@ 0x30
 8006d4e:	f100 0301 	add.w	r3, r0, #1
 8006d52:	d02a      	beq.n	8006daa <_strtod_l+0x262>
 8006d54:	4499      	add	r9, r3
 8006d56:	eb00 0c05 	add.w	ip, r0, r5
 8006d5a:	462b      	mov	r3, r5
 8006d5c:	210a      	movs	r1, #10
 8006d5e:	4563      	cmp	r3, ip
 8006d60:	d10d      	bne.n	8006d7e <_strtod_l+0x236>
 8006d62:	1c69      	adds	r1, r5, #1
 8006d64:	4401      	add	r1, r0
 8006d66:	4428      	add	r0, r5
 8006d68:	2808      	cmp	r0, #8
 8006d6a:	dc16      	bgt.n	8006d9a <_strtod_l+0x252>
 8006d6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d6e:	230a      	movs	r3, #10
 8006d70:	fb03 2300 	mla	r3, r3, r0, r2
 8006d74:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d76:	2300      	movs	r3, #0
 8006d78:	e018      	b.n	8006dac <_strtod_l+0x264>
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	e7da      	b.n	8006d34 <_strtod_l+0x1ec>
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	f103 0301 	add.w	r3, r3, #1
 8006d84:	dc03      	bgt.n	8006d8e <_strtod_l+0x246>
 8006d86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d88:	434e      	muls	r6, r1
 8006d8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006d8c:	e7e7      	b.n	8006d5e <_strtod_l+0x216>
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	bfde      	ittt	le
 8006d92:	9e08      	ldrle	r6, [sp, #32]
 8006d94:	434e      	mulle	r6, r1
 8006d96:	9608      	strle	r6, [sp, #32]
 8006d98:	e7e1      	b.n	8006d5e <_strtod_l+0x216>
 8006d9a:	280f      	cmp	r0, #15
 8006d9c:	dceb      	bgt.n	8006d76 <_strtod_l+0x22e>
 8006d9e:	9808      	ldr	r0, [sp, #32]
 8006da0:	230a      	movs	r3, #10
 8006da2:	fb03 2300 	mla	r3, r3, r0, r2
 8006da6:	9308      	str	r3, [sp, #32]
 8006da8:	e7e5      	b.n	8006d76 <_strtod_l+0x22e>
 8006daa:	4629      	mov	r1, r5
 8006dac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dae:	1c50      	adds	r0, r2, #1
 8006db0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006db2:	7852      	ldrb	r2, [r2, #1]
 8006db4:	4618      	mov	r0, r3
 8006db6:	460d      	mov	r5, r1
 8006db8:	e7b1      	b.n	8006d1e <_strtod_l+0x1d6>
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e77d      	b.n	8006cbe <_strtod_l+0x176>
 8006dc2:	f04f 0c00 	mov.w	ip, #0
 8006dc6:	1ca2      	adds	r2, r4, #2
 8006dc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dca:	78a2      	ldrb	r2, [r4, #2]
 8006dcc:	e785      	b.n	8006cda <_strtod_l+0x192>
 8006dce:	f04f 0c01 	mov.w	ip, #1
 8006dd2:	e7f8      	b.n	8006dc6 <_strtod_l+0x27e>
 8006dd4:	0800b850 	.word	0x0800b850
 8006dd8:	0800b838 	.word	0x0800b838
 8006ddc:	7ff00000 	.word	0x7ff00000
 8006de0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006de2:	1c51      	adds	r1, r2, #1
 8006de4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006de6:	7852      	ldrb	r2, [r2, #1]
 8006de8:	2a30      	cmp	r2, #48	@ 0x30
 8006dea:	d0f9      	beq.n	8006de0 <_strtod_l+0x298>
 8006dec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006df0:	2908      	cmp	r1, #8
 8006df2:	f63f af78 	bhi.w	8006ce6 <_strtod_l+0x19e>
 8006df6:	3a30      	subs	r2, #48	@ 0x30
 8006df8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006dfe:	f04f 080a 	mov.w	r8, #10
 8006e02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e04:	1c56      	adds	r6, r2, #1
 8006e06:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e08:	7852      	ldrb	r2, [r2, #1]
 8006e0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e0e:	f1be 0f09 	cmp.w	lr, #9
 8006e12:	d939      	bls.n	8006e88 <_strtod_l+0x340>
 8006e14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e16:	1a76      	subs	r6, r6, r1
 8006e18:	2e08      	cmp	r6, #8
 8006e1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e1e:	dc03      	bgt.n	8006e28 <_strtod_l+0x2e0>
 8006e20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e22:	4588      	cmp	r8, r1
 8006e24:	bfa8      	it	ge
 8006e26:	4688      	movge	r8, r1
 8006e28:	f1bc 0f00 	cmp.w	ip, #0
 8006e2c:	d001      	beq.n	8006e32 <_strtod_l+0x2ea>
 8006e2e:	f1c8 0800 	rsb	r8, r8, #0
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	d14e      	bne.n	8006ed4 <_strtod_l+0x38c>
 8006e36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e38:	4308      	orrs	r0, r1
 8006e3a:	f47f aebe 	bne.w	8006bba <_strtod_l+0x72>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f47f aed6 	bne.w	8006bf0 <_strtod_l+0xa8>
 8006e44:	2a69      	cmp	r2, #105	@ 0x69
 8006e46:	d028      	beq.n	8006e9a <_strtod_l+0x352>
 8006e48:	dc25      	bgt.n	8006e96 <_strtod_l+0x34e>
 8006e4a:	2a49      	cmp	r2, #73	@ 0x49
 8006e4c:	d025      	beq.n	8006e9a <_strtod_l+0x352>
 8006e4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e50:	f47f aece 	bne.w	8006bf0 <_strtod_l+0xa8>
 8006e54:	499b      	ldr	r1, [pc, #620]	@ (80070c4 <_strtod_l+0x57c>)
 8006e56:	a819      	add	r0, sp, #100	@ 0x64
 8006e58:	f002 ff4a 	bl	8009cf0 <__match>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f43f aec7 	beq.w	8006bf0 <_strtod_l+0xa8>
 8006e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b28      	cmp	r3, #40	@ 0x28
 8006e68:	d12e      	bne.n	8006ec8 <_strtod_l+0x380>
 8006e6a:	4997      	ldr	r1, [pc, #604]	@ (80070c8 <_strtod_l+0x580>)
 8006e6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e6e:	a819      	add	r0, sp, #100	@ 0x64
 8006e70:	f002 ff52 	bl	8009d18 <__hexnan>
 8006e74:	2805      	cmp	r0, #5
 8006e76:	d127      	bne.n	8006ec8 <_strtod_l+0x380>
 8006e78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e86:	e698      	b.n	8006bba <_strtod_l+0x72>
 8006e88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e8a:	fb08 2101 	mla	r1, r8, r1, r2
 8006e8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e92:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e94:	e7b5      	b.n	8006e02 <_strtod_l+0x2ba>
 8006e96:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e98:	e7da      	b.n	8006e50 <_strtod_l+0x308>
 8006e9a:	498c      	ldr	r1, [pc, #560]	@ (80070cc <_strtod_l+0x584>)
 8006e9c:	a819      	add	r0, sp, #100	@ 0x64
 8006e9e:	f002 ff27 	bl	8009cf0 <__match>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f43f aea4 	beq.w	8006bf0 <_strtod_l+0xa8>
 8006ea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eaa:	4989      	ldr	r1, [pc, #548]	@ (80070d0 <_strtod_l+0x588>)
 8006eac:	3b01      	subs	r3, #1
 8006eae:	a819      	add	r0, sp, #100	@ 0x64
 8006eb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006eb2:	f002 ff1d 	bl	8009cf0 <__match>
 8006eb6:	b910      	cbnz	r0, 8006ebe <_strtod_l+0x376>
 8006eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eba:	3301      	adds	r3, #1
 8006ebc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ebe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80070e0 <_strtod_l+0x598>
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	e678      	b.n	8006bba <_strtod_l+0x72>
 8006ec8:	4882      	ldr	r0, [pc, #520]	@ (80070d4 <_strtod_l+0x58c>)
 8006eca:	f001 fdc5 	bl	8008a58 <nan>
 8006ece:	ec5b ab10 	vmov	sl, fp, d0
 8006ed2:	e672      	b.n	8006bba <_strtod_l+0x72>
 8006ed4:	eba8 0309 	sub.w	r3, r8, r9
 8006ed8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	bf08      	it	eq
 8006ee0:	462f      	moveq	r7, r5
 8006ee2:	2d10      	cmp	r5, #16
 8006ee4:	462c      	mov	r4, r5
 8006ee6:	bfa8      	it	ge
 8006ee8:	2410      	movge	r4, #16
 8006eea:	f7f9 fb13 	bl	8000514 <__aeabi_ui2d>
 8006eee:	2d09      	cmp	r5, #9
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	468b      	mov	fp, r1
 8006ef4:	dc13      	bgt.n	8006f1e <_strtod_l+0x3d6>
 8006ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f43f ae5e 	beq.w	8006bba <_strtod_l+0x72>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	dd78      	ble.n	8006ff4 <_strtod_l+0x4ac>
 8006f02:	2b16      	cmp	r3, #22
 8006f04:	dc5f      	bgt.n	8006fc6 <_strtod_l+0x47e>
 8006f06:	4974      	ldr	r1, [pc, #464]	@ (80070d8 <_strtod_l+0x590>)
 8006f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f10:	4652      	mov	r2, sl
 8006f12:	465b      	mov	r3, fp
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	4682      	mov	sl, r0
 8006f1a:	468b      	mov	fp, r1
 8006f1c:	e64d      	b.n	8006bba <_strtod_l+0x72>
 8006f1e:	4b6e      	ldr	r3, [pc, #440]	@ (80070d8 <_strtod_l+0x590>)
 8006f20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f28:	f7f9 fb6e 	bl	8000608 <__aeabi_dmul>
 8006f2c:	4682      	mov	sl, r0
 8006f2e:	9808      	ldr	r0, [sp, #32]
 8006f30:	468b      	mov	fp, r1
 8006f32:	f7f9 faef 	bl	8000514 <__aeabi_ui2d>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	f7f9 f9ad 	bl	800029c <__adddf3>
 8006f42:	2d0f      	cmp	r5, #15
 8006f44:	4682      	mov	sl, r0
 8006f46:	468b      	mov	fp, r1
 8006f48:	ddd5      	ble.n	8006ef6 <_strtod_l+0x3ae>
 8006f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4c:	1b2c      	subs	r4, r5, r4
 8006f4e:	441c      	add	r4, r3
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	f340 8096 	ble.w	8007082 <_strtod_l+0x53a>
 8006f56:	f014 030f 	ands.w	r3, r4, #15
 8006f5a:	d00a      	beq.n	8006f72 <_strtod_l+0x42a>
 8006f5c:	495e      	ldr	r1, [pc, #376]	@ (80070d8 <_strtod_l+0x590>)
 8006f5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	f7f9 fb4d 	bl	8000608 <__aeabi_dmul>
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	f034 040f 	bics.w	r4, r4, #15
 8006f76:	d073      	beq.n	8007060 <_strtod_l+0x518>
 8006f78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f7c:	dd48      	ble.n	8007010 <_strtod_l+0x4c8>
 8006f7e:	2400      	movs	r4, #0
 8006f80:	46a0      	mov	r8, r4
 8006f82:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f84:	46a1      	mov	r9, r4
 8006f86:	9a05      	ldr	r2, [sp, #20]
 8006f88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80070e0 <_strtod_l+0x598>
 8006f8c:	2322      	movs	r3, #34	@ 0x22
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f43f ae0f 	beq.w	8006bba <_strtod_l+0x72>
 8006f9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f9e:	9805      	ldr	r0, [sp, #20]
 8006fa0:	f003 f85e 	bl	800a060 <_Bfree>
 8006fa4:	9805      	ldr	r0, [sp, #20]
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f003 f85a 	bl	800a060 <_Bfree>
 8006fac:	9805      	ldr	r0, [sp, #20]
 8006fae:	4641      	mov	r1, r8
 8006fb0:	f003 f856 	bl	800a060 <_Bfree>
 8006fb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fb6:	9805      	ldr	r0, [sp, #20]
 8006fb8:	f003 f852 	bl	800a060 <_Bfree>
 8006fbc:	9805      	ldr	r0, [sp, #20]
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	f003 f84e 	bl	800a060 <_Bfree>
 8006fc4:	e5f9      	b.n	8006bba <_strtod_l+0x72>
 8006fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	dbbc      	blt.n	8006f4a <_strtod_l+0x402>
 8006fd0:	4c41      	ldr	r4, [pc, #260]	@ (80070d8 <_strtod_l+0x590>)
 8006fd2:	f1c5 050f 	rsb	r5, r5, #15
 8006fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	1b5d      	subs	r5, r3, r5
 8006fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ff2:	e78f      	b.n	8006f14 <_strtod_l+0x3cc>
 8006ff4:	3316      	adds	r3, #22
 8006ff6:	dba8      	blt.n	8006f4a <_strtod_l+0x402>
 8006ff8:	4b37      	ldr	r3, [pc, #220]	@ (80070d8 <_strtod_l+0x590>)
 8006ffa:	eba9 0808 	sub.w	r8, r9, r8
 8006ffe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007002:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007006:	4650      	mov	r0, sl
 8007008:	4659      	mov	r1, fp
 800700a:	f7f9 fc27 	bl	800085c <__aeabi_ddiv>
 800700e:	e783      	b.n	8006f18 <_strtod_l+0x3d0>
 8007010:	4b32      	ldr	r3, [pc, #200]	@ (80070dc <_strtod_l+0x594>)
 8007012:	9308      	str	r3, [sp, #32]
 8007014:	2300      	movs	r3, #0
 8007016:	1124      	asrs	r4, r4, #4
 8007018:	4650      	mov	r0, sl
 800701a:	4659      	mov	r1, fp
 800701c:	461e      	mov	r6, r3
 800701e:	2c01      	cmp	r4, #1
 8007020:	dc21      	bgt.n	8007066 <_strtod_l+0x51e>
 8007022:	b10b      	cbz	r3, 8007028 <_strtod_l+0x4e0>
 8007024:	4682      	mov	sl, r0
 8007026:	468b      	mov	fp, r1
 8007028:	492c      	ldr	r1, [pc, #176]	@ (80070dc <_strtod_l+0x594>)
 800702a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800702e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703a:	f7f9 fae5 	bl	8000608 <__aeabi_dmul>
 800703e:	4b28      	ldr	r3, [pc, #160]	@ (80070e0 <_strtod_l+0x598>)
 8007040:	460a      	mov	r2, r1
 8007042:	400b      	ands	r3, r1
 8007044:	4927      	ldr	r1, [pc, #156]	@ (80070e4 <_strtod_l+0x59c>)
 8007046:	428b      	cmp	r3, r1
 8007048:	4682      	mov	sl, r0
 800704a:	d898      	bhi.n	8006f7e <_strtod_l+0x436>
 800704c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007050:	428b      	cmp	r3, r1
 8007052:	bf86      	itte	hi
 8007054:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80070e8 <_strtod_l+0x5a0>
 8007058:	f04f 3aff 	movhi.w	sl, #4294967295
 800705c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007060:	2300      	movs	r3, #0
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	e07a      	b.n	800715c <_strtod_l+0x614>
 8007066:	07e2      	lsls	r2, r4, #31
 8007068:	d505      	bpl.n	8007076 <_strtod_l+0x52e>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f7f9 faca 	bl	8000608 <__aeabi_dmul>
 8007074:	2301      	movs	r3, #1
 8007076:	9a08      	ldr	r2, [sp, #32]
 8007078:	3208      	adds	r2, #8
 800707a:	3601      	adds	r6, #1
 800707c:	1064      	asrs	r4, r4, #1
 800707e:	9208      	str	r2, [sp, #32]
 8007080:	e7cd      	b.n	800701e <_strtod_l+0x4d6>
 8007082:	d0ed      	beq.n	8007060 <_strtod_l+0x518>
 8007084:	4264      	negs	r4, r4
 8007086:	f014 020f 	ands.w	r2, r4, #15
 800708a:	d00a      	beq.n	80070a2 <_strtod_l+0x55a>
 800708c:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <_strtod_l+0x590>)
 800708e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007092:	4650      	mov	r0, sl
 8007094:	4659      	mov	r1, fp
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 fbdf 	bl	800085c <__aeabi_ddiv>
 800709e:	4682      	mov	sl, r0
 80070a0:	468b      	mov	fp, r1
 80070a2:	1124      	asrs	r4, r4, #4
 80070a4:	d0dc      	beq.n	8007060 <_strtod_l+0x518>
 80070a6:	2c1f      	cmp	r4, #31
 80070a8:	dd20      	ble.n	80070ec <_strtod_l+0x5a4>
 80070aa:	2400      	movs	r4, #0
 80070ac:	46a0      	mov	r8, r4
 80070ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80070b0:	46a1      	mov	r9, r4
 80070b2:	9a05      	ldr	r2, [sp, #20]
 80070b4:	2322      	movs	r3, #34	@ 0x22
 80070b6:	f04f 0a00 	mov.w	sl, #0
 80070ba:	f04f 0b00 	mov.w	fp, #0
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e768      	b.n	8006f94 <_strtod_l+0x44c>
 80070c2:	bf00      	nop
 80070c4:	0800b89d 	.word	0x0800b89d
 80070c8:	0800b83c 	.word	0x0800b83c
 80070cc:	0800b895 	.word	0x0800b895
 80070d0:	0800b981 	.word	0x0800b981
 80070d4:	0800b97d 	.word	0x0800b97d
 80070d8:	0800bae8 	.word	0x0800bae8
 80070dc:	0800bac0 	.word	0x0800bac0
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	7ca00000 	.word	0x7ca00000
 80070e8:	7fefffff 	.word	0x7fefffff
 80070ec:	f014 0310 	ands.w	r3, r4, #16
 80070f0:	bf18      	it	ne
 80070f2:	236a      	movne	r3, #106	@ 0x6a
 80070f4:	4ea9      	ldr	r6, [pc, #676]	@ (800739c <_strtod_l+0x854>)
 80070f6:	9308      	str	r3, [sp, #32]
 80070f8:	4650      	mov	r0, sl
 80070fa:	4659      	mov	r1, fp
 80070fc:	2300      	movs	r3, #0
 80070fe:	07e2      	lsls	r2, r4, #31
 8007100:	d504      	bpl.n	800710c <_strtod_l+0x5c4>
 8007102:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007106:	f7f9 fa7f 	bl	8000608 <__aeabi_dmul>
 800710a:	2301      	movs	r3, #1
 800710c:	1064      	asrs	r4, r4, #1
 800710e:	f106 0608 	add.w	r6, r6, #8
 8007112:	d1f4      	bne.n	80070fe <_strtod_l+0x5b6>
 8007114:	b10b      	cbz	r3, 800711a <_strtod_l+0x5d2>
 8007116:	4682      	mov	sl, r0
 8007118:	468b      	mov	fp, r1
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	b1b3      	cbz	r3, 800714c <_strtod_l+0x604>
 800711e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007122:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007126:	2b00      	cmp	r3, #0
 8007128:	4659      	mov	r1, fp
 800712a:	dd0f      	ble.n	800714c <_strtod_l+0x604>
 800712c:	2b1f      	cmp	r3, #31
 800712e:	dd55      	ble.n	80071dc <_strtod_l+0x694>
 8007130:	2b34      	cmp	r3, #52	@ 0x34
 8007132:	bfde      	ittt	le
 8007134:	f04f 33ff 	movle.w	r3, #4294967295
 8007138:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800713c:	4093      	lslle	r3, r2
 800713e:	f04f 0a00 	mov.w	sl, #0
 8007142:	bfcc      	ite	gt
 8007144:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007148:	ea03 0b01 	andle.w	fp, r3, r1
 800714c:	2200      	movs	r2, #0
 800714e:	2300      	movs	r3, #0
 8007150:	4650      	mov	r0, sl
 8007152:	4659      	mov	r1, fp
 8007154:	f7f9 fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007158:	2800      	cmp	r0, #0
 800715a:	d1a6      	bne.n	80070aa <_strtod_l+0x562>
 800715c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007162:	9805      	ldr	r0, [sp, #20]
 8007164:	462b      	mov	r3, r5
 8007166:	463a      	mov	r2, r7
 8007168:	f002 ffe2 	bl	800a130 <__s2b>
 800716c:	900a      	str	r0, [sp, #40]	@ 0x28
 800716e:	2800      	cmp	r0, #0
 8007170:	f43f af05 	beq.w	8006f7e <_strtod_l+0x436>
 8007174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007176:	2a00      	cmp	r2, #0
 8007178:	eba9 0308 	sub.w	r3, r9, r8
 800717c:	bfa8      	it	ge
 800717e:	2300      	movge	r3, #0
 8007180:	9312      	str	r3, [sp, #72]	@ 0x48
 8007182:	2400      	movs	r4, #0
 8007184:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007188:	9316      	str	r3, [sp, #88]	@ 0x58
 800718a:	46a0      	mov	r8, r4
 800718c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718e:	9805      	ldr	r0, [sp, #20]
 8007190:	6859      	ldr	r1, [r3, #4]
 8007192:	f002 ff25 	bl	8009fe0 <_Balloc>
 8007196:	4681      	mov	r9, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	f43f aef4 	beq.w	8006f86 <_strtod_l+0x43e>
 800719e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	3202      	adds	r2, #2
 80071a4:	f103 010c 	add.w	r1, r3, #12
 80071a8:	0092      	lsls	r2, r2, #2
 80071aa:	300c      	adds	r0, #12
 80071ac:	f001 fc45 	bl	8008a3a <memcpy>
 80071b0:	ec4b ab10 	vmov	d0, sl, fp
 80071b4:	9805      	ldr	r0, [sp, #20]
 80071b6:	aa1c      	add	r2, sp, #112	@ 0x70
 80071b8:	a91b      	add	r1, sp, #108	@ 0x6c
 80071ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80071be:	f003 faf3 	bl	800a7a8 <__d2b>
 80071c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f aede 	beq.w	8006f86 <_strtod_l+0x43e>
 80071ca:	9805      	ldr	r0, [sp, #20]
 80071cc:	2101      	movs	r1, #1
 80071ce:	f003 f845 	bl	800a25c <__i2b>
 80071d2:	4680      	mov	r8, r0
 80071d4:	b948      	cbnz	r0, 80071ea <_strtod_l+0x6a2>
 80071d6:	f04f 0800 	mov.w	r8, #0
 80071da:	e6d4      	b.n	8006f86 <_strtod_l+0x43e>
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	ea03 0a0a 	and.w	sl, r3, sl
 80071e8:	e7b0      	b.n	800714c <_strtod_l+0x604>
 80071ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80071ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	bfab      	itete	ge
 80071f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80071f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80071f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80071f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80071fa:	bfac      	ite	ge
 80071fc:	18ef      	addge	r7, r5, r3
 80071fe:	1b5e      	sublt	r6, r3, r5
 8007200:	9b08      	ldr	r3, [sp, #32]
 8007202:	1aed      	subs	r5, r5, r3
 8007204:	4415      	add	r5, r2
 8007206:	4b66      	ldr	r3, [pc, #408]	@ (80073a0 <_strtod_l+0x858>)
 8007208:	3d01      	subs	r5, #1
 800720a:	429d      	cmp	r5, r3
 800720c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007210:	da50      	bge.n	80072b4 <_strtod_l+0x76c>
 8007212:	1b5b      	subs	r3, r3, r5
 8007214:	2b1f      	cmp	r3, #31
 8007216:	eba2 0203 	sub.w	r2, r2, r3
 800721a:	f04f 0101 	mov.w	r1, #1
 800721e:	dc3d      	bgt.n	800729c <_strtod_l+0x754>
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007226:	2300      	movs	r3, #0
 8007228:	9310      	str	r3, [sp, #64]	@ 0x40
 800722a:	18bd      	adds	r5, r7, r2
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	42af      	cmp	r7, r5
 8007230:	4416      	add	r6, r2
 8007232:	441e      	add	r6, r3
 8007234:	463b      	mov	r3, r7
 8007236:	bfa8      	it	ge
 8007238:	462b      	movge	r3, r5
 800723a:	42b3      	cmp	r3, r6
 800723c:	bfa8      	it	ge
 800723e:	4633      	movge	r3, r6
 8007240:	2b00      	cmp	r3, #0
 8007242:	bfc2      	ittt	gt
 8007244:	1aed      	subgt	r5, r5, r3
 8007246:	1af6      	subgt	r6, r6, r3
 8007248:	1aff      	subgt	r7, r7, r3
 800724a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800724c:	2b00      	cmp	r3, #0
 800724e:	dd16      	ble.n	800727e <_strtod_l+0x736>
 8007250:	4641      	mov	r1, r8
 8007252:	9805      	ldr	r0, [sp, #20]
 8007254:	461a      	mov	r2, r3
 8007256:	f003 f8c1 	bl	800a3dc <__pow5mult>
 800725a:	4680      	mov	r8, r0
 800725c:	2800      	cmp	r0, #0
 800725e:	d0ba      	beq.n	80071d6 <_strtod_l+0x68e>
 8007260:	4601      	mov	r1, r0
 8007262:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007264:	9805      	ldr	r0, [sp, #20]
 8007266:	f003 f80f 	bl	800a288 <__multiply>
 800726a:	900e      	str	r0, [sp, #56]	@ 0x38
 800726c:	2800      	cmp	r0, #0
 800726e:	f43f ae8a 	beq.w	8006f86 <_strtod_l+0x43e>
 8007272:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007274:	9805      	ldr	r0, [sp, #20]
 8007276:	f002 fef3 	bl	800a060 <_Bfree>
 800727a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800727c:	931a      	str	r3, [sp, #104]	@ 0x68
 800727e:	2d00      	cmp	r5, #0
 8007280:	dc1d      	bgt.n	80072be <_strtod_l+0x776>
 8007282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd23      	ble.n	80072d0 <_strtod_l+0x788>
 8007288:	4649      	mov	r1, r9
 800728a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	f003 f8a5 	bl	800a3dc <__pow5mult>
 8007292:	4681      	mov	r9, r0
 8007294:	b9e0      	cbnz	r0, 80072d0 <_strtod_l+0x788>
 8007296:	f04f 0900 	mov.w	r9, #0
 800729a:	e674      	b.n	8006f86 <_strtod_l+0x43e>
 800729c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80072a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80072a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80072a8:	35e2      	adds	r5, #226	@ 0xe2
 80072aa:	fa01 f305 	lsl.w	r3, r1, r5
 80072ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80072b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072b2:	e7ba      	b.n	800722a <_strtod_l+0x6e2>
 80072b4:	2300      	movs	r3, #0
 80072b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80072b8:	2301      	movs	r3, #1
 80072ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072bc:	e7b5      	b.n	800722a <_strtod_l+0x6e2>
 80072be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072c0:	9805      	ldr	r0, [sp, #20]
 80072c2:	462a      	mov	r2, r5
 80072c4:	f003 f8e4 	bl	800a490 <__lshift>
 80072c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d1d9      	bne.n	8007282 <_strtod_l+0x73a>
 80072ce:	e65a      	b.n	8006f86 <_strtod_l+0x43e>
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	dd07      	ble.n	80072e4 <_strtod_l+0x79c>
 80072d4:	4649      	mov	r1, r9
 80072d6:	9805      	ldr	r0, [sp, #20]
 80072d8:	4632      	mov	r2, r6
 80072da:	f003 f8d9 	bl	800a490 <__lshift>
 80072de:	4681      	mov	r9, r0
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d0d8      	beq.n	8007296 <_strtod_l+0x74e>
 80072e4:	2f00      	cmp	r7, #0
 80072e6:	dd08      	ble.n	80072fa <_strtod_l+0x7b2>
 80072e8:	4641      	mov	r1, r8
 80072ea:	9805      	ldr	r0, [sp, #20]
 80072ec:	463a      	mov	r2, r7
 80072ee:	f003 f8cf 	bl	800a490 <__lshift>
 80072f2:	4680      	mov	r8, r0
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f43f ae46 	beq.w	8006f86 <_strtod_l+0x43e>
 80072fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072fc:	9805      	ldr	r0, [sp, #20]
 80072fe:	464a      	mov	r2, r9
 8007300:	f003 f94e 	bl	800a5a0 <__mdiff>
 8007304:	4604      	mov	r4, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f ae3d 	beq.w	8006f86 <_strtod_l+0x43e>
 800730c:	68c3      	ldr	r3, [r0, #12]
 800730e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007310:	2300      	movs	r3, #0
 8007312:	60c3      	str	r3, [r0, #12]
 8007314:	4641      	mov	r1, r8
 8007316:	f003 f927 	bl	800a568 <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	da46      	bge.n	80073ac <_strtod_l+0x864>
 800731e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007320:	ea53 030a 	orrs.w	r3, r3, sl
 8007324:	d16c      	bne.n	8007400 <_strtod_l+0x8b8>
 8007326:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800732a:	2b00      	cmp	r3, #0
 800732c:	d168      	bne.n	8007400 <_strtod_l+0x8b8>
 800732e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007332:	0d1b      	lsrs	r3, r3, #20
 8007334:	051b      	lsls	r3, r3, #20
 8007336:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800733a:	d961      	bls.n	8007400 <_strtod_l+0x8b8>
 800733c:	6963      	ldr	r3, [r4, #20]
 800733e:	b913      	cbnz	r3, 8007346 <_strtod_l+0x7fe>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	2b01      	cmp	r3, #1
 8007344:	dd5c      	ble.n	8007400 <_strtod_l+0x8b8>
 8007346:	4621      	mov	r1, r4
 8007348:	2201      	movs	r2, #1
 800734a:	9805      	ldr	r0, [sp, #20]
 800734c:	f003 f8a0 	bl	800a490 <__lshift>
 8007350:	4641      	mov	r1, r8
 8007352:	4604      	mov	r4, r0
 8007354:	f003 f908 	bl	800a568 <__mcmp>
 8007358:	2800      	cmp	r0, #0
 800735a:	dd51      	ble.n	8007400 <_strtod_l+0x8b8>
 800735c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007360:	9a08      	ldr	r2, [sp, #32]
 8007362:	0d1b      	lsrs	r3, r3, #20
 8007364:	051b      	lsls	r3, r3, #20
 8007366:	2a00      	cmp	r2, #0
 8007368:	d06b      	beq.n	8007442 <_strtod_l+0x8fa>
 800736a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800736e:	d868      	bhi.n	8007442 <_strtod_l+0x8fa>
 8007370:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007374:	f67f ae9d 	bls.w	80070b2 <_strtod_l+0x56a>
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <_strtod_l+0x85c>)
 800737a:	4650      	mov	r0, sl
 800737c:	4659      	mov	r1, fp
 800737e:	2200      	movs	r2, #0
 8007380:	f7f9 f942 	bl	8000608 <__aeabi_dmul>
 8007384:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <_strtod_l+0x860>)
 8007386:	400b      	ands	r3, r1
 8007388:	4682      	mov	sl, r0
 800738a:	468b      	mov	fp, r1
 800738c:	2b00      	cmp	r3, #0
 800738e:	f47f ae05 	bne.w	8006f9c <_strtod_l+0x454>
 8007392:	9a05      	ldr	r2, [sp, #20]
 8007394:	2322      	movs	r3, #34	@ 0x22
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	e600      	b.n	8006f9c <_strtod_l+0x454>
 800739a:	bf00      	nop
 800739c:	0800b868 	.word	0x0800b868
 80073a0:	fffffc02 	.word	0xfffffc02
 80073a4:	39500000 	.word	0x39500000
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073b0:	d165      	bne.n	800747e <_strtod_l+0x936>
 80073b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073b8:	b35a      	cbz	r2, 8007412 <_strtod_l+0x8ca>
 80073ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007638 <_strtod_l+0xaf0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d12b      	bne.n	8007418 <_strtod_l+0x8d0>
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	4651      	mov	r1, sl
 80073c4:	b303      	cbz	r3, 8007408 <_strtod_l+0x8c0>
 80073c6:	4b9d      	ldr	r3, [pc, #628]	@ (800763c <_strtod_l+0xaf4>)
 80073c8:	465a      	mov	r2, fp
 80073ca:	4013      	ands	r3, r2
 80073cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295
 80073d4:	d81b      	bhi.n	800740e <_strtod_l+0x8c6>
 80073d6:	0d1b      	lsrs	r3, r3, #20
 80073d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	4299      	cmp	r1, r3
 80073e2:	d119      	bne.n	8007418 <_strtod_l+0x8d0>
 80073e4:	4b96      	ldr	r3, [pc, #600]	@ (8007640 <_strtod_l+0xaf8>)
 80073e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d102      	bne.n	80073f2 <_strtod_l+0x8aa>
 80073ec:	3101      	adds	r1, #1
 80073ee:	f43f adca 	beq.w	8006f86 <_strtod_l+0x43e>
 80073f2:	4b92      	ldr	r3, [pc, #584]	@ (800763c <_strtod_l+0xaf4>)
 80073f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073f6:	401a      	ands	r2, r3
 80073f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	9b08      	ldr	r3, [sp, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1b8      	bne.n	8007378 <_strtod_l+0x830>
 8007406:	e5c9      	b.n	8006f9c <_strtod_l+0x454>
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	e7e8      	b.n	80073e0 <_strtod_l+0x898>
 800740e:	4613      	mov	r3, r2
 8007410:	e7e6      	b.n	80073e0 <_strtod_l+0x898>
 8007412:	ea53 030a 	orrs.w	r3, r3, sl
 8007416:	d0a1      	beq.n	800735c <_strtod_l+0x814>
 8007418:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800741a:	b1db      	cbz	r3, 8007454 <_strtod_l+0x90c>
 800741c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800741e:	4213      	tst	r3, r2
 8007420:	d0ee      	beq.n	8007400 <_strtod_l+0x8b8>
 8007422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007424:	9a08      	ldr	r2, [sp, #32]
 8007426:	4650      	mov	r0, sl
 8007428:	4659      	mov	r1, fp
 800742a:	b1bb      	cbz	r3, 800745c <_strtod_l+0x914>
 800742c:	f7ff fb6e 	bl	8006b0c <sulp>
 8007430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007434:	ec53 2b10 	vmov	r2, r3, d0
 8007438:	f7f8 ff30 	bl	800029c <__adddf3>
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
 8007440:	e7de      	b.n	8007400 <_strtod_l+0x8b8>
 8007442:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007446:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800744a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800744e:	f04f 3aff 	mov.w	sl, #4294967295
 8007452:	e7d5      	b.n	8007400 <_strtod_l+0x8b8>
 8007454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007456:	ea13 0f0a 	tst.w	r3, sl
 800745a:	e7e1      	b.n	8007420 <_strtod_l+0x8d8>
 800745c:	f7ff fb56 	bl	8006b0c <sulp>
 8007460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007464:	ec53 2b10 	vmov	r2, r3, d0
 8007468:	f7f8 ff16 	bl	8000298 <__aeabi_dsub>
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	4682      	mov	sl, r0
 8007472:	468b      	mov	fp, r1
 8007474:	f7f9 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0c1      	beq.n	8007400 <_strtod_l+0x8b8>
 800747c:	e619      	b.n	80070b2 <_strtod_l+0x56a>
 800747e:	4641      	mov	r1, r8
 8007480:	4620      	mov	r0, r4
 8007482:	f003 f9e9 	bl	800a858 <__ratio>
 8007486:	ec57 6b10 	vmov	r6, r7, d0
 800748a:	2200      	movs	r2, #0
 800748c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb34 	bl	8000b00 <__aeabi_dcmple>
 8007498:	2800      	cmp	r0, #0
 800749a:	d06f      	beq.n	800757c <_strtod_l+0xa34>
 800749c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d17a      	bne.n	8007598 <_strtod_l+0xa50>
 80074a2:	f1ba 0f00 	cmp.w	sl, #0
 80074a6:	d158      	bne.n	800755a <_strtod_l+0xa12>
 80074a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d15a      	bne.n	8007568 <_strtod_l+0xa20>
 80074b2:	4b64      	ldr	r3, [pc, #400]	@ (8007644 <_strtod_l+0xafc>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	4630      	mov	r0, r6
 80074b8:	4639      	mov	r1, r7
 80074ba:	f7f9 fb17 	bl	8000aec <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d159      	bne.n	8007576 <_strtod_l+0xa2e>
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	4b60      	ldr	r3, [pc, #384]	@ (8007648 <_strtod_l+0xb00>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	f7f9 f89d 	bl	8000608 <__aeabi_dmul>
 80074ce:	4606      	mov	r6, r0
 80074d0:	460f      	mov	r7, r1
 80074d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80074d6:	9606      	str	r6, [sp, #24]
 80074d8:	9307      	str	r3, [sp, #28]
 80074da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074de:	4d57      	ldr	r5, [pc, #348]	@ (800763c <_strtod_l+0xaf4>)
 80074e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e6:	401d      	ands	r5, r3
 80074e8:	4b58      	ldr	r3, [pc, #352]	@ (800764c <_strtod_l+0xb04>)
 80074ea:	429d      	cmp	r5, r3
 80074ec:	f040 80b2 	bne.w	8007654 <_strtod_l+0xb0c>
 80074f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80074f6:	ec4b ab10 	vmov	d0, sl, fp
 80074fa:	f003 f8e5 	bl	800a6c8 <__ulp>
 80074fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007502:	ec51 0b10 	vmov	r0, r1, d0
 8007506:	f7f9 f87f 	bl	8000608 <__aeabi_dmul>
 800750a:	4652      	mov	r2, sl
 800750c:	465b      	mov	r3, fp
 800750e:	f7f8 fec5 	bl	800029c <__adddf3>
 8007512:	460b      	mov	r3, r1
 8007514:	4949      	ldr	r1, [pc, #292]	@ (800763c <_strtod_l+0xaf4>)
 8007516:	4a4e      	ldr	r2, [pc, #312]	@ (8007650 <_strtod_l+0xb08>)
 8007518:	4019      	ands	r1, r3
 800751a:	4291      	cmp	r1, r2
 800751c:	4682      	mov	sl, r0
 800751e:	d942      	bls.n	80075a6 <_strtod_l+0xa5e>
 8007520:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007522:	4b47      	ldr	r3, [pc, #284]	@ (8007640 <_strtod_l+0xaf8>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d103      	bne.n	8007530 <_strtod_l+0x9e8>
 8007528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800752a:	3301      	adds	r3, #1
 800752c:	f43f ad2b 	beq.w	8006f86 <_strtod_l+0x43e>
 8007530:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007640 <_strtod_l+0xaf8>
 8007534:	f04f 3aff 	mov.w	sl, #4294967295
 8007538:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800753a:	9805      	ldr	r0, [sp, #20]
 800753c:	f002 fd90 	bl	800a060 <_Bfree>
 8007540:	9805      	ldr	r0, [sp, #20]
 8007542:	4649      	mov	r1, r9
 8007544:	f002 fd8c 	bl	800a060 <_Bfree>
 8007548:	9805      	ldr	r0, [sp, #20]
 800754a:	4641      	mov	r1, r8
 800754c:	f002 fd88 	bl	800a060 <_Bfree>
 8007550:	9805      	ldr	r0, [sp, #20]
 8007552:	4621      	mov	r1, r4
 8007554:	f002 fd84 	bl	800a060 <_Bfree>
 8007558:	e618      	b.n	800718c <_strtod_l+0x644>
 800755a:	f1ba 0f01 	cmp.w	sl, #1
 800755e:	d103      	bne.n	8007568 <_strtod_l+0xa20>
 8007560:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	f43f ada5 	beq.w	80070b2 <_strtod_l+0x56a>
 8007568:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007618 <_strtod_l+0xad0>
 800756c:	4f35      	ldr	r7, [pc, #212]	@ (8007644 <_strtod_l+0xafc>)
 800756e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007572:	2600      	movs	r6, #0
 8007574:	e7b1      	b.n	80074da <_strtod_l+0x992>
 8007576:	4f34      	ldr	r7, [pc, #208]	@ (8007648 <_strtod_l+0xb00>)
 8007578:	2600      	movs	r6, #0
 800757a:	e7aa      	b.n	80074d2 <_strtod_l+0x98a>
 800757c:	4b32      	ldr	r3, [pc, #200]	@ (8007648 <_strtod_l+0xb00>)
 800757e:	4630      	mov	r0, r6
 8007580:	4639      	mov	r1, r7
 8007582:	2200      	movs	r2, #0
 8007584:	f7f9 f840 	bl	8000608 <__aeabi_dmul>
 8007588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758a:	4606      	mov	r6, r0
 800758c:	460f      	mov	r7, r1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d09f      	beq.n	80074d2 <_strtod_l+0x98a>
 8007592:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007596:	e7a0      	b.n	80074da <_strtod_l+0x992>
 8007598:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007620 <_strtod_l+0xad8>
 800759c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075a0:	ec57 6b17 	vmov	r6, r7, d7
 80075a4:	e799      	b.n	80074da <_strtod_l+0x992>
 80075a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1c1      	bne.n	8007538 <_strtod_l+0x9f0>
 80075b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075b8:	0d1b      	lsrs	r3, r3, #20
 80075ba:	051b      	lsls	r3, r3, #20
 80075bc:	429d      	cmp	r5, r3
 80075be:	d1bb      	bne.n	8007538 <_strtod_l+0x9f0>
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 fb80 	bl	8000cc8 <__aeabi_d2lz>
 80075c8:	f7f8 fff0 	bl	80005ac <__aeabi_l2d>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f8 fe60 	bl	8000298 <__aeabi_dsub>
 80075d8:	460b      	mov	r3, r1
 80075da:	4602      	mov	r2, r0
 80075dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80075e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80075e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e6:	ea46 060a 	orr.w	r6, r6, sl
 80075ea:	431e      	orrs	r6, r3
 80075ec:	d06f      	beq.n	80076ce <_strtod_l+0xb86>
 80075ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007628 <_strtod_l+0xae0>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f9 fa7a 	bl	8000aec <__aeabi_dcmplt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f47f accf 	bne.w	8006f9c <_strtod_l+0x454>
 80075fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8007630 <_strtod_l+0xae8>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007608:	f7f9 fa8e 	bl	8000b28 <__aeabi_dcmpgt>
 800760c:	2800      	cmp	r0, #0
 800760e:	d093      	beq.n	8007538 <_strtod_l+0x9f0>
 8007610:	e4c4      	b.n	8006f9c <_strtod_l+0x454>
 8007612:	bf00      	nop
 8007614:	f3af 8000 	nop.w
 8007618:	00000000 	.word	0x00000000
 800761c:	bff00000 	.word	0xbff00000
 8007620:	00000000 	.word	0x00000000
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	94a03595 	.word	0x94a03595
 800762c:	3fdfffff 	.word	0x3fdfffff
 8007630:	35afe535 	.word	0x35afe535
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	000fffff 	.word	0x000fffff
 800763c:	7ff00000 	.word	0x7ff00000
 8007640:	7fefffff 	.word	0x7fefffff
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	3fe00000 	.word	0x3fe00000
 800764c:	7fe00000 	.word	0x7fe00000
 8007650:	7c9fffff 	.word	0x7c9fffff
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	b323      	cbz	r3, 80076a2 <_strtod_l+0xb5a>
 8007658:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800765c:	d821      	bhi.n	80076a2 <_strtod_l+0xb5a>
 800765e:	a328      	add	r3, pc, #160	@ (adr r3, 8007700 <_strtod_l+0xbb8>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	4630      	mov	r0, r6
 8007666:	4639      	mov	r1, r7
 8007668:	f7f9 fa4a 	bl	8000b00 <__aeabi_dcmple>
 800766c:	b1a0      	cbz	r0, 8007698 <_strtod_l+0xb50>
 800766e:	4639      	mov	r1, r7
 8007670:	4630      	mov	r0, r6
 8007672:	f7f9 faa1 	bl	8000bb8 <__aeabi_d2uiz>
 8007676:	2801      	cmp	r0, #1
 8007678:	bf38      	it	cc
 800767a:	2001      	movcc	r0, #1
 800767c:	f7f8 ff4a 	bl	8000514 <__aeabi_ui2d>
 8007680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	b9fb      	cbnz	r3, 80076c8 <_strtod_l+0xb80>
 8007688:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800768c:	9014      	str	r0, [sp, #80]	@ 0x50
 800768e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007690:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007694:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007698:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800769a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800769e:	1b5b      	subs	r3, r3, r5
 80076a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80076a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80076a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80076aa:	f003 f80d 	bl	800a6c8 <__ulp>
 80076ae:	4650      	mov	r0, sl
 80076b0:	ec53 2b10 	vmov	r2, r3, d0
 80076b4:	4659      	mov	r1, fp
 80076b6:	f7f8 ffa7 	bl	8000608 <__aeabi_dmul>
 80076ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076be:	f7f8 fded 	bl	800029c <__adddf3>
 80076c2:	4682      	mov	sl, r0
 80076c4:	468b      	mov	fp, r1
 80076c6:	e770      	b.n	80075aa <_strtod_l+0xa62>
 80076c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80076cc:	e7e0      	b.n	8007690 <_strtod_l+0xb48>
 80076ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007708 <_strtod_l+0xbc0>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f9 fa0a 	bl	8000aec <__aeabi_dcmplt>
 80076d8:	e798      	b.n	800760c <_strtod_l+0xac4>
 80076da:	2300      	movs	r3, #0
 80076dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80076e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	f7ff ba6d 	b.w	8006bc2 <_strtod_l+0x7a>
 80076e8:	2a65      	cmp	r2, #101	@ 0x65
 80076ea:	f43f ab66 	beq.w	8006dba <_strtod_l+0x272>
 80076ee:	2a45      	cmp	r2, #69	@ 0x45
 80076f0:	f43f ab63 	beq.w	8006dba <_strtod_l+0x272>
 80076f4:	2301      	movs	r3, #1
 80076f6:	f7ff bb9e 	b.w	8006e36 <_strtod_l+0x2ee>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	ffc00000 	.word	0xffc00000
 8007704:	41dfffff 	.word	0x41dfffff
 8007708:	94a03595 	.word	0x94a03595
 800770c:	3fcfffff 	.word	0x3fcfffff

08007710 <_strtod_r>:
 8007710:	4b01      	ldr	r3, [pc, #4]	@ (8007718 <_strtod_r+0x8>)
 8007712:	f7ff ba19 	b.w	8006b48 <_strtod_l>
 8007716:	bf00      	nop
 8007718:	20000020 	.word	0x20000020

0800771c <strtod>:
 800771c:	460a      	mov	r2, r1
 800771e:	4601      	mov	r1, r0
 8007720:	4802      	ldr	r0, [pc, #8]	@ (800772c <strtod+0x10>)
 8007722:	4b03      	ldr	r3, [pc, #12]	@ (8007730 <strtod+0x14>)
 8007724:	6800      	ldr	r0, [r0, #0]
 8007726:	f7ff ba0f 	b.w	8006b48 <_strtod_l>
 800772a:	bf00      	nop
 800772c:	2000018c 	.word	0x2000018c
 8007730:	20000020 	.word	0x20000020

08007734 <__cvt>:
 8007734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	ec57 6b10 	vmov	r6, r7, d0
 800773c:	2f00      	cmp	r7, #0
 800773e:	460c      	mov	r4, r1
 8007740:	4619      	mov	r1, r3
 8007742:	463b      	mov	r3, r7
 8007744:	bfbb      	ittet	lt
 8007746:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800774a:	461f      	movlt	r7, r3
 800774c:	2300      	movge	r3, #0
 800774e:	232d      	movlt	r3, #45	@ 0x2d
 8007750:	700b      	strb	r3, [r1, #0]
 8007752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007754:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007758:	4691      	mov	r9, r2
 800775a:	f023 0820 	bic.w	r8, r3, #32
 800775e:	bfbc      	itt	lt
 8007760:	4632      	movlt	r2, r6
 8007762:	4616      	movlt	r6, r2
 8007764:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007768:	d005      	beq.n	8007776 <__cvt+0x42>
 800776a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800776e:	d100      	bne.n	8007772 <__cvt+0x3e>
 8007770:	3401      	adds	r4, #1
 8007772:	2102      	movs	r1, #2
 8007774:	e000      	b.n	8007778 <__cvt+0x44>
 8007776:	2103      	movs	r1, #3
 8007778:	ab03      	add	r3, sp, #12
 800777a:	9301      	str	r3, [sp, #4]
 800777c:	ab02      	add	r3, sp, #8
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	ec47 6b10 	vmov	d0, r6, r7
 8007784:	4653      	mov	r3, sl
 8007786:	4622      	mov	r2, r4
 8007788:	f001 fa1a 	bl	8008bc0 <_dtoa_r>
 800778c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007790:	4605      	mov	r5, r0
 8007792:	d119      	bne.n	80077c8 <__cvt+0x94>
 8007794:	f019 0f01 	tst.w	r9, #1
 8007798:	d00e      	beq.n	80077b8 <__cvt+0x84>
 800779a:	eb00 0904 	add.w	r9, r0, r4
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	f7f9 f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80077aa:	b108      	cbz	r0, 80077b0 <__cvt+0x7c>
 80077ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80077b0:	2230      	movs	r2, #48	@ 0x30
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	454b      	cmp	r3, r9
 80077b6:	d31e      	bcc.n	80077f6 <__cvt+0xc2>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077bc:	1b5b      	subs	r3, r3, r5
 80077be:	4628      	mov	r0, r5
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	b004      	add	sp, #16
 80077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077cc:	eb00 0904 	add.w	r9, r0, r4
 80077d0:	d1e5      	bne.n	800779e <__cvt+0x6a>
 80077d2:	7803      	ldrb	r3, [r0, #0]
 80077d4:	2b30      	cmp	r3, #48	@ 0x30
 80077d6:	d10a      	bne.n	80077ee <__cvt+0xba>
 80077d8:	2200      	movs	r2, #0
 80077da:	2300      	movs	r3, #0
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f9 f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 80077e4:	b918      	cbnz	r0, 80077ee <__cvt+0xba>
 80077e6:	f1c4 0401 	rsb	r4, r4, #1
 80077ea:	f8ca 4000 	str.w	r4, [sl]
 80077ee:	f8da 3000 	ldr.w	r3, [sl]
 80077f2:	4499      	add	r9, r3
 80077f4:	e7d3      	b.n	800779e <__cvt+0x6a>
 80077f6:	1c59      	adds	r1, r3, #1
 80077f8:	9103      	str	r1, [sp, #12]
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e7d9      	b.n	80077b2 <__cvt+0x7e>

080077fe <__exponent>:
 80077fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007800:	2900      	cmp	r1, #0
 8007802:	bfba      	itte	lt
 8007804:	4249      	neglt	r1, r1
 8007806:	232d      	movlt	r3, #45	@ 0x2d
 8007808:	232b      	movge	r3, #43	@ 0x2b
 800780a:	2909      	cmp	r1, #9
 800780c:	7002      	strb	r2, [r0, #0]
 800780e:	7043      	strb	r3, [r0, #1]
 8007810:	dd29      	ble.n	8007866 <__exponent+0x68>
 8007812:	f10d 0307 	add.w	r3, sp, #7
 8007816:	461d      	mov	r5, r3
 8007818:	270a      	movs	r7, #10
 800781a:	461a      	mov	r2, r3
 800781c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007820:	fb07 1416 	mls	r4, r7, r6, r1
 8007824:	3430      	adds	r4, #48	@ 0x30
 8007826:	f802 4c01 	strb.w	r4, [r2, #-1]
 800782a:	460c      	mov	r4, r1
 800782c:	2c63      	cmp	r4, #99	@ 0x63
 800782e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007832:	4631      	mov	r1, r6
 8007834:	dcf1      	bgt.n	800781a <__exponent+0x1c>
 8007836:	3130      	adds	r1, #48	@ 0x30
 8007838:	1e94      	subs	r4, r2, #2
 800783a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800783e:	1c41      	adds	r1, r0, #1
 8007840:	4623      	mov	r3, r4
 8007842:	42ab      	cmp	r3, r5
 8007844:	d30a      	bcc.n	800785c <__exponent+0x5e>
 8007846:	f10d 0309 	add.w	r3, sp, #9
 800784a:	1a9b      	subs	r3, r3, r2
 800784c:	42ac      	cmp	r4, r5
 800784e:	bf88      	it	hi
 8007850:	2300      	movhi	r3, #0
 8007852:	3302      	adds	r3, #2
 8007854:	4403      	add	r3, r0
 8007856:	1a18      	subs	r0, r3, r0
 8007858:	b003      	add	sp, #12
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007860:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007864:	e7ed      	b.n	8007842 <__exponent+0x44>
 8007866:	2330      	movs	r3, #48	@ 0x30
 8007868:	3130      	adds	r1, #48	@ 0x30
 800786a:	7083      	strb	r3, [r0, #2]
 800786c:	70c1      	strb	r1, [r0, #3]
 800786e:	1d03      	adds	r3, r0, #4
 8007870:	e7f1      	b.n	8007856 <__exponent+0x58>
	...

08007874 <_printf_float>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	b08d      	sub	sp, #52	@ 0x34
 800787a:	460c      	mov	r4, r1
 800787c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007880:	4616      	mov	r6, r2
 8007882:	461f      	mov	r7, r3
 8007884:	4605      	mov	r5, r0
 8007886:	f001 f861 	bl	800894c <_localeconv_r>
 800788a:	6803      	ldr	r3, [r0, #0]
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	4618      	mov	r0, r3
 8007890:	f7f8 fcf6 	bl	8000280 <strlen>
 8007894:	2300      	movs	r3, #0
 8007896:	930a      	str	r3, [sp, #40]	@ 0x28
 8007898:	f8d8 3000 	ldr.w	r3, [r8]
 800789c:	9005      	str	r0, [sp, #20]
 800789e:	3307      	adds	r3, #7
 80078a0:	f023 0307 	bic.w	r3, r3, #7
 80078a4:	f103 0208 	add.w	r2, r3, #8
 80078a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078ac:	f8d4 b000 	ldr.w	fp, [r4]
 80078b0:	f8c8 2000 	str.w	r2, [r8]
 80078b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078bc:	9307      	str	r3, [sp, #28]
 80078be:	f8cd 8018 	str.w	r8, [sp, #24]
 80078c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ca:	4b9c      	ldr	r3, [pc, #624]	@ (8007b3c <_printf_float+0x2c8>)
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	f7f9 f934 	bl	8000b3c <__aeabi_dcmpun>
 80078d4:	bb70      	cbnz	r0, 8007934 <_printf_float+0xc0>
 80078d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078da:	4b98      	ldr	r3, [pc, #608]	@ (8007b3c <_printf_float+0x2c8>)
 80078dc:	f04f 32ff 	mov.w	r2, #4294967295
 80078e0:	f7f9 f90e 	bl	8000b00 <__aeabi_dcmple>
 80078e4:	bb30      	cbnz	r0, 8007934 <_printf_float+0xc0>
 80078e6:	2200      	movs	r2, #0
 80078e8:	2300      	movs	r3, #0
 80078ea:	4640      	mov	r0, r8
 80078ec:	4649      	mov	r1, r9
 80078ee:	f7f9 f8fd 	bl	8000aec <__aeabi_dcmplt>
 80078f2:	b110      	cbz	r0, 80078fa <_printf_float+0x86>
 80078f4:	232d      	movs	r3, #45	@ 0x2d
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fa:	4a91      	ldr	r2, [pc, #580]	@ (8007b40 <_printf_float+0x2cc>)
 80078fc:	4b91      	ldr	r3, [pc, #580]	@ (8007b44 <_printf_float+0x2d0>)
 80078fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007902:	bf94      	ite	ls
 8007904:	4690      	movls	r8, r2
 8007906:	4698      	movhi	r8, r3
 8007908:	2303      	movs	r3, #3
 800790a:	6123      	str	r3, [r4, #16]
 800790c:	f02b 0304 	bic.w	r3, fp, #4
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	9700      	str	r7, [sp, #0]
 8007918:	4633      	mov	r3, r6
 800791a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800791c:	4621      	mov	r1, r4
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f9d2 	bl	8007cc8 <_printf_common>
 8007924:	3001      	adds	r0, #1
 8007926:	f040 808d 	bne.w	8007a44 <_printf_float+0x1d0>
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	b00d      	add	sp, #52	@ 0x34
 8007930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	4640      	mov	r0, r8
 800793a:	4649      	mov	r1, r9
 800793c:	f7f9 f8fe 	bl	8000b3c <__aeabi_dcmpun>
 8007940:	b140      	cbz	r0, 8007954 <_printf_float+0xe0>
 8007942:	464b      	mov	r3, r9
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfbc      	itt	lt
 8007948:	232d      	movlt	r3, #45	@ 0x2d
 800794a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800794e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b48 <_printf_float+0x2d4>)
 8007950:	4b7e      	ldr	r3, [pc, #504]	@ (8007b4c <_printf_float+0x2d8>)
 8007952:	e7d4      	b.n	80078fe <_printf_float+0x8a>
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800795a:	9206      	str	r2, [sp, #24]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	d13b      	bne.n	80079d8 <_printf_float+0x164>
 8007960:	2306      	movs	r3, #6
 8007962:	6063      	str	r3, [r4, #4]
 8007964:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007968:	2300      	movs	r3, #0
 800796a:	6022      	str	r2, [r4, #0]
 800796c:	9303      	str	r3, [sp, #12]
 800796e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007970:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007974:	ab09      	add	r3, sp, #36	@ 0x24
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	ec49 8b10 	vmov	d0, r8, r9
 800797e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007982:	4628      	mov	r0, r5
 8007984:	f7ff fed6 	bl	8007734 <__cvt>
 8007988:	9b06      	ldr	r3, [sp, #24]
 800798a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800798c:	2b47      	cmp	r3, #71	@ 0x47
 800798e:	4680      	mov	r8, r0
 8007990:	d129      	bne.n	80079e6 <_printf_float+0x172>
 8007992:	1cc8      	adds	r0, r1, #3
 8007994:	db02      	blt.n	800799c <_printf_float+0x128>
 8007996:	6863      	ldr	r3, [r4, #4]
 8007998:	4299      	cmp	r1, r3
 800799a:	dd41      	ble.n	8007a20 <_printf_float+0x1ac>
 800799c:	f1aa 0a02 	sub.w	sl, sl, #2
 80079a0:	fa5f fa8a 	uxtb.w	sl, sl
 80079a4:	3901      	subs	r1, #1
 80079a6:	4652      	mov	r2, sl
 80079a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80079ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80079ae:	f7ff ff26 	bl	80077fe <__exponent>
 80079b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079b4:	1813      	adds	r3, r2, r0
 80079b6:	2a01      	cmp	r2, #1
 80079b8:	4681      	mov	r9, r0
 80079ba:	6123      	str	r3, [r4, #16]
 80079bc:	dc02      	bgt.n	80079c4 <_printf_float+0x150>
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	07d2      	lsls	r2, r2, #31
 80079c2:	d501      	bpl.n	80079c8 <_printf_float+0x154>
 80079c4:	3301      	adds	r3, #1
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0a2      	beq.n	8007916 <_printf_float+0xa2>
 80079d0:	232d      	movs	r3, #45	@ 0x2d
 80079d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079d6:	e79e      	b.n	8007916 <_printf_float+0xa2>
 80079d8:	9a06      	ldr	r2, [sp, #24]
 80079da:	2a47      	cmp	r2, #71	@ 0x47
 80079dc:	d1c2      	bne.n	8007964 <_printf_float+0xf0>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1c0      	bne.n	8007964 <_printf_float+0xf0>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e7bd      	b.n	8007962 <_printf_float+0xee>
 80079e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079ea:	d9db      	bls.n	80079a4 <_printf_float+0x130>
 80079ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079f0:	d118      	bne.n	8007a24 <_printf_float+0x1b0>
 80079f2:	2900      	cmp	r1, #0
 80079f4:	6863      	ldr	r3, [r4, #4]
 80079f6:	dd0b      	ble.n	8007a10 <_printf_float+0x19c>
 80079f8:	6121      	str	r1, [r4, #16]
 80079fa:	b913      	cbnz	r3, 8007a02 <_printf_float+0x18e>
 80079fc:	6822      	ldr	r2, [r4, #0]
 80079fe:	07d0      	lsls	r0, r2, #31
 8007a00:	d502      	bpl.n	8007a08 <_printf_float+0x194>
 8007a02:	3301      	adds	r3, #1
 8007a04:	440b      	add	r3, r1
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a0a:	f04f 0900 	mov.w	r9, #0
 8007a0e:	e7db      	b.n	80079c8 <_printf_float+0x154>
 8007a10:	b913      	cbnz	r3, 8007a18 <_printf_float+0x1a4>
 8007a12:	6822      	ldr	r2, [r4, #0]
 8007a14:	07d2      	lsls	r2, r2, #31
 8007a16:	d501      	bpl.n	8007a1c <_printf_float+0x1a8>
 8007a18:	3302      	adds	r3, #2
 8007a1a:	e7f4      	b.n	8007a06 <_printf_float+0x192>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e7f2      	b.n	8007a06 <_printf_float+0x192>
 8007a20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a26:	4299      	cmp	r1, r3
 8007a28:	db05      	blt.n	8007a36 <_printf_float+0x1c2>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	6121      	str	r1, [r4, #16]
 8007a2e:	07d8      	lsls	r0, r3, #31
 8007a30:	d5ea      	bpl.n	8007a08 <_printf_float+0x194>
 8007a32:	1c4b      	adds	r3, r1, #1
 8007a34:	e7e7      	b.n	8007a06 <_printf_float+0x192>
 8007a36:	2900      	cmp	r1, #0
 8007a38:	bfd4      	ite	le
 8007a3a:	f1c1 0202 	rsble	r2, r1, #2
 8007a3e:	2201      	movgt	r2, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	e7e0      	b.n	8007a06 <_printf_float+0x192>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	055a      	lsls	r2, r3, #21
 8007a48:	d407      	bmi.n	8007a5a <_printf_float+0x1e6>
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b8      	blx	r7
 8007a54:	3001      	adds	r0, #1
 8007a56:	d12b      	bne.n	8007ab0 <_printf_float+0x23c>
 8007a58:	e767      	b.n	800792a <_printf_float+0xb6>
 8007a5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a5e:	f240 80dd 	bls.w	8007c1c <_printf_float+0x3a8>
 8007a62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f7f9 f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d033      	beq.n	8007ada <_printf_float+0x266>
 8007a72:	4a37      	ldr	r2, [pc, #220]	@ (8007b50 <_printf_float+0x2dc>)
 8007a74:	2301      	movs	r3, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f af54 	beq.w	800792a <_printf_float+0xb6>
 8007a82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a86:	4543      	cmp	r3, r8
 8007a88:	db02      	blt.n	8007a90 <_printf_float+0x21c>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	07d8      	lsls	r0, r3, #31
 8007a8e:	d50f      	bpl.n	8007ab0 <_printf_float+0x23c>
 8007a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af45 	beq.w	800792a <_printf_float+0xb6>
 8007aa0:	f04f 0900 	mov.w	r9, #0
 8007aa4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007aa8:	f104 0a1a 	add.w	sl, r4, #26
 8007aac:	45c8      	cmp	r8, r9
 8007aae:	dc09      	bgt.n	8007ac4 <_printf_float+0x250>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	079b      	lsls	r3, r3, #30
 8007ab4:	f100 8103 	bmi.w	8007cbe <_printf_float+0x44a>
 8007ab8:	68e0      	ldr	r0, [r4, #12]
 8007aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007abc:	4298      	cmp	r0, r3
 8007abe:	bfb8      	it	lt
 8007ac0:	4618      	movlt	r0, r3
 8007ac2:	e734      	b.n	800792e <_printf_float+0xba>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	4652      	mov	r2, sl
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f af2b 	beq.w	800792a <_printf_float+0xb6>
 8007ad4:	f109 0901 	add.w	r9, r9, #1
 8007ad8:	e7e8      	b.n	8007aac <_printf_float+0x238>
 8007ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc39      	bgt.n	8007b54 <_printf_float+0x2e0>
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b50 <_printf_float+0x2dc>)
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	f43f af1d 	beq.w	800792a <_printf_float+0xb6>
 8007af0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007af4:	ea59 0303 	orrs.w	r3, r9, r3
 8007af8:	d102      	bne.n	8007b00 <_printf_float+0x28c>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	07d9      	lsls	r1, r3, #31
 8007afe:	d5d7      	bpl.n	8007ab0 <_printf_float+0x23c>
 8007b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b04:	4631      	mov	r1, r6
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b8      	blx	r7
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f43f af0d 	beq.w	800792a <_printf_float+0xb6>
 8007b10:	f04f 0a00 	mov.w	sl, #0
 8007b14:	f104 0b1a 	add.w	fp, r4, #26
 8007b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1a:	425b      	negs	r3, r3
 8007b1c:	4553      	cmp	r3, sl
 8007b1e:	dc01      	bgt.n	8007b24 <_printf_float+0x2b0>
 8007b20:	464b      	mov	r3, r9
 8007b22:	e793      	b.n	8007a4c <_printf_float+0x1d8>
 8007b24:	2301      	movs	r3, #1
 8007b26:	465a      	mov	r2, fp
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f aefb 	beq.w	800792a <_printf_float+0xb6>
 8007b34:	f10a 0a01 	add.w	sl, sl, #1
 8007b38:	e7ee      	b.n	8007b18 <_printf_float+0x2a4>
 8007b3a:	bf00      	nop
 8007b3c:	7fefffff 	.word	0x7fefffff
 8007b40:	0800b890 	.word	0x0800b890
 8007b44:	0800b894 	.word	0x0800b894
 8007b48:	0800b898 	.word	0x0800b898
 8007b4c:	0800b89c 	.word	0x0800b89c
 8007b50:	0800b8a0 	.word	0x0800b8a0
 8007b54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b5a:	4553      	cmp	r3, sl
 8007b5c:	bfa8      	it	ge
 8007b5e:	4653      	movge	r3, sl
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	4699      	mov	r9, r3
 8007b64:	dc36      	bgt.n	8007bd4 <_printf_float+0x360>
 8007b66:	f04f 0b00 	mov.w	fp, #0
 8007b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b6e:	f104 021a 	add.w	r2, r4, #26
 8007b72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b74:	9306      	str	r3, [sp, #24]
 8007b76:	eba3 0309 	sub.w	r3, r3, r9
 8007b7a:	455b      	cmp	r3, fp
 8007b7c:	dc31      	bgt.n	8007be2 <_printf_float+0x36e>
 8007b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b80:	459a      	cmp	sl, r3
 8007b82:	dc3a      	bgt.n	8007bfa <_printf_float+0x386>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	07da      	lsls	r2, r3, #31
 8007b88:	d437      	bmi.n	8007bfa <_printf_float+0x386>
 8007b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8c:	ebaa 0903 	sub.w	r9, sl, r3
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	ebaa 0303 	sub.w	r3, sl, r3
 8007b96:	4599      	cmp	r9, r3
 8007b98:	bfa8      	it	ge
 8007b9a:	4699      	movge	r9, r3
 8007b9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ba0:	dc33      	bgt.n	8007c0a <_printf_float+0x396>
 8007ba2:	f04f 0800 	mov.w	r8, #0
 8007ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007baa:	f104 0b1a 	add.w	fp, r4, #26
 8007bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8007bb4:	eba3 0309 	sub.w	r3, r3, r9
 8007bb8:	4543      	cmp	r3, r8
 8007bba:	f77f af79 	ble.w	8007ab0 <_printf_float+0x23c>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	465a      	mov	r2, fp
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b8      	blx	r7
 8007bc8:	3001      	adds	r0, #1
 8007bca:	f43f aeae 	beq.w	800792a <_printf_float+0xb6>
 8007bce:	f108 0801 	add.w	r8, r8, #1
 8007bd2:	e7ec      	b.n	8007bae <_printf_float+0x33a>
 8007bd4:	4642      	mov	r2, r8
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4628      	mov	r0, r5
 8007bda:	47b8      	blx	r7
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d1c2      	bne.n	8007b66 <_printf_float+0x2f2>
 8007be0:	e6a3      	b.n	800792a <_printf_float+0xb6>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	9206      	str	r2, [sp, #24]
 8007bea:	47b8      	blx	r7
 8007bec:	3001      	adds	r0, #1
 8007bee:	f43f ae9c 	beq.w	800792a <_printf_float+0xb6>
 8007bf2:	9a06      	ldr	r2, [sp, #24]
 8007bf4:	f10b 0b01 	add.w	fp, fp, #1
 8007bf8:	e7bb      	b.n	8007b72 <_printf_float+0x2fe>
 8007bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	d1c0      	bne.n	8007b8a <_printf_float+0x316>
 8007c08:	e68f      	b.n	800792a <_printf_float+0xb6>
 8007c0a:	9a06      	ldr	r2, [sp, #24]
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	4442      	add	r2, r8
 8007c10:	4631      	mov	r1, r6
 8007c12:	4628      	mov	r0, r5
 8007c14:	47b8      	blx	r7
 8007c16:	3001      	adds	r0, #1
 8007c18:	d1c3      	bne.n	8007ba2 <_printf_float+0x32e>
 8007c1a:	e686      	b.n	800792a <_printf_float+0xb6>
 8007c1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c20:	f1ba 0f01 	cmp.w	sl, #1
 8007c24:	dc01      	bgt.n	8007c2a <_printf_float+0x3b6>
 8007c26:	07db      	lsls	r3, r3, #31
 8007c28:	d536      	bpl.n	8007c98 <_printf_float+0x424>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	f43f ae78 	beq.w	800792a <_printf_float+0xb6>
 8007c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae70 	beq.w	800792a <_printf_float+0xb6>
 8007c4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2300      	movs	r3, #0
 8007c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c56:	f7f8 ff3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c5a:	b9c0      	cbnz	r0, 8007c8e <_printf_float+0x41a>
 8007c5c:	4653      	mov	r3, sl
 8007c5e:	f108 0201 	add.w	r2, r8, #1
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d10c      	bne.n	8007c86 <_printf_float+0x412>
 8007c6c:	e65d      	b.n	800792a <_printf_float+0xb6>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	465a      	mov	r2, fp
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f ae56 	beq.w	800792a <_printf_float+0xb6>
 8007c7e:	f108 0801 	add.w	r8, r8, #1
 8007c82:	45d0      	cmp	r8, sl
 8007c84:	dbf3      	blt.n	8007c6e <_printf_float+0x3fa>
 8007c86:	464b      	mov	r3, r9
 8007c88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c8c:	e6df      	b.n	8007a4e <_printf_float+0x1da>
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	f104 0b1a 	add.w	fp, r4, #26
 8007c96:	e7f4      	b.n	8007c82 <_printf_float+0x40e>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4642      	mov	r2, r8
 8007c9c:	e7e1      	b.n	8007c62 <_printf_float+0x3ee>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	464a      	mov	r2, r9
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	f43f ae3e 	beq.w	800792a <_printf_float+0xb6>
 8007cae:	f108 0801 	add.w	r8, r8, #1
 8007cb2:	68e3      	ldr	r3, [r4, #12]
 8007cb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cb6:	1a5b      	subs	r3, r3, r1
 8007cb8:	4543      	cmp	r3, r8
 8007cba:	dcf0      	bgt.n	8007c9e <_printf_float+0x42a>
 8007cbc:	e6fc      	b.n	8007ab8 <_printf_float+0x244>
 8007cbe:	f04f 0800 	mov.w	r8, #0
 8007cc2:	f104 0919 	add.w	r9, r4, #25
 8007cc6:	e7f4      	b.n	8007cb2 <_printf_float+0x43e>

08007cc8 <_printf_common>:
 8007cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ccc:	4616      	mov	r6, r2
 8007cce:	4698      	mov	r8, r3
 8007cd0:	688a      	ldr	r2, [r1, #8]
 8007cd2:	690b      	ldr	r3, [r1, #16]
 8007cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	bfb8      	it	lt
 8007cdc:	4613      	movlt	r3, r2
 8007cde:	6033      	str	r3, [r6, #0]
 8007ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	b10a      	cbz	r2, 8007cee <_printf_common+0x26>
 8007cea:	3301      	adds	r3, #1
 8007cec:	6033      	str	r3, [r6, #0]
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	0699      	lsls	r1, r3, #26
 8007cf2:	bf42      	ittt	mi
 8007cf4:	6833      	ldrmi	r3, [r6, #0]
 8007cf6:	3302      	addmi	r3, #2
 8007cf8:	6033      	strmi	r3, [r6, #0]
 8007cfa:	6825      	ldr	r5, [r4, #0]
 8007cfc:	f015 0506 	ands.w	r5, r5, #6
 8007d00:	d106      	bne.n	8007d10 <_printf_common+0x48>
 8007d02:	f104 0a19 	add.w	sl, r4, #25
 8007d06:	68e3      	ldr	r3, [r4, #12]
 8007d08:	6832      	ldr	r2, [r6, #0]
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	42ab      	cmp	r3, r5
 8007d0e:	dc26      	bgt.n	8007d5e <_printf_common+0x96>
 8007d10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d14:	6822      	ldr	r2, [r4, #0]
 8007d16:	3b00      	subs	r3, #0
 8007d18:	bf18      	it	ne
 8007d1a:	2301      	movne	r3, #1
 8007d1c:	0692      	lsls	r2, r2, #26
 8007d1e:	d42b      	bmi.n	8007d78 <_printf_common+0xb0>
 8007d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d24:	4641      	mov	r1, r8
 8007d26:	4638      	mov	r0, r7
 8007d28:	47c8      	blx	r9
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d01e      	beq.n	8007d6c <_printf_common+0xa4>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	6922      	ldr	r2, [r4, #16]
 8007d32:	f003 0306 	and.w	r3, r3, #6
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	bf02      	ittt	eq
 8007d3a:	68e5      	ldreq	r5, [r4, #12]
 8007d3c:	6833      	ldreq	r3, [r6, #0]
 8007d3e:	1aed      	subeq	r5, r5, r3
 8007d40:	68a3      	ldr	r3, [r4, #8]
 8007d42:	bf0c      	ite	eq
 8007d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d48:	2500      	movne	r5, #0
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	bfc4      	itt	gt
 8007d4e:	1a9b      	subgt	r3, r3, r2
 8007d50:	18ed      	addgt	r5, r5, r3
 8007d52:	2600      	movs	r6, #0
 8007d54:	341a      	adds	r4, #26
 8007d56:	42b5      	cmp	r5, r6
 8007d58:	d11a      	bne.n	8007d90 <_printf_common+0xc8>
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e008      	b.n	8007d70 <_printf_common+0xa8>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	4652      	mov	r2, sl
 8007d62:	4641      	mov	r1, r8
 8007d64:	4638      	mov	r0, r7
 8007d66:	47c8      	blx	r9
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d103      	bne.n	8007d74 <_printf_common+0xac>
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d74:	3501      	adds	r5, #1
 8007d76:	e7c6      	b.n	8007d06 <_printf_common+0x3e>
 8007d78:	18e1      	adds	r1, r4, r3
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	2030      	movs	r0, #48	@ 0x30
 8007d7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d82:	4422      	add	r2, r4
 8007d84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	e7c7      	b.n	8007d20 <_printf_common+0x58>
 8007d90:	2301      	movs	r3, #1
 8007d92:	4622      	mov	r2, r4
 8007d94:	4641      	mov	r1, r8
 8007d96:	4638      	mov	r0, r7
 8007d98:	47c8      	blx	r9
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	d0e6      	beq.n	8007d6c <_printf_common+0xa4>
 8007d9e:	3601      	adds	r6, #1
 8007da0:	e7d9      	b.n	8007d56 <_printf_common+0x8e>
	...

08007da4 <_printf_i>:
 8007da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da8:	7e0f      	ldrb	r7, [r1, #24]
 8007daa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dac:	2f78      	cmp	r7, #120	@ 0x78
 8007dae:	4691      	mov	r9, r2
 8007db0:	4680      	mov	r8, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	469a      	mov	sl, r3
 8007db6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dba:	d807      	bhi.n	8007dcc <_printf_i+0x28>
 8007dbc:	2f62      	cmp	r7, #98	@ 0x62
 8007dbe:	d80a      	bhi.n	8007dd6 <_printf_i+0x32>
 8007dc0:	2f00      	cmp	r7, #0
 8007dc2:	f000 80d2 	beq.w	8007f6a <_printf_i+0x1c6>
 8007dc6:	2f58      	cmp	r7, #88	@ 0x58
 8007dc8:	f000 80b9 	beq.w	8007f3e <_printf_i+0x19a>
 8007dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dd4:	e03a      	b.n	8007e4c <_printf_i+0xa8>
 8007dd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dda:	2b15      	cmp	r3, #21
 8007ddc:	d8f6      	bhi.n	8007dcc <_printf_i+0x28>
 8007dde:	a101      	add	r1, pc, #4	@ (adr r1, 8007de4 <_printf_i+0x40>)
 8007de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007de4:	08007e3d 	.word	0x08007e3d
 8007de8:	08007e51 	.word	0x08007e51
 8007dec:	08007dcd 	.word	0x08007dcd
 8007df0:	08007dcd 	.word	0x08007dcd
 8007df4:	08007dcd 	.word	0x08007dcd
 8007df8:	08007dcd 	.word	0x08007dcd
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007dcd 	.word	0x08007dcd
 8007e04:	08007dcd 	.word	0x08007dcd
 8007e08:	08007dcd 	.word	0x08007dcd
 8007e0c:	08007dcd 	.word	0x08007dcd
 8007e10:	08007f51 	.word	0x08007f51
 8007e14:	08007e7b 	.word	0x08007e7b
 8007e18:	08007f0b 	.word	0x08007f0b
 8007e1c:	08007dcd 	.word	0x08007dcd
 8007e20:	08007dcd 	.word	0x08007dcd
 8007e24:	08007f73 	.word	0x08007f73
 8007e28:	08007dcd 	.word	0x08007dcd
 8007e2c:	08007e7b 	.word	0x08007e7b
 8007e30:	08007dcd 	.word	0x08007dcd
 8007e34:	08007dcd 	.word	0x08007dcd
 8007e38:	08007f13 	.word	0x08007f13
 8007e3c:	6833      	ldr	r3, [r6, #0]
 8007e3e:	1d1a      	adds	r2, r3, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6032      	str	r2, [r6, #0]
 8007e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e09d      	b.n	8007f8c <_printf_i+0x1e8>
 8007e50:	6833      	ldr	r3, [r6, #0]
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	1d19      	adds	r1, r3, #4
 8007e56:	6031      	str	r1, [r6, #0]
 8007e58:	0606      	lsls	r6, r0, #24
 8007e5a:	d501      	bpl.n	8007e60 <_printf_i+0xbc>
 8007e5c:	681d      	ldr	r5, [r3, #0]
 8007e5e:	e003      	b.n	8007e68 <_printf_i+0xc4>
 8007e60:	0645      	lsls	r5, r0, #25
 8007e62:	d5fb      	bpl.n	8007e5c <_printf_i+0xb8>
 8007e64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	da03      	bge.n	8007e74 <_printf_i+0xd0>
 8007e6c:	232d      	movs	r3, #45	@ 0x2d
 8007e6e:	426d      	negs	r5, r5
 8007e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e74:	4859      	ldr	r0, [pc, #356]	@ (8007fdc <_printf_i+0x238>)
 8007e76:	230a      	movs	r3, #10
 8007e78:	e011      	b.n	8007e9e <_printf_i+0xfa>
 8007e7a:	6821      	ldr	r1, [r4, #0]
 8007e7c:	6833      	ldr	r3, [r6, #0]
 8007e7e:	0608      	lsls	r0, r1, #24
 8007e80:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e84:	d402      	bmi.n	8007e8c <_printf_i+0xe8>
 8007e86:	0649      	lsls	r1, r1, #25
 8007e88:	bf48      	it	mi
 8007e8a:	b2ad      	uxthmi	r5, r5
 8007e8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e8e:	4853      	ldr	r0, [pc, #332]	@ (8007fdc <_printf_i+0x238>)
 8007e90:	6033      	str	r3, [r6, #0]
 8007e92:	bf14      	ite	ne
 8007e94:	230a      	movne	r3, #10
 8007e96:	2308      	moveq	r3, #8
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e9e:	6866      	ldr	r6, [r4, #4]
 8007ea0:	60a6      	str	r6, [r4, #8]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	bfa2      	ittt	ge
 8007ea6:	6821      	ldrge	r1, [r4, #0]
 8007ea8:	f021 0104 	bicge.w	r1, r1, #4
 8007eac:	6021      	strge	r1, [r4, #0]
 8007eae:	b90d      	cbnz	r5, 8007eb4 <_printf_i+0x110>
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	d04b      	beq.n	8007f4c <_printf_i+0x1a8>
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eba:	fb03 5711 	mls	r7, r3, r1, r5
 8007ebe:	5dc7      	ldrb	r7, [r0, r7]
 8007ec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ec4:	462f      	mov	r7, r5
 8007ec6:	42bb      	cmp	r3, r7
 8007ec8:	460d      	mov	r5, r1
 8007eca:	d9f4      	bls.n	8007eb6 <_printf_i+0x112>
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d10b      	bne.n	8007ee8 <_printf_i+0x144>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	07df      	lsls	r7, r3, #31
 8007ed4:	d508      	bpl.n	8007ee8 <_printf_i+0x144>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	6861      	ldr	r1, [r4, #4]
 8007eda:	4299      	cmp	r1, r3
 8007edc:	bfde      	ittt	le
 8007ede:	2330      	movle	r3, #48	@ 0x30
 8007ee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ee4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ee8:	1b92      	subs	r2, r2, r6
 8007eea:	6122      	str	r2, [r4, #16]
 8007eec:	f8cd a000 	str.w	sl, [sp]
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	aa03      	add	r2, sp, #12
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	f7ff fee6 	bl	8007cc8 <_printf_common>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d14a      	bne.n	8007f96 <_printf_i+0x1f2>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	b004      	add	sp, #16
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	f043 0320 	orr.w	r3, r3, #32
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	4833      	ldr	r0, [pc, #204]	@ (8007fe0 <_printf_i+0x23c>)
 8007f14:	2778      	movs	r7, #120	@ 0x78
 8007f16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	6831      	ldr	r1, [r6, #0]
 8007f1e:	061f      	lsls	r7, r3, #24
 8007f20:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f24:	d402      	bmi.n	8007f2c <_printf_i+0x188>
 8007f26:	065f      	lsls	r7, r3, #25
 8007f28:	bf48      	it	mi
 8007f2a:	b2ad      	uxthmi	r5, r5
 8007f2c:	6031      	str	r1, [r6, #0]
 8007f2e:	07d9      	lsls	r1, r3, #31
 8007f30:	bf44      	itt	mi
 8007f32:	f043 0320 	orrmi.w	r3, r3, #32
 8007f36:	6023      	strmi	r3, [r4, #0]
 8007f38:	b11d      	cbz	r5, 8007f42 <_printf_i+0x19e>
 8007f3a:	2310      	movs	r3, #16
 8007f3c:	e7ac      	b.n	8007e98 <_printf_i+0xf4>
 8007f3e:	4827      	ldr	r0, [pc, #156]	@ (8007fdc <_printf_i+0x238>)
 8007f40:	e7e9      	b.n	8007f16 <_printf_i+0x172>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f023 0320 	bic.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	e7f6      	b.n	8007f3a <_printf_i+0x196>
 8007f4c:	4616      	mov	r6, r2
 8007f4e:	e7bd      	b.n	8007ecc <_printf_i+0x128>
 8007f50:	6833      	ldr	r3, [r6, #0]
 8007f52:	6825      	ldr	r5, [r4, #0]
 8007f54:	6961      	ldr	r1, [r4, #20]
 8007f56:	1d18      	adds	r0, r3, #4
 8007f58:	6030      	str	r0, [r6, #0]
 8007f5a:	062e      	lsls	r6, r5, #24
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	d501      	bpl.n	8007f64 <_printf_i+0x1c0>
 8007f60:	6019      	str	r1, [r3, #0]
 8007f62:	e002      	b.n	8007f6a <_printf_i+0x1c6>
 8007f64:	0668      	lsls	r0, r5, #25
 8007f66:	d5fb      	bpl.n	8007f60 <_printf_i+0x1bc>
 8007f68:	8019      	strh	r1, [r3, #0]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	4616      	mov	r6, r2
 8007f70:	e7bc      	b.n	8007eec <_printf_i+0x148>
 8007f72:	6833      	ldr	r3, [r6, #0]
 8007f74:	1d1a      	adds	r2, r3, #4
 8007f76:	6032      	str	r2, [r6, #0]
 8007f78:	681e      	ldr	r6, [r3, #0]
 8007f7a:	6862      	ldr	r2, [r4, #4]
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7f8 f92e 	bl	80001e0 <memchr>
 8007f84:	b108      	cbz	r0, 8007f8a <_printf_i+0x1e6>
 8007f86:	1b80      	subs	r0, r0, r6
 8007f88:	6060      	str	r0, [r4, #4]
 8007f8a:	6863      	ldr	r3, [r4, #4]
 8007f8c:	6123      	str	r3, [r4, #16]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f94:	e7aa      	b.n	8007eec <_printf_i+0x148>
 8007f96:	6923      	ldr	r3, [r4, #16]
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	47d0      	blx	sl
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d0ad      	beq.n	8007f00 <_printf_i+0x15c>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	079b      	lsls	r3, r3, #30
 8007fa8:	d413      	bmi.n	8007fd2 <_printf_i+0x22e>
 8007faa:	68e0      	ldr	r0, [r4, #12]
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	4298      	cmp	r0, r3
 8007fb0:	bfb8      	it	lt
 8007fb2:	4618      	movlt	r0, r3
 8007fb4:	e7a6      	b.n	8007f04 <_printf_i+0x160>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4632      	mov	r2, r6
 8007fba:	4649      	mov	r1, r9
 8007fbc:	4640      	mov	r0, r8
 8007fbe:	47d0      	blx	sl
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d09d      	beq.n	8007f00 <_printf_i+0x15c>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	68e3      	ldr	r3, [r4, #12]
 8007fc8:	9903      	ldr	r1, [sp, #12]
 8007fca:	1a5b      	subs	r3, r3, r1
 8007fcc:	42ab      	cmp	r3, r5
 8007fce:	dcf2      	bgt.n	8007fb6 <_printf_i+0x212>
 8007fd0:	e7eb      	b.n	8007faa <_printf_i+0x206>
 8007fd2:	2500      	movs	r5, #0
 8007fd4:	f104 0619 	add.w	r6, r4, #25
 8007fd8:	e7f5      	b.n	8007fc6 <_printf_i+0x222>
 8007fda:	bf00      	nop
 8007fdc:	0800b8a2 	.word	0x0800b8a2
 8007fe0:	0800b8b3 	.word	0x0800b8b3

08007fe4 <_scanf_float>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	b087      	sub	sp, #28
 8007fea:	4617      	mov	r7, r2
 8007fec:	9303      	str	r3, [sp, #12]
 8007fee:	688b      	ldr	r3, [r1, #8]
 8007ff0:	1e5a      	subs	r2, r3, #1
 8007ff2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007ff6:	bf81      	itttt	hi
 8007ff8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007ffc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008000:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008004:	608b      	strhi	r3, [r1, #8]
 8008006:	680b      	ldr	r3, [r1, #0]
 8008008:	460a      	mov	r2, r1
 800800a:	f04f 0500 	mov.w	r5, #0
 800800e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008012:	f842 3b1c 	str.w	r3, [r2], #28
 8008016:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800801a:	4680      	mov	r8, r0
 800801c:	460c      	mov	r4, r1
 800801e:	bf98      	it	ls
 8008020:	f04f 0b00 	movls.w	fp, #0
 8008024:	9201      	str	r2, [sp, #4]
 8008026:	4616      	mov	r6, r2
 8008028:	46aa      	mov	sl, r5
 800802a:	46a9      	mov	r9, r5
 800802c:	9502      	str	r5, [sp, #8]
 800802e:	68a2      	ldr	r2, [r4, #8]
 8008030:	b152      	cbz	r2, 8008048 <_scanf_float+0x64>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b4e      	cmp	r3, #78	@ 0x4e
 8008038:	d864      	bhi.n	8008104 <_scanf_float+0x120>
 800803a:	2b40      	cmp	r3, #64	@ 0x40
 800803c:	d83c      	bhi.n	80080b8 <_scanf_float+0xd4>
 800803e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008042:	b2c8      	uxtb	r0, r1
 8008044:	280e      	cmp	r0, #14
 8008046:	d93a      	bls.n	80080be <_scanf_float+0xda>
 8008048:	f1b9 0f00 	cmp.w	r9, #0
 800804c:	d003      	beq.n	8008056 <_scanf_float+0x72>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	f10a 3aff 	add.w	sl, sl, #4294967295
 800805a:	f1ba 0f01 	cmp.w	sl, #1
 800805e:	f200 8117 	bhi.w	8008290 <_scanf_float+0x2ac>
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	429e      	cmp	r6, r3
 8008066:	f200 8108 	bhi.w	800827a <_scanf_float+0x296>
 800806a:	2001      	movs	r0, #1
 800806c:	b007      	add	sp, #28
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008076:	2a0d      	cmp	r2, #13
 8008078:	d8e6      	bhi.n	8008048 <_scanf_float+0x64>
 800807a:	a101      	add	r1, pc, #4	@ (adr r1, 8008080 <_scanf_float+0x9c>)
 800807c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008080:	080081c7 	.word	0x080081c7
 8008084:	08008049 	.word	0x08008049
 8008088:	08008049 	.word	0x08008049
 800808c:	08008049 	.word	0x08008049
 8008090:	08008227 	.word	0x08008227
 8008094:	080081ff 	.word	0x080081ff
 8008098:	08008049 	.word	0x08008049
 800809c:	08008049 	.word	0x08008049
 80080a0:	080081d5 	.word	0x080081d5
 80080a4:	08008049 	.word	0x08008049
 80080a8:	08008049 	.word	0x08008049
 80080ac:	08008049 	.word	0x08008049
 80080b0:	08008049 	.word	0x08008049
 80080b4:	0800818d 	.word	0x0800818d
 80080b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80080bc:	e7db      	b.n	8008076 <_scanf_float+0x92>
 80080be:	290e      	cmp	r1, #14
 80080c0:	d8c2      	bhi.n	8008048 <_scanf_float+0x64>
 80080c2:	a001      	add	r0, pc, #4	@ (adr r0, 80080c8 <_scanf_float+0xe4>)
 80080c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080c8:	0800817d 	.word	0x0800817d
 80080cc:	08008049 	.word	0x08008049
 80080d0:	0800817d 	.word	0x0800817d
 80080d4:	08008213 	.word	0x08008213
 80080d8:	08008049 	.word	0x08008049
 80080dc:	08008125 	.word	0x08008125
 80080e0:	08008163 	.word	0x08008163
 80080e4:	08008163 	.word	0x08008163
 80080e8:	08008163 	.word	0x08008163
 80080ec:	08008163 	.word	0x08008163
 80080f0:	08008163 	.word	0x08008163
 80080f4:	08008163 	.word	0x08008163
 80080f8:	08008163 	.word	0x08008163
 80080fc:	08008163 	.word	0x08008163
 8008100:	08008163 	.word	0x08008163
 8008104:	2b6e      	cmp	r3, #110	@ 0x6e
 8008106:	d809      	bhi.n	800811c <_scanf_float+0x138>
 8008108:	2b60      	cmp	r3, #96	@ 0x60
 800810a:	d8b2      	bhi.n	8008072 <_scanf_float+0x8e>
 800810c:	2b54      	cmp	r3, #84	@ 0x54
 800810e:	d07b      	beq.n	8008208 <_scanf_float+0x224>
 8008110:	2b59      	cmp	r3, #89	@ 0x59
 8008112:	d199      	bne.n	8008048 <_scanf_float+0x64>
 8008114:	2d07      	cmp	r5, #7
 8008116:	d197      	bne.n	8008048 <_scanf_float+0x64>
 8008118:	2508      	movs	r5, #8
 800811a:	e02c      	b.n	8008176 <_scanf_float+0x192>
 800811c:	2b74      	cmp	r3, #116	@ 0x74
 800811e:	d073      	beq.n	8008208 <_scanf_float+0x224>
 8008120:	2b79      	cmp	r3, #121	@ 0x79
 8008122:	e7f6      	b.n	8008112 <_scanf_float+0x12e>
 8008124:	6821      	ldr	r1, [r4, #0]
 8008126:	05c8      	lsls	r0, r1, #23
 8008128:	d51b      	bpl.n	8008162 <_scanf_float+0x17e>
 800812a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800812e:	6021      	str	r1, [r4, #0]
 8008130:	f109 0901 	add.w	r9, r9, #1
 8008134:	f1bb 0f00 	cmp.w	fp, #0
 8008138:	d003      	beq.n	8008142 <_scanf_float+0x15e>
 800813a:	3201      	adds	r2, #1
 800813c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008140:	60a2      	str	r2, [r4, #8]
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	3b01      	subs	r3, #1
 8008146:	60a3      	str	r3, [r4, #8]
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	3301      	adds	r3, #1
 800814c:	6123      	str	r3, [r4, #16]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3b01      	subs	r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	f340 8087 	ble.w	8008268 <_scanf_float+0x284>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	3301      	adds	r3, #1
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	e765      	b.n	800802e <_scanf_float+0x4a>
 8008162:	eb1a 0105 	adds.w	r1, sl, r5
 8008166:	f47f af6f 	bne.w	8008048 <_scanf_float+0x64>
 800816a:	6822      	ldr	r2, [r4, #0]
 800816c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008170:	6022      	str	r2, [r4, #0]
 8008172:	460d      	mov	r5, r1
 8008174:	468a      	mov	sl, r1
 8008176:	f806 3b01 	strb.w	r3, [r6], #1
 800817a:	e7e2      	b.n	8008142 <_scanf_float+0x15e>
 800817c:	6822      	ldr	r2, [r4, #0]
 800817e:	0610      	lsls	r0, r2, #24
 8008180:	f57f af62 	bpl.w	8008048 <_scanf_float+0x64>
 8008184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008188:	6022      	str	r2, [r4, #0]
 800818a:	e7f4      	b.n	8008176 <_scanf_float+0x192>
 800818c:	f1ba 0f00 	cmp.w	sl, #0
 8008190:	d10e      	bne.n	80081b0 <_scanf_float+0x1cc>
 8008192:	f1b9 0f00 	cmp.w	r9, #0
 8008196:	d10e      	bne.n	80081b6 <_scanf_float+0x1d2>
 8008198:	6822      	ldr	r2, [r4, #0]
 800819a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800819e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081a2:	d108      	bne.n	80081b6 <_scanf_float+0x1d2>
 80081a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081a8:	6022      	str	r2, [r4, #0]
 80081aa:	f04f 0a01 	mov.w	sl, #1
 80081ae:	e7e2      	b.n	8008176 <_scanf_float+0x192>
 80081b0:	f1ba 0f02 	cmp.w	sl, #2
 80081b4:	d055      	beq.n	8008262 <_scanf_float+0x27e>
 80081b6:	2d01      	cmp	r5, #1
 80081b8:	d002      	beq.n	80081c0 <_scanf_float+0x1dc>
 80081ba:	2d04      	cmp	r5, #4
 80081bc:	f47f af44 	bne.w	8008048 <_scanf_float+0x64>
 80081c0:	3501      	adds	r5, #1
 80081c2:	b2ed      	uxtb	r5, r5
 80081c4:	e7d7      	b.n	8008176 <_scanf_float+0x192>
 80081c6:	f1ba 0f01 	cmp.w	sl, #1
 80081ca:	f47f af3d 	bne.w	8008048 <_scanf_float+0x64>
 80081ce:	f04f 0a02 	mov.w	sl, #2
 80081d2:	e7d0      	b.n	8008176 <_scanf_float+0x192>
 80081d4:	b97d      	cbnz	r5, 80081f6 <_scanf_float+0x212>
 80081d6:	f1b9 0f00 	cmp.w	r9, #0
 80081da:	f47f af38 	bne.w	800804e <_scanf_float+0x6a>
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081e8:	f040 8108 	bne.w	80083fc <_scanf_float+0x418>
 80081ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081f0:	6022      	str	r2, [r4, #0]
 80081f2:	2501      	movs	r5, #1
 80081f4:	e7bf      	b.n	8008176 <_scanf_float+0x192>
 80081f6:	2d03      	cmp	r5, #3
 80081f8:	d0e2      	beq.n	80081c0 <_scanf_float+0x1dc>
 80081fa:	2d05      	cmp	r5, #5
 80081fc:	e7de      	b.n	80081bc <_scanf_float+0x1d8>
 80081fe:	2d02      	cmp	r5, #2
 8008200:	f47f af22 	bne.w	8008048 <_scanf_float+0x64>
 8008204:	2503      	movs	r5, #3
 8008206:	e7b6      	b.n	8008176 <_scanf_float+0x192>
 8008208:	2d06      	cmp	r5, #6
 800820a:	f47f af1d 	bne.w	8008048 <_scanf_float+0x64>
 800820e:	2507      	movs	r5, #7
 8008210:	e7b1      	b.n	8008176 <_scanf_float+0x192>
 8008212:	6822      	ldr	r2, [r4, #0]
 8008214:	0591      	lsls	r1, r2, #22
 8008216:	f57f af17 	bpl.w	8008048 <_scanf_float+0x64>
 800821a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800821e:	6022      	str	r2, [r4, #0]
 8008220:	f8cd 9008 	str.w	r9, [sp, #8]
 8008224:	e7a7      	b.n	8008176 <_scanf_float+0x192>
 8008226:	6822      	ldr	r2, [r4, #0]
 8008228:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800822c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008230:	d006      	beq.n	8008240 <_scanf_float+0x25c>
 8008232:	0550      	lsls	r0, r2, #21
 8008234:	f57f af08 	bpl.w	8008048 <_scanf_float+0x64>
 8008238:	f1b9 0f00 	cmp.w	r9, #0
 800823c:	f000 80de 	beq.w	80083fc <_scanf_float+0x418>
 8008240:	0591      	lsls	r1, r2, #22
 8008242:	bf58      	it	pl
 8008244:	9902      	ldrpl	r1, [sp, #8]
 8008246:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800824a:	bf58      	it	pl
 800824c:	eba9 0101 	subpl.w	r1, r9, r1
 8008250:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008254:	bf58      	it	pl
 8008256:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800825a:	6022      	str	r2, [r4, #0]
 800825c:	f04f 0900 	mov.w	r9, #0
 8008260:	e789      	b.n	8008176 <_scanf_float+0x192>
 8008262:	f04f 0a03 	mov.w	sl, #3
 8008266:	e786      	b.n	8008176 <_scanf_float+0x192>
 8008268:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800826c:	4639      	mov	r1, r7
 800826e:	4640      	mov	r0, r8
 8008270:	4798      	blx	r3
 8008272:	2800      	cmp	r0, #0
 8008274:	f43f aedb 	beq.w	800802e <_scanf_float+0x4a>
 8008278:	e6e6      	b.n	8008048 <_scanf_float+0x64>
 800827a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800827e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008282:	463a      	mov	r2, r7
 8008284:	4640      	mov	r0, r8
 8008286:	4798      	blx	r3
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	3b01      	subs	r3, #1
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	e6e8      	b.n	8008062 <_scanf_float+0x7e>
 8008290:	1e6b      	subs	r3, r5, #1
 8008292:	2b06      	cmp	r3, #6
 8008294:	d824      	bhi.n	80082e0 <_scanf_float+0x2fc>
 8008296:	2d02      	cmp	r5, #2
 8008298:	d836      	bhi.n	8008308 <_scanf_float+0x324>
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	429e      	cmp	r6, r3
 800829e:	f67f aee4 	bls.w	800806a <_scanf_float+0x86>
 80082a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082aa:	463a      	mov	r2, r7
 80082ac:	4640      	mov	r0, r8
 80082ae:	4798      	blx	r3
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	6123      	str	r3, [r4, #16]
 80082b6:	e7f0      	b.n	800829a <_scanf_float+0x2b6>
 80082b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80082c0:	463a      	mov	r2, r7
 80082c2:	4640      	mov	r0, r8
 80082c4:	4798      	blx	r3
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082d0:	fa5f fa8a 	uxtb.w	sl, sl
 80082d4:	f1ba 0f02 	cmp.w	sl, #2
 80082d8:	d1ee      	bne.n	80082b8 <_scanf_float+0x2d4>
 80082da:	3d03      	subs	r5, #3
 80082dc:	b2ed      	uxtb	r5, r5
 80082de:	1b76      	subs	r6, r6, r5
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	05da      	lsls	r2, r3, #23
 80082e4:	d530      	bpl.n	8008348 <_scanf_float+0x364>
 80082e6:	055b      	lsls	r3, r3, #21
 80082e8:	d511      	bpl.n	800830e <_scanf_float+0x32a>
 80082ea:	9b01      	ldr	r3, [sp, #4]
 80082ec:	429e      	cmp	r6, r3
 80082ee:	f67f aebc 	bls.w	800806a <_scanf_float+0x86>
 80082f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082fa:	463a      	mov	r2, r7
 80082fc:	4640      	mov	r0, r8
 80082fe:	4798      	blx	r3
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	3b01      	subs	r3, #1
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	e7f0      	b.n	80082ea <_scanf_float+0x306>
 8008308:	46aa      	mov	sl, r5
 800830a:	46b3      	mov	fp, r6
 800830c:	e7de      	b.n	80082cc <_scanf_float+0x2e8>
 800830e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	2965      	cmp	r1, #101	@ 0x65
 8008316:	f103 33ff 	add.w	r3, r3, #4294967295
 800831a:	f106 35ff 	add.w	r5, r6, #4294967295
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	d00c      	beq.n	800833c <_scanf_float+0x358>
 8008322:	2945      	cmp	r1, #69	@ 0x45
 8008324:	d00a      	beq.n	800833c <_scanf_float+0x358>
 8008326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800832a:	463a      	mov	r2, r7
 800832c:	4640      	mov	r0, r8
 800832e:	4798      	blx	r3
 8008330:	6923      	ldr	r3, [r4, #16]
 8008332:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008336:	3b01      	subs	r3, #1
 8008338:	1eb5      	subs	r5, r6, #2
 800833a:	6123      	str	r3, [r4, #16]
 800833c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008340:	463a      	mov	r2, r7
 8008342:	4640      	mov	r0, r8
 8008344:	4798      	blx	r3
 8008346:	462e      	mov	r6, r5
 8008348:	6822      	ldr	r2, [r4, #0]
 800834a:	f012 0210 	ands.w	r2, r2, #16
 800834e:	d001      	beq.n	8008354 <_scanf_float+0x370>
 8008350:	2000      	movs	r0, #0
 8008352:	e68b      	b.n	800806c <_scanf_float+0x88>
 8008354:	7032      	strb	r2, [r6, #0]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800835c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008360:	d11c      	bne.n	800839c <_scanf_float+0x3b8>
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	454b      	cmp	r3, r9
 8008366:	eba3 0209 	sub.w	r2, r3, r9
 800836a:	d123      	bne.n	80083b4 <_scanf_float+0x3d0>
 800836c:	9901      	ldr	r1, [sp, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	4640      	mov	r0, r8
 8008372:	f7ff f9cd 	bl	8007710 <_strtod_r>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	6821      	ldr	r1, [r4, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f011 0f02 	tst.w	r1, #2
 8008380:	ec57 6b10 	vmov	r6, r7, d0
 8008384:	f103 0204 	add.w	r2, r3, #4
 8008388:	d01f      	beq.n	80083ca <_scanf_float+0x3e6>
 800838a:	9903      	ldr	r1, [sp, #12]
 800838c:	600a      	str	r2, [r1, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	e9c3 6700 	strd	r6, r7, [r3]
 8008394:	68e3      	ldr	r3, [r4, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60e3      	str	r3, [r4, #12]
 800839a:	e7d9      	b.n	8008350 <_scanf_float+0x36c>
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0e4      	beq.n	800836c <_scanf_float+0x388>
 80083a2:	9905      	ldr	r1, [sp, #20]
 80083a4:	230a      	movs	r3, #10
 80083a6:	3101      	adds	r1, #1
 80083a8:	4640      	mov	r0, r8
 80083aa:	f002 fb45 	bl	800aa38 <_strtol_r>
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	9e05      	ldr	r6, [sp, #20]
 80083b2:	1ac2      	subs	r2, r0, r3
 80083b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80083b8:	429e      	cmp	r6, r3
 80083ba:	bf28      	it	cs
 80083bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80083c0:	4910      	ldr	r1, [pc, #64]	@ (8008404 <_scanf_float+0x420>)
 80083c2:	4630      	mov	r0, r6
 80083c4:	f000 f954 	bl	8008670 <siprintf>
 80083c8:	e7d0      	b.n	800836c <_scanf_float+0x388>
 80083ca:	f011 0f04 	tst.w	r1, #4
 80083ce:	9903      	ldr	r1, [sp, #12]
 80083d0:	600a      	str	r2, [r1, #0]
 80083d2:	d1dc      	bne.n	800838e <_scanf_float+0x3aa>
 80083d4:	681d      	ldr	r5, [r3, #0]
 80083d6:	4632      	mov	r2, r6
 80083d8:	463b      	mov	r3, r7
 80083da:	4630      	mov	r0, r6
 80083dc:	4639      	mov	r1, r7
 80083de:	f7f8 fbad 	bl	8000b3c <__aeabi_dcmpun>
 80083e2:	b128      	cbz	r0, 80083f0 <_scanf_float+0x40c>
 80083e4:	4808      	ldr	r0, [pc, #32]	@ (8008408 <_scanf_float+0x424>)
 80083e6:	f000 fb3f 	bl	8008a68 <nanf>
 80083ea:	ed85 0a00 	vstr	s0, [r5]
 80083ee:	e7d1      	b.n	8008394 <_scanf_float+0x3b0>
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f8 fc00 	bl	8000bf8 <__aeabi_d2f>
 80083f8:	6028      	str	r0, [r5, #0]
 80083fa:	e7cb      	b.n	8008394 <_scanf_float+0x3b0>
 80083fc:	f04f 0900 	mov.w	r9, #0
 8008400:	e629      	b.n	8008056 <_scanf_float+0x72>
 8008402:	bf00      	nop
 8008404:	0800b8c4 	.word	0x0800b8c4
 8008408:	0800b97d 	.word	0x0800b97d

0800840c <std>:
 800840c:	2300      	movs	r3, #0
 800840e:	b510      	push	{r4, lr}
 8008410:	4604      	mov	r4, r0
 8008412:	e9c0 3300 	strd	r3, r3, [r0]
 8008416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800841a:	6083      	str	r3, [r0, #8]
 800841c:	8181      	strh	r1, [r0, #12]
 800841e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008420:	81c2      	strh	r2, [r0, #14]
 8008422:	6183      	str	r3, [r0, #24]
 8008424:	4619      	mov	r1, r3
 8008426:	2208      	movs	r2, #8
 8008428:	305c      	adds	r0, #92	@ 0x5c
 800842a:	f000 fa19 	bl	8008860 <memset>
 800842e:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <std+0x58>)
 8008430:	6263      	str	r3, [r4, #36]	@ 0x24
 8008432:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <std+0x5c>)
 8008434:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <std+0x60>)
 8008438:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <std+0x64>)
 800843c:	6323      	str	r3, [r4, #48]	@ 0x30
 800843e:	4b0d      	ldr	r3, [pc, #52]	@ (8008474 <std+0x68>)
 8008440:	6224      	str	r4, [r4, #32]
 8008442:	429c      	cmp	r4, r3
 8008444:	d006      	beq.n	8008454 <std+0x48>
 8008446:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800844a:	4294      	cmp	r4, r2
 800844c:	d002      	beq.n	8008454 <std+0x48>
 800844e:	33d0      	adds	r3, #208	@ 0xd0
 8008450:	429c      	cmp	r4, r3
 8008452:	d105      	bne.n	8008460 <std+0x54>
 8008454:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800845c:	f000 baea 	b.w	8008a34 <__retarget_lock_init_recursive>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	bf00      	nop
 8008464:	080086b1 	.word	0x080086b1
 8008468:	080086d3 	.word	0x080086d3
 800846c:	0800870b 	.word	0x0800870b
 8008470:	0800872f 	.word	0x0800872f
 8008474:	2000060c 	.word	0x2000060c

08008478 <stdio_exit_handler>:
 8008478:	4a02      	ldr	r2, [pc, #8]	@ (8008484 <stdio_exit_handler+0xc>)
 800847a:	4903      	ldr	r1, [pc, #12]	@ (8008488 <stdio_exit_handler+0x10>)
 800847c:	4803      	ldr	r0, [pc, #12]	@ (800848c <stdio_exit_handler+0x14>)
 800847e:	f000 b869 	b.w	8008554 <_fwalk_sglue>
 8008482:	bf00      	nop
 8008484:	20000014 	.word	0x20000014
 8008488:	0800b091 	.word	0x0800b091
 800848c:	20000190 	.word	0x20000190

08008490 <cleanup_stdio>:
 8008490:	6841      	ldr	r1, [r0, #4]
 8008492:	4b0c      	ldr	r3, [pc, #48]	@ (80084c4 <cleanup_stdio+0x34>)
 8008494:	4299      	cmp	r1, r3
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	d001      	beq.n	80084a0 <cleanup_stdio+0x10>
 800849c:	f002 fdf8 	bl	800b090 <_fflush_r>
 80084a0:	68a1      	ldr	r1, [r4, #8]
 80084a2:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <cleanup_stdio+0x38>)
 80084a4:	4299      	cmp	r1, r3
 80084a6:	d002      	beq.n	80084ae <cleanup_stdio+0x1e>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f002 fdf1 	bl	800b090 <_fflush_r>
 80084ae:	68e1      	ldr	r1, [r4, #12]
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <cleanup_stdio+0x3c>)
 80084b2:	4299      	cmp	r1, r3
 80084b4:	d004      	beq.n	80084c0 <cleanup_stdio+0x30>
 80084b6:	4620      	mov	r0, r4
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084bc:	f002 bde8 	b.w	800b090 <_fflush_r>
 80084c0:	bd10      	pop	{r4, pc}
 80084c2:	bf00      	nop
 80084c4:	2000060c 	.word	0x2000060c
 80084c8:	20000674 	.word	0x20000674
 80084cc:	200006dc 	.word	0x200006dc

080084d0 <global_stdio_init.part.0>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008500 <global_stdio_init.part.0+0x30>)
 80084d4:	4c0b      	ldr	r4, [pc, #44]	@ (8008504 <global_stdio_init.part.0+0x34>)
 80084d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008508 <global_stdio_init.part.0+0x38>)
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	4620      	mov	r0, r4
 80084dc:	2200      	movs	r2, #0
 80084de:	2104      	movs	r1, #4
 80084e0:	f7ff ff94 	bl	800840c <std>
 80084e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084e8:	2201      	movs	r2, #1
 80084ea:	2109      	movs	r1, #9
 80084ec:	f7ff ff8e 	bl	800840c <std>
 80084f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084f4:	2202      	movs	r2, #2
 80084f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fa:	2112      	movs	r1, #18
 80084fc:	f7ff bf86 	b.w	800840c <std>
 8008500:	20000744 	.word	0x20000744
 8008504:	2000060c 	.word	0x2000060c
 8008508:	08008479 	.word	0x08008479

0800850c <__sfp_lock_acquire>:
 800850c:	4801      	ldr	r0, [pc, #4]	@ (8008514 <__sfp_lock_acquire+0x8>)
 800850e:	f000 ba92 	b.w	8008a36 <__retarget_lock_acquire_recursive>
 8008512:	bf00      	nop
 8008514:	2000074d 	.word	0x2000074d

08008518 <__sfp_lock_release>:
 8008518:	4801      	ldr	r0, [pc, #4]	@ (8008520 <__sfp_lock_release+0x8>)
 800851a:	f000 ba8d 	b.w	8008a38 <__retarget_lock_release_recursive>
 800851e:	bf00      	nop
 8008520:	2000074d 	.word	0x2000074d

08008524 <__sinit>:
 8008524:	b510      	push	{r4, lr}
 8008526:	4604      	mov	r4, r0
 8008528:	f7ff fff0 	bl	800850c <__sfp_lock_acquire>
 800852c:	6a23      	ldr	r3, [r4, #32]
 800852e:	b11b      	cbz	r3, 8008538 <__sinit+0x14>
 8008530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008534:	f7ff bff0 	b.w	8008518 <__sfp_lock_release>
 8008538:	4b04      	ldr	r3, [pc, #16]	@ (800854c <__sinit+0x28>)
 800853a:	6223      	str	r3, [r4, #32]
 800853c:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <__sinit+0x2c>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f5      	bne.n	8008530 <__sinit+0xc>
 8008544:	f7ff ffc4 	bl	80084d0 <global_stdio_init.part.0>
 8008548:	e7f2      	b.n	8008530 <__sinit+0xc>
 800854a:	bf00      	nop
 800854c:	08008491 	.word	0x08008491
 8008550:	20000744 	.word	0x20000744

08008554 <_fwalk_sglue>:
 8008554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008558:	4607      	mov	r7, r0
 800855a:	4688      	mov	r8, r1
 800855c:	4614      	mov	r4, r2
 800855e:	2600      	movs	r6, #0
 8008560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008564:	f1b9 0901 	subs.w	r9, r9, #1
 8008568:	d505      	bpl.n	8008576 <_fwalk_sglue+0x22>
 800856a:	6824      	ldr	r4, [r4, #0]
 800856c:	2c00      	cmp	r4, #0
 800856e:	d1f7      	bne.n	8008560 <_fwalk_sglue+0xc>
 8008570:	4630      	mov	r0, r6
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d907      	bls.n	800858c <_fwalk_sglue+0x38>
 800857c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008580:	3301      	adds	r3, #1
 8008582:	d003      	beq.n	800858c <_fwalk_sglue+0x38>
 8008584:	4629      	mov	r1, r5
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	4306      	orrs	r6, r0
 800858c:	3568      	adds	r5, #104	@ 0x68
 800858e:	e7e9      	b.n	8008564 <_fwalk_sglue+0x10>

08008590 <iprintf>:
 8008590:	b40f      	push	{r0, r1, r2, r3}
 8008592:	b507      	push	{r0, r1, r2, lr}
 8008594:	4906      	ldr	r1, [pc, #24]	@ (80085b0 <iprintf+0x20>)
 8008596:	ab04      	add	r3, sp, #16
 8008598:	6808      	ldr	r0, [r1, #0]
 800859a:	f853 2b04 	ldr.w	r2, [r3], #4
 800859e:	6881      	ldr	r1, [r0, #8]
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	f002 fbd9 	bl	800ad58 <_vfiprintf_r>
 80085a6:	b003      	add	sp, #12
 80085a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085ac:	b004      	add	sp, #16
 80085ae:	4770      	bx	lr
 80085b0:	2000018c 	.word	0x2000018c

080085b4 <_puts_r>:
 80085b4:	6a03      	ldr	r3, [r0, #32]
 80085b6:	b570      	push	{r4, r5, r6, lr}
 80085b8:	6884      	ldr	r4, [r0, #8]
 80085ba:	4605      	mov	r5, r0
 80085bc:	460e      	mov	r6, r1
 80085be:	b90b      	cbnz	r3, 80085c4 <_puts_r+0x10>
 80085c0:	f7ff ffb0 	bl	8008524 <__sinit>
 80085c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085c6:	07db      	lsls	r3, r3, #31
 80085c8:	d405      	bmi.n	80085d6 <_puts_r+0x22>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	0598      	lsls	r0, r3, #22
 80085ce:	d402      	bmi.n	80085d6 <_puts_r+0x22>
 80085d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085d2:	f000 fa30 	bl	8008a36 <__retarget_lock_acquire_recursive>
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	0719      	lsls	r1, r3, #28
 80085da:	d502      	bpl.n	80085e2 <_puts_r+0x2e>
 80085dc:	6923      	ldr	r3, [r4, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d135      	bne.n	800864e <_puts_r+0x9a>
 80085e2:	4621      	mov	r1, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 f8e5 	bl	80087b4 <__swsetup_r>
 80085ea:	b380      	cbz	r0, 800864e <_puts_r+0x9a>
 80085ec:	f04f 35ff 	mov.w	r5, #4294967295
 80085f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085f2:	07da      	lsls	r2, r3, #31
 80085f4:	d405      	bmi.n	8008602 <_puts_r+0x4e>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	059b      	lsls	r3, r3, #22
 80085fa:	d402      	bmi.n	8008602 <_puts_r+0x4e>
 80085fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085fe:	f000 fa1b 	bl	8008a38 <__retarget_lock_release_recursive>
 8008602:	4628      	mov	r0, r5
 8008604:	bd70      	pop	{r4, r5, r6, pc}
 8008606:	2b00      	cmp	r3, #0
 8008608:	da04      	bge.n	8008614 <_puts_r+0x60>
 800860a:	69a2      	ldr	r2, [r4, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	dc17      	bgt.n	8008640 <_puts_r+0x8c>
 8008610:	290a      	cmp	r1, #10
 8008612:	d015      	beq.n	8008640 <_puts_r+0x8c>
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	6022      	str	r2, [r4, #0]
 800861a:	7019      	strb	r1, [r3, #0]
 800861c:	68a3      	ldr	r3, [r4, #8]
 800861e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008622:	3b01      	subs	r3, #1
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	2900      	cmp	r1, #0
 8008628:	d1ed      	bne.n	8008606 <_puts_r+0x52>
 800862a:	2b00      	cmp	r3, #0
 800862c:	da11      	bge.n	8008652 <_puts_r+0x9e>
 800862e:	4622      	mov	r2, r4
 8008630:	210a      	movs	r1, #10
 8008632:	4628      	mov	r0, r5
 8008634:	f000 f87f 	bl	8008736 <__swbuf_r>
 8008638:	3001      	adds	r0, #1
 800863a:	d0d7      	beq.n	80085ec <_puts_r+0x38>
 800863c:	250a      	movs	r5, #10
 800863e:	e7d7      	b.n	80085f0 <_puts_r+0x3c>
 8008640:	4622      	mov	r2, r4
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f877 	bl	8008736 <__swbuf_r>
 8008648:	3001      	adds	r0, #1
 800864a:	d1e7      	bne.n	800861c <_puts_r+0x68>
 800864c:	e7ce      	b.n	80085ec <_puts_r+0x38>
 800864e:	3e01      	subs	r6, #1
 8008650:	e7e4      	b.n	800861c <_puts_r+0x68>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	6022      	str	r2, [r4, #0]
 8008658:	220a      	movs	r2, #10
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	e7ee      	b.n	800863c <_puts_r+0x88>
	...

08008660 <puts>:
 8008660:	4b02      	ldr	r3, [pc, #8]	@ (800866c <puts+0xc>)
 8008662:	4601      	mov	r1, r0
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	f7ff bfa5 	b.w	80085b4 <_puts_r>
 800866a:	bf00      	nop
 800866c:	2000018c 	.word	0x2000018c

08008670 <siprintf>:
 8008670:	b40e      	push	{r1, r2, r3}
 8008672:	b500      	push	{lr}
 8008674:	b09c      	sub	sp, #112	@ 0x70
 8008676:	ab1d      	add	r3, sp, #116	@ 0x74
 8008678:	9002      	str	r0, [sp, #8]
 800867a:	9006      	str	r0, [sp, #24]
 800867c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008680:	4809      	ldr	r0, [pc, #36]	@ (80086a8 <siprintf+0x38>)
 8008682:	9107      	str	r1, [sp, #28]
 8008684:	9104      	str	r1, [sp, #16]
 8008686:	4909      	ldr	r1, [pc, #36]	@ (80086ac <siprintf+0x3c>)
 8008688:	f853 2b04 	ldr.w	r2, [r3], #4
 800868c:	9105      	str	r1, [sp, #20]
 800868e:	6800      	ldr	r0, [r0, #0]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	a902      	add	r1, sp, #8
 8008694:	f002 fa3a 	bl	800ab0c <_svfiprintf_r>
 8008698:	9b02      	ldr	r3, [sp, #8]
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	b01c      	add	sp, #112	@ 0x70
 80086a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a4:	b003      	add	sp, #12
 80086a6:	4770      	bx	lr
 80086a8:	2000018c 	.word	0x2000018c
 80086ac:	ffff0208 	.word	0xffff0208

080086b0 <__sread>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b8:	f000 f96e 	bl	8008998 <_read_r>
 80086bc:	2800      	cmp	r0, #0
 80086be:	bfab      	itete	ge
 80086c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086c2:	89a3      	ldrhlt	r3, [r4, #12]
 80086c4:	181b      	addge	r3, r3, r0
 80086c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086ca:	bfac      	ite	ge
 80086cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086ce:	81a3      	strhlt	r3, [r4, #12]
 80086d0:	bd10      	pop	{r4, pc}

080086d2 <__swrite>:
 80086d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d6:	461f      	mov	r7, r3
 80086d8:	898b      	ldrh	r3, [r1, #12]
 80086da:	05db      	lsls	r3, r3, #23
 80086dc:	4605      	mov	r5, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	4616      	mov	r6, r2
 80086e2:	d505      	bpl.n	80086f0 <__swrite+0x1e>
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	2302      	movs	r3, #2
 80086ea:	2200      	movs	r2, #0
 80086ec:	f000 f942 	bl	8008974 <_lseek_r>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	4632      	mov	r2, r6
 80086fe:	463b      	mov	r3, r7
 8008700:	4628      	mov	r0, r5
 8008702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	f000 b959 	b.w	80089bc <_write_r>

0800870a <__sseek>:
 800870a:	b510      	push	{r4, lr}
 800870c:	460c      	mov	r4, r1
 800870e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008712:	f000 f92f 	bl	8008974 <_lseek_r>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	bf15      	itete	ne
 800871c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800871e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008726:	81a3      	strheq	r3, [r4, #12]
 8008728:	bf18      	it	ne
 800872a:	81a3      	strhne	r3, [r4, #12]
 800872c:	bd10      	pop	{r4, pc}

0800872e <__sclose>:
 800872e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008732:	f000 b90f 	b.w	8008954 <_close_r>

08008736 <__swbuf_r>:
 8008736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008738:	460e      	mov	r6, r1
 800873a:	4614      	mov	r4, r2
 800873c:	4605      	mov	r5, r0
 800873e:	b118      	cbz	r0, 8008748 <__swbuf_r+0x12>
 8008740:	6a03      	ldr	r3, [r0, #32]
 8008742:	b90b      	cbnz	r3, 8008748 <__swbuf_r+0x12>
 8008744:	f7ff feee 	bl	8008524 <__sinit>
 8008748:	69a3      	ldr	r3, [r4, #24]
 800874a:	60a3      	str	r3, [r4, #8]
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	071a      	lsls	r2, r3, #28
 8008750:	d501      	bpl.n	8008756 <__swbuf_r+0x20>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	b943      	cbnz	r3, 8008768 <__swbuf_r+0x32>
 8008756:	4621      	mov	r1, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f000 f82b 	bl	80087b4 <__swsetup_r>
 800875e:	b118      	cbz	r0, 8008768 <__swbuf_r+0x32>
 8008760:	f04f 37ff 	mov.w	r7, #4294967295
 8008764:	4638      	mov	r0, r7
 8008766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	1a98      	subs	r0, r3, r2
 800876e:	6963      	ldr	r3, [r4, #20]
 8008770:	b2f6      	uxtb	r6, r6
 8008772:	4283      	cmp	r3, r0
 8008774:	4637      	mov	r7, r6
 8008776:	dc05      	bgt.n	8008784 <__swbuf_r+0x4e>
 8008778:	4621      	mov	r1, r4
 800877a:	4628      	mov	r0, r5
 800877c:	f002 fc88 	bl	800b090 <_fflush_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d1ed      	bne.n	8008760 <__swbuf_r+0x2a>
 8008784:	68a3      	ldr	r3, [r4, #8]
 8008786:	3b01      	subs	r3, #1
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	6022      	str	r2, [r4, #0]
 8008790:	701e      	strb	r6, [r3, #0]
 8008792:	6962      	ldr	r2, [r4, #20]
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	429a      	cmp	r2, r3
 8008798:	d004      	beq.n	80087a4 <__swbuf_r+0x6e>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	07db      	lsls	r3, r3, #31
 800879e:	d5e1      	bpl.n	8008764 <__swbuf_r+0x2e>
 80087a0:	2e0a      	cmp	r6, #10
 80087a2:	d1df      	bne.n	8008764 <__swbuf_r+0x2e>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f002 fc72 	bl	800b090 <_fflush_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0d9      	beq.n	8008764 <__swbuf_r+0x2e>
 80087b0:	e7d6      	b.n	8008760 <__swbuf_r+0x2a>
	...

080087b4 <__swsetup_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4b29      	ldr	r3, [pc, #164]	@ (800885c <__swsetup_r+0xa8>)
 80087b8:	4605      	mov	r5, r0
 80087ba:	6818      	ldr	r0, [r3, #0]
 80087bc:	460c      	mov	r4, r1
 80087be:	b118      	cbz	r0, 80087c8 <__swsetup_r+0x14>
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	b90b      	cbnz	r3, 80087c8 <__swsetup_r+0x14>
 80087c4:	f7ff feae 	bl	8008524 <__sinit>
 80087c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087cc:	0719      	lsls	r1, r3, #28
 80087ce:	d422      	bmi.n	8008816 <__swsetup_r+0x62>
 80087d0:	06da      	lsls	r2, r3, #27
 80087d2:	d407      	bmi.n	80087e4 <__swsetup_r+0x30>
 80087d4:	2209      	movs	r2, #9
 80087d6:	602a      	str	r2, [r5, #0]
 80087d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	f04f 30ff 	mov.w	r0, #4294967295
 80087e2:	e033      	b.n	800884c <__swsetup_r+0x98>
 80087e4:	0758      	lsls	r0, r3, #29
 80087e6:	d512      	bpl.n	800880e <__swsetup_r+0x5a>
 80087e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ea:	b141      	cbz	r1, 80087fe <__swsetup_r+0x4a>
 80087ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d002      	beq.n	80087fa <__swsetup_r+0x46>
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 ffa7 	bl	8009748 <_free_r>
 80087fa:	2300      	movs	r3, #0
 80087fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	2300      	movs	r3, #0
 8008808:	6063      	str	r3, [r4, #4]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f043 0308 	orr.w	r3, r3, #8
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	b94b      	cbnz	r3, 800882e <__swsetup_r+0x7a>
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008824:	d003      	beq.n	800882e <__swsetup_r+0x7a>
 8008826:	4621      	mov	r1, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f002 fc91 	bl	800b150 <__smakebuf_r>
 800882e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008832:	f013 0201 	ands.w	r2, r3, #1
 8008836:	d00a      	beq.n	800884e <__swsetup_r+0x9a>
 8008838:	2200      	movs	r2, #0
 800883a:	60a2      	str	r2, [r4, #8]
 800883c:	6962      	ldr	r2, [r4, #20]
 800883e:	4252      	negs	r2, r2
 8008840:	61a2      	str	r2, [r4, #24]
 8008842:	6922      	ldr	r2, [r4, #16]
 8008844:	b942      	cbnz	r2, 8008858 <__swsetup_r+0xa4>
 8008846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800884a:	d1c5      	bne.n	80087d8 <__swsetup_r+0x24>
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	0799      	lsls	r1, r3, #30
 8008850:	bf58      	it	pl
 8008852:	6962      	ldrpl	r2, [r4, #20]
 8008854:	60a2      	str	r2, [r4, #8]
 8008856:	e7f4      	b.n	8008842 <__swsetup_r+0x8e>
 8008858:	2000      	movs	r0, #0
 800885a:	e7f7      	b.n	800884c <__swsetup_r+0x98>
 800885c:	2000018c 	.word	0x2000018c

08008860 <memset>:
 8008860:	4402      	add	r2, r0
 8008862:	4603      	mov	r3, r0
 8008864:	4293      	cmp	r3, r2
 8008866:	d100      	bne.n	800886a <memset+0xa>
 8008868:	4770      	bx	lr
 800886a:	f803 1b01 	strb.w	r1, [r3], #1
 800886e:	e7f9      	b.n	8008864 <memset+0x4>

08008870 <strncmp>:
 8008870:	b510      	push	{r4, lr}
 8008872:	b16a      	cbz	r2, 8008890 <strncmp+0x20>
 8008874:	3901      	subs	r1, #1
 8008876:	1884      	adds	r4, r0, r2
 8008878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008880:	429a      	cmp	r2, r3
 8008882:	d103      	bne.n	800888c <strncmp+0x1c>
 8008884:	42a0      	cmp	r0, r4
 8008886:	d001      	beq.n	800888c <strncmp+0x1c>
 8008888:	2a00      	cmp	r2, #0
 800888a:	d1f5      	bne.n	8008878 <strncmp+0x8>
 800888c:	1ad0      	subs	r0, r2, r3
 800888e:	bd10      	pop	{r4, pc}
 8008890:	4610      	mov	r0, r2
 8008892:	e7fc      	b.n	800888e <strncmp+0x1e>

08008894 <strtok>:
 8008894:	4b16      	ldr	r3, [pc, #88]	@ (80088f0 <strtok+0x5c>)
 8008896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889a:	681f      	ldr	r7, [r3, #0]
 800889c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800889e:	4605      	mov	r5, r0
 80088a0:	460e      	mov	r6, r1
 80088a2:	b9ec      	cbnz	r4, 80088e0 <strtok+0x4c>
 80088a4:	2050      	movs	r0, #80	@ 0x50
 80088a6:	f001 fad3 	bl	8009e50 <malloc>
 80088aa:	4602      	mov	r2, r0
 80088ac:	6478      	str	r0, [r7, #68]	@ 0x44
 80088ae:	b920      	cbnz	r0, 80088ba <strtok+0x26>
 80088b0:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <strtok+0x60>)
 80088b2:	4811      	ldr	r0, [pc, #68]	@ (80088f8 <strtok+0x64>)
 80088b4:	215b      	movs	r1, #91	@ 0x5b
 80088b6:	f000 f8dd 	bl	8008a74 <__assert_func>
 80088ba:	e9c0 4400 	strd	r4, r4, [r0]
 80088be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80088c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80088c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80088ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80088ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80088d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80088d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80088da:	6184      	str	r4, [r0, #24]
 80088dc:	7704      	strb	r4, [r0, #28]
 80088de:	6244      	str	r4, [r0, #36]	@ 0x24
 80088e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	2301      	movs	r3, #1
 80088e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	f000 b806 	b.w	80088fc <__strtok_r>
 80088f0:	2000018c 	.word	0x2000018c
 80088f4:	0800b8c9 	.word	0x0800b8c9
 80088f8:	0800b8e0 	.word	0x0800b8e0

080088fc <__strtok_r>:
 80088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fe:	4604      	mov	r4, r0
 8008900:	b908      	cbnz	r0, 8008906 <__strtok_r+0xa>
 8008902:	6814      	ldr	r4, [r2, #0]
 8008904:	b144      	cbz	r4, 8008918 <__strtok_r+0x1c>
 8008906:	4620      	mov	r0, r4
 8008908:	f814 5b01 	ldrb.w	r5, [r4], #1
 800890c:	460f      	mov	r7, r1
 800890e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008912:	b91e      	cbnz	r6, 800891c <__strtok_r+0x20>
 8008914:	b965      	cbnz	r5, 8008930 <__strtok_r+0x34>
 8008916:	6015      	str	r5, [r2, #0]
 8008918:	2000      	movs	r0, #0
 800891a:	e005      	b.n	8008928 <__strtok_r+0x2c>
 800891c:	42b5      	cmp	r5, r6
 800891e:	d1f6      	bne.n	800890e <__strtok_r+0x12>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f0      	bne.n	8008906 <__strtok_r+0xa>
 8008924:	6014      	str	r4, [r2, #0]
 8008926:	7003      	strb	r3, [r0, #0]
 8008928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800892a:	461c      	mov	r4, r3
 800892c:	e00c      	b.n	8008948 <__strtok_r+0x4c>
 800892e:	b915      	cbnz	r5, 8008936 <__strtok_r+0x3a>
 8008930:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008934:	460e      	mov	r6, r1
 8008936:	f816 5b01 	ldrb.w	r5, [r6], #1
 800893a:	42ab      	cmp	r3, r5
 800893c:	d1f7      	bne.n	800892e <__strtok_r+0x32>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f3      	beq.n	800892a <__strtok_r+0x2e>
 8008942:	2300      	movs	r3, #0
 8008944:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008948:	6014      	str	r4, [r2, #0]
 800894a:	e7ed      	b.n	8008928 <__strtok_r+0x2c>

0800894c <_localeconv_r>:
 800894c:	4800      	ldr	r0, [pc, #0]	@ (8008950 <_localeconv_r+0x4>)
 800894e:	4770      	bx	lr
 8008950:	20000110 	.word	0x20000110

08008954 <_close_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d06      	ldr	r5, [pc, #24]	@ (8008970 <_close_r+0x1c>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	f7fa f80e 	bl	8002980 <_close>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_close_r+0x1a>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_close_r+0x1a>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	20000748 	.word	0x20000748

08008974 <_lseek_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	@ (8008994 <_lseek_r+0x20>)
 8008978:	4604      	mov	r4, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7fa f823 	bl	80029ce <_lseek>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_lseek_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_lseek_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20000748 	.word	0x20000748

08008998 <_read_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d07      	ldr	r5, [pc, #28]	@ (80089b8 <_read_r+0x20>)
 800899c:	4604      	mov	r4, r0
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f9 ffb1 	bl	800290e <_read>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_read_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_read_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20000748 	.word	0x20000748

080089bc <_write_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4d07      	ldr	r5, [pc, #28]	@ (80089dc <_write_r+0x20>)
 80089c0:	4604      	mov	r4, r0
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	2200      	movs	r2, #0
 80089c8:	602a      	str	r2, [r5, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	f7f9 ffbc 	bl	8002948 <_write>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_write_r+0x1e>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_write_r+0x1e>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20000748 	.word	0x20000748

080089e0 <__errno>:
 80089e0:	4b01      	ldr	r3, [pc, #4]	@ (80089e8 <__errno+0x8>)
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000018c 	.word	0x2000018c

080089ec <__libc_init_array>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008a24 <__libc_init_array+0x38>)
 80089f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a28 <__libc_init_array+0x3c>)
 80089f2:	1b64      	subs	r4, r4, r5
 80089f4:	10a4      	asrs	r4, r4, #2
 80089f6:	2600      	movs	r6, #0
 80089f8:	42a6      	cmp	r6, r4
 80089fa:	d109      	bne.n	8008a10 <__libc_init_array+0x24>
 80089fc:	4d0b      	ldr	r5, [pc, #44]	@ (8008a2c <__libc_init_array+0x40>)
 80089fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008a30 <__libc_init_array+0x44>)
 8008a00:	f002 fdca 	bl	800b598 <_init>
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	2600      	movs	r6, #0
 8008a0a:	42a6      	cmp	r6, r4
 8008a0c:	d105      	bne.n	8008a1a <__libc_init_array+0x2e>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a14:	4798      	blx	r3
 8008a16:	3601      	adds	r6, #1
 8008a18:	e7ee      	b.n	80089f8 <__libc_init_array+0xc>
 8008a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1e:	4798      	blx	r3
 8008a20:	3601      	adds	r6, #1
 8008a22:	e7f2      	b.n	8008a0a <__libc_init_array+0x1e>
 8008a24:	0800bccc 	.word	0x0800bccc
 8008a28:	0800bccc 	.word	0x0800bccc
 8008a2c:	0800bccc 	.word	0x0800bccc
 8008a30:	0800bcd0 	.word	0x0800bcd0

08008a34 <__retarget_lock_init_recursive>:
 8008a34:	4770      	bx	lr

08008a36 <__retarget_lock_acquire_recursive>:
 8008a36:	4770      	bx	lr

08008a38 <__retarget_lock_release_recursive>:
 8008a38:	4770      	bx	lr

08008a3a <memcpy>:
 8008a3a:	440a      	add	r2, r1
 8008a3c:	4291      	cmp	r1, r2
 8008a3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a42:	d100      	bne.n	8008a46 <memcpy+0xc>
 8008a44:	4770      	bx	lr
 8008a46:	b510      	push	{r4, lr}
 8008a48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a50:	4291      	cmp	r1, r2
 8008a52:	d1f9      	bne.n	8008a48 <memcpy+0xe>
 8008a54:	bd10      	pop	{r4, pc}
	...

08008a58 <nan>:
 8008a58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a60 <nan+0x8>
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	00000000 	.word	0x00000000
 8008a64:	7ff80000 	.word	0x7ff80000

08008a68 <nanf>:
 8008a68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008a70 <nanf+0x8>
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	7fc00000 	.word	0x7fc00000

08008a74 <__assert_func>:
 8008a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a76:	4614      	mov	r4, r2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	4b09      	ldr	r3, [pc, #36]	@ (8008aa0 <__assert_func+0x2c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4605      	mov	r5, r0
 8008a80:	68d8      	ldr	r0, [r3, #12]
 8008a82:	b954      	cbnz	r4, 8008a9a <__assert_func+0x26>
 8008a84:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <__assert_func+0x30>)
 8008a86:	461c      	mov	r4, r3
 8008a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a8c:	9100      	str	r1, [sp, #0]
 8008a8e:	462b      	mov	r3, r5
 8008a90:	4905      	ldr	r1, [pc, #20]	@ (8008aa8 <__assert_func+0x34>)
 8008a92:	f002 fb25 	bl	800b0e0 <fiprintf>
 8008a96:	f002 fbe3 	bl	800b260 <abort>
 8008a9a:	4b04      	ldr	r3, [pc, #16]	@ (8008aac <__assert_func+0x38>)
 8008a9c:	e7f4      	b.n	8008a88 <__assert_func+0x14>
 8008a9e:	bf00      	nop
 8008aa0:	2000018c 	.word	0x2000018c
 8008aa4:	0800b97d 	.word	0x0800b97d
 8008aa8:	0800b94f 	.word	0x0800b94f
 8008aac:	0800b942 	.word	0x0800b942

08008ab0 <quorem>:
 8008ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	6903      	ldr	r3, [r0, #16]
 8008ab6:	690c      	ldr	r4, [r1, #16]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	4607      	mov	r7, r0
 8008abc:	db7e      	blt.n	8008bbc <quorem+0x10c>
 8008abe:	3c01      	subs	r4, #1
 8008ac0:	f101 0814 	add.w	r8, r1, #20
 8008ac4:	00a3      	lsls	r3, r4, #2
 8008ac6:	f100 0514 	add.w	r5, r0, #20
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ad6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ada:	3301      	adds	r3, #1
 8008adc:	429a      	cmp	r2, r3
 8008ade:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ae2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ae6:	d32e      	bcc.n	8008b46 <quorem+0x96>
 8008ae8:	f04f 0a00 	mov.w	sl, #0
 8008aec:	46c4      	mov	ip, r8
 8008aee:	46ae      	mov	lr, r5
 8008af0:	46d3      	mov	fp, sl
 8008af2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008af6:	b298      	uxth	r0, r3
 8008af8:	fb06 a000 	mla	r0, r6, r0, sl
 8008afc:	0c02      	lsrs	r2, r0, #16
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	fb06 2303 	mla	r3, r6, r3, r2
 8008b04:	f8de 2000 	ldr.w	r2, [lr]
 8008b08:	b280      	uxth	r0, r0
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	1a12      	subs	r2, r2, r0
 8008b0e:	445a      	add	r2, fp
 8008b10:	f8de 0000 	ldr.w	r0, [lr]
 8008b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008b1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008b22:	b292      	uxth	r2, r2
 8008b24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b28:	45e1      	cmp	r9, ip
 8008b2a:	f84e 2b04 	str.w	r2, [lr], #4
 8008b2e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008b32:	d2de      	bcs.n	8008af2 <quorem+0x42>
 8008b34:	9b00      	ldr	r3, [sp, #0]
 8008b36:	58eb      	ldr	r3, [r5, r3]
 8008b38:	b92b      	cbnz	r3, 8008b46 <quorem+0x96>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	3b04      	subs	r3, #4
 8008b3e:	429d      	cmp	r5, r3
 8008b40:	461a      	mov	r2, r3
 8008b42:	d32f      	bcc.n	8008ba4 <quorem+0xf4>
 8008b44:	613c      	str	r4, [r7, #16]
 8008b46:	4638      	mov	r0, r7
 8008b48:	f001 fd0e 	bl	800a568 <__mcmp>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	db25      	blt.n	8008b9c <quorem+0xec>
 8008b50:	4629      	mov	r1, r5
 8008b52:	2000      	movs	r0, #0
 8008b54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b58:	f8d1 c000 	ldr.w	ip, [r1]
 8008b5c:	fa1f fe82 	uxth.w	lr, r2
 8008b60:	fa1f f38c 	uxth.w	r3, ip
 8008b64:	eba3 030e 	sub.w	r3, r3, lr
 8008b68:	4403      	add	r3, r0
 8008b6a:	0c12      	lsrs	r2, r2, #16
 8008b6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b7a:	45c1      	cmp	r9, r8
 8008b7c:	f841 3b04 	str.w	r3, [r1], #4
 8008b80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b84:	d2e6      	bcs.n	8008b54 <quorem+0xa4>
 8008b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b8e:	b922      	cbnz	r2, 8008b9a <quorem+0xea>
 8008b90:	3b04      	subs	r3, #4
 8008b92:	429d      	cmp	r5, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	d30b      	bcc.n	8008bb0 <quorem+0x100>
 8008b98:	613c      	str	r4, [r7, #16]
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	b003      	add	sp, #12
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	3b04      	subs	r3, #4
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	d1cb      	bne.n	8008b44 <quorem+0x94>
 8008bac:	3c01      	subs	r4, #1
 8008bae:	e7c6      	b.n	8008b3e <quorem+0x8e>
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	3b04      	subs	r3, #4
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	d1ef      	bne.n	8008b98 <quorem+0xe8>
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	e7ea      	b.n	8008b92 <quorem+0xe2>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e7ee      	b.n	8008b9e <quorem+0xee>

08008bc0 <_dtoa_r>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	69c7      	ldr	r7, [r0, #28]
 8008bc6:	b099      	sub	sp, #100	@ 0x64
 8008bc8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008bcc:	ec55 4b10 	vmov	r4, r5, d0
 8008bd0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008bd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bd4:	4683      	mov	fp, r0
 8008bd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bda:	b97f      	cbnz	r7, 8008bfc <_dtoa_r+0x3c>
 8008bdc:	2010      	movs	r0, #16
 8008bde:	f001 f937 	bl	8009e50 <malloc>
 8008be2:	4602      	mov	r2, r0
 8008be4:	f8cb 001c 	str.w	r0, [fp, #28]
 8008be8:	b920      	cbnz	r0, 8008bf4 <_dtoa_r+0x34>
 8008bea:	4ba7      	ldr	r3, [pc, #668]	@ (8008e88 <_dtoa_r+0x2c8>)
 8008bec:	21ef      	movs	r1, #239	@ 0xef
 8008bee:	48a7      	ldr	r0, [pc, #668]	@ (8008e8c <_dtoa_r+0x2cc>)
 8008bf0:	f7ff ff40 	bl	8008a74 <__assert_func>
 8008bf4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008bf8:	6007      	str	r7, [r0, #0]
 8008bfa:	60c7      	str	r7, [r0, #12]
 8008bfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c00:	6819      	ldr	r1, [r3, #0]
 8008c02:	b159      	cbz	r1, 8008c1c <_dtoa_r+0x5c>
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	604a      	str	r2, [r1, #4]
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4093      	lsls	r3, r2
 8008c0c:	608b      	str	r3, [r1, #8]
 8008c0e:	4658      	mov	r0, fp
 8008c10:	f001 fa26 	bl	800a060 <_Bfree>
 8008c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	1e2b      	subs	r3, r5, #0
 8008c1e:	bfb9      	ittee	lt
 8008c20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008c24:	9303      	strlt	r3, [sp, #12]
 8008c26:	2300      	movge	r3, #0
 8008c28:	6033      	strge	r3, [r6, #0]
 8008c2a:	9f03      	ldr	r7, [sp, #12]
 8008c2c:	4b98      	ldr	r3, [pc, #608]	@ (8008e90 <_dtoa_r+0x2d0>)
 8008c2e:	bfbc      	itt	lt
 8008c30:	2201      	movlt	r2, #1
 8008c32:	6032      	strlt	r2, [r6, #0]
 8008c34:	43bb      	bics	r3, r7
 8008c36:	d112      	bne.n	8008c5e <_dtoa_r+0x9e>
 8008c38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c44:	4323      	orrs	r3, r4
 8008c46:	f000 854d 	beq.w	80096e4 <_dtoa_r+0xb24>
 8008c4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008ea4 <_dtoa_r+0x2e4>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 854f 	beq.w	80096f4 <_dtoa_r+0xb34>
 8008c56:	f10a 0303 	add.w	r3, sl, #3
 8008c5a:	f000 bd49 	b.w	80096f0 <_dtoa_r+0xb30>
 8008c5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c62:	2200      	movs	r2, #0
 8008c64:	ec51 0b17 	vmov	r0, r1, d7
 8008c68:	2300      	movs	r3, #0
 8008c6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008c6e:	f7f7 ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c72:	4680      	mov	r8, r0
 8008c74:	b158      	cbz	r0, 8008c8e <_dtoa_r+0xce>
 8008c76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c78:	2301      	movs	r3, #1
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c7e:	b113      	cbz	r3, 8008c86 <_dtoa_r+0xc6>
 8008c80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c82:	4b84      	ldr	r3, [pc, #528]	@ (8008e94 <_dtoa_r+0x2d4>)
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ea8 <_dtoa_r+0x2e8>
 8008c8a:	f000 bd33 	b.w	80096f4 <_dtoa_r+0xb34>
 8008c8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c92:	aa16      	add	r2, sp, #88	@ 0x58
 8008c94:	a917      	add	r1, sp, #92	@ 0x5c
 8008c96:	4658      	mov	r0, fp
 8008c98:	f001 fd86 	bl	800a7a8 <__d2b>
 8008c9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ca0:	4681      	mov	r9, r0
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d077      	beq.n	8008d96 <_dtoa_r+0x1d6>
 8008ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ca8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008cb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008cbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	4b74      	ldr	r3, [pc, #464]	@ (8008e98 <_dtoa_r+0x2d8>)
 8008cc6:	f7f7 fae7 	bl	8000298 <__aeabi_dsub>
 8008cca:	a369      	add	r3, pc, #420	@ (adr r3, 8008e70 <_dtoa_r+0x2b0>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fc9a 	bl	8000608 <__aeabi_dmul>
 8008cd4:	a368      	add	r3, pc, #416	@ (adr r3, 8008e78 <_dtoa_r+0x2b8>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f7f7 fadf 	bl	800029c <__adddf3>
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	f7f7 fc26 	bl	8000534 <__aeabi_i2d>
 8008ce8:	a365      	add	r3, pc, #404	@ (adr r3, 8008e80 <_dtoa_r+0x2c0>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7f7 facf 	bl	800029c <__adddf3>
 8008cfe:	4604      	mov	r4, r0
 8008d00:	460d      	mov	r5, r1
 8008d02:	f7f7 ff31 	bl	8000b68 <__aeabi_d2iz>
 8008d06:	2200      	movs	r2, #0
 8008d08:	4607      	mov	r7, r0
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7f7 feec 	bl	8000aec <__aeabi_dcmplt>
 8008d14:	b140      	cbz	r0, 8008d28 <_dtoa_r+0x168>
 8008d16:	4638      	mov	r0, r7
 8008d18:	f7f7 fc0c 	bl	8000534 <__aeabi_i2d>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	f7f7 feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d24:	b900      	cbnz	r0, 8008d28 <_dtoa_r+0x168>
 8008d26:	3f01      	subs	r7, #1
 8008d28:	2f16      	cmp	r7, #22
 8008d2a:	d851      	bhi.n	8008dd0 <_dtoa_r+0x210>
 8008d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8008e9c <_dtoa_r+0x2dc>)
 8008d2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d3a:	f7f7 fed7 	bl	8000aec <__aeabi_dcmplt>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d048      	beq.n	8008dd4 <_dtoa_r+0x214>
 8008d42:	3f01      	subs	r7, #1
 8008d44:	2300      	movs	r3, #0
 8008d46:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d4a:	1b9b      	subs	r3, r3, r6
 8008d4c:	1e5a      	subs	r2, r3, #1
 8008d4e:	bf44      	itt	mi
 8008d50:	f1c3 0801 	rsbmi	r8, r3, #1
 8008d54:	2300      	movmi	r3, #0
 8008d56:	9208      	str	r2, [sp, #32]
 8008d58:	bf54      	ite	pl
 8008d5a:	f04f 0800 	movpl.w	r8, #0
 8008d5e:	9308      	strmi	r3, [sp, #32]
 8008d60:	2f00      	cmp	r7, #0
 8008d62:	db39      	blt.n	8008dd8 <_dtoa_r+0x218>
 8008d64:	9b08      	ldr	r3, [sp, #32]
 8008d66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008d68:	443b      	add	r3, r7
 8008d6a:	9308      	str	r3, [sp, #32]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d72:	2b09      	cmp	r3, #9
 8008d74:	d864      	bhi.n	8008e40 <_dtoa_r+0x280>
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	bfc4      	itt	gt
 8008d7a:	3b04      	subgt	r3, #4
 8008d7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d80:	f1a3 0302 	sub.w	r3, r3, #2
 8008d84:	bfcc      	ite	gt
 8008d86:	2400      	movgt	r4, #0
 8008d88:	2401      	movle	r4, #1
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d863      	bhi.n	8008e56 <_dtoa_r+0x296>
 8008d8e:	e8df f003 	tbb	[pc, r3]
 8008d92:	372a      	.short	0x372a
 8008d94:	5535      	.short	0x5535
 8008d96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d9a:	441e      	add	r6, r3
 8008d9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008da0:	2b20      	cmp	r3, #32
 8008da2:	bfc1      	itttt	gt
 8008da4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008da8:	409f      	lslgt	r7, r3
 8008daa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008dae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008db2:	bfd6      	itet	le
 8008db4:	f1c3 0320 	rsble	r3, r3, #32
 8008db8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008dbc:	fa04 f003 	lslle.w	r0, r4, r3
 8008dc0:	f7f7 fba8 	bl	8000514 <__aeabi_ui2d>
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008dca:	3e01      	subs	r6, #1
 8008dcc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008dce:	e777      	b.n	8008cc0 <_dtoa_r+0x100>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7b8      	b.n	8008d46 <_dtoa_r+0x186>
 8008dd4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008dd6:	e7b7      	b.n	8008d48 <_dtoa_r+0x188>
 8008dd8:	427b      	negs	r3, r7
 8008dda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ddc:	2300      	movs	r3, #0
 8008dde:	eba8 0807 	sub.w	r8, r8, r7
 8008de2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008de4:	e7c4      	b.n	8008d70 <_dtoa_r+0x1b0>
 8008de6:	2300      	movs	r3, #0
 8008de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dc35      	bgt.n	8008e5c <_dtoa_r+0x29c>
 8008df0:	2301      	movs	r3, #1
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9307      	str	r3, [sp, #28]
 8008df6:	461a      	mov	r2, r3
 8008df8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dfa:	e00b      	b.n	8008e14 <_dtoa_r+0x254>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e7f3      	b.n	8008de8 <_dtoa_r+0x228>
 8008e00:	2300      	movs	r3, #0
 8008e02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	9307      	str	r3, [sp, #28]
 8008e10:	bfb8      	it	lt
 8008e12:	2301      	movlt	r3, #1
 8008e14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	f102 0514 	add.w	r5, r2, #20
 8008e20:	429d      	cmp	r5, r3
 8008e22:	d91f      	bls.n	8008e64 <_dtoa_r+0x2a4>
 8008e24:	6041      	str	r1, [r0, #4]
 8008e26:	4658      	mov	r0, fp
 8008e28:	f001 f8da 	bl	8009fe0 <_Balloc>
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d13c      	bne.n	8008eac <_dtoa_r+0x2ec>
 8008e32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ea0 <_dtoa_r+0x2e0>)
 8008e34:	4602      	mov	r2, r0
 8008e36:	f240 11af 	movw	r1, #431	@ 0x1af
 8008e3a:	e6d8      	b.n	8008bee <_dtoa_r+0x2e>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7e0      	b.n	8008e02 <_dtoa_r+0x242>
 8008e40:	2401      	movs	r4, #1
 8008e42:	2300      	movs	r3, #0
 8008e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	2200      	movs	r2, #0
 8008e52:	2312      	movs	r3, #18
 8008e54:	e7d0      	b.n	8008df8 <_dtoa_r+0x238>
 8008e56:	2301      	movs	r3, #1
 8008e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e5a:	e7f5      	b.n	8008e48 <_dtoa_r+0x288>
 8008e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	9307      	str	r3, [sp, #28]
 8008e62:	e7d7      	b.n	8008e14 <_dtoa_r+0x254>
 8008e64:	3101      	adds	r1, #1
 8008e66:	0052      	lsls	r2, r2, #1
 8008e68:	e7d8      	b.n	8008e1c <_dtoa_r+0x25c>
 8008e6a:	bf00      	nop
 8008e6c:	f3af 8000 	nop.w
 8008e70:	636f4361 	.word	0x636f4361
 8008e74:	3fd287a7 	.word	0x3fd287a7
 8008e78:	8b60c8b3 	.word	0x8b60c8b3
 8008e7c:	3fc68a28 	.word	0x3fc68a28
 8008e80:	509f79fb 	.word	0x509f79fb
 8008e84:	3fd34413 	.word	0x3fd34413
 8008e88:	0800b8c9 	.word	0x0800b8c9
 8008e8c:	0800b98b 	.word	0x0800b98b
 8008e90:	7ff00000 	.word	0x7ff00000
 8008e94:	0800b8a1 	.word	0x0800b8a1
 8008e98:	3ff80000 	.word	0x3ff80000
 8008e9c:	0800bae8 	.word	0x0800bae8
 8008ea0:	0800b9e3 	.word	0x0800b9e3
 8008ea4:	0800b987 	.word	0x0800b987
 8008ea8:	0800b8a0 	.word	0x0800b8a0
 8008eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008eb0:	6018      	str	r0, [r3, #0]
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	2b0e      	cmp	r3, #14
 8008eb6:	f200 80a4 	bhi.w	8009002 <_dtoa_r+0x442>
 8008eba:	2c00      	cmp	r4, #0
 8008ebc:	f000 80a1 	beq.w	8009002 <_dtoa_r+0x442>
 8008ec0:	2f00      	cmp	r7, #0
 8008ec2:	dd33      	ble.n	8008f2c <_dtoa_r+0x36c>
 8008ec4:	4bad      	ldr	r3, [pc, #692]	@ (800917c <_dtoa_r+0x5bc>)
 8008ec6:	f007 020f 	and.w	r2, r7, #15
 8008eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ece:	ed93 7b00 	vldr	d7, [r3]
 8008ed2:	05f8      	lsls	r0, r7, #23
 8008ed4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ed8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008edc:	d516      	bpl.n	8008f0c <_dtoa_r+0x34c>
 8008ede:	4ba8      	ldr	r3, [pc, #672]	@ (8009180 <_dtoa_r+0x5c0>)
 8008ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ee4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ee8:	f7f7 fcb8 	bl	800085c <__aeabi_ddiv>
 8008eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef0:	f004 040f 	and.w	r4, r4, #15
 8008ef4:	2603      	movs	r6, #3
 8008ef6:	4da2      	ldr	r5, [pc, #648]	@ (8009180 <_dtoa_r+0x5c0>)
 8008ef8:	b954      	cbnz	r4, 8008f10 <_dtoa_r+0x350>
 8008efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f02:	f7f7 fcab 	bl	800085c <__aeabi_ddiv>
 8008f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f0a:	e028      	b.n	8008f5e <_dtoa_r+0x39e>
 8008f0c:	2602      	movs	r6, #2
 8008f0e:	e7f2      	b.n	8008ef6 <_dtoa_r+0x336>
 8008f10:	07e1      	lsls	r1, r4, #31
 8008f12:	d508      	bpl.n	8008f26 <_dtoa_r+0x366>
 8008f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f1c:	f7f7 fb74 	bl	8000608 <__aeabi_dmul>
 8008f20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f24:	3601      	adds	r6, #1
 8008f26:	1064      	asrs	r4, r4, #1
 8008f28:	3508      	adds	r5, #8
 8008f2a:	e7e5      	b.n	8008ef8 <_dtoa_r+0x338>
 8008f2c:	f000 80d2 	beq.w	80090d4 <_dtoa_r+0x514>
 8008f30:	427c      	negs	r4, r7
 8008f32:	4b92      	ldr	r3, [pc, #584]	@ (800917c <_dtoa_r+0x5bc>)
 8008f34:	4d92      	ldr	r5, [pc, #584]	@ (8009180 <_dtoa_r+0x5c0>)
 8008f36:	f004 020f 	and.w	r2, r4, #15
 8008f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f46:	f7f7 fb5f 	bl	8000608 <__aeabi_dmul>
 8008f4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f4e:	1124      	asrs	r4, r4, #4
 8008f50:	2300      	movs	r3, #0
 8008f52:	2602      	movs	r6, #2
 8008f54:	2c00      	cmp	r4, #0
 8008f56:	f040 80b2 	bne.w	80090be <_dtoa_r+0x4fe>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1d3      	bne.n	8008f06 <_dtoa_r+0x346>
 8008f5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80b7 	beq.w	80090d8 <_dtoa_r+0x518>
 8008f6a:	4b86      	ldr	r3, [pc, #536]	@ (8009184 <_dtoa_r+0x5c4>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fdbb 	bl	8000aec <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f000 80ae 	beq.w	80090d8 <_dtoa_r+0x518>
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80aa 	beq.w	80090d8 <_dtoa_r+0x518>
 8008f84:	9b00      	ldr	r3, [sp, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	dd37      	ble.n	8008ffa <_dtoa_r+0x43a>
 8008f8a:	1e7b      	subs	r3, r7, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4b7d      	ldr	r3, [pc, #500]	@ (8009188 <_dtoa_r+0x5c8>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 fb37 	bl	8000608 <__aeabi_dmul>
 8008f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f9e:	9c00      	ldr	r4, [sp, #0]
 8008fa0:	3601      	adds	r6, #1
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7f7 fac6 	bl	8000534 <__aeabi_i2d>
 8008fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fac:	f7f7 fb2c 	bl	8000608 <__aeabi_dmul>
 8008fb0:	4b76      	ldr	r3, [pc, #472]	@ (800918c <_dtoa_r+0x5cc>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f7f7 f972 	bl	800029c <__adddf3>
 8008fb8:	4605      	mov	r5, r0
 8008fba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008fbe:	2c00      	cmp	r4, #0
 8008fc0:	f040 808d 	bne.w	80090de <_dtoa_r+0x51e>
 8008fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc8:	4b71      	ldr	r3, [pc, #452]	@ (8009190 <_dtoa_r+0x5d0>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f7f7 f964 	bl	8000298 <__aeabi_dsub>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4633      	mov	r3, r6
 8008fdc:	f7f7 fda4 	bl	8000b28 <__aeabi_dcmpgt>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f040 828b 	bne.w	80094fc <_dtoa_r+0x93c>
 8008fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fea:	462a      	mov	r2, r5
 8008fec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ff0:	f7f7 fd7c 	bl	8000aec <__aeabi_dcmplt>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 8128 	bne.w	800924a <_dtoa_r+0x68a>
 8008ffa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ffe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009002:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009004:	2b00      	cmp	r3, #0
 8009006:	f2c0 815a 	blt.w	80092be <_dtoa_r+0x6fe>
 800900a:	2f0e      	cmp	r7, #14
 800900c:	f300 8157 	bgt.w	80092be <_dtoa_r+0x6fe>
 8009010:	4b5a      	ldr	r3, [pc, #360]	@ (800917c <_dtoa_r+0x5bc>)
 8009012:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009016:	ed93 7b00 	vldr	d7, [r3]
 800901a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	ed8d 7b00 	vstr	d7, [sp]
 8009022:	da03      	bge.n	800902c <_dtoa_r+0x46c>
 8009024:	9b07      	ldr	r3, [sp, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f340 8101 	ble.w	800922e <_dtoa_r+0x66e>
 800902c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009030:	4656      	mov	r6, sl
 8009032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 fc0f 	bl	800085c <__aeabi_ddiv>
 800903e:	f7f7 fd93 	bl	8000b68 <__aeabi_d2iz>
 8009042:	4680      	mov	r8, r0
 8009044:	f7f7 fa76 	bl	8000534 <__aeabi_i2d>
 8009048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800904c:	f7f7 fadc 	bl	8000608 <__aeabi_dmul>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800905c:	f7f7 f91c 	bl	8000298 <__aeabi_dsub>
 8009060:	f806 4b01 	strb.w	r4, [r6], #1
 8009064:	9d07      	ldr	r5, [sp, #28]
 8009066:	eba6 040a 	sub.w	r4, r6, sl
 800906a:	42a5      	cmp	r5, r4
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	f040 8117 	bne.w	80092a2 <_dtoa_r+0x6e2>
 8009074:	f7f7 f912 	bl	800029c <__adddf3>
 8009078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800907c:	4604      	mov	r4, r0
 800907e:	460d      	mov	r5, r1
 8009080:	f7f7 fd52 	bl	8000b28 <__aeabi_dcmpgt>
 8009084:	2800      	cmp	r0, #0
 8009086:	f040 80f9 	bne.w	800927c <_dtoa_r+0x6bc>
 800908a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	f7f7 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8009096:	b118      	cbz	r0, 80090a0 <_dtoa_r+0x4e0>
 8009098:	f018 0f01 	tst.w	r8, #1
 800909c:	f040 80ee 	bne.w	800927c <_dtoa_r+0x6bc>
 80090a0:	4649      	mov	r1, r9
 80090a2:	4658      	mov	r0, fp
 80090a4:	f000 ffdc 	bl	800a060 <_Bfree>
 80090a8:	2300      	movs	r3, #0
 80090aa:	7033      	strb	r3, [r6, #0]
 80090ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090ae:	3701      	adds	r7, #1
 80090b0:	601f      	str	r7, [r3, #0]
 80090b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 831d 	beq.w	80096f4 <_dtoa_r+0xb34>
 80090ba:	601e      	str	r6, [r3, #0]
 80090bc:	e31a      	b.n	80096f4 <_dtoa_r+0xb34>
 80090be:	07e2      	lsls	r2, r4, #31
 80090c0:	d505      	bpl.n	80090ce <_dtoa_r+0x50e>
 80090c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090c6:	f7f7 fa9f 	bl	8000608 <__aeabi_dmul>
 80090ca:	3601      	adds	r6, #1
 80090cc:	2301      	movs	r3, #1
 80090ce:	1064      	asrs	r4, r4, #1
 80090d0:	3508      	adds	r5, #8
 80090d2:	e73f      	b.n	8008f54 <_dtoa_r+0x394>
 80090d4:	2602      	movs	r6, #2
 80090d6:	e742      	b.n	8008f5e <_dtoa_r+0x39e>
 80090d8:	9c07      	ldr	r4, [sp, #28]
 80090da:	9704      	str	r7, [sp, #16]
 80090dc:	e761      	b.n	8008fa2 <_dtoa_r+0x3e2>
 80090de:	4b27      	ldr	r3, [pc, #156]	@ (800917c <_dtoa_r+0x5bc>)
 80090e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ea:	4454      	add	r4, sl
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d053      	beq.n	8009198 <_dtoa_r+0x5d8>
 80090f0:	4928      	ldr	r1, [pc, #160]	@ (8009194 <_dtoa_r+0x5d4>)
 80090f2:	2000      	movs	r0, #0
 80090f4:	f7f7 fbb2 	bl	800085c <__aeabi_ddiv>
 80090f8:	4633      	mov	r3, r6
 80090fa:	462a      	mov	r2, r5
 80090fc:	f7f7 f8cc 	bl	8000298 <__aeabi_dsub>
 8009100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009104:	4656      	mov	r6, sl
 8009106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800910a:	f7f7 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800910e:	4605      	mov	r5, r0
 8009110:	f7f7 fa10 	bl	8000534 <__aeabi_i2d>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911c:	f7f7 f8bc 	bl	8000298 <__aeabi_dsub>
 8009120:	3530      	adds	r5, #48	@ 0x30
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800912a:	f806 5b01 	strb.w	r5, [r6], #1
 800912e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009132:	f7f7 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	d171      	bne.n	800921e <_dtoa_r+0x65e>
 800913a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800913e:	4911      	ldr	r1, [pc, #68]	@ (8009184 <_dtoa_r+0x5c4>)
 8009140:	2000      	movs	r0, #0
 8009142:	f7f7 f8a9 	bl	8000298 <__aeabi_dsub>
 8009146:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800914a:	f7f7 fccf 	bl	8000aec <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	f040 8095 	bne.w	800927e <_dtoa_r+0x6be>
 8009154:	42a6      	cmp	r6, r4
 8009156:	f43f af50 	beq.w	8008ffa <_dtoa_r+0x43a>
 800915a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800915e:	4b0a      	ldr	r3, [pc, #40]	@ (8009188 <_dtoa_r+0x5c8>)
 8009160:	2200      	movs	r2, #0
 8009162:	f7f7 fa51 	bl	8000608 <__aeabi_dmul>
 8009166:	4b08      	ldr	r3, [pc, #32]	@ (8009188 <_dtoa_r+0x5c8>)
 8009168:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800916c:	2200      	movs	r2, #0
 800916e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009172:	f7f7 fa49 	bl	8000608 <__aeabi_dmul>
 8009176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917a:	e7c4      	b.n	8009106 <_dtoa_r+0x546>
 800917c:	0800bae8 	.word	0x0800bae8
 8009180:	0800bac0 	.word	0x0800bac0
 8009184:	3ff00000 	.word	0x3ff00000
 8009188:	40240000 	.word	0x40240000
 800918c:	401c0000 	.word	0x401c0000
 8009190:	40140000 	.word	0x40140000
 8009194:	3fe00000 	.word	0x3fe00000
 8009198:	4631      	mov	r1, r6
 800919a:	4628      	mov	r0, r5
 800919c:	f7f7 fa34 	bl	8000608 <__aeabi_dmul>
 80091a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80091a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80091a6:	4656      	mov	r6, sl
 80091a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ac:	f7f7 fcdc 	bl	8000b68 <__aeabi_d2iz>
 80091b0:	4605      	mov	r5, r0
 80091b2:	f7f7 f9bf 	bl	8000534 <__aeabi_i2d>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091be:	f7f7 f86b 	bl	8000298 <__aeabi_dsub>
 80091c2:	3530      	adds	r5, #48	@ 0x30
 80091c4:	f806 5b01 	strb.w	r5, [r6], #1
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	d124      	bne.n	8009222 <_dtoa_r+0x662>
 80091d8:	4bac      	ldr	r3, [pc, #688]	@ (800948c <_dtoa_r+0x8cc>)
 80091da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80091de:	f7f7 f85d 	bl	800029c <__adddf3>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ea:	f7f7 fc9d 	bl	8000b28 <__aeabi_dcmpgt>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d145      	bne.n	800927e <_dtoa_r+0x6be>
 80091f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80091f6:	49a5      	ldr	r1, [pc, #660]	@ (800948c <_dtoa_r+0x8cc>)
 80091f8:	2000      	movs	r0, #0
 80091fa:	f7f7 f84d 	bl	8000298 <__aeabi_dsub>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009206:	f7f7 fc71 	bl	8000aec <__aeabi_dcmplt>
 800920a:	2800      	cmp	r0, #0
 800920c:	f43f aef5 	beq.w	8008ffa <_dtoa_r+0x43a>
 8009210:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009212:	1e73      	subs	r3, r6, #1
 8009214:	9315      	str	r3, [sp, #84]	@ 0x54
 8009216:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800921a:	2b30      	cmp	r3, #48	@ 0x30
 800921c:	d0f8      	beq.n	8009210 <_dtoa_r+0x650>
 800921e:	9f04      	ldr	r7, [sp, #16]
 8009220:	e73e      	b.n	80090a0 <_dtoa_r+0x4e0>
 8009222:	4b9b      	ldr	r3, [pc, #620]	@ (8009490 <_dtoa_r+0x8d0>)
 8009224:	f7f7 f9f0 	bl	8000608 <__aeabi_dmul>
 8009228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800922c:	e7bc      	b.n	80091a8 <_dtoa_r+0x5e8>
 800922e:	d10c      	bne.n	800924a <_dtoa_r+0x68a>
 8009230:	4b98      	ldr	r3, [pc, #608]	@ (8009494 <_dtoa_r+0x8d4>)
 8009232:	2200      	movs	r2, #0
 8009234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009238:	f7f7 f9e6 	bl	8000608 <__aeabi_dmul>
 800923c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009240:	f7f7 fc68 	bl	8000b14 <__aeabi_dcmpge>
 8009244:	2800      	cmp	r0, #0
 8009246:	f000 8157 	beq.w	80094f8 <_dtoa_r+0x938>
 800924a:	2400      	movs	r4, #0
 800924c:	4625      	mov	r5, r4
 800924e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009250:	43db      	mvns	r3, r3
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	4656      	mov	r6, sl
 8009256:	2700      	movs	r7, #0
 8009258:	4621      	mov	r1, r4
 800925a:	4658      	mov	r0, fp
 800925c:	f000 ff00 	bl	800a060 <_Bfree>
 8009260:	2d00      	cmp	r5, #0
 8009262:	d0dc      	beq.n	800921e <_dtoa_r+0x65e>
 8009264:	b12f      	cbz	r7, 8009272 <_dtoa_r+0x6b2>
 8009266:	42af      	cmp	r7, r5
 8009268:	d003      	beq.n	8009272 <_dtoa_r+0x6b2>
 800926a:	4639      	mov	r1, r7
 800926c:	4658      	mov	r0, fp
 800926e:	f000 fef7 	bl	800a060 <_Bfree>
 8009272:	4629      	mov	r1, r5
 8009274:	4658      	mov	r0, fp
 8009276:	f000 fef3 	bl	800a060 <_Bfree>
 800927a:	e7d0      	b.n	800921e <_dtoa_r+0x65e>
 800927c:	9704      	str	r7, [sp, #16]
 800927e:	4633      	mov	r3, r6
 8009280:	461e      	mov	r6, r3
 8009282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009286:	2a39      	cmp	r2, #57	@ 0x39
 8009288:	d107      	bne.n	800929a <_dtoa_r+0x6da>
 800928a:	459a      	cmp	sl, r3
 800928c:	d1f8      	bne.n	8009280 <_dtoa_r+0x6c0>
 800928e:	9a04      	ldr	r2, [sp, #16]
 8009290:	3201      	adds	r2, #1
 8009292:	9204      	str	r2, [sp, #16]
 8009294:	2230      	movs	r2, #48	@ 0x30
 8009296:	f88a 2000 	strb.w	r2, [sl]
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	3201      	adds	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	e7bd      	b.n	800921e <_dtoa_r+0x65e>
 80092a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009490 <_dtoa_r+0x8d0>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	f7f7 f9af 	bl	8000608 <__aeabi_dmul>
 80092aa:	2200      	movs	r2, #0
 80092ac:	2300      	movs	r3, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	f7f7 fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f43f aebb 	beq.w	8009032 <_dtoa_r+0x472>
 80092bc:	e6f0      	b.n	80090a0 <_dtoa_r+0x4e0>
 80092be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	f000 80db 	beq.w	800947c <_dtoa_r+0x8bc>
 80092c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c8:	2a01      	cmp	r2, #1
 80092ca:	f300 80bf 	bgt.w	800944c <_dtoa_r+0x88c>
 80092ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80092d0:	2a00      	cmp	r2, #0
 80092d2:	f000 80b7 	beq.w	8009444 <_dtoa_r+0x884>
 80092d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80092da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80092dc:	4646      	mov	r6, r8
 80092de:	9a08      	ldr	r2, [sp, #32]
 80092e0:	2101      	movs	r1, #1
 80092e2:	441a      	add	r2, r3
 80092e4:	4658      	mov	r0, fp
 80092e6:	4498      	add	r8, r3
 80092e8:	9208      	str	r2, [sp, #32]
 80092ea:	f000 ffb7 	bl	800a25c <__i2b>
 80092ee:	4605      	mov	r5, r0
 80092f0:	b15e      	cbz	r6, 800930a <_dtoa_r+0x74a>
 80092f2:	9b08      	ldr	r3, [sp, #32]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd08      	ble.n	800930a <_dtoa_r+0x74a>
 80092f8:	42b3      	cmp	r3, r6
 80092fa:	9a08      	ldr	r2, [sp, #32]
 80092fc:	bfa8      	it	ge
 80092fe:	4633      	movge	r3, r6
 8009300:	eba8 0803 	sub.w	r8, r8, r3
 8009304:	1af6      	subs	r6, r6, r3
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800930c:	b1f3      	cbz	r3, 800934c <_dtoa_r+0x78c>
 800930e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 80b7 	beq.w	8009484 <_dtoa_r+0x8c4>
 8009316:	b18c      	cbz	r4, 800933c <_dtoa_r+0x77c>
 8009318:	4629      	mov	r1, r5
 800931a:	4622      	mov	r2, r4
 800931c:	4658      	mov	r0, fp
 800931e:	f001 f85d 	bl	800a3dc <__pow5mult>
 8009322:	464a      	mov	r2, r9
 8009324:	4601      	mov	r1, r0
 8009326:	4605      	mov	r5, r0
 8009328:	4658      	mov	r0, fp
 800932a:	f000 ffad 	bl	800a288 <__multiply>
 800932e:	4649      	mov	r1, r9
 8009330:	9004      	str	r0, [sp, #16]
 8009332:	4658      	mov	r0, fp
 8009334:	f000 fe94 	bl	800a060 <_Bfree>
 8009338:	9b04      	ldr	r3, [sp, #16]
 800933a:	4699      	mov	r9, r3
 800933c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800933e:	1b1a      	subs	r2, r3, r4
 8009340:	d004      	beq.n	800934c <_dtoa_r+0x78c>
 8009342:	4649      	mov	r1, r9
 8009344:	4658      	mov	r0, fp
 8009346:	f001 f849 	bl	800a3dc <__pow5mult>
 800934a:	4681      	mov	r9, r0
 800934c:	2101      	movs	r1, #1
 800934e:	4658      	mov	r0, fp
 8009350:	f000 ff84 	bl	800a25c <__i2b>
 8009354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009356:	4604      	mov	r4, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 81cf 	beq.w	80096fc <_dtoa_r+0xb3c>
 800935e:	461a      	mov	r2, r3
 8009360:	4601      	mov	r1, r0
 8009362:	4658      	mov	r0, fp
 8009364:	f001 f83a 	bl	800a3dc <__pow5mult>
 8009368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936a:	2b01      	cmp	r3, #1
 800936c:	4604      	mov	r4, r0
 800936e:	f300 8095 	bgt.w	800949c <_dtoa_r+0x8dc>
 8009372:	9b02      	ldr	r3, [sp, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 8087 	bne.w	8009488 <_dtoa_r+0x8c8>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009380:	2b00      	cmp	r3, #0
 8009382:	f040 8089 	bne.w	8009498 <_dtoa_r+0x8d8>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800938c:	0d1b      	lsrs	r3, r3, #20
 800938e:	051b      	lsls	r3, r3, #20
 8009390:	b12b      	cbz	r3, 800939e <_dtoa_r+0x7de>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	3301      	adds	r3, #1
 8009396:	9308      	str	r3, [sp, #32]
 8009398:	f108 0801 	add.w	r8, r8, #1
 800939c:	2301      	movs	r3, #1
 800939e:	930a      	str	r3, [sp, #40]	@ 0x28
 80093a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 81b0 	beq.w	8009708 <_dtoa_r+0xb48>
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093ae:	6918      	ldr	r0, [r3, #16]
 80093b0:	f000 ff08 	bl	800a1c4 <__hi0bits>
 80093b4:	f1c0 0020 	rsb	r0, r0, #32
 80093b8:	9b08      	ldr	r3, [sp, #32]
 80093ba:	4418      	add	r0, r3
 80093bc:	f010 001f 	ands.w	r0, r0, #31
 80093c0:	d077      	beq.n	80094b2 <_dtoa_r+0x8f2>
 80093c2:	f1c0 0320 	rsb	r3, r0, #32
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	dd6b      	ble.n	80094a2 <_dtoa_r+0x8e2>
 80093ca:	9b08      	ldr	r3, [sp, #32]
 80093cc:	f1c0 001c 	rsb	r0, r0, #28
 80093d0:	4403      	add	r3, r0
 80093d2:	4480      	add	r8, r0
 80093d4:	4406      	add	r6, r0
 80093d6:	9308      	str	r3, [sp, #32]
 80093d8:	f1b8 0f00 	cmp.w	r8, #0
 80093dc:	dd05      	ble.n	80093ea <_dtoa_r+0x82a>
 80093de:	4649      	mov	r1, r9
 80093e0:	4642      	mov	r2, r8
 80093e2:	4658      	mov	r0, fp
 80093e4:	f001 f854 	bl	800a490 <__lshift>
 80093e8:	4681      	mov	r9, r0
 80093ea:	9b08      	ldr	r3, [sp, #32]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd05      	ble.n	80093fc <_dtoa_r+0x83c>
 80093f0:	4621      	mov	r1, r4
 80093f2:	461a      	mov	r2, r3
 80093f4:	4658      	mov	r0, fp
 80093f6:	f001 f84b 	bl	800a490 <__lshift>
 80093fa:	4604      	mov	r4, r0
 80093fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d059      	beq.n	80094b6 <_dtoa_r+0x8f6>
 8009402:	4621      	mov	r1, r4
 8009404:	4648      	mov	r0, r9
 8009406:	f001 f8af 	bl	800a568 <__mcmp>
 800940a:	2800      	cmp	r0, #0
 800940c:	da53      	bge.n	80094b6 <_dtoa_r+0x8f6>
 800940e:	1e7b      	subs	r3, r7, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	4649      	mov	r1, r9
 8009414:	2300      	movs	r3, #0
 8009416:	220a      	movs	r2, #10
 8009418:	4658      	mov	r0, fp
 800941a:	f000 fe43 	bl	800a0a4 <__multadd>
 800941e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009420:	4681      	mov	r9, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8172 	beq.w	800970c <_dtoa_r+0xb4c>
 8009428:	2300      	movs	r3, #0
 800942a:	4629      	mov	r1, r5
 800942c:	220a      	movs	r2, #10
 800942e:	4658      	mov	r0, fp
 8009430:	f000 fe38 	bl	800a0a4 <__multadd>
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	4605      	mov	r5, r0
 800943a:	dc67      	bgt.n	800950c <_dtoa_r+0x94c>
 800943c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943e:	2b02      	cmp	r3, #2
 8009440:	dc41      	bgt.n	80094c6 <_dtoa_r+0x906>
 8009442:	e063      	b.n	800950c <_dtoa_r+0x94c>
 8009444:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009446:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800944a:	e746      	b.n	80092da <_dtoa_r+0x71a>
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	1e5c      	subs	r4, r3, #1
 8009450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009452:	42a3      	cmp	r3, r4
 8009454:	bfbf      	itttt	lt
 8009456:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009458:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800945a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800945c:	1ae3      	sublt	r3, r4, r3
 800945e:	bfb4      	ite	lt
 8009460:	18d2      	addlt	r2, r2, r3
 8009462:	1b1c      	subge	r4, r3, r4
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	bfbc      	itt	lt
 8009468:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800946a:	2400      	movlt	r4, #0
 800946c:	2b00      	cmp	r3, #0
 800946e:	bfb5      	itete	lt
 8009470:	eba8 0603 	sublt.w	r6, r8, r3
 8009474:	9b07      	ldrge	r3, [sp, #28]
 8009476:	2300      	movlt	r3, #0
 8009478:	4646      	movge	r6, r8
 800947a:	e730      	b.n	80092de <_dtoa_r+0x71e>
 800947c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800947e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009480:	4646      	mov	r6, r8
 8009482:	e735      	b.n	80092f0 <_dtoa_r+0x730>
 8009484:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009486:	e75c      	b.n	8009342 <_dtoa_r+0x782>
 8009488:	2300      	movs	r3, #0
 800948a:	e788      	b.n	800939e <_dtoa_r+0x7de>
 800948c:	3fe00000 	.word	0x3fe00000
 8009490:	40240000 	.word	0x40240000
 8009494:	40140000 	.word	0x40140000
 8009498:	9b02      	ldr	r3, [sp, #8]
 800949a:	e780      	b.n	800939e <_dtoa_r+0x7de>
 800949c:	2300      	movs	r3, #0
 800949e:	930a      	str	r3, [sp, #40]	@ 0x28
 80094a0:	e782      	b.n	80093a8 <_dtoa_r+0x7e8>
 80094a2:	d099      	beq.n	80093d8 <_dtoa_r+0x818>
 80094a4:	9a08      	ldr	r2, [sp, #32]
 80094a6:	331c      	adds	r3, #28
 80094a8:	441a      	add	r2, r3
 80094aa:	4498      	add	r8, r3
 80094ac:	441e      	add	r6, r3
 80094ae:	9208      	str	r2, [sp, #32]
 80094b0:	e792      	b.n	80093d8 <_dtoa_r+0x818>
 80094b2:	4603      	mov	r3, r0
 80094b4:	e7f6      	b.n	80094a4 <_dtoa_r+0x8e4>
 80094b6:	9b07      	ldr	r3, [sp, #28]
 80094b8:	9704      	str	r7, [sp, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dc20      	bgt.n	8009500 <_dtoa_r+0x940>
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	dd1e      	ble.n	8009504 <_dtoa_r+0x944>
 80094c6:	9b00      	ldr	r3, [sp, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f47f aec0 	bne.w	800924e <_dtoa_r+0x68e>
 80094ce:	4621      	mov	r1, r4
 80094d0:	2205      	movs	r2, #5
 80094d2:	4658      	mov	r0, fp
 80094d4:	f000 fde6 	bl	800a0a4 <__multadd>
 80094d8:	4601      	mov	r1, r0
 80094da:	4604      	mov	r4, r0
 80094dc:	4648      	mov	r0, r9
 80094de:	f001 f843 	bl	800a568 <__mcmp>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f77f aeb3 	ble.w	800924e <_dtoa_r+0x68e>
 80094e8:	4656      	mov	r6, sl
 80094ea:	2331      	movs	r3, #49	@ 0x31
 80094ec:	f806 3b01 	strb.w	r3, [r6], #1
 80094f0:	9b04      	ldr	r3, [sp, #16]
 80094f2:	3301      	adds	r3, #1
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	e6ae      	b.n	8009256 <_dtoa_r+0x696>
 80094f8:	9c07      	ldr	r4, [sp, #28]
 80094fa:	9704      	str	r7, [sp, #16]
 80094fc:	4625      	mov	r5, r4
 80094fe:	e7f3      	b.n	80094e8 <_dtoa_r+0x928>
 8009500:	9b07      	ldr	r3, [sp, #28]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8104 	beq.w	8009714 <_dtoa_r+0xb54>
 800950c:	2e00      	cmp	r6, #0
 800950e:	dd05      	ble.n	800951c <_dtoa_r+0x95c>
 8009510:	4629      	mov	r1, r5
 8009512:	4632      	mov	r2, r6
 8009514:	4658      	mov	r0, fp
 8009516:	f000 ffbb 	bl	800a490 <__lshift>
 800951a:	4605      	mov	r5, r0
 800951c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d05a      	beq.n	80095d8 <_dtoa_r+0xa18>
 8009522:	6869      	ldr	r1, [r5, #4]
 8009524:	4658      	mov	r0, fp
 8009526:	f000 fd5b 	bl	8009fe0 <_Balloc>
 800952a:	4606      	mov	r6, r0
 800952c:	b928      	cbnz	r0, 800953a <_dtoa_r+0x97a>
 800952e:	4b84      	ldr	r3, [pc, #528]	@ (8009740 <_dtoa_r+0xb80>)
 8009530:	4602      	mov	r2, r0
 8009532:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009536:	f7ff bb5a 	b.w	8008bee <_dtoa_r+0x2e>
 800953a:	692a      	ldr	r2, [r5, #16]
 800953c:	3202      	adds	r2, #2
 800953e:	0092      	lsls	r2, r2, #2
 8009540:	f105 010c 	add.w	r1, r5, #12
 8009544:	300c      	adds	r0, #12
 8009546:	f7ff fa78 	bl	8008a3a <memcpy>
 800954a:	2201      	movs	r2, #1
 800954c:	4631      	mov	r1, r6
 800954e:	4658      	mov	r0, fp
 8009550:	f000 ff9e 	bl	800a490 <__lshift>
 8009554:	f10a 0301 	add.w	r3, sl, #1
 8009558:	9307      	str	r3, [sp, #28]
 800955a:	9b00      	ldr	r3, [sp, #0]
 800955c:	4453      	add	r3, sl
 800955e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009560:	9b02      	ldr	r3, [sp, #8]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	462f      	mov	r7, r5
 8009568:	930a      	str	r3, [sp, #40]	@ 0x28
 800956a:	4605      	mov	r5, r0
 800956c:	9b07      	ldr	r3, [sp, #28]
 800956e:	4621      	mov	r1, r4
 8009570:	3b01      	subs	r3, #1
 8009572:	4648      	mov	r0, r9
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	f7ff fa9b 	bl	8008ab0 <quorem>
 800957a:	4639      	mov	r1, r7
 800957c:	9002      	str	r0, [sp, #8]
 800957e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009582:	4648      	mov	r0, r9
 8009584:	f000 fff0 	bl	800a568 <__mcmp>
 8009588:	462a      	mov	r2, r5
 800958a:	9008      	str	r0, [sp, #32]
 800958c:	4621      	mov	r1, r4
 800958e:	4658      	mov	r0, fp
 8009590:	f001 f806 	bl	800a5a0 <__mdiff>
 8009594:	68c2      	ldr	r2, [r0, #12]
 8009596:	4606      	mov	r6, r0
 8009598:	bb02      	cbnz	r2, 80095dc <_dtoa_r+0xa1c>
 800959a:	4601      	mov	r1, r0
 800959c:	4648      	mov	r0, r9
 800959e:	f000 ffe3 	bl	800a568 <__mcmp>
 80095a2:	4602      	mov	r2, r0
 80095a4:	4631      	mov	r1, r6
 80095a6:	4658      	mov	r0, fp
 80095a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80095aa:	f000 fd59 	bl	800a060 <_Bfree>
 80095ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b2:	9e07      	ldr	r6, [sp, #28]
 80095b4:	ea43 0102 	orr.w	r1, r3, r2
 80095b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ba:	4319      	orrs	r1, r3
 80095bc:	d110      	bne.n	80095e0 <_dtoa_r+0xa20>
 80095be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095c2:	d029      	beq.n	8009618 <_dtoa_r+0xa58>
 80095c4:	9b08      	ldr	r3, [sp, #32]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	dd02      	ble.n	80095d0 <_dtoa_r+0xa10>
 80095ca:	9b02      	ldr	r3, [sp, #8]
 80095cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80095d0:	9b00      	ldr	r3, [sp, #0]
 80095d2:	f883 8000 	strb.w	r8, [r3]
 80095d6:	e63f      	b.n	8009258 <_dtoa_r+0x698>
 80095d8:	4628      	mov	r0, r5
 80095da:	e7bb      	b.n	8009554 <_dtoa_r+0x994>
 80095dc:	2201      	movs	r2, #1
 80095de:	e7e1      	b.n	80095a4 <_dtoa_r+0x9e4>
 80095e0:	9b08      	ldr	r3, [sp, #32]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	db04      	blt.n	80095f0 <_dtoa_r+0xa30>
 80095e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095e8:	430b      	orrs	r3, r1
 80095ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095ec:	430b      	orrs	r3, r1
 80095ee:	d120      	bne.n	8009632 <_dtoa_r+0xa72>
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	dded      	ble.n	80095d0 <_dtoa_r+0xa10>
 80095f4:	4649      	mov	r1, r9
 80095f6:	2201      	movs	r2, #1
 80095f8:	4658      	mov	r0, fp
 80095fa:	f000 ff49 	bl	800a490 <__lshift>
 80095fe:	4621      	mov	r1, r4
 8009600:	4681      	mov	r9, r0
 8009602:	f000 ffb1 	bl	800a568 <__mcmp>
 8009606:	2800      	cmp	r0, #0
 8009608:	dc03      	bgt.n	8009612 <_dtoa_r+0xa52>
 800960a:	d1e1      	bne.n	80095d0 <_dtoa_r+0xa10>
 800960c:	f018 0f01 	tst.w	r8, #1
 8009610:	d0de      	beq.n	80095d0 <_dtoa_r+0xa10>
 8009612:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009616:	d1d8      	bne.n	80095ca <_dtoa_r+0xa0a>
 8009618:	9a00      	ldr	r2, [sp, #0]
 800961a:	2339      	movs	r3, #57	@ 0x39
 800961c:	7013      	strb	r3, [r2, #0]
 800961e:	4633      	mov	r3, r6
 8009620:	461e      	mov	r6, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009628:	2a39      	cmp	r2, #57	@ 0x39
 800962a:	d052      	beq.n	80096d2 <_dtoa_r+0xb12>
 800962c:	3201      	adds	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e612      	b.n	8009258 <_dtoa_r+0x698>
 8009632:	2a00      	cmp	r2, #0
 8009634:	dd07      	ble.n	8009646 <_dtoa_r+0xa86>
 8009636:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800963a:	d0ed      	beq.n	8009618 <_dtoa_r+0xa58>
 800963c:	9a00      	ldr	r2, [sp, #0]
 800963e:	f108 0301 	add.w	r3, r8, #1
 8009642:	7013      	strb	r3, [r2, #0]
 8009644:	e608      	b.n	8009258 <_dtoa_r+0x698>
 8009646:	9b07      	ldr	r3, [sp, #28]
 8009648:	9a07      	ldr	r2, [sp, #28]
 800964a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800964e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009650:	4293      	cmp	r3, r2
 8009652:	d028      	beq.n	80096a6 <_dtoa_r+0xae6>
 8009654:	4649      	mov	r1, r9
 8009656:	2300      	movs	r3, #0
 8009658:	220a      	movs	r2, #10
 800965a:	4658      	mov	r0, fp
 800965c:	f000 fd22 	bl	800a0a4 <__multadd>
 8009660:	42af      	cmp	r7, r5
 8009662:	4681      	mov	r9, r0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	f04f 020a 	mov.w	r2, #10
 800966c:	4639      	mov	r1, r7
 800966e:	4658      	mov	r0, fp
 8009670:	d107      	bne.n	8009682 <_dtoa_r+0xac2>
 8009672:	f000 fd17 	bl	800a0a4 <__multadd>
 8009676:	4607      	mov	r7, r0
 8009678:	4605      	mov	r5, r0
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	3301      	adds	r3, #1
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	e774      	b.n	800956c <_dtoa_r+0x9ac>
 8009682:	f000 fd0f 	bl	800a0a4 <__multadd>
 8009686:	4629      	mov	r1, r5
 8009688:	4607      	mov	r7, r0
 800968a:	2300      	movs	r3, #0
 800968c:	220a      	movs	r2, #10
 800968e:	4658      	mov	r0, fp
 8009690:	f000 fd08 	bl	800a0a4 <__multadd>
 8009694:	4605      	mov	r5, r0
 8009696:	e7f0      	b.n	800967a <_dtoa_r+0xaba>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	bfcc      	ite	gt
 800969e:	461e      	movgt	r6, r3
 80096a0:	2601      	movle	r6, #1
 80096a2:	4456      	add	r6, sl
 80096a4:	2700      	movs	r7, #0
 80096a6:	4649      	mov	r1, r9
 80096a8:	2201      	movs	r2, #1
 80096aa:	4658      	mov	r0, fp
 80096ac:	f000 fef0 	bl	800a490 <__lshift>
 80096b0:	4621      	mov	r1, r4
 80096b2:	4681      	mov	r9, r0
 80096b4:	f000 ff58 	bl	800a568 <__mcmp>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dcb0      	bgt.n	800961e <_dtoa_r+0xa5e>
 80096bc:	d102      	bne.n	80096c4 <_dtoa_r+0xb04>
 80096be:	f018 0f01 	tst.w	r8, #1
 80096c2:	d1ac      	bne.n	800961e <_dtoa_r+0xa5e>
 80096c4:	4633      	mov	r3, r6
 80096c6:	461e      	mov	r6, r3
 80096c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096cc:	2a30      	cmp	r2, #48	@ 0x30
 80096ce:	d0fa      	beq.n	80096c6 <_dtoa_r+0xb06>
 80096d0:	e5c2      	b.n	8009258 <_dtoa_r+0x698>
 80096d2:	459a      	cmp	sl, r3
 80096d4:	d1a4      	bne.n	8009620 <_dtoa_r+0xa60>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	3301      	adds	r3, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	2331      	movs	r3, #49	@ 0x31
 80096de:	f88a 3000 	strb.w	r3, [sl]
 80096e2:	e5b9      	b.n	8009258 <_dtoa_r+0x698>
 80096e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009744 <_dtoa_r+0xb84>
 80096ea:	b11b      	cbz	r3, 80096f4 <_dtoa_r+0xb34>
 80096ec:	f10a 0308 	add.w	r3, sl, #8
 80096f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	4650      	mov	r0, sl
 80096f6:	b019      	add	sp, #100	@ 0x64
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fe:	2b01      	cmp	r3, #1
 8009700:	f77f ae37 	ble.w	8009372 <_dtoa_r+0x7b2>
 8009704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009706:	930a      	str	r3, [sp, #40]	@ 0x28
 8009708:	2001      	movs	r0, #1
 800970a:	e655      	b.n	80093b8 <_dtoa_r+0x7f8>
 800970c:	9b00      	ldr	r3, [sp, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f77f aed6 	ble.w	80094c0 <_dtoa_r+0x900>
 8009714:	4656      	mov	r6, sl
 8009716:	4621      	mov	r1, r4
 8009718:	4648      	mov	r0, r9
 800971a:	f7ff f9c9 	bl	8008ab0 <quorem>
 800971e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009722:	f806 8b01 	strb.w	r8, [r6], #1
 8009726:	9b00      	ldr	r3, [sp, #0]
 8009728:	eba6 020a 	sub.w	r2, r6, sl
 800972c:	4293      	cmp	r3, r2
 800972e:	ddb3      	ble.n	8009698 <_dtoa_r+0xad8>
 8009730:	4649      	mov	r1, r9
 8009732:	2300      	movs	r3, #0
 8009734:	220a      	movs	r2, #10
 8009736:	4658      	mov	r0, fp
 8009738:	f000 fcb4 	bl	800a0a4 <__multadd>
 800973c:	4681      	mov	r9, r0
 800973e:	e7ea      	b.n	8009716 <_dtoa_r+0xb56>
 8009740:	0800b9e3 	.word	0x0800b9e3
 8009744:	0800b97e 	.word	0x0800b97e

08009748 <_free_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4605      	mov	r5, r0
 800974c:	2900      	cmp	r1, #0
 800974e:	d041      	beq.n	80097d4 <_free_r+0x8c>
 8009750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009754:	1f0c      	subs	r4, r1, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfb8      	it	lt
 800975a:	18e4      	addlt	r4, r4, r3
 800975c:	f000 fc34 	bl	8009fc8 <__malloc_lock>
 8009760:	4a1d      	ldr	r2, [pc, #116]	@ (80097d8 <_free_r+0x90>)
 8009762:	6813      	ldr	r3, [r2, #0]
 8009764:	b933      	cbnz	r3, 8009774 <_free_r+0x2c>
 8009766:	6063      	str	r3, [r4, #4]
 8009768:	6014      	str	r4, [r2, #0]
 800976a:	4628      	mov	r0, r5
 800976c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009770:	f000 bc30 	b.w	8009fd4 <__malloc_unlock>
 8009774:	42a3      	cmp	r3, r4
 8009776:	d908      	bls.n	800978a <_free_r+0x42>
 8009778:	6820      	ldr	r0, [r4, #0]
 800977a:	1821      	adds	r1, r4, r0
 800977c:	428b      	cmp	r3, r1
 800977e:	bf01      	itttt	eq
 8009780:	6819      	ldreq	r1, [r3, #0]
 8009782:	685b      	ldreq	r3, [r3, #4]
 8009784:	1809      	addeq	r1, r1, r0
 8009786:	6021      	streq	r1, [r4, #0]
 8009788:	e7ed      	b.n	8009766 <_free_r+0x1e>
 800978a:	461a      	mov	r2, r3
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	b10b      	cbz	r3, 8009794 <_free_r+0x4c>
 8009790:	42a3      	cmp	r3, r4
 8009792:	d9fa      	bls.n	800978a <_free_r+0x42>
 8009794:	6811      	ldr	r1, [r2, #0]
 8009796:	1850      	adds	r0, r2, r1
 8009798:	42a0      	cmp	r0, r4
 800979a:	d10b      	bne.n	80097b4 <_free_r+0x6c>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	4401      	add	r1, r0
 80097a0:	1850      	adds	r0, r2, r1
 80097a2:	4283      	cmp	r3, r0
 80097a4:	6011      	str	r1, [r2, #0]
 80097a6:	d1e0      	bne.n	800976a <_free_r+0x22>
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	6053      	str	r3, [r2, #4]
 80097ae:	4408      	add	r0, r1
 80097b0:	6010      	str	r0, [r2, #0]
 80097b2:	e7da      	b.n	800976a <_free_r+0x22>
 80097b4:	d902      	bls.n	80097bc <_free_r+0x74>
 80097b6:	230c      	movs	r3, #12
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	e7d6      	b.n	800976a <_free_r+0x22>
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	1821      	adds	r1, r4, r0
 80097c0:	428b      	cmp	r3, r1
 80097c2:	bf04      	itt	eq
 80097c4:	6819      	ldreq	r1, [r3, #0]
 80097c6:	685b      	ldreq	r3, [r3, #4]
 80097c8:	6063      	str	r3, [r4, #4]
 80097ca:	bf04      	itt	eq
 80097cc:	1809      	addeq	r1, r1, r0
 80097ce:	6021      	streq	r1, [r4, #0]
 80097d0:	6054      	str	r4, [r2, #4]
 80097d2:	e7ca      	b.n	800976a <_free_r+0x22>
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
 80097d6:	bf00      	nop
 80097d8:	20000754 	.word	0x20000754

080097dc <rshift>:
 80097dc:	6903      	ldr	r3, [r0, #16]
 80097de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097ea:	f100 0414 	add.w	r4, r0, #20
 80097ee:	dd45      	ble.n	800987c <rshift+0xa0>
 80097f0:	f011 011f 	ands.w	r1, r1, #31
 80097f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097fc:	d10c      	bne.n	8009818 <rshift+0x3c>
 80097fe:	f100 0710 	add.w	r7, r0, #16
 8009802:	4629      	mov	r1, r5
 8009804:	42b1      	cmp	r1, r6
 8009806:	d334      	bcc.n	8009872 <rshift+0x96>
 8009808:	1a9b      	subs	r3, r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	1eea      	subs	r2, r5, #3
 800980e:	4296      	cmp	r6, r2
 8009810:	bf38      	it	cc
 8009812:	2300      	movcc	r3, #0
 8009814:	4423      	add	r3, r4
 8009816:	e015      	b.n	8009844 <rshift+0x68>
 8009818:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800981c:	f1c1 0820 	rsb	r8, r1, #32
 8009820:	40cf      	lsrs	r7, r1
 8009822:	f105 0e04 	add.w	lr, r5, #4
 8009826:	46a1      	mov	r9, r4
 8009828:	4576      	cmp	r6, lr
 800982a:	46f4      	mov	ip, lr
 800982c:	d815      	bhi.n	800985a <rshift+0x7e>
 800982e:	1a9a      	subs	r2, r3, r2
 8009830:	0092      	lsls	r2, r2, #2
 8009832:	3a04      	subs	r2, #4
 8009834:	3501      	adds	r5, #1
 8009836:	42ae      	cmp	r6, r5
 8009838:	bf38      	it	cc
 800983a:	2200      	movcc	r2, #0
 800983c:	18a3      	adds	r3, r4, r2
 800983e:	50a7      	str	r7, [r4, r2]
 8009840:	b107      	cbz	r7, 8009844 <rshift+0x68>
 8009842:	3304      	adds	r3, #4
 8009844:	1b1a      	subs	r2, r3, r4
 8009846:	42a3      	cmp	r3, r4
 8009848:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800984c:	bf08      	it	eq
 800984e:	2300      	moveq	r3, #0
 8009850:	6102      	str	r2, [r0, #16]
 8009852:	bf08      	it	eq
 8009854:	6143      	streq	r3, [r0, #20]
 8009856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800985a:	f8dc c000 	ldr.w	ip, [ip]
 800985e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009862:	ea4c 0707 	orr.w	r7, ip, r7
 8009866:	f849 7b04 	str.w	r7, [r9], #4
 800986a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800986e:	40cf      	lsrs	r7, r1
 8009870:	e7da      	b.n	8009828 <rshift+0x4c>
 8009872:	f851 cb04 	ldr.w	ip, [r1], #4
 8009876:	f847 cf04 	str.w	ip, [r7, #4]!
 800987a:	e7c3      	b.n	8009804 <rshift+0x28>
 800987c:	4623      	mov	r3, r4
 800987e:	e7e1      	b.n	8009844 <rshift+0x68>

08009880 <__hexdig_fun>:
 8009880:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009884:	2b09      	cmp	r3, #9
 8009886:	d802      	bhi.n	800988e <__hexdig_fun+0xe>
 8009888:	3820      	subs	r0, #32
 800988a:	b2c0      	uxtb	r0, r0
 800988c:	4770      	bx	lr
 800988e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009892:	2b05      	cmp	r3, #5
 8009894:	d801      	bhi.n	800989a <__hexdig_fun+0x1a>
 8009896:	3847      	subs	r0, #71	@ 0x47
 8009898:	e7f7      	b.n	800988a <__hexdig_fun+0xa>
 800989a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800989e:	2b05      	cmp	r3, #5
 80098a0:	d801      	bhi.n	80098a6 <__hexdig_fun+0x26>
 80098a2:	3827      	subs	r0, #39	@ 0x27
 80098a4:	e7f1      	b.n	800988a <__hexdig_fun+0xa>
 80098a6:	2000      	movs	r0, #0
 80098a8:	4770      	bx	lr
	...

080098ac <__gethex>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	b085      	sub	sp, #20
 80098b2:	468a      	mov	sl, r1
 80098b4:	9302      	str	r3, [sp, #8]
 80098b6:	680b      	ldr	r3, [r1, #0]
 80098b8:	9001      	str	r0, [sp, #4]
 80098ba:	4690      	mov	r8, r2
 80098bc:	1c9c      	adds	r4, r3, #2
 80098be:	46a1      	mov	r9, r4
 80098c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80098c4:	2830      	cmp	r0, #48	@ 0x30
 80098c6:	d0fa      	beq.n	80098be <__gethex+0x12>
 80098c8:	eba9 0303 	sub.w	r3, r9, r3
 80098cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80098d0:	f7ff ffd6 	bl	8009880 <__hexdig_fun>
 80098d4:	4605      	mov	r5, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d168      	bne.n	80099ac <__gethex+0x100>
 80098da:	49a0      	ldr	r1, [pc, #640]	@ (8009b5c <__gethex+0x2b0>)
 80098dc:	2201      	movs	r2, #1
 80098de:	4648      	mov	r0, r9
 80098e0:	f7fe ffc6 	bl	8008870 <strncmp>
 80098e4:	4607      	mov	r7, r0
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d167      	bne.n	80099ba <__gethex+0x10e>
 80098ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80098ee:	4626      	mov	r6, r4
 80098f0:	f7ff ffc6 	bl	8009880 <__hexdig_fun>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d062      	beq.n	80099be <__gethex+0x112>
 80098f8:	4623      	mov	r3, r4
 80098fa:	7818      	ldrb	r0, [r3, #0]
 80098fc:	2830      	cmp	r0, #48	@ 0x30
 80098fe:	4699      	mov	r9, r3
 8009900:	f103 0301 	add.w	r3, r3, #1
 8009904:	d0f9      	beq.n	80098fa <__gethex+0x4e>
 8009906:	f7ff ffbb 	bl	8009880 <__hexdig_fun>
 800990a:	fab0 f580 	clz	r5, r0
 800990e:	096d      	lsrs	r5, r5, #5
 8009910:	f04f 0b01 	mov.w	fp, #1
 8009914:	464a      	mov	r2, r9
 8009916:	4616      	mov	r6, r2
 8009918:	3201      	adds	r2, #1
 800991a:	7830      	ldrb	r0, [r6, #0]
 800991c:	f7ff ffb0 	bl	8009880 <__hexdig_fun>
 8009920:	2800      	cmp	r0, #0
 8009922:	d1f8      	bne.n	8009916 <__gethex+0x6a>
 8009924:	498d      	ldr	r1, [pc, #564]	@ (8009b5c <__gethex+0x2b0>)
 8009926:	2201      	movs	r2, #1
 8009928:	4630      	mov	r0, r6
 800992a:	f7fe ffa1 	bl	8008870 <strncmp>
 800992e:	2800      	cmp	r0, #0
 8009930:	d13f      	bne.n	80099b2 <__gethex+0x106>
 8009932:	b944      	cbnz	r4, 8009946 <__gethex+0x9a>
 8009934:	1c74      	adds	r4, r6, #1
 8009936:	4622      	mov	r2, r4
 8009938:	4616      	mov	r6, r2
 800993a:	3201      	adds	r2, #1
 800993c:	7830      	ldrb	r0, [r6, #0]
 800993e:	f7ff ff9f 	bl	8009880 <__hexdig_fun>
 8009942:	2800      	cmp	r0, #0
 8009944:	d1f8      	bne.n	8009938 <__gethex+0x8c>
 8009946:	1ba4      	subs	r4, r4, r6
 8009948:	00a7      	lsls	r7, r4, #2
 800994a:	7833      	ldrb	r3, [r6, #0]
 800994c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009950:	2b50      	cmp	r3, #80	@ 0x50
 8009952:	d13e      	bne.n	80099d2 <__gethex+0x126>
 8009954:	7873      	ldrb	r3, [r6, #1]
 8009956:	2b2b      	cmp	r3, #43	@ 0x2b
 8009958:	d033      	beq.n	80099c2 <__gethex+0x116>
 800995a:	2b2d      	cmp	r3, #45	@ 0x2d
 800995c:	d034      	beq.n	80099c8 <__gethex+0x11c>
 800995e:	1c71      	adds	r1, r6, #1
 8009960:	2400      	movs	r4, #0
 8009962:	7808      	ldrb	r0, [r1, #0]
 8009964:	f7ff ff8c 	bl	8009880 <__hexdig_fun>
 8009968:	1e43      	subs	r3, r0, #1
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b18      	cmp	r3, #24
 800996e:	d830      	bhi.n	80099d2 <__gethex+0x126>
 8009970:	f1a0 0210 	sub.w	r2, r0, #16
 8009974:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009978:	f7ff ff82 	bl	8009880 <__hexdig_fun>
 800997c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009980:	fa5f fc8c 	uxtb.w	ip, ip
 8009984:	f1bc 0f18 	cmp.w	ip, #24
 8009988:	f04f 030a 	mov.w	r3, #10
 800998c:	d91e      	bls.n	80099cc <__gethex+0x120>
 800998e:	b104      	cbz	r4, 8009992 <__gethex+0xe6>
 8009990:	4252      	negs	r2, r2
 8009992:	4417      	add	r7, r2
 8009994:	f8ca 1000 	str.w	r1, [sl]
 8009998:	b1ed      	cbz	r5, 80099d6 <__gethex+0x12a>
 800999a:	f1bb 0f00 	cmp.w	fp, #0
 800999e:	bf0c      	ite	eq
 80099a0:	2506      	moveq	r5, #6
 80099a2:	2500      	movne	r5, #0
 80099a4:	4628      	mov	r0, r5
 80099a6:	b005      	add	sp, #20
 80099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	2500      	movs	r5, #0
 80099ae:	462c      	mov	r4, r5
 80099b0:	e7b0      	b.n	8009914 <__gethex+0x68>
 80099b2:	2c00      	cmp	r4, #0
 80099b4:	d1c7      	bne.n	8009946 <__gethex+0x9a>
 80099b6:	4627      	mov	r7, r4
 80099b8:	e7c7      	b.n	800994a <__gethex+0x9e>
 80099ba:	464e      	mov	r6, r9
 80099bc:	462f      	mov	r7, r5
 80099be:	2501      	movs	r5, #1
 80099c0:	e7c3      	b.n	800994a <__gethex+0x9e>
 80099c2:	2400      	movs	r4, #0
 80099c4:	1cb1      	adds	r1, r6, #2
 80099c6:	e7cc      	b.n	8009962 <__gethex+0xb6>
 80099c8:	2401      	movs	r4, #1
 80099ca:	e7fb      	b.n	80099c4 <__gethex+0x118>
 80099cc:	fb03 0002 	mla	r0, r3, r2, r0
 80099d0:	e7ce      	b.n	8009970 <__gethex+0xc4>
 80099d2:	4631      	mov	r1, r6
 80099d4:	e7de      	b.n	8009994 <__gethex+0xe8>
 80099d6:	eba6 0309 	sub.w	r3, r6, r9
 80099da:	3b01      	subs	r3, #1
 80099dc:	4629      	mov	r1, r5
 80099de:	2b07      	cmp	r3, #7
 80099e0:	dc0a      	bgt.n	80099f8 <__gethex+0x14c>
 80099e2:	9801      	ldr	r0, [sp, #4]
 80099e4:	f000 fafc 	bl	8009fe0 <_Balloc>
 80099e8:	4604      	mov	r4, r0
 80099ea:	b940      	cbnz	r0, 80099fe <__gethex+0x152>
 80099ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009b60 <__gethex+0x2b4>)
 80099ee:	4602      	mov	r2, r0
 80099f0:	21e4      	movs	r1, #228	@ 0xe4
 80099f2:	485c      	ldr	r0, [pc, #368]	@ (8009b64 <__gethex+0x2b8>)
 80099f4:	f7ff f83e 	bl	8008a74 <__assert_func>
 80099f8:	3101      	adds	r1, #1
 80099fa:	105b      	asrs	r3, r3, #1
 80099fc:	e7ef      	b.n	80099de <__gethex+0x132>
 80099fe:	f100 0a14 	add.w	sl, r0, #20
 8009a02:	2300      	movs	r3, #0
 8009a04:	4655      	mov	r5, sl
 8009a06:	469b      	mov	fp, r3
 8009a08:	45b1      	cmp	r9, r6
 8009a0a:	d337      	bcc.n	8009a7c <__gethex+0x1d0>
 8009a0c:	f845 bb04 	str.w	fp, [r5], #4
 8009a10:	eba5 050a 	sub.w	r5, r5, sl
 8009a14:	10ad      	asrs	r5, r5, #2
 8009a16:	6125      	str	r5, [r4, #16]
 8009a18:	4658      	mov	r0, fp
 8009a1a:	f000 fbd3 	bl	800a1c4 <__hi0bits>
 8009a1e:	016d      	lsls	r5, r5, #5
 8009a20:	f8d8 6000 	ldr.w	r6, [r8]
 8009a24:	1a2d      	subs	r5, r5, r0
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	dd54      	ble.n	8009ad4 <__gethex+0x228>
 8009a2a:	1bad      	subs	r5, r5, r6
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 ff67 	bl	800a902 <__any_on>
 8009a34:	4681      	mov	r9, r0
 8009a36:	b178      	cbz	r0, 8009a58 <__gethex+0x1ac>
 8009a38:	1e6b      	subs	r3, r5, #1
 8009a3a:	1159      	asrs	r1, r3, #5
 8009a3c:	f003 021f 	and.w	r2, r3, #31
 8009a40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a44:	f04f 0901 	mov.w	r9, #1
 8009a48:	fa09 f202 	lsl.w	r2, r9, r2
 8009a4c:	420a      	tst	r2, r1
 8009a4e:	d003      	beq.n	8009a58 <__gethex+0x1ac>
 8009a50:	454b      	cmp	r3, r9
 8009a52:	dc36      	bgt.n	8009ac2 <__gethex+0x216>
 8009a54:	f04f 0902 	mov.w	r9, #2
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff febe 	bl	80097dc <rshift>
 8009a60:	442f      	add	r7, r5
 8009a62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a66:	42bb      	cmp	r3, r7
 8009a68:	da42      	bge.n	8009af0 <__gethex+0x244>
 8009a6a:	9801      	ldr	r0, [sp, #4]
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	f000 faf7 	bl	800a060 <_Bfree>
 8009a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a74:	2300      	movs	r3, #0
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	25a3      	movs	r5, #163	@ 0xa3
 8009a7a:	e793      	b.n	80099a4 <__gethex+0xf8>
 8009a7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009a80:	2a2e      	cmp	r2, #46	@ 0x2e
 8009a82:	d012      	beq.n	8009aaa <__gethex+0x1fe>
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	d104      	bne.n	8009a92 <__gethex+0x1e6>
 8009a88:	f845 bb04 	str.w	fp, [r5], #4
 8009a8c:	f04f 0b00 	mov.w	fp, #0
 8009a90:	465b      	mov	r3, fp
 8009a92:	7830      	ldrb	r0, [r6, #0]
 8009a94:	9303      	str	r3, [sp, #12]
 8009a96:	f7ff fef3 	bl	8009880 <__hexdig_fun>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	f000 000f 	and.w	r0, r0, #15
 8009aa0:	4098      	lsls	r0, r3
 8009aa2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	e7ae      	b.n	8009a08 <__gethex+0x15c>
 8009aaa:	45b1      	cmp	r9, r6
 8009aac:	d8ea      	bhi.n	8009a84 <__gethex+0x1d8>
 8009aae:	492b      	ldr	r1, [pc, #172]	@ (8009b5c <__gethex+0x2b0>)
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7fe fedb 	bl	8008870 <strncmp>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d1e1      	bne.n	8009a84 <__gethex+0x1d8>
 8009ac0:	e7a2      	b.n	8009a08 <__gethex+0x15c>
 8009ac2:	1ea9      	subs	r1, r5, #2
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 ff1c 	bl	800a902 <__any_on>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0c2      	beq.n	8009a54 <__gethex+0x1a8>
 8009ace:	f04f 0903 	mov.w	r9, #3
 8009ad2:	e7c1      	b.n	8009a58 <__gethex+0x1ac>
 8009ad4:	da09      	bge.n	8009aea <__gethex+0x23e>
 8009ad6:	1b75      	subs	r5, r6, r5
 8009ad8:	4621      	mov	r1, r4
 8009ada:	9801      	ldr	r0, [sp, #4]
 8009adc:	462a      	mov	r2, r5
 8009ade:	f000 fcd7 	bl	800a490 <__lshift>
 8009ae2:	1b7f      	subs	r7, r7, r5
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	f100 0a14 	add.w	sl, r0, #20
 8009aea:	f04f 0900 	mov.w	r9, #0
 8009aee:	e7b8      	b.n	8009a62 <__gethex+0x1b6>
 8009af0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009af4:	42bd      	cmp	r5, r7
 8009af6:	dd6f      	ble.n	8009bd8 <__gethex+0x32c>
 8009af8:	1bed      	subs	r5, r5, r7
 8009afa:	42ae      	cmp	r6, r5
 8009afc:	dc34      	bgt.n	8009b68 <__gethex+0x2bc>
 8009afe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d022      	beq.n	8009b4c <__gethex+0x2a0>
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d024      	beq.n	8009b54 <__gethex+0x2a8>
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d115      	bne.n	8009b3a <__gethex+0x28e>
 8009b0e:	42ae      	cmp	r6, r5
 8009b10:	d113      	bne.n	8009b3a <__gethex+0x28e>
 8009b12:	2e01      	cmp	r6, #1
 8009b14:	d10b      	bne.n	8009b2e <__gethex+0x282>
 8009b16:	9a02      	ldr	r2, [sp, #8]
 8009b18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	6123      	str	r3, [r4, #16]
 8009b22:	f8ca 3000 	str.w	r3, [sl]
 8009b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b28:	2562      	movs	r5, #98	@ 0x62
 8009b2a:	601c      	str	r4, [r3, #0]
 8009b2c:	e73a      	b.n	80099a4 <__gethex+0xf8>
 8009b2e:	1e71      	subs	r1, r6, #1
 8009b30:	4620      	mov	r0, r4
 8009b32:	f000 fee6 	bl	800a902 <__any_on>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d1ed      	bne.n	8009b16 <__gethex+0x26a>
 8009b3a:	9801      	ldr	r0, [sp, #4]
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f000 fa8f 	bl	800a060 <_Bfree>
 8009b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b44:	2300      	movs	r3, #0
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	2550      	movs	r5, #80	@ 0x50
 8009b4a:	e72b      	b.n	80099a4 <__gethex+0xf8>
 8009b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1f3      	bne.n	8009b3a <__gethex+0x28e>
 8009b52:	e7e0      	b.n	8009b16 <__gethex+0x26a>
 8009b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1dd      	bne.n	8009b16 <__gethex+0x26a>
 8009b5a:	e7ee      	b.n	8009b3a <__gethex+0x28e>
 8009b5c:	0800b838 	.word	0x0800b838
 8009b60:	0800b9e3 	.word	0x0800b9e3
 8009b64:	0800b9f4 	.word	0x0800b9f4
 8009b68:	1e6f      	subs	r7, r5, #1
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	d130      	bne.n	8009bd2 <__gethex+0x326>
 8009b70:	b127      	cbz	r7, 8009b7c <__gethex+0x2d0>
 8009b72:	4639      	mov	r1, r7
 8009b74:	4620      	mov	r0, r4
 8009b76:	f000 fec4 	bl	800a902 <__any_on>
 8009b7a:	4681      	mov	r9, r0
 8009b7c:	117a      	asrs	r2, r7, #5
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b84:	f007 071f 	and.w	r7, r7, #31
 8009b88:	40bb      	lsls	r3, r7
 8009b8a:	4213      	tst	r3, r2
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4620      	mov	r0, r4
 8009b90:	bf18      	it	ne
 8009b92:	f049 0902 	orrne.w	r9, r9, #2
 8009b96:	f7ff fe21 	bl	80097dc <rshift>
 8009b9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009b9e:	1b76      	subs	r6, r6, r5
 8009ba0:	2502      	movs	r5, #2
 8009ba2:	f1b9 0f00 	cmp.w	r9, #0
 8009ba6:	d047      	beq.n	8009c38 <__gethex+0x38c>
 8009ba8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d015      	beq.n	8009bdc <__gethex+0x330>
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d017      	beq.n	8009be4 <__gethex+0x338>
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d109      	bne.n	8009bcc <__gethex+0x320>
 8009bb8:	f019 0f02 	tst.w	r9, #2
 8009bbc:	d006      	beq.n	8009bcc <__gethex+0x320>
 8009bbe:	f8da 3000 	ldr.w	r3, [sl]
 8009bc2:	ea49 0903 	orr.w	r9, r9, r3
 8009bc6:	f019 0f01 	tst.w	r9, #1
 8009bca:	d10e      	bne.n	8009bea <__gethex+0x33e>
 8009bcc:	f045 0510 	orr.w	r5, r5, #16
 8009bd0:	e032      	b.n	8009c38 <__gethex+0x38c>
 8009bd2:	f04f 0901 	mov.w	r9, #1
 8009bd6:	e7d1      	b.n	8009b7c <__gethex+0x2d0>
 8009bd8:	2501      	movs	r5, #1
 8009bda:	e7e2      	b.n	8009ba2 <__gethex+0x2f6>
 8009bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bde:	f1c3 0301 	rsb	r3, r3, #1
 8009be2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0f0      	beq.n	8009bcc <__gethex+0x320>
 8009bea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009bee:	f104 0314 	add.w	r3, r4, #20
 8009bf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bfa:	f04f 0c00 	mov.w	ip, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c08:	d01b      	beq.n	8009c42 <__gethex+0x396>
 8009c0a:	3201      	adds	r2, #1
 8009c0c:	6002      	str	r2, [r0, #0]
 8009c0e:	2d02      	cmp	r5, #2
 8009c10:	f104 0314 	add.w	r3, r4, #20
 8009c14:	d13c      	bne.n	8009c90 <__gethex+0x3e4>
 8009c16:	f8d8 2000 	ldr.w	r2, [r8]
 8009c1a:	3a01      	subs	r2, #1
 8009c1c:	42b2      	cmp	r2, r6
 8009c1e:	d109      	bne.n	8009c34 <__gethex+0x388>
 8009c20:	1171      	asrs	r1, r6, #5
 8009c22:	2201      	movs	r2, #1
 8009c24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c28:	f006 061f 	and.w	r6, r6, #31
 8009c2c:	fa02 f606 	lsl.w	r6, r2, r6
 8009c30:	421e      	tst	r6, r3
 8009c32:	d13a      	bne.n	8009caa <__gethex+0x3fe>
 8009c34:	f045 0520 	orr.w	r5, r5, #32
 8009c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3a:	601c      	str	r4, [r3, #0]
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	601f      	str	r7, [r3, #0]
 8009c40:	e6b0      	b.n	80099a4 <__gethex+0xf8>
 8009c42:	4299      	cmp	r1, r3
 8009c44:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c48:	d8d9      	bhi.n	8009bfe <__gethex+0x352>
 8009c4a:	68a3      	ldr	r3, [r4, #8]
 8009c4c:	459b      	cmp	fp, r3
 8009c4e:	db17      	blt.n	8009c80 <__gethex+0x3d4>
 8009c50:	6861      	ldr	r1, [r4, #4]
 8009c52:	9801      	ldr	r0, [sp, #4]
 8009c54:	3101      	adds	r1, #1
 8009c56:	f000 f9c3 	bl	8009fe0 <_Balloc>
 8009c5a:	4681      	mov	r9, r0
 8009c5c:	b918      	cbnz	r0, 8009c66 <__gethex+0x3ba>
 8009c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc8 <__gethex+0x41c>)
 8009c60:	4602      	mov	r2, r0
 8009c62:	2184      	movs	r1, #132	@ 0x84
 8009c64:	e6c5      	b.n	80099f2 <__gethex+0x146>
 8009c66:	6922      	ldr	r2, [r4, #16]
 8009c68:	3202      	adds	r2, #2
 8009c6a:	f104 010c 	add.w	r1, r4, #12
 8009c6e:	0092      	lsls	r2, r2, #2
 8009c70:	300c      	adds	r0, #12
 8009c72:	f7fe fee2 	bl	8008a3a <memcpy>
 8009c76:	4621      	mov	r1, r4
 8009c78:	9801      	ldr	r0, [sp, #4]
 8009c7a:	f000 f9f1 	bl	800a060 <_Bfree>
 8009c7e:	464c      	mov	r4, r9
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c88:	6122      	str	r2, [r4, #16]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	615a      	str	r2, [r3, #20]
 8009c8e:	e7be      	b.n	8009c0e <__gethex+0x362>
 8009c90:	6922      	ldr	r2, [r4, #16]
 8009c92:	455a      	cmp	r2, fp
 8009c94:	dd0b      	ble.n	8009cae <__gethex+0x402>
 8009c96:	2101      	movs	r1, #1
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff fd9f 	bl	80097dc <rshift>
 8009c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ca2:	3701      	adds	r7, #1
 8009ca4:	42bb      	cmp	r3, r7
 8009ca6:	f6ff aee0 	blt.w	8009a6a <__gethex+0x1be>
 8009caa:	2501      	movs	r5, #1
 8009cac:	e7c2      	b.n	8009c34 <__gethex+0x388>
 8009cae:	f016 061f 	ands.w	r6, r6, #31
 8009cb2:	d0fa      	beq.n	8009caa <__gethex+0x3fe>
 8009cb4:	4453      	add	r3, sl
 8009cb6:	f1c6 0620 	rsb	r6, r6, #32
 8009cba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009cbe:	f000 fa81 	bl	800a1c4 <__hi0bits>
 8009cc2:	42b0      	cmp	r0, r6
 8009cc4:	dbe7      	blt.n	8009c96 <__gethex+0x3ea>
 8009cc6:	e7f0      	b.n	8009caa <__gethex+0x3fe>
 8009cc8:	0800b9e3 	.word	0x0800b9e3

08009ccc <L_shift>:
 8009ccc:	f1c2 0208 	rsb	r2, r2, #8
 8009cd0:	0092      	lsls	r2, r2, #2
 8009cd2:	b570      	push	{r4, r5, r6, lr}
 8009cd4:	f1c2 0620 	rsb	r6, r2, #32
 8009cd8:	6843      	ldr	r3, [r0, #4]
 8009cda:	6804      	ldr	r4, [r0, #0]
 8009cdc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ce0:	432c      	orrs	r4, r5
 8009ce2:	40d3      	lsrs	r3, r2
 8009ce4:	6004      	str	r4, [r0, #0]
 8009ce6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009cea:	4288      	cmp	r0, r1
 8009cec:	d3f4      	bcc.n	8009cd8 <L_shift+0xc>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}

08009cf0 <__match>:
 8009cf0:	b530      	push	{r4, r5, lr}
 8009cf2:	6803      	ldr	r3, [r0, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfa:	b914      	cbnz	r4, 8009d02 <__match+0x12>
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	2001      	movs	r0, #1
 8009d00:	bd30      	pop	{r4, r5, pc}
 8009d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009d0a:	2d19      	cmp	r5, #25
 8009d0c:	bf98      	it	ls
 8009d0e:	3220      	addls	r2, #32
 8009d10:	42a2      	cmp	r2, r4
 8009d12:	d0f0      	beq.n	8009cf6 <__match+0x6>
 8009d14:	2000      	movs	r0, #0
 8009d16:	e7f3      	b.n	8009d00 <__match+0x10>

08009d18 <__hexnan>:
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	680b      	ldr	r3, [r1, #0]
 8009d1e:	6801      	ldr	r1, [r0, #0]
 8009d20:	115e      	asrs	r6, r3, #5
 8009d22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d26:	f013 031f 	ands.w	r3, r3, #31
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	bf18      	it	ne
 8009d2e:	3604      	addne	r6, #4
 8009d30:	2500      	movs	r5, #0
 8009d32:	1f37      	subs	r7, r6, #4
 8009d34:	4682      	mov	sl, r0
 8009d36:	4690      	mov	r8, r2
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d3e:	46b9      	mov	r9, r7
 8009d40:	463c      	mov	r4, r7
 8009d42:	9502      	str	r5, [sp, #8]
 8009d44:	46ab      	mov	fp, r5
 8009d46:	784a      	ldrb	r2, [r1, #1]
 8009d48:	1c4b      	adds	r3, r1, #1
 8009d4a:	9303      	str	r3, [sp, #12]
 8009d4c:	b342      	cbz	r2, 8009da0 <__hexnan+0x88>
 8009d4e:	4610      	mov	r0, r2
 8009d50:	9105      	str	r1, [sp, #20]
 8009d52:	9204      	str	r2, [sp, #16]
 8009d54:	f7ff fd94 	bl	8009880 <__hexdig_fun>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d151      	bne.n	8009e00 <__hexnan+0xe8>
 8009d5c:	9a04      	ldr	r2, [sp, #16]
 8009d5e:	9905      	ldr	r1, [sp, #20]
 8009d60:	2a20      	cmp	r2, #32
 8009d62:	d818      	bhi.n	8009d96 <__hexnan+0x7e>
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	459b      	cmp	fp, r3
 8009d68:	dd13      	ble.n	8009d92 <__hexnan+0x7a>
 8009d6a:	454c      	cmp	r4, r9
 8009d6c:	d206      	bcs.n	8009d7c <__hexnan+0x64>
 8009d6e:	2d07      	cmp	r5, #7
 8009d70:	dc04      	bgt.n	8009d7c <__hexnan+0x64>
 8009d72:	462a      	mov	r2, r5
 8009d74:	4649      	mov	r1, r9
 8009d76:	4620      	mov	r0, r4
 8009d78:	f7ff ffa8 	bl	8009ccc <L_shift>
 8009d7c:	4544      	cmp	r4, r8
 8009d7e:	d952      	bls.n	8009e26 <__hexnan+0x10e>
 8009d80:	2300      	movs	r3, #0
 8009d82:	f1a4 0904 	sub.w	r9, r4, #4
 8009d86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d8e:	464c      	mov	r4, r9
 8009d90:	461d      	mov	r5, r3
 8009d92:	9903      	ldr	r1, [sp, #12]
 8009d94:	e7d7      	b.n	8009d46 <__hexnan+0x2e>
 8009d96:	2a29      	cmp	r2, #41	@ 0x29
 8009d98:	d157      	bne.n	8009e4a <__hexnan+0x132>
 8009d9a:	3102      	adds	r1, #2
 8009d9c:	f8ca 1000 	str.w	r1, [sl]
 8009da0:	f1bb 0f00 	cmp.w	fp, #0
 8009da4:	d051      	beq.n	8009e4a <__hexnan+0x132>
 8009da6:	454c      	cmp	r4, r9
 8009da8:	d206      	bcs.n	8009db8 <__hexnan+0xa0>
 8009daa:	2d07      	cmp	r5, #7
 8009dac:	dc04      	bgt.n	8009db8 <__hexnan+0xa0>
 8009dae:	462a      	mov	r2, r5
 8009db0:	4649      	mov	r1, r9
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff ff8a 	bl	8009ccc <L_shift>
 8009db8:	4544      	cmp	r4, r8
 8009dba:	d936      	bls.n	8009e2a <__hexnan+0x112>
 8009dbc:	f1a8 0204 	sub.w	r2, r8, #4
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009dca:	429f      	cmp	r7, r3
 8009dcc:	d2f9      	bcs.n	8009dc2 <__hexnan+0xaa>
 8009dce:	1b3b      	subs	r3, r7, r4
 8009dd0:	f023 0303 	bic.w	r3, r3, #3
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	3401      	adds	r4, #1
 8009dd8:	3e03      	subs	r6, #3
 8009dda:	42b4      	cmp	r4, r6
 8009ddc:	bf88      	it	hi
 8009dde:	2304      	movhi	r3, #4
 8009de0:	4443      	add	r3, r8
 8009de2:	2200      	movs	r2, #0
 8009de4:	f843 2b04 	str.w	r2, [r3], #4
 8009de8:	429f      	cmp	r7, r3
 8009dea:	d2fb      	bcs.n	8009de4 <__hexnan+0xcc>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	b91b      	cbnz	r3, 8009df8 <__hexnan+0xe0>
 8009df0:	4547      	cmp	r7, r8
 8009df2:	d128      	bne.n	8009e46 <__hexnan+0x12e>
 8009df4:	2301      	movs	r3, #1
 8009df6:	603b      	str	r3, [r7, #0]
 8009df8:	2005      	movs	r0, #5
 8009dfa:	b007      	add	sp, #28
 8009dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e00:	3501      	adds	r5, #1
 8009e02:	2d08      	cmp	r5, #8
 8009e04:	f10b 0b01 	add.w	fp, fp, #1
 8009e08:	dd06      	ble.n	8009e18 <__hexnan+0x100>
 8009e0a:	4544      	cmp	r4, r8
 8009e0c:	d9c1      	bls.n	8009d92 <__hexnan+0x7a>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e14:	2501      	movs	r5, #1
 8009e16:	3c04      	subs	r4, #4
 8009e18:	6822      	ldr	r2, [r4, #0]
 8009e1a:	f000 000f 	and.w	r0, r0, #15
 8009e1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e22:	6020      	str	r0, [r4, #0]
 8009e24:	e7b5      	b.n	8009d92 <__hexnan+0x7a>
 8009e26:	2508      	movs	r5, #8
 8009e28:	e7b3      	b.n	8009d92 <__hexnan+0x7a>
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0dd      	beq.n	8009dec <__hexnan+0xd4>
 8009e30:	f1c3 0320 	rsb	r3, r3, #32
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	40da      	lsrs	r2, r3
 8009e3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e44:	e7d2      	b.n	8009dec <__hexnan+0xd4>
 8009e46:	3f04      	subs	r7, #4
 8009e48:	e7d0      	b.n	8009dec <__hexnan+0xd4>
 8009e4a:	2004      	movs	r0, #4
 8009e4c:	e7d5      	b.n	8009dfa <__hexnan+0xe2>
	...

08009e50 <malloc>:
 8009e50:	4b02      	ldr	r3, [pc, #8]	@ (8009e5c <malloc+0xc>)
 8009e52:	4601      	mov	r1, r0
 8009e54:	6818      	ldr	r0, [r3, #0]
 8009e56:	f000 b825 	b.w	8009ea4 <_malloc_r>
 8009e5a:	bf00      	nop
 8009e5c:	2000018c 	.word	0x2000018c

08009e60 <sbrk_aligned>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	4e0f      	ldr	r6, [pc, #60]	@ (8009ea0 <sbrk_aligned+0x40>)
 8009e64:	460c      	mov	r4, r1
 8009e66:	6831      	ldr	r1, [r6, #0]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	b911      	cbnz	r1, 8009e72 <sbrk_aligned+0x12>
 8009e6c:	f001 f9e8 	bl	800b240 <_sbrk_r>
 8009e70:	6030      	str	r0, [r6, #0]
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	f001 f9e3 	bl	800b240 <_sbrk_r>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	d103      	bne.n	8009e86 <sbrk_aligned+0x26>
 8009e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8009e82:	4620      	mov	r0, r4
 8009e84:	bd70      	pop	{r4, r5, r6, pc}
 8009e86:	1cc4      	adds	r4, r0, #3
 8009e88:	f024 0403 	bic.w	r4, r4, #3
 8009e8c:	42a0      	cmp	r0, r4
 8009e8e:	d0f8      	beq.n	8009e82 <sbrk_aligned+0x22>
 8009e90:	1a21      	subs	r1, r4, r0
 8009e92:	4628      	mov	r0, r5
 8009e94:	f001 f9d4 	bl	800b240 <_sbrk_r>
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d1f2      	bne.n	8009e82 <sbrk_aligned+0x22>
 8009e9c:	e7ef      	b.n	8009e7e <sbrk_aligned+0x1e>
 8009e9e:	bf00      	nop
 8009ea0:	20000750 	.word	0x20000750

08009ea4 <_malloc_r>:
 8009ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea8:	1ccd      	adds	r5, r1, #3
 8009eaa:	f025 0503 	bic.w	r5, r5, #3
 8009eae:	3508      	adds	r5, #8
 8009eb0:	2d0c      	cmp	r5, #12
 8009eb2:	bf38      	it	cc
 8009eb4:	250c      	movcc	r5, #12
 8009eb6:	2d00      	cmp	r5, #0
 8009eb8:	4606      	mov	r6, r0
 8009eba:	db01      	blt.n	8009ec0 <_malloc_r+0x1c>
 8009ebc:	42a9      	cmp	r1, r5
 8009ebe:	d904      	bls.n	8009eca <_malloc_r+0x26>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	6033      	str	r3, [r6, #0]
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fa0 <_malloc_r+0xfc>
 8009ece:	f000 f87b 	bl	8009fc8 <__malloc_lock>
 8009ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed6:	461c      	mov	r4, r3
 8009ed8:	bb44      	cbnz	r4, 8009f2c <_malloc_r+0x88>
 8009eda:	4629      	mov	r1, r5
 8009edc:	4630      	mov	r0, r6
 8009ede:	f7ff ffbf 	bl	8009e60 <sbrk_aligned>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	d158      	bne.n	8009f9a <_malloc_r+0xf6>
 8009ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8009eec:	4627      	mov	r7, r4
 8009eee:	2f00      	cmp	r7, #0
 8009ef0:	d143      	bne.n	8009f7a <_malloc_r+0xd6>
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	d04b      	beq.n	8009f8e <_malloc_r+0xea>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4630      	mov	r0, r6
 8009efc:	eb04 0903 	add.w	r9, r4, r3
 8009f00:	f001 f99e 	bl	800b240 <_sbrk_r>
 8009f04:	4581      	cmp	r9, r0
 8009f06:	d142      	bne.n	8009f8e <_malloc_r+0xea>
 8009f08:	6821      	ldr	r1, [r4, #0]
 8009f0a:	1a6d      	subs	r5, r5, r1
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f7ff ffa6 	bl	8009e60 <sbrk_aligned>
 8009f14:	3001      	adds	r0, #1
 8009f16:	d03a      	beq.n	8009f8e <_malloc_r+0xea>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	442b      	add	r3, r5
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	bb62      	cbnz	r2, 8009f80 <_malloc_r+0xdc>
 8009f26:	f8c8 7000 	str.w	r7, [r8]
 8009f2a:	e00f      	b.n	8009f4c <_malloc_r+0xa8>
 8009f2c:	6822      	ldr	r2, [r4, #0]
 8009f2e:	1b52      	subs	r2, r2, r5
 8009f30:	d420      	bmi.n	8009f74 <_malloc_r+0xd0>
 8009f32:	2a0b      	cmp	r2, #11
 8009f34:	d917      	bls.n	8009f66 <_malloc_r+0xc2>
 8009f36:	1961      	adds	r1, r4, r5
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	6025      	str	r5, [r4, #0]
 8009f3c:	bf18      	it	ne
 8009f3e:	6059      	strne	r1, [r3, #4]
 8009f40:	6863      	ldr	r3, [r4, #4]
 8009f42:	bf08      	it	eq
 8009f44:	f8c8 1000 	streq.w	r1, [r8]
 8009f48:	5162      	str	r2, [r4, r5]
 8009f4a:	604b      	str	r3, [r1, #4]
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f000 f841 	bl	8009fd4 <__malloc_unlock>
 8009f52:	f104 000b 	add.w	r0, r4, #11
 8009f56:	1d23      	adds	r3, r4, #4
 8009f58:	f020 0007 	bic.w	r0, r0, #7
 8009f5c:	1ac2      	subs	r2, r0, r3
 8009f5e:	bf1c      	itt	ne
 8009f60:	1a1b      	subne	r3, r3, r0
 8009f62:	50a3      	strne	r3, [r4, r2]
 8009f64:	e7af      	b.n	8009ec6 <_malloc_r+0x22>
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	bf0c      	ite	eq
 8009f6c:	f8c8 2000 	streq.w	r2, [r8]
 8009f70:	605a      	strne	r2, [r3, #4]
 8009f72:	e7eb      	b.n	8009f4c <_malloc_r+0xa8>
 8009f74:	4623      	mov	r3, r4
 8009f76:	6864      	ldr	r4, [r4, #4]
 8009f78:	e7ae      	b.n	8009ed8 <_malloc_r+0x34>
 8009f7a:	463c      	mov	r4, r7
 8009f7c:	687f      	ldr	r7, [r7, #4]
 8009f7e:	e7b6      	b.n	8009eee <_malloc_r+0x4a>
 8009f80:	461a      	mov	r2, r3
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	d1fb      	bne.n	8009f80 <_malloc_r+0xdc>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	6053      	str	r3, [r2, #4]
 8009f8c:	e7de      	b.n	8009f4c <_malloc_r+0xa8>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	4630      	mov	r0, r6
 8009f94:	f000 f81e 	bl	8009fd4 <__malloc_unlock>
 8009f98:	e794      	b.n	8009ec4 <_malloc_r+0x20>
 8009f9a:	6005      	str	r5, [r0, #0]
 8009f9c:	e7d6      	b.n	8009f4c <_malloc_r+0xa8>
 8009f9e:	bf00      	nop
 8009fa0:	20000754 	.word	0x20000754

08009fa4 <__ascii_mbtowc>:
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	b901      	cbnz	r1, 8009faa <__ascii_mbtowc+0x6>
 8009fa8:	a901      	add	r1, sp, #4
 8009faa:	b142      	cbz	r2, 8009fbe <__ascii_mbtowc+0x1a>
 8009fac:	b14b      	cbz	r3, 8009fc2 <__ascii_mbtowc+0x1e>
 8009fae:	7813      	ldrb	r3, [r2, #0]
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	1e10      	subs	r0, r2, #0
 8009fb6:	bf18      	it	ne
 8009fb8:	2001      	movne	r0, #1
 8009fba:	b002      	add	sp, #8
 8009fbc:	4770      	bx	lr
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	e7fb      	b.n	8009fba <__ascii_mbtowc+0x16>
 8009fc2:	f06f 0001 	mvn.w	r0, #1
 8009fc6:	e7f8      	b.n	8009fba <__ascii_mbtowc+0x16>

08009fc8 <__malloc_lock>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	@ (8009fd0 <__malloc_lock+0x8>)
 8009fca:	f7fe bd34 	b.w	8008a36 <__retarget_lock_acquire_recursive>
 8009fce:	bf00      	nop
 8009fd0:	2000074c 	.word	0x2000074c

08009fd4 <__malloc_unlock>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	@ (8009fdc <__malloc_unlock+0x8>)
 8009fd6:	f7fe bd2f 	b.w	8008a38 <__retarget_lock_release_recursive>
 8009fda:	bf00      	nop
 8009fdc:	2000074c 	.word	0x2000074c

08009fe0 <_Balloc>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	69c6      	ldr	r6, [r0, #28]
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	b976      	cbnz	r6, 800a008 <_Balloc+0x28>
 8009fea:	2010      	movs	r0, #16
 8009fec:	f7ff ff30 	bl	8009e50 <malloc>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	61e0      	str	r0, [r4, #28]
 8009ff4:	b920      	cbnz	r0, 800a000 <_Balloc+0x20>
 8009ff6:	4b18      	ldr	r3, [pc, #96]	@ (800a058 <_Balloc+0x78>)
 8009ff8:	4818      	ldr	r0, [pc, #96]	@ (800a05c <_Balloc+0x7c>)
 8009ffa:	216b      	movs	r1, #107	@ 0x6b
 8009ffc:	f7fe fd3a 	bl	8008a74 <__assert_func>
 800a000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a004:	6006      	str	r6, [r0, #0]
 800a006:	60c6      	str	r6, [r0, #12]
 800a008:	69e6      	ldr	r6, [r4, #28]
 800a00a:	68f3      	ldr	r3, [r6, #12]
 800a00c:	b183      	cbz	r3, 800a030 <_Balloc+0x50>
 800a00e:	69e3      	ldr	r3, [r4, #28]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a016:	b9b8      	cbnz	r0, 800a048 <_Balloc+0x68>
 800a018:	2101      	movs	r1, #1
 800a01a:	fa01 f605 	lsl.w	r6, r1, r5
 800a01e:	1d72      	adds	r2, r6, #5
 800a020:	0092      	lsls	r2, r2, #2
 800a022:	4620      	mov	r0, r4
 800a024:	f001 f923 	bl	800b26e <_calloc_r>
 800a028:	b160      	cbz	r0, 800a044 <_Balloc+0x64>
 800a02a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a02e:	e00e      	b.n	800a04e <_Balloc+0x6e>
 800a030:	2221      	movs	r2, #33	@ 0x21
 800a032:	2104      	movs	r1, #4
 800a034:	4620      	mov	r0, r4
 800a036:	f001 f91a 	bl	800b26e <_calloc_r>
 800a03a:	69e3      	ldr	r3, [r4, #28]
 800a03c:	60f0      	str	r0, [r6, #12]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e4      	bne.n	800a00e <_Balloc+0x2e>
 800a044:	2000      	movs	r0, #0
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	6802      	ldr	r2, [r0, #0]
 800a04a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a04e:	2300      	movs	r3, #0
 800a050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a054:	e7f7      	b.n	800a046 <_Balloc+0x66>
 800a056:	bf00      	nop
 800a058:	0800b8c9 	.word	0x0800b8c9
 800a05c:	0800ba54 	.word	0x0800ba54

0800a060 <_Bfree>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	69c6      	ldr	r6, [r0, #28]
 800a064:	4605      	mov	r5, r0
 800a066:	460c      	mov	r4, r1
 800a068:	b976      	cbnz	r6, 800a088 <_Bfree+0x28>
 800a06a:	2010      	movs	r0, #16
 800a06c:	f7ff fef0 	bl	8009e50 <malloc>
 800a070:	4602      	mov	r2, r0
 800a072:	61e8      	str	r0, [r5, #28]
 800a074:	b920      	cbnz	r0, 800a080 <_Bfree+0x20>
 800a076:	4b09      	ldr	r3, [pc, #36]	@ (800a09c <_Bfree+0x3c>)
 800a078:	4809      	ldr	r0, [pc, #36]	@ (800a0a0 <_Bfree+0x40>)
 800a07a:	218f      	movs	r1, #143	@ 0x8f
 800a07c:	f7fe fcfa 	bl	8008a74 <__assert_func>
 800a080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a084:	6006      	str	r6, [r0, #0]
 800a086:	60c6      	str	r6, [r0, #12]
 800a088:	b13c      	cbz	r4, 800a09a <_Bfree+0x3a>
 800a08a:	69eb      	ldr	r3, [r5, #28]
 800a08c:	6862      	ldr	r2, [r4, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a094:	6021      	str	r1, [r4, #0]
 800a096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	0800b8c9 	.word	0x0800b8c9
 800a0a0:	0800ba54 	.word	0x0800ba54

0800a0a4 <__multadd>:
 800a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a8:	690d      	ldr	r5, [r1, #16]
 800a0aa:	4607      	mov	r7, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	461e      	mov	r6, r3
 800a0b0:	f101 0c14 	add.w	ip, r1, #20
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a0ba:	b299      	uxth	r1, r3
 800a0bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a0c0:	0c1e      	lsrs	r6, r3, #16
 800a0c2:	0c0b      	lsrs	r3, r1, #16
 800a0c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a0c8:	b289      	uxth	r1, r1
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0d0:	4285      	cmp	r5, r0
 800a0d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a0d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0da:	dcec      	bgt.n	800a0b6 <__multadd+0x12>
 800a0dc:	b30e      	cbz	r6, 800a122 <__multadd+0x7e>
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	42ab      	cmp	r3, r5
 800a0e2:	dc19      	bgt.n	800a118 <__multadd+0x74>
 800a0e4:	6861      	ldr	r1, [r4, #4]
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	3101      	adds	r1, #1
 800a0ea:	f7ff ff79 	bl	8009fe0 <_Balloc>
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	b928      	cbnz	r0, 800a0fe <__multadd+0x5a>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a128 <__multadd+0x84>)
 800a0f6:	480d      	ldr	r0, [pc, #52]	@ (800a12c <__multadd+0x88>)
 800a0f8:	21ba      	movs	r1, #186	@ 0xba
 800a0fa:	f7fe fcbb 	bl	8008a74 <__assert_func>
 800a0fe:	6922      	ldr	r2, [r4, #16]
 800a100:	3202      	adds	r2, #2
 800a102:	f104 010c 	add.w	r1, r4, #12
 800a106:	0092      	lsls	r2, r2, #2
 800a108:	300c      	adds	r0, #12
 800a10a:	f7fe fc96 	bl	8008a3a <memcpy>
 800a10e:	4621      	mov	r1, r4
 800a110:	4638      	mov	r0, r7
 800a112:	f7ff ffa5 	bl	800a060 <_Bfree>
 800a116:	4644      	mov	r4, r8
 800a118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a11c:	3501      	adds	r5, #1
 800a11e:	615e      	str	r6, [r3, #20]
 800a120:	6125      	str	r5, [r4, #16]
 800a122:	4620      	mov	r0, r4
 800a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a128:	0800b9e3 	.word	0x0800b9e3
 800a12c:	0800ba54 	.word	0x0800ba54

0800a130 <__s2b>:
 800a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a134:	460c      	mov	r4, r1
 800a136:	4615      	mov	r5, r2
 800a138:	461f      	mov	r7, r3
 800a13a:	2209      	movs	r2, #9
 800a13c:	3308      	adds	r3, #8
 800a13e:	4606      	mov	r6, r0
 800a140:	fb93 f3f2 	sdiv	r3, r3, r2
 800a144:	2100      	movs	r1, #0
 800a146:	2201      	movs	r2, #1
 800a148:	429a      	cmp	r2, r3
 800a14a:	db09      	blt.n	800a160 <__s2b+0x30>
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff ff47 	bl	8009fe0 <_Balloc>
 800a152:	b940      	cbnz	r0, 800a166 <__s2b+0x36>
 800a154:	4602      	mov	r2, r0
 800a156:	4b19      	ldr	r3, [pc, #100]	@ (800a1bc <__s2b+0x8c>)
 800a158:	4819      	ldr	r0, [pc, #100]	@ (800a1c0 <__s2b+0x90>)
 800a15a:	21d3      	movs	r1, #211	@ 0xd3
 800a15c:	f7fe fc8a 	bl	8008a74 <__assert_func>
 800a160:	0052      	lsls	r2, r2, #1
 800a162:	3101      	adds	r1, #1
 800a164:	e7f0      	b.n	800a148 <__s2b+0x18>
 800a166:	9b08      	ldr	r3, [sp, #32]
 800a168:	6143      	str	r3, [r0, #20]
 800a16a:	2d09      	cmp	r5, #9
 800a16c:	f04f 0301 	mov.w	r3, #1
 800a170:	6103      	str	r3, [r0, #16]
 800a172:	dd16      	ble.n	800a1a2 <__s2b+0x72>
 800a174:	f104 0909 	add.w	r9, r4, #9
 800a178:	46c8      	mov	r8, r9
 800a17a:	442c      	add	r4, r5
 800a17c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a180:	4601      	mov	r1, r0
 800a182:	3b30      	subs	r3, #48	@ 0x30
 800a184:	220a      	movs	r2, #10
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff8c 	bl	800a0a4 <__multadd>
 800a18c:	45a0      	cmp	r8, r4
 800a18e:	d1f5      	bne.n	800a17c <__s2b+0x4c>
 800a190:	f1a5 0408 	sub.w	r4, r5, #8
 800a194:	444c      	add	r4, r9
 800a196:	1b2d      	subs	r5, r5, r4
 800a198:	1963      	adds	r3, r4, r5
 800a19a:	42bb      	cmp	r3, r7
 800a19c:	db04      	blt.n	800a1a8 <__s2b+0x78>
 800a19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a2:	340a      	adds	r4, #10
 800a1a4:	2509      	movs	r5, #9
 800a1a6:	e7f6      	b.n	800a196 <__s2b+0x66>
 800a1a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	3b30      	subs	r3, #48	@ 0x30
 800a1b0:	220a      	movs	r2, #10
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7ff ff76 	bl	800a0a4 <__multadd>
 800a1b8:	e7ee      	b.n	800a198 <__s2b+0x68>
 800a1ba:	bf00      	nop
 800a1bc:	0800b9e3 	.word	0x0800b9e3
 800a1c0:	0800ba54 	.word	0x0800ba54

0800a1c4 <__hi0bits>:
 800a1c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	bf36      	itet	cc
 800a1cc:	0403      	lslcc	r3, r0, #16
 800a1ce:	2000      	movcs	r0, #0
 800a1d0:	2010      	movcc	r0, #16
 800a1d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1d6:	bf3c      	itt	cc
 800a1d8:	021b      	lslcc	r3, r3, #8
 800a1da:	3008      	addcc	r0, #8
 800a1dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1e0:	bf3c      	itt	cc
 800a1e2:	011b      	lslcc	r3, r3, #4
 800a1e4:	3004      	addcc	r0, #4
 800a1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ea:	bf3c      	itt	cc
 800a1ec:	009b      	lslcc	r3, r3, #2
 800a1ee:	3002      	addcc	r0, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	db05      	blt.n	800a200 <__hi0bits+0x3c>
 800a1f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1f8:	f100 0001 	add.w	r0, r0, #1
 800a1fc:	bf08      	it	eq
 800a1fe:	2020      	moveq	r0, #32
 800a200:	4770      	bx	lr

0800a202 <__lo0bits>:
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	4602      	mov	r2, r0
 800a206:	f013 0007 	ands.w	r0, r3, #7
 800a20a:	d00b      	beq.n	800a224 <__lo0bits+0x22>
 800a20c:	07d9      	lsls	r1, r3, #31
 800a20e:	d421      	bmi.n	800a254 <__lo0bits+0x52>
 800a210:	0798      	lsls	r0, r3, #30
 800a212:	bf49      	itett	mi
 800a214:	085b      	lsrmi	r3, r3, #1
 800a216:	089b      	lsrpl	r3, r3, #2
 800a218:	2001      	movmi	r0, #1
 800a21a:	6013      	strmi	r3, [r2, #0]
 800a21c:	bf5c      	itt	pl
 800a21e:	6013      	strpl	r3, [r2, #0]
 800a220:	2002      	movpl	r0, #2
 800a222:	4770      	bx	lr
 800a224:	b299      	uxth	r1, r3
 800a226:	b909      	cbnz	r1, 800a22c <__lo0bits+0x2a>
 800a228:	0c1b      	lsrs	r3, r3, #16
 800a22a:	2010      	movs	r0, #16
 800a22c:	b2d9      	uxtb	r1, r3
 800a22e:	b909      	cbnz	r1, 800a234 <__lo0bits+0x32>
 800a230:	3008      	adds	r0, #8
 800a232:	0a1b      	lsrs	r3, r3, #8
 800a234:	0719      	lsls	r1, r3, #28
 800a236:	bf04      	itt	eq
 800a238:	091b      	lsreq	r3, r3, #4
 800a23a:	3004      	addeq	r0, #4
 800a23c:	0799      	lsls	r1, r3, #30
 800a23e:	bf04      	itt	eq
 800a240:	089b      	lsreq	r3, r3, #2
 800a242:	3002      	addeq	r0, #2
 800a244:	07d9      	lsls	r1, r3, #31
 800a246:	d403      	bmi.n	800a250 <__lo0bits+0x4e>
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	f100 0001 	add.w	r0, r0, #1
 800a24e:	d003      	beq.n	800a258 <__lo0bits+0x56>
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	4770      	bx	lr
 800a254:	2000      	movs	r0, #0
 800a256:	4770      	bx	lr
 800a258:	2020      	movs	r0, #32
 800a25a:	4770      	bx	lr

0800a25c <__i2b>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	460c      	mov	r4, r1
 800a260:	2101      	movs	r1, #1
 800a262:	f7ff febd 	bl	8009fe0 <_Balloc>
 800a266:	4602      	mov	r2, r0
 800a268:	b928      	cbnz	r0, 800a276 <__i2b+0x1a>
 800a26a:	4b05      	ldr	r3, [pc, #20]	@ (800a280 <__i2b+0x24>)
 800a26c:	4805      	ldr	r0, [pc, #20]	@ (800a284 <__i2b+0x28>)
 800a26e:	f240 1145 	movw	r1, #325	@ 0x145
 800a272:	f7fe fbff 	bl	8008a74 <__assert_func>
 800a276:	2301      	movs	r3, #1
 800a278:	6144      	str	r4, [r0, #20]
 800a27a:	6103      	str	r3, [r0, #16]
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	bf00      	nop
 800a280:	0800b9e3 	.word	0x0800b9e3
 800a284:	0800ba54 	.word	0x0800ba54

0800a288 <__multiply>:
 800a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28c:	4614      	mov	r4, r2
 800a28e:	690a      	ldr	r2, [r1, #16]
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	429a      	cmp	r2, r3
 800a294:	bfa8      	it	ge
 800a296:	4623      	movge	r3, r4
 800a298:	460f      	mov	r7, r1
 800a29a:	bfa4      	itt	ge
 800a29c:	460c      	movge	r4, r1
 800a29e:	461f      	movge	r7, r3
 800a2a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2a8:	68a3      	ldr	r3, [r4, #8]
 800a2aa:	6861      	ldr	r1, [r4, #4]
 800a2ac:	eb0a 0609 	add.w	r6, sl, r9
 800a2b0:	42b3      	cmp	r3, r6
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	bfb8      	it	lt
 800a2b6:	3101      	addlt	r1, #1
 800a2b8:	f7ff fe92 	bl	8009fe0 <_Balloc>
 800a2bc:	b930      	cbnz	r0, 800a2cc <__multiply+0x44>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	4b44      	ldr	r3, [pc, #272]	@ (800a3d4 <__multiply+0x14c>)
 800a2c2:	4845      	ldr	r0, [pc, #276]	@ (800a3d8 <__multiply+0x150>)
 800a2c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2c8:	f7fe fbd4 	bl	8008a74 <__assert_func>
 800a2cc:	f100 0514 	add.w	r5, r0, #20
 800a2d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4543      	cmp	r3, r8
 800a2da:	d321      	bcc.n	800a320 <__multiply+0x98>
 800a2dc:	f107 0114 	add.w	r1, r7, #20
 800a2e0:	f104 0214 	add.w	r2, r4, #20
 800a2e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a2ec:	9302      	str	r3, [sp, #8]
 800a2ee:	1b13      	subs	r3, r2, r4
 800a2f0:	3b15      	subs	r3, #21
 800a2f2:	f023 0303 	bic.w	r3, r3, #3
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	f104 0715 	add.w	r7, r4, #21
 800a2fc:	42ba      	cmp	r2, r7
 800a2fe:	bf38      	it	cc
 800a300:	2304      	movcc	r3, #4
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	9b02      	ldr	r3, [sp, #8]
 800a306:	9103      	str	r1, [sp, #12]
 800a308:	428b      	cmp	r3, r1
 800a30a:	d80c      	bhi.n	800a326 <__multiply+0x9e>
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	dd03      	ble.n	800a318 <__multiply+0x90>
 800a310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a314:	2b00      	cmp	r3, #0
 800a316:	d05b      	beq.n	800a3d0 <__multiply+0x148>
 800a318:	6106      	str	r6, [r0, #16]
 800a31a:	b005      	add	sp, #20
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	f843 2b04 	str.w	r2, [r3], #4
 800a324:	e7d8      	b.n	800a2d8 <__multiply+0x50>
 800a326:	f8b1 a000 	ldrh.w	sl, [r1]
 800a32a:	f1ba 0f00 	cmp.w	sl, #0
 800a32e:	d024      	beq.n	800a37a <__multiply+0xf2>
 800a330:	f104 0e14 	add.w	lr, r4, #20
 800a334:	46a9      	mov	r9, r5
 800a336:	f04f 0c00 	mov.w	ip, #0
 800a33a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a33e:	f8d9 3000 	ldr.w	r3, [r9]
 800a342:	fa1f fb87 	uxth.w	fp, r7
 800a346:	b29b      	uxth	r3, r3
 800a348:	fb0a 330b 	mla	r3, sl, fp, r3
 800a34c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a350:	f8d9 7000 	ldr.w	r7, [r9]
 800a354:	4463      	add	r3, ip
 800a356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a35a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a35e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a362:	b29b      	uxth	r3, r3
 800a364:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a368:	4572      	cmp	r2, lr
 800a36a:	f849 3b04 	str.w	r3, [r9], #4
 800a36e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a372:	d8e2      	bhi.n	800a33a <__multiply+0xb2>
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	f845 c003 	str.w	ip, [r5, r3]
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a380:	3104      	adds	r1, #4
 800a382:	f1b9 0f00 	cmp.w	r9, #0
 800a386:	d021      	beq.n	800a3cc <__multiply+0x144>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	f104 0c14 	add.w	ip, r4, #20
 800a38e:	46ae      	mov	lr, r5
 800a390:	f04f 0a00 	mov.w	sl, #0
 800a394:	f8bc b000 	ldrh.w	fp, [ip]
 800a398:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a39c:	fb09 770b 	mla	r7, r9, fp, r7
 800a3a0:	4457      	add	r7, sl
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3a8:	f84e 3b04 	str.w	r3, [lr], #4
 800a3ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3b4:	f8be 3000 	ldrh.w	r3, [lr]
 800a3b8:	fb09 330a 	mla	r3, r9, sl, r3
 800a3bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3c0:	4562      	cmp	r2, ip
 800a3c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3c6:	d8e5      	bhi.n	800a394 <__multiply+0x10c>
 800a3c8:	9f01      	ldr	r7, [sp, #4]
 800a3ca:	51eb      	str	r3, [r5, r7]
 800a3cc:	3504      	adds	r5, #4
 800a3ce:	e799      	b.n	800a304 <__multiply+0x7c>
 800a3d0:	3e01      	subs	r6, #1
 800a3d2:	e79b      	b.n	800a30c <__multiply+0x84>
 800a3d4:	0800b9e3 	.word	0x0800b9e3
 800a3d8:	0800ba54 	.word	0x0800ba54

0800a3dc <__pow5mult>:
 800a3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	4615      	mov	r5, r2
 800a3e2:	f012 0203 	ands.w	r2, r2, #3
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	d007      	beq.n	800a3fc <__pow5mult+0x20>
 800a3ec:	4c25      	ldr	r4, [pc, #148]	@ (800a484 <__pow5mult+0xa8>)
 800a3ee:	3a01      	subs	r2, #1
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3f6:	f7ff fe55 	bl	800a0a4 <__multadd>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	10ad      	asrs	r5, r5, #2
 800a3fe:	d03d      	beq.n	800a47c <__pow5mult+0xa0>
 800a400:	69fc      	ldr	r4, [r7, #28]
 800a402:	b97c      	cbnz	r4, 800a424 <__pow5mult+0x48>
 800a404:	2010      	movs	r0, #16
 800a406:	f7ff fd23 	bl	8009e50 <malloc>
 800a40a:	4602      	mov	r2, r0
 800a40c:	61f8      	str	r0, [r7, #28]
 800a40e:	b928      	cbnz	r0, 800a41c <__pow5mult+0x40>
 800a410:	4b1d      	ldr	r3, [pc, #116]	@ (800a488 <__pow5mult+0xac>)
 800a412:	481e      	ldr	r0, [pc, #120]	@ (800a48c <__pow5mult+0xb0>)
 800a414:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a418:	f7fe fb2c 	bl	8008a74 <__assert_func>
 800a41c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a420:	6004      	str	r4, [r0, #0]
 800a422:	60c4      	str	r4, [r0, #12]
 800a424:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a42c:	b94c      	cbnz	r4, 800a442 <__pow5mult+0x66>
 800a42e:	f240 2171 	movw	r1, #625	@ 0x271
 800a432:	4638      	mov	r0, r7
 800a434:	f7ff ff12 	bl	800a25c <__i2b>
 800a438:	2300      	movs	r3, #0
 800a43a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a43e:	4604      	mov	r4, r0
 800a440:	6003      	str	r3, [r0, #0]
 800a442:	f04f 0900 	mov.w	r9, #0
 800a446:	07eb      	lsls	r3, r5, #31
 800a448:	d50a      	bpl.n	800a460 <__pow5mult+0x84>
 800a44a:	4631      	mov	r1, r6
 800a44c:	4622      	mov	r2, r4
 800a44e:	4638      	mov	r0, r7
 800a450:	f7ff ff1a 	bl	800a288 <__multiply>
 800a454:	4631      	mov	r1, r6
 800a456:	4680      	mov	r8, r0
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff fe01 	bl	800a060 <_Bfree>
 800a45e:	4646      	mov	r6, r8
 800a460:	106d      	asrs	r5, r5, #1
 800a462:	d00b      	beq.n	800a47c <__pow5mult+0xa0>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	b938      	cbnz	r0, 800a478 <__pow5mult+0x9c>
 800a468:	4622      	mov	r2, r4
 800a46a:	4621      	mov	r1, r4
 800a46c:	4638      	mov	r0, r7
 800a46e:	f7ff ff0b 	bl	800a288 <__multiply>
 800a472:	6020      	str	r0, [r4, #0]
 800a474:	f8c0 9000 	str.w	r9, [r0]
 800a478:	4604      	mov	r4, r0
 800a47a:	e7e4      	b.n	800a446 <__pow5mult+0x6a>
 800a47c:	4630      	mov	r0, r6
 800a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a482:	bf00      	nop
 800a484:	0800bab0 	.word	0x0800bab0
 800a488:	0800b8c9 	.word	0x0800b8c9
 800a48c:	0800ba54 	.word	0x0800ba54

0800a490 <__lshift>:
 800a490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	460c      	mov	r4, r1
 800a496:	6849      	ldr	r1, [r1, #4]
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a49e:	68a3      	ldr	r3, [r4, #8]
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	4691      	mov	r9, r2
 800a4a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4a8:	f108 0601 	add.w	r6, r8, #1
 800a4ac:	42b3      	cmp	r3, r6
 800a4ae:	db0b      	blt.n	800a4c8 <__lshift+0x38>
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f7ff fd95 	bl	8009fe0 <_Balloc>
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	b948      	cbnz	r0, 800a4ce <__lshift+0x3e>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4b28      	ldr	r3, [pc, #160]	@ (800a560 <__lshift+0xd0>)
 800a4be:	4829      	ldr	r0, [pc, #164]	@ (800a564 <__lshift+0xd4>)
 800a4c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4c4:	f7fe fad6 	bl	8008a74 <__assert_func>
 800a4c8:	3101      	adds	r1, #1
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	e7ee      	b.n	800a4ac <__lshift+0x1c>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f100 0114 	add.w	r1, r0, #20
 800a4d4:	f100 0210 	add.w	r2, r0, #16
 800a4d8:	4618      	mov	r0, r3
 800a4da:	4553      	cmp	r3, sl
 800a4dc:	db33      	blt.n	800a546 <__lshift+0xb6>
 800a4de:	6920      	ldr	r0, [r4, #16]
 800a4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4e4:	f104 0314 	add.w	r3, r4, #20
 800a4e8:	f019 091f 	ands.w	r9, r9, #31
 800a4ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4f4:	d02b      	beq.n	800a54e <__lshift+0xbe>
 800a4f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a4fa:	468a      	mov	sl, r1
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	fa00 f009 	lsl.w	r0, r0, r9
 800a504:	4310      	orrs	r0, r2
 800a506:	f84a 0b04 	str.w	r0, [sl], #4
 800a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50e:	459c      	cmp	ip, r3
 800a510:	fa22 f20e 	lsr.w	r2, r2, lr
 800a514:	d8f3      	bhi.n	800a4fe <__lshift+0x6e>
 800a516:	ebac 0304 	sub.w	r3, ip, r4
 800a51a:	3b15      	subs	r3, #21
 800a51c:	f023 0303 	bic.w	r3, r3, #3
 800a520:	3304      	adds	r3, #4
 800a522:	f104 0015 	add.w	r0, r4, #21
 800a526:	4584      	cmp	ip, r0
 800a528:	bf38      	it	cc
 800a52a:	2304      	movcc	r3, #4
 800a52c:	50ca      	str	r2, [r1, r3]
 800a52e:	b10a      	cbz	r2, 800a534 <__lshift+0xa4>
 800a530:	f108 0602 	add.w	r6, r8, #2
 800a534:	3e01      	subs	r6, #1
 800a536:	4638      	mov	r0, r7
 800a538:	612e      	str	r6, [r5, #16]
 800a53a:	4621      	mov	r1, r4
 800a53c:	f7ff fd90 	bl	800a060 <_Bfree>
 800a540:	4628      	mov	r0, r5
 800a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a546:	f842 0f04 	str.w	r0, [r2, #4]!
 800a54a:	3301      	adds	r3, #1
 800a54c:	e7c5      	b.n	800a4da <__lshift+0x4a>
 800a54e:	3904      	subs	r1, #4
 800a550:	f853 2b04 	ldr.w	r2, [r3], #4
 800a554:	f841 2f04 	str.w	r2, [r1, #4]!
 800a558:	459c      	cmp	ip, r3
 800a55a:	d8f9      	bhi.n	800a550 <__lshift+0xc0>
 800a55c:	e7ea      	b.n	800a534 <__lshift+0xa4>
 800a55e:	bf00      	nop
 800a560:	0800b9e3 	.word	0x0800b9e3
 800a564:	0800ba54 	.word	0x0800ba54

0800a568 <__mcmp>:
 800a568:	690a      	ldr	r2, [r1, #16]
 800a56a:	4603      	mov	r3, r0
 800a56c:	6900      	ldr	r0, [r0, #16]
 800a56e:	1a80      	subs	r0, r0, r2
 800a570:	b530      	push	{r4, r5, lr}
 800a572:	d10e      	bne.n	800a592 <__mcmp+0x2a>
 800a574:	3314      	adds	r3, #20
 800a576:	3114      	adds	r1, #20
 800a578:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a57c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a580:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a584:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a588:	4295      	cmp	r5, r2
 800a58a:	d003      	beq.n	800a594 <__mcmp+0x2c>
 800a58c:	d205      	bcs.n	800a59a <__mcmp+0x32>
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295
 800a592:	bd30      	pop	{r4, r5, pc}
 800a594:	42a3      	cmp	r3, r4
 800a596:	d3f3      	bcc.n	800a580 <__mcmp+0x18>
 800a598:	e7fb      	b.n	800a592 <__mcmp+0x2a>
 800a59a:	2001      	movs	r0, #1
 800a59c:	e7f9      	b.n	800a592 <__mcmp+0x2a>
	...

0800a5a0 <__mdiff>:
 800a5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	4689      	mov	r9, r1
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	f7ff ffdb 	bl	800a568 <__mcmp>
 800a5b2:	1e05      	subs	r5, r0, #0
 800a5b4:	d112      	bne.n	800a5dc <__mdiff+0x3c>
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff fd11 	bl	8009fe0 <_Balloc>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	b928      	cbnz	r0, 800a5ce <__mdiff+0x2e>
 800a5c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a6c0 <__mdiff+0x120>)
 800a5c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a5c8:	483e      	ldr	r0, [pc, #248]	@ (800a6c4 <__mdiff+0x124>)
 800a5ca:	f7fe fa53 	bl	8008a74 <__assert_func>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	b003      	add	sp, #12
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5dc:	bfbc      	itt	lt
 800a5de:	464b      	movlt	r3, r9
 800a5e0:	46a1      	movlt	r9, r4
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5e8:	bfba      	itte	lt
 800a5ea:	461c      	movlt	r4, r3
 800a5ec:	2501      	movlt	r5, #1
 800a5ee:	2500      	movge	r5, #0
 800a5f0:	f7ff fcf6 	bl	8009fe0 <_Balloc>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	b918      	cbnz	r0, 800a600 <__mdiff+0x60>
 800a5f8:	4b31      	ldr	r3, [pc, #196]	@ (800a6c0 <__mdiff+0x120>)
 800a5fa:	f240 2145 	movw	r1, #581	@ 0x245
 800a5fe:	e7e3      	b.n	800a5c8 <__mdiff+0x28>
 800a600:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a604:	6926      	ldr	r6, [r4, #16]
 800a606:	60c5      	str	r5, [r0, #12]
 800a608:	f109 0310 	add.w	r3, r9, #16
 800a60c:	f109 0514 	add.w	r5, r9, #20
 800a610:	f104 0e14 	add.w	lr, r4, #20
 800a614:	f100 0b14 	add.w	fp, r0, #20
 800a618:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a61c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	46d9      	mov	r9, fp
 800a624:	f04f 0c00 	mov.w	ip, #0
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a62e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	fa1f f38a 	uxth.w	r3, sl
 800a638:	4619      	mov	r1, r3
 800a63a:	b283      	uxth	r3, r0
 800a63c:	1acb      	subs	r3, r1, r3
 800a63e:	0c00      	lsrs	r0, r0, #16
 800a640:	4463      	add	r3, ip
 800a642:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a646:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a650:	4576      	cmp	r6, lr
 800a652:	f849 3b04 	str.w	r3, [r9], #4
 800a656:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a65a:	d8e5      	bhi.n	800a628 <__mdiff+0x88>
 800a65c:	1b33      	subs	r3, r6, r4
 800a65e:	3b15      	subs	r3, #21
 800a660:	f023 0303 	bic.w	r3, r3, #3
 800a664:	3415      	adds	r4, #21
 800a666:	3304      	adds	r3, #4
 800a668:	42a6      	cmp	r6, r4
 800a66a:	bf38      	it	cc
 800a66c:	2304      	movcc	r3, #4
 800a66e:	441d      	add	r5, r3
 800a670:	445b      	add	r3, fp
 800a672:	461e      	mov	r6, r3
 800a674:	462c      	mov	r4, r5
 800a676:	4544      	cmp	r4, r8
 800a678:	d30e      	bcc.n	800a698 <__mdiff+0xf8>
 800a67a:	f108 0103 	add.w	r1, r8, #3
 800a67e:	1b49      	subs	r1, r1, r5
 800a680:	f021 0103 	bic.w	r1, r1, #3
 800a684:	3d03      	subs	r5, #3
 800a686:	45a8      	cmp	r8, r5
 800a688:	bf38      	it	cc
 800a68a:	2100      	movcc	r1, #0
 800a68c:	440b      	add	r3, r1
 800a68e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a692:	b191      	cbz	r1, 800a6ba <__mdiff+0x11a>
 800a694:	6117      	str	r7, [r2, #16]
 800a696:	e79d      	b.n	800a5d4 <__mdiff+0x34>
 800a698:	f854 1b04 	ldr.w	r1, [r4], #4
 800a69c:	46e6      	mov	lr, ip
 800a69e:	0c08      	lsrs	r0, r1, #16
 800a6a0:	fa1c fc81 	uxtah	ip, ip, r1
 800a6a4:	4471      	add	r1, lr
 800a6a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6aa:	b289      	uxth	r1, r1
 800a6ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6b0:	f846 1b04 	str.w	r1, [r6], #4
 800a6b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6b8:	e7dd      	b.n	800a676 <__mdiff+0xd6>
 800a6ba:	3f01      	subs	r7, #1
 800a6bc:	e7e7      	b.n	800a68e <__mdiff+0xee>
 800a6be:	bf00      	nop
 800a6c0:	0800b9e3 	.word	0x0800b9e3
 800a6c4:	0800ba54 	.word	0x0800ba54

0800a6c8 <__ulp>:
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	ed8d 0b00 	vstr	d0, [sp]
 800a6ce:	9a01      	ldr	r2, [sp, #4]
 800a6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a710 <__ulp+0x48>)
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc08      	bgt.n	800a6ee <__ulp+0x26>
 800a6dc:	425b      	negs	r3, r3
 800a6de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6e6:	da04      	bge.n	800a6f2 <__ulp+0x2a>
 800a6e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6ec:	4113      	asrs	r3, r2
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	e008      	b.n	800a704 <__ulp+0x3c>
 800a6f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a6f6:	2b1e      	cmp	r3, #30
 800a6f8:	bfda      	itte	le
 800a6fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6fe:	40da      	lsrle	r2, r3
 800a700:	2201      	movgt	r2, #1
 800a702:	2300      	movs	r3, #0
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	ec41 0b10 	vmov	d0, r0, r1
 800a70c:	b002      	add	sp, #8
 800a70e:	4770      	bx	lr
 800a710:	7ff00000 	.word	0x7ff00000

0800a714 <__b2d>:
 800a714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a718:	6906      	ldr	r6, [r0, #16]
 800a71a:	f100 0814 	add.w	r8, r0, #20
 800a71e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a722:	1f37      	subs	r7, r6, #4
 800a724:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a728:	4610      	mov	r0, r2
 800a72a:	f7ff fd4b 	bl	800a1c4 <__hi0bits>
 800a72e:	f1c0 0320 	rsb	r3, r0, #32
 800a732:	280a      	cmp	r0, #10
 800a734:	600b      	str	r3, [r1, #0]
 800a736:	491b      	ldr	r1, [pc, #108]	@ (800a7a4 <__b2d+0x90>)
 800a738:	dc15      	bgt.n	800a766 <__b2d+0x52>
 800a73a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a73e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a742:	45b8      	cmp	r8, r7
 800a744:	ea43 0501 	orr.w	r5, r3, r1
 800a748:	bf34      	ite	cc
 800a74a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a74e:	2300      	movcs	r3, #0
 800a750:	3015      	adds	r0, #21
 800a752:	fa02 f000 	lsl.w	r0, r2, r0
 800a756:	fa23 f30c 	lsr.w	r3, r3, ip
 800a75a:	4303      	orrs	r3, r0
 800a75c:	461c      	mov	r4, r3
 800a75e:	ec45 4b10 	vmov	d0, r4, r5
 800a762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a766:	45b8      	cmp	r8, r7
 800a768:	bf3a      	itte	cc
 800a76a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a76e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a772:	2300      	movcs	r3, #0
 800a774:	380b      	subs	r0, #11
 800a776:	d012      	beq.n	800a79e <__b2d+0x8a>
 800a778:	f1c0 0120 	rsb	r1, r0, #32
 800a77c:	fa23 f401 	lsr.w	r4, r3, r1
 800a780:	4082      	lsls	r2, r0
 800a782:	4322      	orrs	r2, r4
 800a784:	4547      	cmp	r7, r8
 800a786:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a78a:	bf8c      	ite	hi
 800a78c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a790:	2200      	movls	r2, #0
 800a792:	4083      	lsls	r3, r0
 800a794:	40ca      	lsrs	r2, r1
 800a796:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a79a:	4313      	orrs	r3, r2
 800a79c:	e7de      	b.n	800a75c <__b2d+0x48>
 800a79e:	ea42 0501 	orr.w	r5, r2, r1
 800a7a2:	e7db      	b.n	800a75c <__b2d+0x48>
 800a7a4:	3ff00000 	.word	0x3ff00000

0800a7a8 <__d2b>:
 800a7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	ec59 8b10 	vmov	r8, r9, d0
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	f7ff fc13 	bl	8009fe0 <_Balloc>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	b930      	cbnz	r0, 800a7cc <__d2b+0x24>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	4b23      	ldr	r3, [pc, #140]	@ (800a850 <__d2b+0xa8>)
 800a7c2:	4824      	ldr	r0, [pc, #144]	@ (800a854 <__d2b+0xac>)
 800a7c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7c8:	f7fe f954 	bl	8008a74 <__assert_func>
 800a7cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7d4:	b10d      	cbz	r5, 800a7da <__d2b+0x32>
 800a7d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a7e0:	d023      	beq.n	800a82a <__d2b+0x82>
 800a7e2:	4668      	mov	r0, sp
 800a7e4:	9300      	str	r3, [sp, #0]
 800a7e6:	f7ff fd0c 	bl	800a202 <__lo0bits>
 800a7ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7ee:	b1d0      	cbz	r0, 800a826 <__d2b+0x7e>
 800a7f0:	f1c0 0320 	rsb	r3, r0, #32
 800a7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f8:	430b      	orrs	r3, r1
 800a7fa:	40c2      	lsrs	r2, r0
 800a7fc:	6163      	str	r3, [r4, #20]
 800a7fe:	9201      	str	r2, [sp, #4]
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	61a3      	str	r3, [r4, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	bf0c      	ite	eq
 800a808:	2201      	moveq	r2, #1
 800a80a:	2202      	movne	r2, #2
 800a80c:	6122      	str	r2, [r4, #16]
 800a80e:	b1a5      	cbz	r5, 800a83a <__d2b+0x92>
 800a810:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a814:	4405      	add	r5, r0
 800a816:	603d      	str	r5, [r7, #0]
 800a818:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a81c:	6030      	str	r0, [r6, #0]
 800a81e:	4620      	mov	r0, r4
 800a820:	b003      	add	sp, #12
 800a822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a826:	6161      	str	r1, [r4, #20]
 800a828:	e7ea      	b.n	800a800 <__d2b+0x58>
 800a82a:	a801      	add	r0, sp, #4
 800a82c:	f7ff fce9 	bl	800a202 <__lo0bits>
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	6163      	str	r3, [r4, #20]
 800a834:	3020      	adds	r0, #32
 800a836:	2201      	movs	r2, #1
 800a838:	e7e8      	b.n	800a80c <__d2b+0x64>
 800a83a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a83e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a842:	6038      	str	r0, [r7, #0]
 800a844:	6918      	ldr	r0, [r3, #16]
 800a846:	f7ff fcbd 	bl	800a1c4 <__hi0bits>
 800a84a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a84e:	e7e5      	b.n	800a81c <__d2b+0x74>
 800a850:	0800b9e3 	.word	0x0800b9e3
 800a854:	0800ba54 	.word	0x0800ba54

0800a858 <__ratio>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	b085      	sub	sp, #20
 800a85e:	e9cd 1000 	strd	r1, r0, [sp]
 800a862:	a902      	add	r1, sp, #8
 800a864:	f7ff ff56 	bl	800a714 <__b2d>
 800a868:	9800      	ldr	r0, [sp, #0]
 800a86a:	a903      	add	r1, sp, #12
 800a86c:	ec55 4b10 	vmov	r4, r5, d0
 800a870:	f7ff ff50 	bl	800a714 <__b2d>
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	6919      	ldr	r1, [r3, #16]
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	1ac9      	subs	r1, r1, r3
 800a87e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a882:	1a9b      	subs	r3, r3, r2
 800a884:	ec5b ab10 	vmov	sl, fp, d0
 800a888:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	bfce      	itee	gt
 800a890:	462a      	movgt	r2, r5
 800a892:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a896:	465a      	movle	r2, fp
 800a898:	462f      	mov	r7, r5
 800a89a:	46d9      	mov	r9, fp
 800a89c:	bfcc      	ite	gt
 800a89e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	f7f5 ffd5 	bl	800085c <__aeabi_ddiv>
 800a8b2:	ec41 0b10 	vmov	d0, r0, r1
 800a8b6:	b005      	add	sp, #20
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8bc <__copybits>:
 800a8bc:	3901      	subs	r1, #1
 800a8be:	b570      	push	{r4, r5, r6, lr}
 800a8c0:	1149      	asrs	r1, r1, #5
 800a8c2:	6914      	ldr	r4, [r2, #16]
 800a8c4:	3101      	adds	r1, #1
 800a8c6:	f102 0314 	add.w	r3, r2, #20
 800a8ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8d2:	1f05      	subs	r5, r0, #4
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	d30c      	bcc.n	800a8f2 <__copybits+0x36>
 800a8d8:	1aa3      	subs	r3, r4, r2
 800a8da:	3b11      	subs	r3, #17
 800a8dc:	f023 0303 	bic.w	r3, r3, #3
 800a8e0:	3211      	adds	r2, #17
 800a8e2:	42a2      	cmp	r2, r4
 800a8e4:	bf88      	it	hi
 800a8e6:	2300      	movhi	r3, #0
 800a8e8:	4418      	add	r0, r3
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	4288      	cmp	r0, r1
 800a8ee:	d305      	bcc.n	800a8fc <__copybits+0x40>
 800a8f0:	bd70      	pop	{r4, r5, r6, pc}
 800a8f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8fa:	e7eb      	b.n	800a8d4 <__copybits+0x18>
 800a8fc:	f840 3b04 	str.w	r3, [r0], #4
 800a900:	e7f4      	b.n	800a8ec <__copybits+0x30>

0800a902 <__any_on>:
 800a902:	f100 0214 	add.w	r2, r0, #20
 800a906:	6900      	ldr	r0, [r0, #16]
 800a908:	114b      	asrs	r3, r1, #5
 800a90a:	4298      	cmp	r0, r3
 800a90c:	b510      	push	{r4, lr}
 800a90e:	db11      	blt.n	800a934 <__any_on+0x32>
 800a910:	dd0a      	ble.n	800a928 <__any_on+0x26>
 800a912:	f011 011f 	ands.w	r1, r1, #31
 800a916:	d007      	beq.n	800a928 <__any_on+0x26>
 800a918:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a91c:	fa24 f001 	lsr.w	r0, r4, r1
 800a920:	fa00 f101 	lsl.w	r1, r0, r1
 800a924:	428c      	cmp	r4, r1
 800a926:	d10b      	bne.n	800a940 <__any_on+0x3e>
 800a928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d803      	bhi.n	800a938 <__any_on+0x36>
 800a930:	2000      	movs	r0, #0
 800a932:	bd10      	pop	{r4, pc}
 800a934:	4603      	mov	r3, r0
 800a936:	e7f7      	b.n	800a928 <__any_on+0x26>
 800a938:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d0f5      	beq.n	800a92c <__any_on+0x2a>
 800a940:	2001      	movs	r0, #1
 800a942:	e7f6      	b.n	800a932 <__any_on+0x30>

0800a944 <_strtol_l.constprop.0>:
 800a944:	2b24      	cmp	r3, #36	@ 0x24
 800a946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a94a:	4686      	mov	lr, r0
 800a94c:	4690      	mov	r8, r2
 800a94e:	d801      	bhi.n	800a954 <_strtol_l.constprop.0+0x10>
 800a950:	2b01      	cmp	r3, #1
 800a952:	d106      	bne.n	800a962 <_strtol_l.constprop.0+0x1e>
 800a954:	f7fe f844 	bl	80089e0 <__errno>
 800a958:	2316      	movs	r3, #22
 800a95a:	6003      	str	r3, [r0, #0]
 800a95c:	2000      	movs	r0, #0
 800a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a962:	4834      	ldr	r0, [pc, #208]	@ (800aa34 <_strtol_l.constprop.0+0xf0>)
 800a964:	460d      	mov	r5, r1
 800a966:	462a      	mov	r2, r5
 800a968:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a96c:	5d06      	ldrb	r6, [r0, r4]
 800a96e:	f016 0608 	ands.w	r6, r6, #8
 800a972:	d1f8      	bne.n	800a966 <_strtol_l.constprop.0+0x22>
 800a974:	2c2d      	cmp	r4, #45	@ 0x2d
 800a976:	d12d      	bne.n	800a9d4 <_strtol_l.constprop.0+0x90>
 800a978:	782c      	ldrb	r4, [r5, #0]
 800a97a:	2601      	movs	r6, #1
 800a97c:	1c95      	adds	r5, r2, #2
 800a97e:	f033 0210 	bics.w	r2, r3, #16
 800a982:	d109      	bne.n	800a998 <_strtol_l.constprop.0+0x54>
 800a984:	2c30      	cmp	r4, #48	@ 0x30
 800a986:	d12a      	bne.n	800a9de <_strtol_l.constprop.0+0x9a>
 800a988:	782a      	ldrb	r2, [r5, #0]
 800a98a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a98e:	2a58      	cmp	r2, #88	@ 0x58
 800a990:	d125      	bne.n	800a9de <_strtol_l.constprop.0+0x9a>
 800a992:	786c      	ldrb	r4, [r5, #1]
 800a994:	2310      	movs	r3, #16
 800a996:	3502      	adds	r5, #2
 800a998:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a99c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	fbbc f9f3 	udiv	r9, ip, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a9ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a9b0:	2f09      	cmp	r7, #9
 800a9b2:	d81b      	bhi.n	800a9ec <_strtol_l.constprop.0+0xa8>
 800a9b4:	463c      	mov	r4, r7
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	dd27      	ble.n	800aa0a <_strtol_l.constprop.0+0xc6>
 800a9ba:	1c57      	adds	r7, r2, #1
 800a9bc:	d007      	beq.n	800a9ce <_strtol_l.constprop.0+0x8a>
 800a9be:	4581      	cmp	r9, r0
 800a9c0:	d320      	bcc.n	800aa04 <_strtol_l.constprop.0+0xc0>
 800a9c2:	d101      	bne.n	800a9c8 <_strtol_l.constprop.0+0x84>
 800a9c4:	45a2      	cmp	sl, r4
 800a9c6:	db1d      	blt.n	800aa04 <_strtol_l.constprop.0+0xc0>
 800a9c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9d2:	e7eb      	b.n	800a9ac <_strtol_l.constprop.0+0x68>
 800a9d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a9d6:	bf04      	itt	eq
 800a9d8:	782c      	ldrbeq	r4, [r5, #0]
 800a9da:	1c95      	addeq	r5, r2, #2
 800a9dc:	e7cf      	b.n	800a97e <_strtol_l.constprop.0+0x3a>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1da      	bne.n	800a998 <_strtol_l.constprop.0+0x54>
 800a9e2:	2c30      	cmp	r4, #48	@ 0x30
 800a9e4:	bf0c      	ite	eq
 800a9e6:	2308      	moveq	r3, #8
 800a9e8:	230a      	movne	r3, #10
 800a9ea:	e7d5      	b.n	800a998 <_strtol_l.constprop.0+0x54>
 800a9ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a9f0:	2f19      	cmp	r7, #25
 800a9f2:	d801      	bhi.n	800a9f8 <_strtol_l.constprop.0+0xb4>
 800a9f4:	3c37      	subs	r4, #55	@ 0x37
 800a9f6:	e7de      	b.n	800a9b6 <_strtol_l.constprop.0+0x72>
 800a9f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9fc:	2f19      	cmp	r7, #25
 800a9fe:	d804      	bhi.n	800aa0a <_strtol_l.constprop.0+0xc6>
 800aa00:	3c57      	subs	r4, #87	@ 0x57
 800aa02:	e7d8      	b.n	800a9b6 <_strtol_l.constprop.0+0x72>
 800aa04:	f04f 32ff 	mov.w	r2, #4294967295
 800aa08:	e7e1      	b.n	800a9ce <_strtol_l.constprop.0+0x8a>
 800aa0a:	1c53      	adds	r3, r2, #1
 800aa0c:	d108      	bne.n	800aa20 <_strtol_l.constprop.0+0xdc>
 800aa0e:	2322      	movs	r3, #34	@ 0x22
 800aa10:	f8ce 3000 	str.w	r3, [lr]
 800aa14:	4660      	mov	r0, ip
 800aa16:	f1b8 0f00 	cmp.w	r8, #0
 800aa1a:	d0a0      	beq.n	800a95e <_strtol_l.constprop.0+0x1a>
 800aa1c:	1e69      	subs	r1, r5, #1
 800aa1e:	e006      	b.n	800aa2e <_strtol_l.constprop.0+0xea>
 800aa20:	b106      	cbz	r6, 800aa24 <_strtol_l.constprop.0+0xe0>
 800aa22:	4240      	negs	r0, r0
 800aa24:	f1b8 0f00 	cmp.w	r8, #0
 800aa28:	d099      	beq.n	800a95e <_strtol_l.constprop.0+0x1a>
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d1f6      	bne.n	800aa1c <_strtol_l.constprop.0+0xd8>
 800aa2e:	f8c8 1000 	str.w	r1, [r8]
 800aa32:	e794      	b.n	800a95e <_strtol_l.constprop.0+0x1a>
 800aa34:	0800bbb1 	.word	0x0800bbb1

0800aa38 <_strtol_r>:
 800aa38:	f7ff bf84 	b.w	800a944 <_strtol_l.constprop.0>

0800aa3c <__ascii_wctomb>:
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	4608      	mov	r0, r1
 800aa40:	b141      	cbz	r1, 800aa54 <__ascii_wctomb+0x18>
 800aa42:	2aff      	cmp	r2, #255	@ 0xff
 800aa44:	d904      	bls.n	800aa50 <__ascii_wctomb+0x14>
 800aa46:	228a      	movs	r2, #138	@ 0x8a
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4e:	4770      	bx	lr
 800aa50:	700a      	strb	r2, [r1, #0]
 800aa52:	2001      	movs	r0, #1
 800aa54:	4770      	bx	lr

0800aa56 <__ssputs_r>:
 800aa56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5a:	688e      	ldr	r6, [r1, #8]
 800aa5c:	461f      	mov	r7, r3
 800aa5e:	42be      	cmp	r6, r7
 800aa60:	680b      	ldr	r3, [r1, #0]
 800aa62:	4682      	mov	sl, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	4690      	mov	r8, r2
 800aa68:	d82d      	bhi.n	800aac6 <__ssputs_r+0x70>
 800aa6a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa6e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa72:	d026      	beq.n	800aac2 <__ssputs_r+0x6c>
 800aa74:	6965      	ldr	r5, [r4, #20]
 800aa76:	6909      	ldr	r1, [r1, #16]
 800aa78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa7c:	eba3 0901 	sub.w	r9, r3, r1
 800aa80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa84:	1c7b      	adds	r3, r7, #1
 800aa86:	444b      	add	r3, r9
 800aa88:	106d      	asrs	r5, r5, #1
 800aa8a:	429d      	cmp	r5, r3
 800aa8c:	bf38      	it	cc
 800aa8e:	461d      	movcc	r5, r3
 800aa90:	0553      	lsls	r3, r2, #21
 800aa92:	d527      	bpl.n	800aae4 <__ssputs_r+0x8e>
 800aa94:	4629      	mov	r1, r5
 800aa96:	f7ff fa05 	bl	8009ea4 <_malloc_r>
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	b360      	cbz	r0, 800aaf8 <__ssputs_r+0xa2>
 800aa9e:	6921      	ldr	r1, [r4, #16]
 800aaa0:	464a      	mov	r2, r9
 800aaa2:	f7fd ffca 	bl	8008a3a <memcpy>
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aaac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aab0:	81a3      	strh	r3, [r4, #12]
 800aab2:	6126      	str	r6, [r4, #16]
 800aab4:	6165      	str	r5, [r4, #20]
 800aab6:	444e      	add	r6, r9
 800aab8:	eba5 0509 	sub.w	r5, r5, r9
 800aabc:	6026      	str	r6, [r4, #0]
 800aabe:	60a5      	str	r5, [r4, #8]
 800aac0:	463e      	mov	r6, r7
 800aac2:	42be      	cmp	r6, r7
 800aac4:	d900      	bls.n	800aac8 <__ssputs_r+0x72>
 800aac6:	463e      	mov	r6, r7
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	4632      	mov	r2, r6
 800aacc:	4641      	mov	r1, r8
 800aace:	f000 fb7b 	bl	800b1c8 <memmove>
 800aad2:	68a3      	ldr	r3, [r4, #8]
 800aad4:	1b9b      	subs	r3, r3, r6
 800aad6:	60a3      	str	r3, [r4, #8]
 800aad8:	6823      	ldr	r3, [r4, #0]
 800aada:	4433      	add	r3, r6
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	2000      	movs	r0, #0
 800aae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae4:	462a      	mov	r2, r5
 800aae6:	f000 fbd6 	bl	800b296 <_realloc_r>
 800aaea:	4606      	mov	r6, r0
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d1e0      	bne.n	800aab2 <__ssputs_r+0x5c>
 800aaf0:	6921      	ldr	r1, [r4, #16]
 800aaf2:	4650      	mov	r0, sl
 800aaf4:	f7fe fe28 	bl	8009748 <_free_r>
 800aaf8:	230c      	movs	r3, #12
 800aafa:	f8ca 3000 	str.w	r3, [sl]
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0a:	e7e9      	b.n	800aae0 <__ssputs_r+0x8a>

0800ab0c <_svfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4698      	mov	r8, r3
 800ab12:	898b      	ldrh	r3, [r1, #12]
 800ab14:	061b      	lsls	r3, r3, #24
 800ab16:	b09d      	sub	sp, #116	@ 0x74
 800ab18:	4607      	mov	r7, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	d510      	bpl.n	800ab42 <_svfiprintf_r+0x36>
 800ab20:	690b      	ldr	r3, [r1, #16]
 800ab22:	b973      	cbnz	r3, 800ab42 <_svfiprintf_r+0x36>
 800ab24:	2140      	movs	r1, #64	@ 0x40
 800ab26:	f7ff f9bd 	bl	8009ea4 <_malloc_r>
 800ab2a:	6028      	str	r0, [r5, #0]
 800ab2c:	6128      	str	r0, [r5, #16]
 800ab2e:	b930      	cbnz	r0, 800ab3e <_svfiprintf_r+0x32>
 800ab30:	230c      	movs	r3, #12
 800ab32:	603b      	str	r3, [r7, #0]
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b01d      	add	sp, #116	@ 0x74
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	2340      	movs	r3, #64	@ 0x40
 800ab40:	616b      	str	r3, [r5, #20]
 800ab42:	2300      	movs	r3, #0
 800ab44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab46:	2320      	movs	r3, #32
 800ab48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab50:	2330      	movs	r3, #48	@ 0x30
 800ab52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800acf0 <_svfiprintf_r+0x1e4>
 800ab56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab5a:	f04f 0901 	mov.w	r9, #1
 800ab5e:	4623      	mov	r3, r4
 800ab60:	469a      	mov	sl, r3
 800ab62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab66:	b10a      	cbz	r2, 800ab6c <_svfiprintf_r+0x60>
 800ab68:	2a25      	cmp	r2, #37	@ 0x25
 800ab6a:	d1f9      	bne.n	800ab60 <_svfiprintf_r+0x54>
 800ab6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab70:	d00b      	beq.n	800ab8a <_svfiprintf_r+0x7e>
 800ab72:	465b      	mov	r3, fp
 800ab74:	4622      	mov	r2, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	4638      	mov	r0, r7
 800ab7a:	f7ff ff6c 	bl	800aa56 <__ssputs_r>
 800ab7e:	3001      	adds	r0, #1
 800ab80:	f000 80a7 	beq.w	800acd2 <_svfiprintf_r+0x1c6>
 800ab84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab86:	445a      	add	r2, fp
 800ab88:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 809f 	beq.w	800acd2 <_svfiprintf_r+0x1c6>
 800ab94:	2300      	movs	r3, #0
 800ab96:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab9e:	f10a 0a01 	add.w	sl, sl, #1
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	9307      	str	r3, [sp, #28]
 800aba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800abac:	4654      	mov	r4, sl
 800abae:	2205      	movs	r2, #5
 800abb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb4:	484e      	ldr	r0, [pc, #312]	@ (800acf0 <_svfiprintf_r+0x1e4>)
 800abb6:	f7f5 fb13 	bl	80001e0 <memchr>
 800abba:	9a04      	ldr	r2, [sp, #16]
 800abbc:	b9d8      	cbnz	r0, 800abf6 <_svfiprintf_r+0xea>
 800abbe:	06d0      	lsls	r0, r2, #27
 800abc0:	bf44      	itt	mi
 800abc2:	2320      	movmi	r3, #32
 800abc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abc8:	0711      	lsls	r1, r2, #28
 800abca:	bf44      	itt	mi
 800abcc:	232b      	movmi	r3, #43	@ 0x2b
 800abce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd2:	f89a 3000 	ldrb.w	r3, [sl]
 800abd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd8:	d015      	beq.n	800ac06 <_svfiprintf_r+0xfa>
 800abda:	9a07      	ldr	r2, [sp, #28]
 800abdc:	4654      	mov	r4, sl
 800abde:	2000      	movs	r0, #0
 800abe0:	f04f 0c0a 	mov.w	ip, #10
 800abe4:	4621      	mov	r1, r4
 800abe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abea:	3b30      	subs	r3, #48	@ 0x30
 800abec:	2b09      	cmp	r3, #9
 800abee:	d94b      	bls.n	800ac88 <_svfiprintf_r+0x17c>
 800abf0:	b1b0      	cbz	r0, 800ac20 <_svfiprintf_r+0x114>
 800abf2:	9207      	str	r2, [sp, #28]
 800abf4:	e014      	b.n	800ac20 <_svfiprintf_r+0x114>
 800abf6:	eba0 0308 	sub.w	r3, r0, r8
 800abfa:	fa09 f303 	lsl.w	r3, r9, r3
 800abfe:	4313      	orrs	r3, r2
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	46a2      	mov	sl, r4
 800ac04:	e7d2      	b.n	800abac <_svfiprintf_r+0xa0>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	1d19      	adds	r1, r3, #4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	9103      	str	r1, [sp, #12]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfbb      	ittet	lt
 800ac12:	425b      	neglt	r3, r3
 800ac14:	f042 0202 	orrlt.w	r2, r2, #2
 800ac18:	9307      	strge	r3, [sp, #28]
 800ac1a:	9307      	strlt	r3, [sp, #28]
 800ac1c:	bfb8      	it	lt
 800ac1e:	9204      	strlt	r2, [sp, #16]
 800ac20:	7823      	ldrb	r3, [r4, #0]
 800ac22:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac24:	d10a      	bne.n	800ac3c <_svfiprintf_r+0x130>
 800ac26:	7863      	ldrb	r3, [r4, #1]
 800ac28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2a:	d132      	bne.n	800ac92 <_svfiprintf_r+0x186>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9203      	str	r2, [sp, #12]
 800ac34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac38:	3402      	adds	r4, #2
 800ac3a:	9305      	str	r3, [sp, #20]
 800ac3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad00 <_svfiprintf_r+0x1f4>
 800ac40:	7821      	ldrb	r1, [r4, #0]
 800ac42:	2203      	movs	r2, #3
 800ac44:	4650      	mov	r0, sl
 800ac46:	f7f5 facb 	bl	80001e0 <memchr>
 800ac4a:	b138      	cbz	r0, 800ac5c <_svfiprintf_r+0x150>
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	eba0 000a 	sub.w	r0, r0, sl
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	4082      	lsls	r2, r0
 800ac56:	4313      	orrs	r3, r2
 800ac58:	3401      	adds	r4, #1
 800ac5a:	9304      	str	r3, [sp, #16]
 800ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac60:	4824      	ldr	r0, [pc, #144]	@ (800acf4 <_svfiprintf_r+0x1e8>)
 800ac62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac66:	2206      	movs	r2, #6
 800ac68:	f7f5 faba 	bl	80001e0 <memchr>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d036      	beq.n	800acde <_svfiprintf_r+0x1d2>
 800ac70:	4b21      	ldr	r3, [pc, #132]	@ (800acf8 <_svfiprintf_r+0x1ec>)
 800ac72:	bb1b      	cbnz	r3, 800acbc <_svfiprintf_r+0x1b0>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	3307      	adds	r3, #7
 800ac78:	f023 0307 	bic.w	r3, r3, #7
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac82:	4433      	add	r3, r6
 800ac84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac86:	e76a      	b.n	800ab5e <_svfiprintf_r+0x52>
 800ac88:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e7a8      	b.n	800abe4 <_svfiprintf_r+0xd8>
 800ac92:	2300      	movs	r3, #0
 800ac94:	3401      	adds	r4, #1
 800ac96:	9305      	str	r3, [sp, #20]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f04f 0c0a 	mov.w	ip, #10
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca4:	3a30      	subs	r2, #48	@ 0x30
 800aca6:	2a09      	cmp	r2, #9
 800aca8:	d903      	bls.n	800acb2 <_svfiprintf_r+0x1a6>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0c6      	beq.n	800ac3c <_svfiprintf_r+0x130>
 800acae:	9105      	str	r1, [sp, #20]
 800acb0:	e7c4      	b.n	800ac3c <_svfiprintf_r+0x130>
 800acb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb6:	4604      	mov	r4, r0
 800acb8:	2301      	movs	r3, #1
 800acba:	e7f0      	b.n	800ac9e <_svfiprintf_r+0x192>
 800acbc:	ab03      	add	r3, sp, #12
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	462a      	mov	r2, r5
 800acc2:	4b0e      	ldr	r3, [pc, #56]	@ (800acfc <_svfiprintf_r+0x1f0>)
 800acc4:	a904      	add	r1, sp, #16
 800acc6:	4638      	mov	r0, r7
 800acc8:	f7fc fdd4 	bl	8007874 <_printf_float>
 800accc:	1c42      	adds	r2, r0, #1
 800acce:	4606      	mov	r6, r0
 800acd0:	d1d6      	bne.n	800ac80 <_svfiprintf_r+0x174>
 800acd2:	89ab      	ldrh	r3, [r5, #12]
 800acd4:	065b      	lsls	r3, r3, #25
 800acd6:	f53f af2d 	bmi.w	800ab34 <_svfiprintf_r+0x28>
 800acda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acdc:	e72c      	b.n	800ab38 <_svfiprintf_r+0x2c>
 800acde:	ab03      	add	r3, sp, #12
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	462a      	mov	r2, r5
 800ace4:	4b05      	ldr	r3, [pc, #20]	@ (800acfc <_svfiprintf_r+0x1f0>)
 800ace6:	a904      	add	r1, sp, #16
 800ace8:	4638      	mov	r0, r7
 800acea:	f7fd f85b 	bl	8007da4 <_printf_i>
 800acee:	e7ed      	b.n	800accc <_svfiprintf_r+0x1c0>
 800acf0:	0800bcb1 	.word	0x0800bcb1
 800acf4:	0800bcbb 	.word	0x0800bcbb
 800acf8:	08007875 	.word	0x08007875
 800acfc:	0800aa57 	.word	0x0800aa57
 800ad00:	0800bcb7 	.word	0x0800bcb7

0800ad04 <__sfputc_r>:
 800ad04:	6893      	ldr	r3, [r2, #8]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	b410      	push	{r4}
 800ad0c:	6093      	str	r3, [r2, #8]
 800ad0e:	da08      	bge.n	800ad22 <__sfputc_r+0x1e>
 800ad10:	6994      	ldr	r4, [r2, #24]
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	db01      	blt.n	800ad1a <__sfputc_r+0x16>
 800ad16:	290a      	cmp	r1, #10
 800ad18:	d103      	bne.n	800ad22 <__sfputc_r+0x1e>
 800ad1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad1e:	f7fd bd0a 	b.w	8008736 <__swbuf_r>
 800ad22:	6813      	ldr	r3, [r2, #0]
 800ad24:	1c58      	adds	r0, r3, #1
 800ad26:	6010      	str	r0, [r2, #0]
 800ad28:	7019      	strb	r1, [r3, #0]
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <__sfputs_r>:
 800ad32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad34:	4606      	mov	r6, r0
 800ad36:	460f      	mov	r7, r1
 800ad38:	4614      	mov	r4, r2
 800ad3a:	18d5      	adds	r5, r2, r3
 800ad3c:	42ac      	cmp	r4, r5
 800ad3e:	d101      	bne.n	800ad44 <__sfputs_r+0x12>
 800ad40:	2000      	movs	r0, #0
 800ad42:	e007      	b.n	800ad54 <__sfputs_r+0x22>
 800ad44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad48:	463a      	mov	r2, r7
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7ff ffda 	bl	800ad04 <__sfputc_r>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d1f3      	bne.n	800ad3c <__sfputs_r+0xa>
 800ad54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad58 <_vfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460d      	mov	r5, r1
 800ad5e:	b09d      	sub	sp, #116	@ 0x74
 800ad60:	4614      	mov	r4, r2
 800ad62:	4698      	mov	r8, r3
 800ad64:	4606      	mov	r6, r0
 800ad66:	b118      	cbz	r0, 800ad70 <_vfiprintf_r+0x18>
 800ad68:	6a03      	ldr	r3, [r0, #32]
 800ad6a:	b90b      	cbnz	r3, 800ad70 <_vfiprintf_r+0x18>
 800ad6c:	f7fd fbda 	bl	8008524 <__sinit>
 800ad70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	d405      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	059a      	lsls	r2, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_vfiprintf_r+0x2a>
 800ad7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad7e:	f7fd fe5a 	bl	8008a36 <__retarget_lock_acquire_recursive>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	071b      	lsls	r3, r3, #28
 800ad86:	d501      	bpl.n	800ad8c <_vfiprintf_r+0x34>
 800ad88:	692b      	ldr	r3, [r5, #16]
 800ad8a:	b99b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x5c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7fd fd10 	bl	80087b4 <__swsetup_r>
 800ad94:	b170      	cbz	r0, 800adb4 <_vfiprintf_r+0x5c>
 800ad96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad98:	07dc      	lsls	r4, r3, #31
 800ad9a:	d504      	bpl.n	800ada6 <_vfiprintf_r+0x4e>
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	89ab      	ldrh	r3, [r5, #12]
 800ada8:	0598      	lsls	r0, r3, #22
 800adaa:	d4f7      	bmi.n	800ad9c <_vfiprintf_r+0x44>
 800adac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adae:	f7fd fe43 	bl	8008a38 <__retarget_lock_release_recursive>
 800adb2:	e7f3      	b.n	800ad9c <_vfiprintf_r+0x44>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb8:	2320      	movs	r3, #32
 800adba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc2:	2330      	movs	r3, #48	@ 0x30
 800adc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af74 <_vfiprintf_r+0x21c>
 800adc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adcc:	f04f 0901 	mov.w	r9, #1
 800add0:	4623      	mov	r3, r4
 800add2:	469a      	mov	sl, r3
 800add4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add8:	b10a      	cbz	r2, 800adde <_vfiprintf_r+0x86>
 800adda:	2a25      	cmp	r2, #37	@ 0x25
 800addc:	d1f9      	bne.n	800add2 <_vfiprintf_r+0x7a>
 800adde:	ebba 0b04 	subs.w	fp, sl, r4
 800ade2:	d00b      	beq.n	800adfc <_vfiprintf_r+0xa4>
 800ade4:	465b      	mov	r3, fp
 800ade6:	4622      	mov	r2, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	4630      	mov	r0, r6
 800adec:	f7ff ffa1 	bl	800ad32 <__sfputs_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	f000 80a7 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800adf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf8:	445a      	add	r2, fp
 800adfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800adfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 809f 	beq.w	800af44 <_vfiprintf_r+0x1ec>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae10:	f10a 0a01 	add.w	sl, sl, #1
 800ae14:	9304      	str	r3, [sp, #16]
 800ae16:	9307      	str	r3, [sp, #28]
 800ae18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae1e:	4654      	mov	r4, sl
 800ae20:	2205      	movs	r2, #5
 800ae22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae26:	4853      	ldr	r0, [pc, #332]	@ (800af74 <_vfiprintf_r+0x21c>)
 800ae28:	f7f5 f9da 	bl	80001e0 <memchr>
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	b9d8      	cbnz	r0, 800ae68 <_vfiprintf_r+0x110>
 800ae30:	06d1      	lsls	r1, r2, #27
 800ae32:	bf44      	itt	mi
 800ae34:	2320      	movmi	r3, #32
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3a:	0713      	lsls	r3, r2, #28
 800ae3c:	bf44      	itt	mi
 800ae3e:	232b      	movmi	r3, #43	@ 0x2b
 800ae40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae4a:	d015      	beq.n	800ae78 <_vfiprintf_r+0x120>
 800ae4c:	9a07      	ldr	r2, [sp, #28]
 800ae4e:	4654      	mov	r4, sl
 800ae50:	2000      	movs	r0, #0
 800ae52:	f04f 0c0a 	mov.w	ip, #10
 800ae56:	4621      	mov	r1, r4
 800ae58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5c:	3b30      	subs	r3, #48	@ 0x30
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d94b      	bls.n	800aefa <_vfiprintf_r+0x1a2>
 800ae62:	b1b0      	cbz	r0, 800ae92 <_vfiprintf_r+0x13a>
 800ae64:	9207      	str	r2, [sp, #28]
 800ae66:	e014      	b.n	800ae92 <_vfiprintf_r+0x13a>
 800ae68:	eba0 0308 	sub.w	r3, r0, r8
 800ae6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	46a2      	mov	sl, r4
 800ae76:	e7d2      	b.n	800ae1e <_vfiprintf_r+0xc6>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	1d19      	adds	r1, r3, #4
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	9103      	str	r1, [sp, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	bfbb      	ittet	lt
 800ae84:	425b      	neglt	r3, r3
 800ae86:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8a:	9307      	strge	r3, [sp, #28]
 800ae8c:	9307      	strlt	r3, [sp, #28]
 800ae8e:	bfb8      	it	lt
 800ae90:	9204      	strlt	r2, [sp, #16]
 800ae92:	7823      	ldrb	r3, [r4, #0]
 800ae94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae96:	d10a      	bne.n	800aeae <_vfiprintf_r+0x156>
 800ae98:	7863      	ldrb	r3, [r4, #1]
 800ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9c:	d132      	bne.n	800af04 <_vfiprintf_r+0x1ac>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	1d1a      	adds	r2, r3, #4
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	9203      	str	r2, [sp, #12]
 800aea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeaa:	3402      	adds	r4, #2
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af84 <_vfiprintf_r+0x22c>
 800aeb2:	7821      	ldrb	r1, [r4, #0]
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	4650      	mov	r0, sl
 800aeb8:	f7f5 f992 	bl	80001e0 <memchr>
 800aebc:	b138      	cbz	r0, 800aece <_vfiprintf_r+0x176>
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	eba0 000a 	sub.w	r0, r0, sl
 800aec4:	2240      	movs	r2, #64	@ 0x40
 800aec6:	4082      	lsls	r2, r0
 800aec8:	4313      	orrs	r3, r2
 800aeca:	3401      	adds	r4, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed2:	4829      	ldr	r0, [pc, #164]	@ (800af78 <_vfiprintf_r+0x220>)
 800aed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aed8:	2206      	movs	r2, #6
 800aeda:	f7f5 f981 	bl	80001e0 <memchr>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d03f      	beq.n	800af62 <_vfiprintf_r+0x20a>
 800aee2:	4b26      	ldr	r3, [pc, #152]	@ (800af7c <_vfiprintf_r+0x224>)
 800aee4:	bb1b      	cbnz	r3, 800af2e <_vfiprintf_r+0x1d6>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	3307      	adds	r3, #7
 800aeea:	f023 0307 	bic.w	r3, r3, #7
 800aeee:	3308      	adds	r3, #8
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef4:	443b      	add	r3, r7
 800aef6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef8:	e76a      	b.n	800add0 <_vfiprintf_r+0x78>
 800aefa:	fb0c 3202 	mla	r2, ip, r2, r3
 800aefe:	460c      	mov	r4, r1
 800af00:	2001      	movs	r0, #1
 800af02:	e7a8      	b.n	800ae56 <_vfiprintf_r+0xfe>
 800af04:	2300      	movs	r3, #0
 800af06:	3401      	adds	r4, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	4619      	mov	r1, r3
 800af0c:	f04f 0c0a 	mov.w	ip, #10
 800af10:	4620      	mov	r0, r4
 800af12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af16:	3a30      	subs	r2, #48	@ 0x30
 800af18:	2a09      	cmp	r2, #9
 800af1a:	d903      	bls.n	800af24 <_vfiprintf_r+0x1cc>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0c6      	beq.n	800aeae <_vfiprintf_r+0x156>
 800af20:	9105      	str	r1, [sp, #20]
 800af22:	e7c4      	b.n	800aeae <_vfiprintf_r+0x156>
 800af24:	fb0c 2101 	mla	r1, ip, r1, r2
 800af28:	4604      	mov	r4, r0
 800af2a:	2301      	movs	r3, #1
 800af2c:	e7f0      	b.n	800af10 <_vfiprintf_r+0x1b8>
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <_vfiprintf_r+0x228>)
 800af36:	a904      	add	r1, sp, #16
 800af38:	4630      	mov	r0, r6
 800af3a:	f7fc fc9b 	bl	8007874 <_printf_float>
 800af3e:	4607      	mov	r7, r0
 800af40:	1c78      	adds	r0, r7, #1
 800af42:	d1d6      	bne.n	800aef2 <_vfiprintf_r+0x19a>
 800af44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af46:	07d9      	lsls	r1, r3, #31
 800af48:	d405      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	059a      	lsls	r2, r3, #22
 800af4e:	d402      	bmi.n	800af56 <_vfiprintf_r+0x1fe>
 800af50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af52:	f7fd fd71 	bl	8008a38 <__retarget_lock_release_recursive>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	065b      	lsls	r3, r3, #25
 800af5a:	f53f af1f 	bmi.w	800ad9c <_vfiprintf_r+0x44>
 800af5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af60:	e71e      	b.n	800ada0 <_vfiprintf_r+0x48>
 800af62:	ab03      	add	r3, sp, #12
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	462a      	mov	r2, r5
 800af68:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <_vfiprintf_r+0x228>)
 800af6a:	a904      	add	r1, sp, #16
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7fc ff19 	bl	8007da4 <_printf_i>
 800af72:	e7e4      	b.n	800af3e <_vfiprintf_r+0x1e6>
 800af74:	0800bcb1 	.word	0x0800bcb1
 800af78:	0800bcbb 	.word	0x0800bcbb
 800af7c:	08007875 	.word	0x08007875
 800af80:	0800ad33 	.word	0x0800ad33
 800af84:	0800bcb7 	.word	0x0800bcb7

0800af88 <__sflush_r>:
 800af88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af90:	0716      	lsls	r6, r2, #28
 800af92:	4605      	mov	r5, r0
 800af94:	460c      	mov	r4, r1
 800af96:	d454      	bmi.n	800b042 <__sflush_r+0xba>
 800af98:	684b      	ldr	r3, [r1, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dc02      	bgt.n	800afa4 <__sflush_r+0x1c>
 800af9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dd48      	ble.n	800b036 <__sflush_r+0xae>
 800afa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afa6:	2e00      	cmp	r6, #0
 800afa8:	d045      	beq.n	800b036 <__sflush_r+0xae>
 800afaa:	2300      	movs	r3, #0
 800afac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afb0:	682f      	ldr	r7, [r5, #0]
 800afb2:	6a21      	ldr	r1, [r4, #32]
 800afb4:	602b      	str	r3, [r5, #0]
 800afb6:	d030      	beq.n	800b01a <__sflush_r+0x92>
 800afb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	0759      	lsls	r1, r3, #29
 800afbe:	d505      	bpl.n	800afcc <__sflush_r+0x44>
 800afc0:	6863      	ldr	r3, [r4, #4]
 800afc2:	1ad2      	subs	r2, r2, r3
 800afc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afc6:	b10b      	cbz	r3, 800afcc <__sflush_r+0x44>
 800afc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	2300      	movs	r3, #0
 800afce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afd0:	6a21      	ldr	r1, [r4, #32]
 800afd2:	4628      	mov	r0, r5
 800afd4:	47b0      	blx	r6
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	d106      	bne.n	800afea <__sflush_r+0x62>
 800afdc:	6829      	ldr	r1, [r5, #0]
 800afde:	291d      	cmp	r1, #29
 800afe0:	d82b      	bhi.n	800b03a <__sflush_r+0xb2>
 800afe2:	4a2a      	ldr	r2, [pc, #168]	@ (800b08c <__sflush_r+0x104>)
 800afe4:	410a      	asrs	r2, r1
 800afe6:	07d6      	lsls	r6, r2, #31
 800afe8:	d427      	bmi.n	800b03a <__sflush_r+0xb2>
 800afea:	2200      	movs	r2, #0
 800afec:	6062      	str	r2, [r4, #4]
 800afee:	04d9      	lsls	r1, r3, #19
 800aff0:	6922      	ldr	r2, [r4, #16]
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	d504      	bpl.n	800b000 <__sflush_r+0x78>
 800aff6:	1c42      	adds	r2, r0, #1
 800aff8:	d101      	bne.n	800affe <__sflush_r+0x76>
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	b903      	cbnz	r3, 800b000 <__sflush_r+0x78>
 800affe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b002:	602f      	str	r7, [r5, #0]
 800b004:	b1b9      	cbz	r1, 800b036 <__sflush_r+0xae>
 800b006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b00a:	4299      	cmp	r1, r3
 800b00c:	d002      	beq.n	800b014 <__sflush_r+0x8c>
 800b00e:	4628      	mov	r0, r5
 800b010:	f7fe fb9a 	bl	8009748 <_free_r>
 800b014:	2300      	movs	r3, #0
 800b016:	6363      	str	r3, [r4, #52]	@ 0x34
 800b018:	e00d      	b.n	800b036 <__sflush_r+0xae>
 800b01a:	2301      	movs	r3, #1
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b0      	blx	r6
 800b020:	4602      	mov	r2, r0
 800b022:	1c50      	adds	r0, r2, #1
 800b024:	d1c9      	bne.n	800afba <__sflush_r+0x32>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d0c6      	beq.n	800afba <__sflush_r+0x32>
 800b02c:	2b1d      	cmp	r3, #29
 800b02e:	d001      	beq.n	800b034 <__sflush_r+0xac>
 800b030:	2b16      	cmp	r3, #22
 800b032:	d11e      	bne.n	800b072 <__sflush_r+0xea>
 800b034:	602f      	str	r7, [r5, #0]
 800b036:	2000      	movs	r0, #0
 800b038:	e022      	b.n	800b080 <__sflush_r+0xf8>
 800b03a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b03e:	b21b      	sxth	r3, r3
 800b040:	e01b      	b.n	800b07a <__sflush_r+0xf2>
 800b042:	690f      	ldr	r7, [r1, #16]
 800b044:	2f00      	cmp	r7, #0
 800b046:	d0f6      	beq.n	800b036 <__sflush_r+0xae>
 800b048:	0793      	lsls	r3, r2, #30
 800b04a:	680e      	ldr	r6, [r1, #0]
 800b04c:	bf08      	it	eq
 800b04e:	694b      	ldreq	r3, [r1, #20]
 800b050:	600f      	str	r7, [r1, #0]
 800b052:	bf18      	it	ne
 800b054:	2300      	movne	r3, #0
 800b056:	eba6 0807 	sub.w	r8, r6, r7
 800b05a:	608b      	str	r3, [r1, #8]
 800b05c:	f1b8 0f00 	cmp.w	r8, #0
 800b060:	dde9      	ble.n	800b036 <__sflush_r+0xae>
 800b062:	6a21      	ldr	r1, [r4, #32]
 800b064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b066:	4643      	mov	r3, r8
 800b068:	463a      	mov	r2, r7
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b0      	blx	r6
 800b06e:	2800      	cmp	r0, #0
 800b070:	dc08      	bgt.n	800b084 <__sflush_r+0xfc>
 800b072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b084:	4407      	add	r7, r0
 800b086:	eba8 0800 	sub.w	r8, r8, r0
 800b08a:	e7e7      	b.n	800b05c <__sflush_r+0xd4>
 800b08c:	dfbffffe 	.word	0xdfbffffe

0800b090 <_fflush_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	690b      	ldr	r3, [r1, #16]
 800b094:	4605      	mov	r5, r0
 800b096:	460c      	mov	r4, r1
 800b098:	b913      	cbnz	r3, 800b0a0 <_fflush_r+0x10>
 800b09a:	2500      	movs	r5, #0
 800b09c:	4628      	mov	r0, r5
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	b118      	cbz	r0, 800b0aa <_fflush_r+0x1a>
 800b0a2:	6a03      	ldr	r3, [r0, #32]
 800b0a4:	b90b      	cbnz	r3, 800b0aa <_fflush_r+0x1a>
 800b0a6:	f7fd fa3d 	bl	8008524 <__sinit>
 800b0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0f3      	beq.n	800b09a <_fflush_r+0xa>
 800b0b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0b4:	07d0      	lsls	r0, r2, #31
 800b0b6:	d404      	bmi.n	800b0c2 <_fflush_r+0x32>
 800b0b8:	0599      	lsls	r1, r3, #22
 800b0ba:	d402      	bmi.n	800b0c2 <_fflush_r+0x32>
 800b0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0be:	f7fd fcba 	bl	8008a36 <__retarget_lock_acquire_recursive>
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	f7ff ff5f 	bl	800af88 <__sflush_r>
 800b0ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0cc:	07da      	lsls	r2, r3, #31
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	d4e4      	bmi.n	800b09c <_fflush_r+0xc>
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	059b      	lsls	r3, r3, #22
 800b0d6:	d4e1      	bmi.n	800b09c <_fflush_r+0xc>
 800b0d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0da:	f7fd fcad 	bl	8008a38 <__retarget_lock_release_recursive>
 800b0de:	e7dd      	b.n	800b09c <_fflush_r+0xc>

0800b0e0 <fiprintf>:
 800b0e0:	b40e      	push	{r1, r2, r3}
 800b0e2:	b503      	push	{r0, r1, lr}
 800b0e4:	4601      	mov	r1, r0
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	4805      	ldr	r0, [pc, #20]	@ (800b100 <fiprintf+0x20>)
 800b0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ee:	6800      	ldr	r0, [r0, #0]
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	f7ff fe31 	bl	800ad58 <_vfiprintf_r>
 800b0f6:	b002      	add	sp, #8
 800b0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0fc:	b003      	add	sp, #12
 800b0fe:	4770      	bx	lr
 800b100:	2000018c 	.word	0x2000018c

0800b104 <__swhatbuf_r>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	460c      	mov	r4, r1
 800b108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10c:	2900      	cmp	r1, #0
 800b10e:	b096      	sub	sp, #88	@ 0x58
 800b110:	4615      	mov	r5, r2
 800b112:	461e      	mov	r6, r3
 800b114:	da0d      	bge.n	800b132 <__swhatbuf_r+0x2e>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b11c:	f04f 0100 	mov.w	r1, #0
 800b120:	bf14      	ite	ne
 800b122:	2340      	movne	r3, #64	@ 0x40
 800b124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b128:	2000      	movs	r0, #0
 800b12a:	6031      	str	r1, [r6, #0]
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	b016      	add	sp, #88	@ 0x58
 800b130:	bd70      	pop	{r4, r5, r6, pc}
 800b132:	466a      	mov	r2, sp
 800b134:	f000 f862 	bl	800b1fc <_fstat_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dbec      	blt.n	800b116 <__swhatbuf_r+0x12>
 800b13c:	9901      	ldr	r1, [sp, #4]
 800b13e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b146:	4259      	negs	r1, r3
 800b148:	4159      	adcs	r1, r3
 800b14a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b14e:	e7eb      	b.n	800b128 <__swhatbuf_r+0x24>

0800b150 <__smakebuf_r>:
 800b150:	898b      	ldrh	r3, [r1, #12]
 800b152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b154:	079d      	lsls	r5, r3, #30
 800b156:	4606      	mov	r6, r0
 800b158:	460c      	mov	r4, r1
 800b15a:	d507      	bpl.n	800b16c <__smakebuf_r+0x1c>
 800b15c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b160:	6023      	str	r3, [r4, #0]
 800b162:	6123      	str	r3, [r4, #16]
 800b164:	2301      	movs	r3, #1
 800b166:	6163      	str	r3, [r4, #20]
 800b168:	b003      	add	sp, #12
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16c:	ab01      	add	r3, sp, #4
 800b16e:	466a      	mov	r2, sp
 800b170:	f7ff ffc8 	bl	800b104 <__swhatbuf_r>
 800b174:	9f00      	ldr	r7, [sp, #0]
 800b176:	4605      	mov	r5, r0
 800b178:	4639      	mov	r1, r7
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7fe fe92 	bl	8009ea4 <_malloc_r>
 800b180:	b948      	cbnz	r0, 800b196 <__smakebuf_r+0x46>
 800b182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b186:	059a      	lsls	r2, r3, #22
 800b188:	d4ee      	bmi.n	800b168 <__smakebuf_r+0x18>
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	f043 0302 	orr.w	r3, r3, #2
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	e7e2      	b.n	800b15c <__smakebuf_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	6020      	str	r0, [r4, #0]
 800b19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	9b01      	ldr	r3, [sp, #4]
 800b1a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1a6:	b15b      	cbz	r3, 800b1c0 <__smakebuf_r+0x70>
 800b1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f000 f837 	bl	800b220 <_isatty_r>
 800b1b2:	b128      	cbz	r0, 800b1c0 <__smakebuf_r+0x70>
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f023 0303 	bic.w	r3, r3, #3
 800b1ba:	f043 0301 	orr.w	r3, r3, #1
 800b1be:	81a3      	strh	r3, [r4, #12]
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	431d      	orrs	r5, r3
 800b1c4:	81a5      	strh	r5, [r4, #12]
 800b1c6:	e7cf      	b.n	800b168 <__smakebuf_r+0x18>

0800b1c8 <memmove>:
 800b1c8:	4288      	cmp	r0, r1
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	eb01 0402 	add.w	r4, r1, r2
 800b1d0:	d902      	bls.n	800b1d8 <memmove+0x10>
 800b1d2:	4284      	cmp	r4, r0
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	d807      	bhi.n	800b1e8 <memmove+0x20>
 800b1d8:	1e43      	subs	r3, r0, #1
 800b1da:	42a1      	cmp	r1, r4
 800b1dc:	d008      	beq.n	800b1f0 <memmove+0x28>
 800b1de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1e6:	e7f8      	b.n	800b1da <memmove+0x12>
 800b1e8:	4402      	add	r2, r0
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	428a      	cmp	r2, r1
 800b1ee:	d100      	bne.n	800b1f2 <memmove+0x2a>
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1fa:	e7f7      	b.n	800b1ec <memmove+0x24>

0800b1fc <_fstat_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d07      	ldr	r5, [pc, #28]	@ (800b21c <_fstat_r+0x20>)
 800b200:	2300      	movs	r3, #0
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	f7f7 fbc5 	bl	8002998 <_fstat>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d102      	bne.n	800b218 <_fstat_r+0x1c>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b103      	cbz	r3, 800b218 <_fstat_r+0x1c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	bf00      	nop
 800b21c:	20000748 	.word	0x20000748

0800b220 <_isatty_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_isatty_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f7 fbc4 	bl	80029b8 <_isatty>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_isatty_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_isatty_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20000748 	.word	0x20000748

0800b240 <_sbrk_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d06      	ldr	r5, [pc, #24]	@ (800b25c <_sbrk_r+0x1c>)
 800b244:	2300      	movs	r3, #0
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	f7f7 fbcc 	bl	80029e8 <_sbrk>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_sbrk_r+0x1a>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_sbrk_r+0x1a>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20000748 	.word	0x20000748

0800b260 <abort>:
 800b260:	b508      	push	{r3, lr}
 800b262:	2006      	movs	r0, #6
 800b264:	f000 f86e 	bl	800b344 <raise>
 800b268:	2001      	movs	r0, #1
 800b26a:	f7f7 fb45 	bl	80028f8 <_exit>

0800b26e <_calloc_r>:
 800b26e:	b570      	push	{r4, r5, r6, lr}
 800b270:	fba1 5402 	umull	r5, r4, r1, r2
 800b274:	b93c      	cbnz	r4, 800b286 <_calloc_r+0x18>
 800b276:	4629      	mov	r1, r5
 800b278:	f7fe fe14 	bl	8009ea4 <_malloc_r>
 800b27c:	4606      	mov	r6, r0
 800b27e:	b928      	cbnz	r0, 800b28c <_calloc_r+0x1e>
 800b280:	2600      	movs	r6, #0
 800b282:	4630      	mov	r0, r6
 800b284:	bd70      	pop	{r4, r5, r6, pc}
 800b286:	220c      	movs	r2, #12
 800b288:	6002      	str	r2, [r0, #0]
 800b28a:	e7f9      	b.n	800b280 <_calloc_r+0x12>
 800b28c:	462a      	mov	r2, r5
 800b28e:	4621      	mov	r1, r4
 800b290:	f7fd fae6 	bl	8008860 <memset>
 800b294:	e7f5      	b.n	800b282 <_calloc_r+0x14>

0800b296 <_realloc_r>:
 800b296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29a:	4680      	mov	r8, r0
 800b29c:	4615      	mov	r5, r2
 800b29e:	460c      	mov	r4, r1
 800b2a0:	b921      	cbnz	r1, 800b2ac <_realloc_r+0x16>
 800b2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	f7fe bdfc 	b.w	8009ea4 <_malloc_r>
 800b2ac:	b92a      	cbnz	r2, 800b2ba <_realloc_r+0x24>
 800b2ae:	f7fe fa4b 	bl	8009748 <_free_r>
 800b2b2:	2400      	movs	r4, #0
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ba:	f000 f85f 	bl	800b37c <_malloc_usable_size_r>
 800b2be:	4285      	cmp	r5, r0
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	d802      	bhi.n	800b2ca <_realloc_r+0x34>
 800b2c4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2c8:	d8f4      	bhi.n	800b2b4 <_realloc_r+0x1e>
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4640      	mov	r0, r8
 800b2ce:	f7fe fde9 	bl	8009ea4 <_malloc_r>
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d0ec      	beq.n	800b2b2 <_realloc_r+0x1c>
 800b2d8:	42b5      	cmp	r5, r6
 800b2da:	462a      	mov	r2, r5
 800b2dc:	4621      	mov	r1, r4
 800b2de:	bf28      	it	cs
 800b2e0:	4632      	movcs	r2, r6
 800b2e2:	f7fd fbaa 	bl	8008a3a <memcpy>
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	f7fe fa2d 	bl	8009748 <_free_r>
 800b2ee:	463c      	mov	r4, r7
 800b2f0:	e7e0      	b.n	800b2b4 <_realloc_r+0x1e>

0800b2f2 <_raise_r>:
 800b2f2:	291f      	cmp	r1, #31
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	d904      	bls.n	800b306 <_raise_r+0x14>
 800b2fc:	2316      	movs	r3, #22
 800b2fe:	6003      	str	r3, [r0, #0]
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b308:	b112      	cbz	r2, 800b310 <_raise_r+0x1e>
 800b30a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b30e:	b94b      	cbnz	r3, 800b324 <_raise_r+0x32>
 800b310:	4628      	mov	r0, r5
 800b312:	f000 f831 	bl	800b378 <_getpid_r>
 800b316:	4622      	mov	r2, r4
 800b318:	4601      	mov	r1, r0
 800b31a:	4628      	mov	r0, r5
 800b31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b320:	f000 b818 	b.w	800b354 <_kill_r>
 800b324:	2b01      	cmp	r3, #1
 800b326:	d00a      	beq.n	800b33e <_raise_r+0x4c>
 800b328:	1c59      	adds	r1, r3, #1
 800b32a:	d103      	bne.n	800b334 <_raise_r+0x42>
 800b32c:	2316      	movs	r3, #22
 800b32e:	6003      	str	r3, [r0, #0]
 800b330:	2001      	movs	r0, #1
 800b332:	e7e7      	b.n	800b304 <_raise_r+0x12>
 800b334:	2100      	movs	r1, #0
 800b336:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b33a:	4620      	mov	r0, r4
 800b33c:	4798      	blx	r3
 800b33e:	2000      	movs	r0, #0
 800b340:	e7e0      	b.n	800b304 <_raise_r+0x12>
	...

0800b344 <raise>:
 800b344:	4b02      	ldr	r3, [pc, #8]	@ (800b350 <raise+0xc>)
 800b346:	4601      	mov	r1, r0
 800b348:	6818      	ldr	r0, [r3, #0]
 800b34a:	f7ff bfd2 	b.w	800b2f2 <_raise_r>
 800b34e:	bf00      	nop
 800b350:	2000018c 	.word	0x2000018c

0800b354 <_kill_r>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	4d07      	ldr	r5, [pc, #28]	@ (800b374 <_kill_r+0x20>)
 800b358:	2300      	movs	r3, #0
 800b35a:	4604      	mov	r4, r0
 800b35c:	4608      	mov	r0, r1
 800b35e:	4611      	mov	r1, r2
 800b360:	602b      	str	r3, [r5, #0]
 800b362:	f7f7 fab9 	bl	80028d8 <_kill>
 800b366:	1c43      	adds	r3, r0, #1
 800b368:	d102      	bne.n	800b370 <_kill_r+0x1c>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	b103      	cbz	r3, 800b370 <_kill_r+0x1c>
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	bf00      	nop
 800b374:	20000748 	.word	0x20000748

0800b378 <_getpid_r>:
 800b378:	f7f7 baa6 	b.w	80028c8 <_getpid>

0800b37c <_malloc_usable_size_r>:
 800b37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b380:	1f18      	subs	r0, r3, #4
 800b382:	2b00      	cmp	r3, #0
 800b384:	bfbc      	itt	lt
 800b386:	580b      	ldrlt	r3, [r1, r0]
 800b388:	18c0      	addlt	r0, r0, r3
 800b38a:	4770      	bx	lr

0800b38c <sqrt>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	ed2d 8b02 	vpush	{d8}
 800b392:	ec55 4b10 	vmov	r4, r5, d0
 800b396:	f000 f825 	bl	800b3e4 <__ieee754_sqrt>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	eeb0 8a40 	vmov.f32	s16, s0
 800b3a6:	eef0 8a60 	vmov.f32	s17, s1
 800b3aa:	f7f5 fbc7 	bl	8000b3c <__aeabi_dcmpun>
 800b3ae:	b990      	cbnz	r0, 800b3d6 <sqrt+0x4a>
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	f7f5 fb98 	bl	8000aec <__aeabi_dcmplt>
 800b3bc:	b158      	cbz	r0, 800b3d6 <sqrt+0x4a>
 800b3be:	f7fd fb0f 	bl	80089e0 <__errno>
 800b3c2:	2321      	movs	r3, #33	@ 0x21
 800b3c4:	6003      	str	r3, [r0, #0]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f7f5 fa45 	bl	800085c <__aeabi_ddiv>
 800b3d2:	ec41 0b18 	vmov	d8, r0, r1
 800b3d6:	eeb0 0a48 	vmov.f32	s0, s16
 800b3da:	eef0 0a68 	vmov.f32	s1, s17
 800b3de:	ecbd 8b02 	vpop	{d8}
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}

0800b3e4 <__ieee754_sqrt>:
 800b3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e8:	4a68      	ldr	r2, [pc, #416]	@ (800b58c <__ieee754_sqrt+0x1a8>)
 800b3ea:	ec55 4b10 	vmov	r4, r5, d0
 800b3ee:	43aa      	bics	r2, r5
 800b3f0:	462b      	mov	r3, r5
 800b3f2:	4621      	mov	r1, r4
 800b3f4:	d110      	bne.n	800b418 <__ieee754_sqrt+0x34>
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	f7f5 f904 	bl	8000608 <__aeabi_dmul>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f4 ff48 	bl	800029c <__adddf3>
 800b40c:	4604      	mov	r4, r0
 800b40e:	460d      	mov	r5, r1
 800b410:	ec45 4b10 	vmov	d0, r4, r5
 800b414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	2d00      	cmp	r5, #0
 800b41a:	dc0e      	bgt.n	800b43a <__ieee754_sqrt+0x56>
 800b41c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b420:	4322      	orrs	r2, r4
 800b422:	d0f5      	beq.n	800b410 <__ieee754_sqrt+0x2c>
 800b424:	b19d      	cbz	r5, 800b44e <__ieee754_sqrt+0x6a>
 800b426:	4622      	mov	r2, r4
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	f7f4 ff34 	bl	8000298 <__aeabi_dsub>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	f7f5 fa12 	bl	800085c <__aeabi_ddiv>
 800b438:	e7e8      	b.n	800b40c <__ieee754_sqrt+0x28>
 800b43a:	152a      	asrs	r2, r5, #20
 800b43c:	d115      	bne.n	800b46a <__ieee754_sqrt+0x86>
 800b43e:	2000      	movs	r0, #0
 800b440:	e009      	b.n	800b456 <__ieee754_sqrt+0x72>
 800b442:	0acb      	lsrs	r3, r1, #11
 800b444:	3a15      	subs	r2, #21
 800b446:	0549      	lsls	r1, r1, #21
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d0fa      	beq.n	800b442 <__ieee754_sqrt+0x5e>
 800b44c:	e7f7      	b.n	800b43e <__ieee754_sqrt+0x5a>
 800b44e:	462a      	mov	r2, r5
 800b450:	e7fa      	b.n	800b448 <__ieee754_sqrt+0x64>
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	3001      	adds	r0, #1
 800b456:	02dc      	lsls	r4, r3, #11
 800b458:	d5fb      	bpl.n	800b452 <__ieee754_sqrt+0x6e>
 800b45a:	1e44      	subs	r4, r0, #1
 800b45c:	1b12      	subs	r2, r2, r4
 800b45e:	f1c0 0420 	rsb	r4, r0, #32
 800b462:	fa21 f404 	lsr.w	r4, r1, r4
 800b466:	4323      	orrs	r3, r4
 800b468:	4081      	lsls	r1, r0
 800b46a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b46e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b476:	07d2      	lsls	r2, r2, #31
 800b478:	bf5c      	itt	pl
 800b47a:	005b      	lslpl	r3, r3, #1
 800b47c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b480:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b484:	bf58      	it	pl
 800b486:	0049      	lslpl	r1, r1, #1
 800b488:	2600      	movs	r6, #0
 800b48a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b48e:	106d      	asrs	r5, r5, #1
 800b490:	0049      	lsls	r1, r1, #1
 800b492:	2016      	movs	r0, #22
 800b494:	4632      	mov	r2, r6
 800b496:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b49a:	1917      	adds	r7, r2, r4
 800b49c:	429f      	cmp	r7, r3
 800b49e:	bfde      	ittt	le
 800b4a0:	193a      	addle	r2, r7, r4
 800b4a2:	1bdb      	suble	r3, r3, r7
 800b4a4:	1936      	addle	r6, r6, r4
 800b4a6:	0fcf      	lsrs	r7, r1, #31
 800b4a8:	3801      	subs	r0, #1
 800b4aa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b4ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b4b2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b4b6:	d1f0      	bne.n	800b49a <__ieee754_sqrt+0xb6>
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	2720      	movs	r7, #32
 800b4bc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	eb00 0e0c 	add.w	lr, r0, ip
 800b4c6:	db02      	blt.n	800b4ce <__ieee754_sqrt+0xea>
 800b4c8:	d113      	bne.n	800b4f2 <__ieee754_sqrt+0x10e>
 800b4ca:	458e      	cmp	lr, r1
 800b4cc:	d811      	bhi.n	800b4f2 <__ieee754_sqrt+0x10e>
 800b4ce:	f1be 0f00 	cmp.w	lr, #0
 800b4d2:	eb0e 000c 	add.w	r0, lr, ip
 800b4d6:	da42      	bge.n	800b55e <__ieee754_sqrt+0x17a>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	db40      	blt.n	800b55e <__ieee754_sqrt+0x17a>
 800b4dc:	f102 0801 	add.w	r8, r2, #1
 800b4e0:	1a9b      	subs	r3, r3, r2
 800b4e2:	458e      	cmp	lr, r1
 800b4e4:	bf88      	it	hi
 800b4e6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b4ea:	eba1 010e 	sub.w	r1, r1, lr
 800b4ee:	4464      	add	r4, ip
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b4f6:	3f01      	subs	r7, #1
 800b4f8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b4fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b500:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b504:	d1dc      	bne.n	800b4c0 <__ieee754_sqrt+0xdc>
 800b506:	4319      	orrs	r1, r3
 800b508:	d01b      	beq.n	800b542 <__ieee754_sqrt+0x15e>
 800b50a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b590 <__ieee754_sqrt+0x1ac>
 800b50e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b594 <__ieee754_sqrt+0x1b0>
 800b512:	e9da 0100 	ldrd	r0, r1, [sl]
 800b516:	e9db 2300 	ldrd	r2, r3, [fp]
 800b51a:	f7f4 febd 	bl	8000298 <__aeabi_dsub>
 800b51e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4640      	mov	r0, r8
 800b528:	4649      	mov	r1, r9
 800b52a:	f7f5 fae9 	bl	8000b00 <__aeabi_dcmple>
 800b52e:	b140      	cbz	r0, 800b542 <__ieee754_sqrt+0x15e>
 800b530:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b534:	e9da 0100 	ldrd	r0, r1, [sl]
 800b538:	e9db 2300 	ldrd	r2, r3, [fp]
 800b53c:	d111      	bne.n	800b562 <__ieee754_sqrt+0x17e>
 800b53e:	3601      	adds	r6, #1
 800b540:	463c      	mov	r4, r7
 800b542:	1072      	asrs	r2, r6, #1
 800b544:	0863      	lsrs	r3, r4, #1
 800b546:	07f1      	lsls	r1, r6, #31
 800b548:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b54c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b550:	bf48      	it	mi
 800b552:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b556:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b55a:	4618      	mov	r0, r3
 800b55c:	e756      	b.n	800b40c <__ieee754_sqrt+0x28>
 800b55e:	4690      	mov	r8, r2
 800b560:	e7be      	b.n	800b4e0 <__ieee754_sqrt+0xfc>
 800b562:	f7f4 fe9b 	bl	800029c <__adddf3>
 800b566:	e9da 8900 	ldrd	r8, r9, [sl]
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4640      	mov	r0, r8
 800b570:	4649      	mov	r1, r9
 800b572:	f7f5 fabb 	bl	8000aec <__aeabi_dcmplt>
 800b576:	b120      	cbz	r0, 800b582 <__ieee754_sqrt+0x19e>
 800b578:	1ca0      	adds	r0, r4, #2
 800b57a:	bf08      	it	eq
 800b57c:	3601      	addeq	r6, #1
 800b57e:	3402      	adds	r4, #2
 800b580:	e7df      	b.n	800b542 <__ieee754_sqrt+0x15e>
 800b582:	1c63      	adds	r3, r4, #1
 800b584:	f023 0401 	bic.w	r4, r3, #1
 800b588:	e7db      	b.n	800b542 <__ieee754_sqrt+0x15e>
 800b58a:	bf00      	nop
 800b58c:	7ff00000 	.word	0x7ff00000
 800b590:	200001e8 	.word	0x200001e8
 800b594:	200001e0 	.word	0x200001e0

0800b598 <_init>:
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	bf00      	nop
 800b59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59e:	bc08      	pop	{r3}
 800b5a0:	469e      	mov	lr, r3
 800b5a2:	4770      	bx	lr

0800b5a4 <_fini>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	bf00      	nop
 800b5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5aa:	bc08      	pop	{r3}
 800b5ac:	469e      	mov	lr, r3
 800b5ae:	4770      	bx	lr
